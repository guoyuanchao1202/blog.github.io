<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/04/12/test/"/>
      <url>/2021/04/12/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树三种遍历详解</title>
      <link href="/2021/03/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/03/20/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>最近刷了很多二叉树相关的题目，发现二叉树相关的题目各式各样，最终的基础还是二叉树的三种遍历方式(还有一种层次遍历，不是本文的主题)。所以专门总结一下二叉树三种遍历的两种解法。</p><hr><a id="more"></a><h1 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h1><p>递归实现的遍历，代码最为简洁优美，并且思路也很好理解。</p><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>前序遍历，即 <strong>中 – 左 – 右</strong> 的顺序遍历二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="comment">// 递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 打印当前子树根节点</span></span><br><span class="line">System.out.println(root.val);</span><br><span class="line">    <span class="comment">// 递归打印当前子树的左子树</span></span><br><span class="line">preOrder(root.left);</span><br><span class="line">    <span class="comment">// 递归打印当前子树的右子树</span></span><br><span class="line">preOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>中序遍历，即 <strong>左 – 右 – 中</strong> 的顺序遍历二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="comment">// 递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 递归打印当前子树的左子树</span></span><br><span class="line">inOrder(root.left);</span><br><span class="line">    <span class="comment">// 打印当前子树根节点</span></span><br><span class="line">System.out.println(root.val);</span><br><span class="line">    <span class="comment">// 递归打印当前子树的右子树</span></span><br><span class="line">inOrder(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>后序遍历，即 <strong>左 – 右 – 中</strong> 的顺序遍历二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line"><span class="comment">// 递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 递归打印当前子树的左子树</span></span><br><span class="line">postOrder(root.left);</span><br><span class="line">    <span class="comment">// 递归打印当前子树的右子树</span></span><br><span class="line">postOrder(root.right);</span><br><span class="line">    <span class="comment">// 打印当前子树根节点</span></span><br><span class="line">System.out.println(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="迭代解法"><a href="#迭代解法" class="headerlink" title="迭代解法"></a>迭代解法</h1><p>迭代法实现的遍历，需要借助栈来实现。</p><h2 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    <span class="comment">// 先将根节点入栈</span></span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        <span class="comment">// 从栈中弹出当前子树根节点</span></span><br><span class="line">        TreeNode curNode = stack.push();</span><br><span class="line">        <span class="comment">// 直接打印根节点值</span></span><br><span class="line">        System.out.println(curNode.val);</span><br><span class="line">        <span class="comment">// 如果该节点含有右节点，将右节点入栈</span></span><br><span class="line">        <span class="keyword">if</span>(curNode.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(curNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果该节点含有左节点，将左节点入栈</span></span><br><span class="line">        <span class="keyword">if</span>(curNode.left != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(curNode.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 因为是栈，所以要先将右节点入栈，后入栈左节点，这样出栈时才能先得到左节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty() || root != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 一直遍历左节点，直到找到最左边的节点为止</span></span><br><span class="line">        <span class="keyword">while</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(root);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack.pop();</span><br><span class="line">        System.out.println(root.val);</span><br><span class="line">        root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    <span class="comment">// 不能初始化为null，例如对于[1, null, 2, 3]这种子树时，节点2的右子树为null，cur如果初始化为null，</span></span><br><span class="line">    <span class="comment">// 那么这里就会判断为左右子树访问完毕，但实际上左右子树都没有访问到</span></span><br><span class="line">    TreeNode cur = <span class="keyword">new</span> TreeNode(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">        TreeNode peek = stack.peek();</span><br><span class="line">        <span class="keyword">if</span>(peek.left != <span class="keyword">null</span> &amp;&amp; peek.left != cur &amp;&amp; peek.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.push(peek.left);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(peek.right != <span class="keyword">null</span> &amp;&amp; peek.right != cur)&#123;</span><br><span class="line">            stack.push(peek.right);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(stack.pop().val);</span><br><span class="line">        cur = peek;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析基于AQS互斥锁ReentrantLock</title>
      <link href="/2021/02/17/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%9F%BA%E4%BA%8EAQS%E4%BA%92%E6%96%A5%E9%94%81ReentrantLock/"/>
      <url>/2021/02/17/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%9F%BA%E4%BA%8EAQS%E4%BA%92%E6%96%A5%E9%94%81ReentrantLock/</url>
      
        <content type="html"><![CDATA[<p>在<a href="http://www.bytes.xin/2021/02/16/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Java%E6%8A%BD%E8%B1%A1%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8AQS/#more" target="_blank" rel="noopener">深入剖析Java抽象队列同步器AQS</a>一文中对AQS的实现原理进行详细介绍，这里就来介绍Java类库中基于AQS实现的互斥锁(也叫可重入锁)ReentrantLock。有了前面AQS的基础，学习ReentrantLock就会变得非常容易。</p><hr><a id="more"></a><h2 id="ReentrantLock简介"><a href="#ReentrantLock简介" class="headerlink" title="ReentrantLock简介"></a>ReentrantLock简介</h2><p>ReentranLock是Java提供的锁机制，它能够实现比synchronized更加丰富的功能。我们直到synchronized是不支持中断的，如果线程无法获取到锁就只能一直阻塞，而ReentrantLock提供了可以响应中断的方法，在线程因获取不到锁而阻塞时，可以响应外部中断；并且synchronized是非公平锁，ReentrantLock支持公平锁和非公平锁两种机制。</p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/1.png" alt></p><p>ReentrantLock的内部架构如上图所示，可以看到ReentrantLock内部有三个类：Sync、NonFairSync、FairSync。顾名思义，NonFairSync用来实现非公平锁，FairSync用来实现公平锁，这两者都是继承自Sync，而Sync又是继承自前面说过的AQS，从图中我们可以很清楚的看到ReentrantLock是基于AQS实现。</p><h2 id="Sync类"><a href="#Sync类" class="headerlink" title="Sync类"></a>Sync类</h2><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/2.png" alt></p><p>如图，Sync是一个抽象类，继承自AQS。并重写了父类的tryRelease和isHeldExclusively方法，如果你看过前一篇文章并且还有印象的话，那么你一定记得这两个方法正式AQS提供给子类实现的模板方法。此外，Sync还提供了一个抽象方法lock。对于Sync的成员方法将会在介绍lock/unlock时，再对相关的方法进行介绍</p><h2 id="NonFairSync类"><a href="#NonFairSync类" class="headerlink" title="NonFairSync类"></a>NonFairSync类</h2><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/3.png" alt></p><p>NonFairSync用于实现非公平锁，继承自Sync并且是实现了父类的lock方法，同时还实现了AQS的模板方法tryAcquire方法。该类的成员方法非常简单，我们留到介绍lock/unlock时展开</p><h2 id="FairSync类"><a href="#FairSync类" class="headerlink" title="FairSync类"></a>FairSync类</h2><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/4.png" alt></p><p>FairSync用于实现公平锁，继承体系和NonFairSync一样，并且同样实现了lock方法和AQS的模板方法tryAcquire方法。通过对比我们不难发现，公平锁和非公平锁的区别就在lock和tryAcquire中。具体细节后面介绍</p><h2 id="ReentrantLock类"><a href="#ReentrantLock类" class="headerlink" title="ReentrantLock类"></a>ReentrantLock类</h2><p>介绍完ReentrantLock的三个内部类的大体架构，现在正式开始介绍ReentrantLock的成员属性、构造方法以及几个主要的成员方法。</p><h3 id="ReentrantLock成员属性"><a href="#ReentrantLock成员属性" class="headerlink" title="ReentrantLock成员属性"></a>ReentrantLock成员属性</h3><p>ReentrantLock的成员属性非常简单(还有一个序列化ID，和本文无关)，就是一个Sync对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock构造方法"><a href="#ReentrantLock构造方法" class="headerlink" title="ReentrantLock构造方法"></a>ReentrantLock构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无参构造方法，非公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参构造方法，可以创建公平锁/非公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReentrantLock成员方法"><a href="#ReentrantLock成员方法" class="headerlink" title="ReentrantLock成员方法"></a>ReentrantLock成员方法</h3><h4 id="lock-–非公平锁"><a href="#lock-–非公平锁" class="headerlink" title="lock()–非公平锁"></a>lock()–非公平锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，lock的实现非常简单，就是调用sync的lock方法，通过前面的构造方法可以看出，公平锁和非公平锁它们的sync的实现是不同的，一个是NonFairSync一个是FairSync；而对于这两个子类，它们对于lock的实现也是不同的，我们就以非公平锁为例，来具体看看它的实现</p><h4 id="NonFairSync-lock"><a href="#NonFairSync-lock" class="headerlink" title="NonFairSync.lock()"></a>NonFairSync.lock()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用CAS来设置同步状态</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 如果设置成功，当前线程获取锁</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 如果获取失败，调用acquire方法</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="acquire-int-arg"><a href="#acquire-int-arg" class="headerlink" title="acquire(int arg)"></a>acquire(int arg)</h4><p>在上一篇介绍AQS时我们介绍过这个方法，acquire是AQS的一个成员方法，并且还说道其中的tryAcquire()方法是AQS提供的模板方法，由子类进行重写。通过前面NonFairSync的架构图我们可以看到，NonFairSync确实重写了tryAcquire方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="NonFairSync-tryAcquire-int-arg"><a href="#NonFairSync-tryAcquire-int-arg" class="headerlink" title="NonFairSync.tryAcquire(int arg)"></a>NonFairSync.tryAcquire(int arg)</h4><p>可以看到NonFairSync在tryAcquire中调用了父类Sync的nonfairTryAcquire方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NonFairSync重写AQS的模板方法tryAcquire</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类Sync的成员方法nonfairTryAcquire</span></span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sync-nonfairTryAcquire-int-acquires"><a href="#Sync-nonfairTryAcquire-int-acquires" class="headerlink" title="Sync.nonfairTryAcquire(int acquires)"></a>Sync.nonfairTryAcquire(int acquires)</h4><p>子类基于AQS实现lock的核心逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程</span></span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取当前锁状态</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">// 如果是0，说明没有线程持有锁</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用CAS修改锁状态</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            <span class="comment">// 如果修改成功则当前线程获取锁，调用AQS的父类方法</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不是0，说明已经有线程获取到了锁，判断是否是当前线程</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// 如果是当前线程，则表明当前线程重入了锁</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        <span class="comment">// 修改锁状态</span></span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lock-方法总结"><a href="#lock-方法总结" class="headerlink" title="lock()方法总结"></a>lock()方法总结</h4><p>对于非公平锁的lock方法到这里就介绍完毕了，其中涉及到了ReentrantLock、Sync、NonFairSync、AQS、AQS父类之间的方法调用，你可能已经迷糊了，不过没有关系，我总结了lock非公平锁的调用关系图，通过这个图，再结合前面的介绍，相信你能够把lock方法的来龙去脉梳理清楚</p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/5.png" alt></p><p>如图，就是ReentrantLock的lock实现，可以看到ReentrantLock主要是通过重写AQS的tryAcquire方法来实现，并且根据锁类型不同(公平锁或非公平锁)，进行不同的重写</p><h4 id="lock-–公平锁"><a href="#lock-–公平锁" class="headerlink" title="lock()–公平锁"></a>lock()–公平锁</h4><p>介绍完lock()公平锁的实现，现在介绍lock()非公平锁。通过上面的图发现，公平锁和非公平锁的区别在于Sync.lock和tryAcquire两个方法，我们分别看一看</p><h4 id="FairSync-lock"><a href="#FairSync-lock" class="headerlink" title="FairSync.lock()"></a>FairSync.lock()</h4><p>可以看到公平锁和非公平锁的lock方法在实现上有细微的不同：线程使用非公平锁时会首先尝试获取锁，获取失败后才会调用acquire方法，但是公平锁不会尝试获取锁，而是直接调用acquire。这恰恰是公平锁的语义，线程需要按照先来后到的顺序依次获取锁。我们考虑下面这种情况：当前线程A持有公平锁，同步队列中已经有B线程等待锁，线程C尝试调用lock获取锁，此时A释放了锁，那么按照我们对公平锁的定义，B应该获取锁，而C进入同步队列等待。如果C在lock方法中首先尝试获取锁，那么C就有可能在B之前获取锁，这就违背了我们对公平锁的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FairSync-tryAcquire-int-acquires"><a href="#FairSync-tryAcquire-int-acquires" class="headerlink" title="FairSync.tryAcquire(int acquires)"></a>FairSync.tryAcquire(int acquires)</h4><p>和非公平锁一样，acquire是AQS的方法，acquire中回首先调用tryAcquire方法，而tryAcquire方法是由子类实现的，我们来看一下公平锁的tryAcquire方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前线程</span></span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="comment">// 获取当前锁状态</span></span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="comment">// 如果状态为0，说明没有线程持有锁</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里相对于非公平锁多了一个判断条件：如果当前节点是头节点的后继节点</span></span><br><span class="line">            <span class="comment">// 使用CAS修改锁状态，如果修改成功，则当前线程获取锁</span></span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 和非公平锁一样</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们发现，非公平锁和公平锁的tryAcquire方法唯一的不同在于公平锁比非公平锁多了一个判断条件，即调用了hasQueuedPredecessors方法，我们来看一看这个方法</p><h4 id="AQS-hasQueuedPredecessors"><a href="#AQS-hasQueuedPredecessors" class="headerlink" title="AQS.hasQueuedPredecessors()"></a>AQS.hasQueuedPredecessors()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">    Node h = head;</span><br><span class="line">    Node s;</span><br><span class="line">    <span class="comment">// 如果当前同步队列为空(h==t),返回false</span></span><br><span class="line">    <span class="comment">// 如果当前同步队列不为空并且当前头节点的后继节点为空或后继节点不是当前线程，返回true</span></span><br><span class="line">    <span class="comment">// 如果当前同步队列不为空并且头节点的后继节点就是当前线程，返回false</span></span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法是AQS提供的方法，主要是用来判断同步队列中是否有已经在等待的线程，如果有的话队列中第一个等待的线程是否是当前线程；从而判断在当前线程是否应该尝试获取锁。这就是公平锁的实现原理。</p><h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock()"></a>unlock()</h4><p>介绍完lock，我们来介绍一下unlock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用sync的release，实际上release是AQS提供的方法</span></span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你看过上一篇AQS的文章，那么你一定对release有影响，这不就是AQS中的方法么，我们再来看一下AQS的release方法</p><h4 id="AQS-release-int-arg"><a href="#AQS-release-int-arg" class="headerlink" title="AQS.release(int arg)"></a>AQS.release(int arg)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用模板方法tryRelease方法，如果成功</span></span><br><span class="line">    <span class="comment">// 唤醒一个同步队列上等待的线程，并返回true</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tryRelease就是我们在前面提到的AQS提供给子类实现的模板方法，对于非公平锁和公平锁，他们的tryRelease方法都是一样的，都是由Sync来实现，我们来看一看Sync对tryRelease的实现</p><h4 id="Sync-tryRelease-int-arg"><a href="#Sync-tryRelease-int-arg" class="headerlink" title="Sync.tryRelease(int arg)"></a>Sync.tryRelease(int arg)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算释放后的锁状态，支持可重入。</span></span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="comment">// 如果当前线程不是持有锁的线程，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 如果锁状态为0，说明当前线程已经不持有锁</span></span><br><span class="line">    <span class="comment">// 否则说明当前线程仍然持有锁，即当前线程重入过该锁</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unparkSuccessor方法我们在AQS那一篇中介绍过，这里就不多介绍了，不记得了可以回看一下</p><h4 id="unlock-方法总结"><a href="#unlock-方法总结" class="headerlink" title="unlock()方法总结"></a>unlock()方法总结</h4><p>至此，ReentrantLock的unlock已经介绍完毕。同样的，我总结一张图来表示unlock的大致逻辑</p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/6.png" alt></p><p>通过源码得知，如果当前线程在持有锁后又多次调用了lock(重入)，那么就需要相应次数的unlock才能够释放锁。如果是最后一次unlock，那么需要将同步队列中最靠前的没有被取消的线程唤醒(unpark)。</p><h2 id="ReentrantLock总结"><a href="#ReentrantLock总结" class="headerlink" title="ReentrantLock总结"></a>ReentrantLock总结</h2><p>到目前为止，已经将AQS、ReentrantLock的主要内容介绍完毕，但是你可能还有不少疑问，如当一个线程释放锁后，应该唤醒哪一个线程，被唤醒的线程又是如何重新获取锁，获取到锁之后同步队列会发生什么变化；当一个线程尝试获取锁失败后，什么时候加入到同步队列，什么时候被阻塞…等等。下面我将通过几幅图搭配文字将前面讲的串联起来，希望能够为你解惑。由于公平锁和非公平锁的实现基本类似，所以下面的示例基于非公平锁演示。</p><ul><li><p><strong>ReentrantLock对象刚创建，没有线程申请过锁</strong></p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/7.png" alt></p><p>此时还不存在同步队列，锁状态为0，没有线程持有锁</p></li><li><p><strong>线程A申请锁</strong></p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/8.png" alt></p><p>此时没有只有线程A申请锁，通过lock源码可知，线程A直接获取到锁，锁状态为1，由于仍然没有线程等待锁，因此同步队列仍为空</p></li><li><p><strong>线程B、线程C申请锁</strong></p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/9.png" alt></p><p>此时A并没有释放锁，因此线程B和线程C尝试获取锁失败，调用acquire方法，并且在acquire中调用tryAcquire失败(因为我们假设在这个过程中线程A一直持有锁)，因此线程B和线程C会并发的将自己插入到同步队列中，两者在同步队列中的顺序无法保证。我们假设是线程C先进入同步队列。紧接着线程B和线程C会并发调用acquireQueued方法。在该方法中，C线程会进入到一个死循环中，在死循环中首先尝试获取锁，因为此时A并没有释放锁，因此获取失败，此时C线程会将它的前驱节点(此时是头节点)waitStatus修改为Signal(-1)，最后调用park阻塞。同样的，B线程会做和C一样的操作，不过B线程会将它的前驱节点(此时是C节点)waitStatus修改为Signal(-1)，最后调用park阻塞。因此最终的结果就是：B和C加入到同步队列；B和C线程代表的节点以及头节点状态都是Signal(-1)。</p></li><li><p><strong>线程A释放锁</strong></p><p>A释放锁，调用AQS的release方法，release方法首先会调用Sync实现的tryRelease方法，由于A并没有对锁进行重入，因此A线程此时已经完全的释放了锁，并且同步队列不为空(B和C线程正在等待锁)，所以release方法还会调用AQS的unparkSuccessor方法，唤醒同步队列中的一个等待线程。在unparkSuccessor方法中，会首先将头结点的状态修改为0，并且找到最靠近头节点的非Cancelled节点(在本例中即C节点)，调用unpark唤醒该节点上的线程。</p></li><li><p><strong>C被唤醒，再次尝试获取锁</strong></p><p><img src="/2021/02/17/深入剖析基于AQS互斥锁ReentrantLock/10.png" alt></p><p>当C线程被唤醒以后，由于是一个死循环，因此会重新尝试获取锁。我们假设此时没有别的线程与C竞争(实际上可能会刚好线程D在此时也要获取锁，逻辑是一样的，不过说起来篇幅较长，这里就假设只有C再获取锁)，此时C是头节点的后继节点，因此C调用tryAcquire方法尝试获取锁并且获取成功，获取成功后C会重新设置头节点：将原来的head节点丢弃，将C节点设置为head节点，并且将C中的thread字段置null，因为C代表的线程已经获得了锁，这里就不需要了。</p></li></ul><p>以三个线程为例，通过图示，简单的将它们的获取锁成功、获取锁失败、释放锁、重新获取锁的过程串联在了一起，希望你能够有所收获。对ReentrantLock的介绍就到这里。后面会对Condition、Semaphore逐一进行介绍。</p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> ReentrantLock </tag>
            
            <tag> AQS </tag>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析Java抽象队列同步器AQS</title>
      <link href="/2021/02/16/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Java%E6%8A%BD%E8%B1%A1%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8AQS/"/>
      <url>/2021/02/16/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90Java%E6%8A%BD%E8%B1%A1%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8AQS/</url>
      
        <content type="html"><![CDATA[<p>AbstractQueuedSynchronizer又称为队列同步器(后面简称AQS)，它提供了一套完整的同步编程框架，开发人员只需要实现其中几个简单的方法就能自由的使用诸如独占，共享，条件队列等多种同步模式。我们常见的ReentrantLock、Semaphore、CountDownLatch等都是基于AQS实现的，足以说明这套框架的强大之处。本文将基于JDK1.8对AQS进行剖析。</p><hr><a id="more"></a><h2 id="AQS简介"><a href="#AQS简介" class="headerlink" title="AQS简介"></a>AQS简介</h2><p>AQS是用来构建锁或者其它同步器组件的重量级基础框架及整个JUC体系的基石，通过内置的CLH(FIFO)队列的变种来完成资源获取线程的排队工作,将每条将要去抢占资源的线程封装成一个Node节点来实现锁的分配，有一个int类变量表示持有锁的状态,通过CAS完成对status值的修改(0表示没有,1表示阻塞)。</p><p><img src="/2021/02/16/深入剖析Java抽象队列同步器AQS/1.png" alt></p><p>如图所示，常见锁或者同步组件都是基于AQS实现的。</p><h2 id="AQS内部架构图"><a href="#AQS内部架构图" class="headerlink" title="AQS内部架构图"></a>AQS内部架构图</h2><p><img src="/2021/02/16/深入剖析Java抽象队列同步器AQS/2.png" alt></p><p>如图，AQS有两个内部类：</p><ul><li>final 静态内部类Node</li><li>普通内部类ConditionObject</li></ul><p>前面说过，AQS会将抢占资源的线程包装为一个Node节点，放到队列中；ConditionObject则和Condition有关。</p><h2 id="AQS成员属性"><a href="#AQS成员属性" class="headerlink" title="AQS成员属性"></a>AQS成员属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队头节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"><span class="comment">// 队尾节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"><span class="comment">// 同步状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于支持CAS，可以忽略</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> stateOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> headOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> tailOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> waitStatusOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> nextOffset;</span><br></pre></td></tr></table></figure><h2 id="AQS内部类–Node"><a href="#AQS内部类–Node" class="headerlink" title="AQS内部类–Node"></a>AQS内部类–Node</h2><p>前面说过，AQS会将请求资源的线程包装为一个Node，放到同步队列(有Node节点组成的双向虚拟队列)中，因此Node对于AQS来说至关重要。</p><h3 id="Node成员属性"><a href="#Node成员属性" class="headerlink" title="Node成员属性"></a>Node成员属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共享模式</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line"><span class="comment">// 独占模式</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 节点等待状态</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"><span class="comment">// 同步队列中当前节点的前驱节点</span></span><br><span class="line"><span class="keyword">volatile</span> Node prev;</span><br><span class="line"><span class="comment">// 同步队列中当前节点的后继节点</span></span><br><span class="line"><span class="keyword">volatile</span> Node next;</span><br><span class="line"><span class="comment">// 请求锁的线程</span></span><br><span class="line"><span class="keyword">volatile</span> Thread thread;</span><br><span class="line"><span class="comment">// 等待队列中当前节点的后继节点，与Condition有关</span></span><br><span class="line">Node nextWaiter;</span><br><span class="line"></span><br><span class="line"><span class="comment">// waitStatus的取值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>Canceled(1)</strong></li></ul><p>在同步队列中等待的线程等待超时或被中断，需要从同步队列中取消该Node的结点，其结点的waitStatus为CANCELLED，即结束状态，进入该状态后的结点将不会再变化。</p><ul><li><strong>Signal(-1)</strong></li></ul><p>就是处于唤醒状态，只要前继结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程执行。</p><ul><li><strong>Condition(-2)</strong></li></ul><p>与Condition相关，该标识的结点处于等待队列中，结点的线程等待在Condition上，当其他线程调用了Condition的signal()方法后，Condition状态的结点将从等待队列转移到同步队列中，等待获取同步锁。</p><ul><li><strong>Propagate(-3)</strong></li></ul><p>与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。</p><ul><li>Init状态(0)</li></ul><p>表明该节点处于初始状态</p><h3 id="Node构造方法"><a href="#Node构造方法" class="headerlink" title="Node构造方法"></a>Node构造方法</h3><p>Node有三个构造方法，分别是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Node() &#123; &#125;</span><br><span class="line">Node(Thread thread, Node mode) <span class="comment">// 用于addWaiter()方法</span></span><br><span class="line">Node(Thread thread, <span class="keyword">int</span> waitStatus) <span class="comment">// 用于Condition</span></span><br></pre></td></tr></table></figure><p>这三个方法我们后面遇到了再介绍</p><h3 id="Node实例方法"><a href="#Node实例方法" class="headerlink" title="Node实例方法"></a>Node实例方法</h3><ol><li>isShared()：判断是否为共享模式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>predecessor()：获取当前节点的前驱节点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">      Node p = prev;</span><br><span class="line">      <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AQS内部类–ConditionObject"><a href="#AQS内部类–ConditionObject" class="headerlink" title="AQS内部类–ConditionObject"></a>AQS内部类–ConditionObject</h2><p><img src="/2021/02/16/深入剖析Java抽象队列同步器AQS/3.png" alt></p><p>ConditionObject架构如上图所示，该类实现了Condition接口的抽象方法。</p><h3 id="ConditionObject成员属性"><a href="#ConditionObject成员属性" class="headerlink" title="ConditionObject成员属性"></a>ConditionObject成员属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待队列的头节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter;</span><br><span class="line"><span class="comment">// 等待队列的尾节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter;</span><br><span class="line"><span class="comment">// 用于相应中断，后面介绍具体用法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REINTERRUPT =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THROW_IE    = -<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="ConditionObject成员方法"><a href="#ConditionObject成员方法" class="headerlink" title="ConditionObject成员方法"></a>ConditionObject成员方法</h3><h4 id="await"><a href="#await" class="headerlink" title="await()"></a>await()</h4><p>当前线程进入等待状态，直到被Signal/中断唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="number">1</span>.            <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line"><span class="number">2</span>.                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line"><span class="number">3</span>.            Node node = addConditionWaiter();           </span><br><span class="line"><span class="number">4</span>.            <span class="keyword">int</span> savedState = fullyRelease(node);</span><br><span class="line"><span class="number">5</span>.            <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</span><br><span class="line"><span class="number">6</span>.            <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</span><br><span class="line"><span class="number">7</span>.                LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line"><span class="number">8</span>.                <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</span><br><span class="line"><span class="number">9</span>.                    <span class="keyword">break</span>;</span><br><span class="line"><span class="number">10</span>.            &#125;</span><br><span class="line"><span class="number">11</span>.            <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</span><br><span class="line"><span class="number">12</span>.                interruptMode = REINTERRUPT;</span><br><span class="line"><span class="number">13</span>.            <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></span><br><span class="line"><span class="number">14</span>.                unlinkCancelledWaiters();</span><br><span class="line"><span class="number">15</span>.            <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</span><br><span class="line"><span class="number">16</span>.                reportInterruptAfterWait(interruptMode);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>await源码如上所示，下面一行一行的介绍它的含义</p><ul><li><p>1~2：判断当前线程是否被中断，如果被中断则抛出异常</p></li><li><p>3：将当前线程加入到等待队列中，并返回当前线程的Node节点</p></li><li><p>4：释放当前线程持有的同步状态</p></li><li><p>5：将中断模式初始化为0(后面会用到)</p></li><li><p>6~10：这是一个while循环，isOnSyncQueue()函数用于判断线程是否在同步队列中。跳出循环的情况如下</p><ul><li>线程被唤醒：当调用singnal唤醒该线程时，会将线程加入到同步队列中，不满足循环条件</li><li>线程被中断：当线程被中断时，线程会从park阻塞中回复，执行第8行代码时满足if条件，跳出循环</li></ul></li><li><p>11：获取同步状态。如果线程发生了中断，那么acquireQueued()函数返回true，这时分两种情况</p><ul><li>interruptMode == THROW_IE：说明线程阻塞在park调用时被中断</li><li>interruptMode != THROW_IE：说明线程没有被中断或被singnal()唤醒后被中断</li></ul><p>如果是第二种，那么将interruptMode设为REINTERRUPT</p></li><li><p>13~14：清除等待队列中状态为Canceled(1)的Node节点</p></li><li><p>15~16：如果interruptMode != 0，说明线程在await中肯定发生了中断，根据中断发生的时机分两种情况</p><ul><li>在singnal唤醒之前发生中断(park()调用并不是被unpark()唤醒而是从中断中返回)，那么此时会抛出异常</li><li>在singnal唤醒之后发生中断，此时会将该线程的中断标志位置位</li></ul></li></ul><p>下面我们就来分析await中调用的方法</p><h4 id="addConditionWaiter"><a href="#addConditionWaiter" class="headerlink" title="addConditionWaiter()"></a>addConditionWaiter()</h4><p>将线程加入等待队列并返回当前线程的Node节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = lastWaiter;</span><br><span class="line">    <span class="comment">// 如果队为节点不为空并且状态不是Condition，调用unlinkCancelledWaiters()方法清除</span></span><br><span class="line">    <span class="comment">// 等待队列中所有状态不是Condition(-2)节点</span></span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line">        unlinkCancelledWaiters();</span><br><span class="line">        t = lastWaiter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为当前线程创建一个Node节点，状态为Condition(-2)</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), Node.CONDITION);</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">        firstWaiter = node;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t.nextWaiter = node;</span><br><span class="line">    lastWaiter = node;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===========================================</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlinkCancelledWaiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = firstWaiter;</span><br><span class="line">    Node trail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 遍历等待队列，将所有状态不是Condition(-2)的Node删除</span></span><br><span class="line">    <span class="keyword">while</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node next = t.nextWaiter;</span><br><span class="line">        <span class="keyword">if</span> (t.waitStatus != Node.CONDITION) &#123;</span><br><span class="line">            t.nextWaiter = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (trail == <span class="keyword">null</span>)</span><br><span class="line">                firstWaiter = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                trail.nextWaiter = next;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                lastWaiter = trail;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            trail = t;</span><br><span class="line">        t = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里你可能会有疑问：为什么addConditionWaiter()函数的实现没有任何同步机制？因为该函数只在线程获取同步状态后才会被调用，此时只有当前线程在执行，其他线程或者在等待队列，或者在同步队列，根本不存在竞争问题，因此不需要同步机制。</p><ul><li><strong>总结：addConditionWaiter方法主要做了两件事</strong><ul><li>删除等待队列中无效节点</li><li>将当前节点添加到等待队列中</li></ul></li></ul><h4 id="fullyRelease-Node-node"><a href="#fullyRelease-Node-node" class="headerlink" title="fullyRelease(Node node)"></a>fullyRelease(Node node)</h4><p>释放同步状态，并唤醒同步队列上的一个线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前同步状态</span></span><br><span class="line">        <span class="keyword">int</span> savedState = getState();</span><br><span class="line">        <span class="comment">// 调用release释放同步状态,如果释放成功，返回当前线程持有的同步状态</span></span><br><span class="line">        <span class="comment">// 如果调用失败，抛出异常并且将当前线程代表的节点状态设为Cancelled(1)</span></span><br><span class="line">        <span class="keyword">if</span> (release(savedState)) &#123;</span><br><span class="line">            failed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> savedState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            node.waitStatus = Node.CANCELLED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：可以看到fullRelease方法只做了一件事，就是调用release方法并且返回当前线程持有的同步状态，如果调用release失败，将当前线程代表的节点状态修改为Cancelled(1)</li></ul><h4 id="release-int-arg-tryRelease-int-arg"><a href="#release-int-arg-tryRelease-int-arg" class="headerlink" title="release(int arg)/tryRelease(int arg)"></a>release(int arg)/tryRelease(int arg)</h4><p>fullyRelease()调用了release()方法，让我们来看看这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用tryRelease方法</span></span><br><span class="line">    <span class="comment">// 如果tryRelease方法返回true，满足if判断后调用unparkSuccessor唤醒一个同步队列上的线程并返回true</span></span><br><span class="line">    <span class="comment">// 如果返回false，release失败，返回false</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到上面的tryRelease方法你肯定觉得奇怪，为什么该方法直接抛出一个异常？那调用这个方法还有什么意义呢？由于本节主要介绍AQS的内部类，因此原因等到下节介绍。</p><ul><li><strong>总结</strong>：release方法做了两件事<ul><li>调用tryRelease释放同步状态</li><li>唤醒同步队列上的一个线程</li></ul></li></ul><h4 id="unparkSuccessor"><a href="#unparkSuccessor" class="headerlink" title="unparkSuccessor()"></a>unparkSuccessor()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：该方法比较简单，获取头节点的后继节点，如果节点的waitStatus小于0，那么直接唤醒该节点的线程；否则，从尾节点开始遍历，找到一个waitStatus&lt;=0的节点，唤醒此节点的线程即可。</li></ul><h4 id="isOnSyncQueue-Node-node"><a href="#isOnSyncQueue-Node-node" class="headerlink" title="isOnSyncQueue(Node node)"></a>isOnSyncQueue(Node node)</h4><p>该方法用于判断一个Node节点是否在同步队列中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前Node的状态是Condition状态或者node没有前驱节点，说明不在同步队列中</span></span><br><span class="line">    <span class="keyword">if</span> (node.waitStatus == Node.CONDITION || node.prev == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 如果node含有后继节点，说明一定在同步队列中</span></span><br><span class="line">    <span class="keyword">if</span> (node.next != <span class="keyword">null</span>) <span class="comment">// If has successor, it must be on queue</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 从队尾开始寻找该节点</span></span><br><span class="line">    <span class="keyword">return</span> findNodeFromTail(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">findNodeFromTail</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    Node t = tail;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == node)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        t = t.prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：该方法只有一个作用，就是判断一个给定节点是否在同步队列中</li></ul><h4 id="checkInterruptWhileWaiting-Node-node"><a href="#checkInterruptWhileWaiting-Node-node" class="headerlink" title="checkInterruptWhileWaiting(Node node)"></a>checkInterruptWhileWaiting(Node node)</h4><p>该方法用于判断该线程是被singnal()唤醒还是被中断唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkInterruptWhileWaiting</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用Thread的静态方法，判断线程的中断标志</span></span><br><span class="line">    <span class="comment">// 如果发生了中断，调用transferAfterCancelledWait方法检测中断发生在singnal之前还是之后</span></span><br><span class="line">    <span class="comment">// 如果没有发生中断，返回0</span></span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted() ?</span><br><span class="line">        (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :</span><br><span class="line">        <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==================================</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferAfterCancelledWait</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用cas修改node的状态，如果修改成功，说明当前node是被中断唤醒</span></span><br><span class="line">    <span class="comment">// 这是因为：如果node被singal唤醒，那么node的状态一定不是Condition状态，而是0(初始状态)</span></span><br><span class="line">    <span class="comment">// 后面会介绍signal()。因此，将node添加到同步队列中，返回true</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>)) &#123;</span><br><span class="line">        enq(node);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 直到node已经被添加到同步队列中，返回false</span></span><br><span class="line">    <span class="keyword">while</span> (!isOnSyncQueue(node))</span><br><span class="line">        Thread.yield();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong>：该方法只做一件事，当当前node从park中被唤醒时，判断唤醒的原因<ul><li>没有发生中断，被signal唤醒</li><li>发生了中断，但是实在signal后</li><li>发生了中断，被中断唤醒</li></ul></li></ul><h4 id="enq-final-Node-node"><a href="#enq-final-Node-node" class="headerlink" title="enq(final Node node)"></a>enq(final Node node)</h4><p>当线程因为中断而唤醒时，该线程的node还没有被添加到同步队列中，因此需要添加进去。该方法用于把一个node添加进同步队列，并返回node的前驱节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="comment">// 如果队列为空</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">            <span class="comment">// 使用CAS初始化同步队列</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="comment">// 使用CAS将node设为尾节点</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="acquireQueued-final-Node-node-int-arg"><a href="#acquireQueued-final-Node-node-int-arg" class="headerlink" title="acquireQueued(final Node node, int arg)"></a>acquireQueued(final Node node, int arg)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 自旋</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取node节点的前驱节点</span></span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">// 如果node的前驱节点是head，则尝试获取同步状态</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// 如果获取成功，那么设置新的头节点</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果前序节点不是head或者获取同步状态失败，判断是否需要挂起线程</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===============================</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，我们发现tryAcquire和前面的tryRelease一样，我们留到后面说。</p><ul><li><p><strong>总结</strong>：该方法做了三件事</p><ul><li>当node被唤醒并重新加入同步队列时，尝试获取同步资源，如果获取成功则返回</li><li>如果获取失败后判断线程是否应该被挂起</li></ul><h4 id="shouldParkAfterFailedAcquire-Node-pred-Node-node"><a href="#shouldParkAfterFailedAcquire-Node-pred-Node-node" class="headerlink" title="shouldParkAfterFailedAcquire(Node pred, Node node)"></a>shouldParkAfterFailedAcquire(Node pred, Node node)</h4><p>如果该节点应该被挂起，返回true。否则返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取node前驱节点predwaitStatus</span></span><br><span class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">    <span class="comment">// 如果node的前驱节点为Signal(1)状态，返回true</span></span><br><span class="line">    <span class="comment">// 说明node前面已经有一个准备好的节点，当前线程需要挂起</span></span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 如果node的前驱节点为Cancelled状态，说明该前驱节点已经无效</span></span><br><span class="line">    <span class="comment">// 那么一直向前遍历，找到一个waitStatus不为Cancelled的node</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果node的前驱节点不为Cancelled状态，那么使用CAS将前驱节点的ws</span></span><br><span class="line">        <span class="comment">// 修改为Signal状态，最后返回false，即当前线程不需要挂起</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================================</span><br><span class="line"><span class="comment">// 挂起当前node并且返回线程的中断状态    </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="reportInterruptAfterWait-int-interruptMode"><a href="#reportInterruptAfterWait-int-interruptMode" class="headerlink" title="reportInterruptAfterWait(int interruptMode)"></a>reportInterruptAfterWait(int interruptMode)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportInterruptAfterWait</span><span class="params">(<span class="keyword">int</span> interruptMode)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 说明该线程是由于发生中断而被唤醒，因此会抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (interruptMode == THROW_IE)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="comment">// 说明线程发生了中断，但是实在被唤醒之后，因此只是简单的设置中断标志位即可</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (interruptMode == REINTERRUPT)</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="await-总结"><a href="#await-总结" class="headerlink" title="await()总结"></a>await()总结</h4><p>我们由await方法展开，深入的剖析了await方法的实现逻辑：await方法必须在同步区调用，否则会抛出异常，调用后会将当前线程节点加入到等待队列中并且释放锁。最后会调用park阻塞。该方法可以被signal唤醒，也可以被中断唤醒。线程从await唤醒后会加入到同步队列中尝试重新获取锁。</p><h4 id="signal"><a href="#signal" class="headerlink" title="signal()"></a>signal()</h4><p>介绍完await方法，就该介绍signal方法了，因为这两个方法总是成对使用。signal()方法唤醒一个在该Condition上await的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否持有独占锁，如果没有持有锁则抛出异常</span></span><br><span class="line">    <span class="comment">// 说明signal必须在同步区执行</span></span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="comment">// 等待队列的首节点</span></span><br><span class="line">    Node first = firstWaiter;</span><br><span class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 调用doSignal</span></span><br><span class="line">        doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong> ：signal方法会判断当前线程是否持有独占锁，然后调用doSignal方法</li></ul><h4 id="doSignal-Node-first"><a href="#doSignal-Node-first" class="headerlink" title="doSignal(Node first)"></a>doSignal(Node first)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将等待队列中的首节点移到同步队列中，如果失败，则遍历等待队列，直到移成功为止</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">         <span class="comment">// 移除条件等待队列中的第一个结点，</span></span><br><span class="line">         <span class="comment">// 如果后继结点为null，那么说没有其他结点将尾结点也设置为null</span></span><br><span class="line">        <span class="keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="keyword">null</span>)</span><br><span class="line">            lastWaiter = <span class="keyword">null</span>;</span><br><span class="line">        first.nextWaiter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果该节点加入同步队列失败，并且等待队列中仍然含有节点，继续尝试</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!transferForSignal(first) &amp;&amp;</span><br><span class="line">             (first = firstWaiter) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transferForSignal-Node-node"><a href="#transferForSignal-Node-node" class="headerlink" title="transferForSignal(Node node)"></a>transferForSignal(Node node)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用CAS将node状态设置为0，如果设置失败，说明node的状态不是Condition(-2)</span></span><br><span class="line">    <span class="comment">// 那么状态只能是Cancelled，因此返回false</span></span><br><span class="line">    <span class="comment">// 注意此时是同步区域，只有一个线程再执行，不存在并发，也就不存在其他线程并发修改</span></span><br><span class="line">    <span class="comment">// 导致CAS失败</span></span><br><span class="line">    <span class="keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 将node加入同步队列，并返回node的前驱节点p</span></span><br><span class="line">    Node p = enq(node);</span><br><span class="line">    <span class="keyword">int</span> ws = p.waitStatus;</span><br><span class="line">    <span class="comment">// 如果p处于Cancelled状态，获取修改p状态为Signal失败</span></span><br><span class="line">    <span class="comment">// 则唤醒该node代表的线程</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</span><br><span class="line">        LockSupport.unpark(node.thread);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="signal-总结"><a href="#signal-总结" class="headerlink" title="signal()总结"></a>signal()总结</h4><p>signal相对于await来说比较简单，调用后将等待队列中的一个node移到同步队列中。可能会伴随一些其他的操作</p><h3 id="ConditionObject总结"><a href="#ConditionObject总结" class="headerlink" title="ConditionObject总结"></a>ConditionObject总结</h3><p>前面主要队ConditionObject的await()和signal方法进行了详细的介绍，其实还有其他一些类似的方法，不过他们的实现大同小异，因此这里就不多介绍了。ConditionObject的介绍就到这里~</p><h2 id="AQS的模板方法"><a href="#AQS的模板方法" class="headerlink" title="AQS的模板方法"></a>AQS的模板方法</h2><p>AQS作为基础组件，封装的是核心并发操作，但是实现上分为两种模式，即共享模式与独占模式，而这两种模式的加锁与解锁实现方式是不一样的，但AQS只关注内部公共方法实现并不关心外部不同模式的实现，所以提供了模板方法给子类使用，也就是说实现独占锁，如ReentrantLock需要自己实现tryAcquire()方法和tryRelease()方法，而实现共享模式的Semaphore，则需要实现tryAcquireShared()方法和tryReleaseShared()方法，这样做的好处是显而易见的，无论是共享模式还是独占模式，其基础的实现都是同一套组件(AQS)，只不过是加锁解锁的逻辑不同罢了，更重要的是如果我们需要自定义锁的话，也变得非常简单，只需要选择不同的模式实现不同的加锁和解锁的模板方法即可，AQS提供给独占模式和共享模式的模板方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 独占锁下获取锁的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独占锁下释放锁的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享锁下获取锁的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共享锁下释放锁的方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为持有独占锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这些方法在AQS的实现中同意抛出异常，需要其子类根据需要重写不同的方法去实现。</p><h2 id="AQS中成员方法"><a href="#AQS中成员方法" class="headerlink" title="AQS中成员方法"></a>AQS中成员方法</h2><p>AQS中成员方法很多，在这里不会一一去介绍，只介绍其中的几个成员国方法为后续介绍ReentrantLock、Semaphore做铺垫。</p><h3 id="acquire-int-arg"><a href="#acquire-int-arg" class="headerlink" title="acquire(int arg)"></a>acquire(int arg)</h3><p>线程获取同步状态，如果获取失败则将线程加入到同步队列尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tryQcquire模板方法，留给子类实现</span></span><br><span class="line">    <span class="comment">// 如果获取同步状态失败，那么将线程包装为node添加到同步队列尾</span></span><br><span class="line">    <span class="comment">// 调用acquireQueued方法，该方法前面介绍过</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="addWaiter-Node-mode"><a href="#addWaiter-Node-mode" class="headerlink" title="addWaiter(Node mode)"></a>addWaiter(Node mode)</h3><p>该方法用于将线程包装为一个独占模式node，并添加到同步队列尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将线程包装为一个独占模式的node</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 如果同步队列已经存在</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 使用CAS将node设为同步队列尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果同步队列还未初始化或CAS失败，则调用enq，将node加入到同步队列中</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="comment">// 返回线程的node</span></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>释放同步状态，并唤醒同步队列中的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tryRelease为模板方法，由子类实现</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="comment">// 如果同步队列头节点不为空并且状态不为0，调用unparkSeuucssor方法并返回true</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果tryRelease失败，返回false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unparkSuccessor-Node-node"><a href="#unparkSuccessor-Node-node" class="headerlink" title="unparkSuccessor(Node node)"></a>unparkSuccessor(Node node)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的node就是同步队列的头节点</span></span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="comment">// 尝试将头节点的waitStatus设为0，允许失败</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// s为紧接着head的后继节点</span></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="comment">// 如果s为空或s已经是Cancelled状态，那么从同步队列的尾节点开始向前找</span></span><br><span class="line">    <span class="comment">// 找到队列中最靠近头节点并且waitStatus不为Cancelled的node</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果找到了满足条件的node，则唤醒该node代表的线程</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>总结</strong> ：该方法主要作用是用unpark()唤醒同步队列中最前边未放弃线程(也就是状态为CANCELLED的线程结点s)。还记得acquire中acquireQueued()方法是怎么做的么，s结点的线程被唤醒后，会进入acquireQueued()函数的if (p == head &amp;&amp; tryAcquire(arg))的判断，此时被唤醒的node可能不是head的后继节点，所以不能满足if条件，但是它会执行shouldParkAfterFailedAcquire()，由于s通过unparkSuccessor()操作后是同步队列中最前边未放弃的线程结点，那么通过shouldParkAfterFailedAcquire()内部对结点状态的调整，s最终会成为head的next结点，因此再次自旋时p==head就成立了，然后s把自己设置成head结点，表示自己已经获取到资源，最终acquire()也执行完毕。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于AQS的介绍到这里就告一段落，AQS本质上就是一个FIFO队列+status，通过status表示同步状态，通过FIFO管理等待同步状态的线程。将想要获取同步状态的线程包装成node交由FIFO队列管理。后面将会介绍基于AQS实现的可重入锁(独占锁)ReentrantLock的实现原理。</p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS </tag>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析局部类与final关键字</title>
      <link href="/2020/03/24/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B1%80%E9%83%A8%E7%B1%BB%E4%B8%8Efinal%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/03/24/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B1%80%E9%83%A8%E7%B1%BB%E4%B8%8Efinal%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>Java中有一种神奇的类，那就是局部内部类。定义在方法或某个作用域内的类，就是局部内部类。而匿名内部类就是一种局部内部类。关于局部内部类，我一直很疑惑为什么它只能访问final修饰的局部变量？它访问成员变量时需要加final修饰么？我上网查阅，网上给出的答案五花八门让人无法分辨真假，于是我花了点儿时间，自己动手一个一个的实验，终于整理出了头绪，特此来记录一下。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在文章的开头，先给出结论(本结论基于JDK1.8版本)：<font color="red"><b>局部内部类访问只能访问final修饰的局部变量，可以访问非final修饰的局部内部类所属类的成员属性。</b></font>至于原因，我在演示后在文章的末尾进行总结。</p><h1 id="局部内部类访问局部变量"><a href="#局部内部类访问局部变量" class="headerlink" title="局部内部类访问局部变量"></a>局部内部类访问局部变量</h1><p>在本节中，我将在方法内部定义一个局部内部类，让其访问方法的局部变量，通过反汇编查看编译后的字节码文件</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a><font size="5">演示</font></h2><ol><li><p>在方法内部定义一个局部内部类，并在内部类中使用内部类所述方法的User类型的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Outter&#123;</span><br><span class="line">    public static void test(User user)&#123;</span><br><span class="line">        user.name=&quot;hello &quot;;</span><br><span class="line">        class Inner&#123;</span><br><span class="line">        public void show()&#123;</span><br><span class="line">            System.out.println(user.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    new Inner().show();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        test(new User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义一个类</span><br><span class="line">class User&#123;</span><br><span class="line">  public int id;</span><br><span class="line">  public String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用javac Outter.java编译该类，会得到两个class文件(不考虑User.class)<br><img src="/2020/03/24/深入剖析局部类与final关键字/1.png" alt> </p></li><li><p>其中一个和外围类(Outter)的名字相同，另外一个应该是局部内部类的class文件，我们来反编译一下Outter.class<br><img src="/2020/03/24/深入剖析局部类与final关键字/2.png" alt> 查看Outter反编译后的代码，我们发现，它test方法中的参数竟然是final的，我们写的代码中明明没有final啊，这是为什么呢？原来，在以前，我们是需要显式的用final修饰该局部变量的，但是后来，Java使用了语法糖，不用我们去加final了，它在编译时会自动加上final。</p></li><li><p>我们再来反编译下局部内部类Inner的字节码文件Outter$1Inner.class<br><img src="/2020/03/24/深入剖析局部类与final关键字/3.png" alt> 通过查看反编译的代码，我们发现，当我们的局部内部类使用局部变量时，会将该局部变量当作自己的成员变量使用(在构造方法中赋值)。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>通过演示，我们可以得出结论：<font color="red"><b>在方法内部定义局部内部类时，如果局部内部类使用了局部变量，即使我们没有将该局部变量显式的声明为final，JVM在编译会自动将该局部变量加上final修饰。并且局部内部类会将该局部变量当作自己的成员属性使用。</b></font></p><h1 id="局部内部类访问成员变量"><a href="#局部内部类访问成员变量" class="headerlink" title="局部内部类访问成员变量"></a>局部内部类访问成员变量</h1><p>在本节中，我将定义一个方法，在方法中定义一个局部内部类，并在局部内部类中访问其所属方法所属的类的成员属性，通过反汇编查看编译后的字节码文件</p><h2 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a><font size="5">演示</font></h2><ol><li><p>定义一个方法，在方法中定义一个局部内部类，内部类中访问外围类的成员属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class Outter &#123;</span><br><span class="line">    //定义一个外围类的成员属性</span><br><span class="line">    private User OutterUser = new User();</span><br><span class="line">    </span><br><span class="line">    public void show() &#123;</span><br><span class="line">        this.OutterUser.name = &quot;Outter&quot;;</span><br><span class="line">        //定义一个方法的局部内部类</span><br><span class="line">        class Inner&#123;</span><br><span class="line">            public void InnerMethod() &#123;</span><br><span class="line">                //局部内部类访问外围类的成员属性</span><br><span class="line">                System.out.println(OutterUser.name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //修改成员属性，使其指向新的User对象</span><br><span class="line">        this.OutterUser=new User();</span><br><span class="line">        //执行局部类的方法</span><br><span class="line">        new Inner().InnerMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //调用show()方法</span><br><span class="line">        new Outter().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class User&#123;</span><br><span class="line">    public int id;</span><br><span class="line">    public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们使用javac Outter.java编译java文件，除去User.class，我们仍得到两个class文件<br><img src="/2020/03/24/深入剖析局部类与final关键字/4.png" alt> </p></li><li><p>我们通过反汇编查看Outter.class文件<br><img src="/2020/03/24/深入剖析局部类与final关键字/5.png" alt> 这里我们发现了，<font color="red"><b>此时成员属性并没有被final修饰。方法执行时使用Outter.this调用外围类的成员属性。</b></font>这里有个小细节需要特别注意：<font color="red"><b>我们在代码中，修改成员属性的动作写在定义局部内部类之后，但是反编译后，该动作被提到了前面执行，这也就意味着我们InnerMethod()方法时，打印的不是Outter，而是null。</b></font>我经过测试发现结果确实是这样。</p></li><li><p>我们再来看看局部内部类的class文件<br><img src="/2020/03/24/深入剖析局部类与final关键字/6.png" alt> 在局部内部类中，此时和前面的不同，此时直接将外围类的引用传递了进来，这也就意味着局部内部类可以访问外围类的任何东西。</p></li></ol><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>通过演示，我们可以得出结论：<font color="red"><b>当局部内部类使用外围类的成员属性时，局部内部类在构造方法中会传入外围类的引用，当需要访问外围类的成员属性时，直接使用该引用调用。</b></font></p><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>匿名内部类是一种特殊的局部内部类，区别只是在于它没有名字而已，我在本地演示过，和局部内部类的规则一摸一样，这里就不演示了。</p><h1 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h1><ol><li><p>访问局部变量<br>通过演示可以发现，确实如网上有些答案所说，局部内部类只能访问final修饰的局部变量，那么这是什么原因呢？这要从Java的特点说起了，我们知道Java中采用的是值传递。也就是说，当传递一个基本类型时，方法内部会复制一份，方法中对该基本类型的任何修改都不会影响到外部变量本身；当传递一个引用类型时，方法内部会复制一份引用，方法内如果引用发生了变化，同样不会影响到外部变量。<font color="red"><b>当一个局部变量被局部内部类使用时，局部内部类会拷贝一份(如果是引用类型拷贝引用)作为自己的成员属性使用，因此无论是方法或者是类谁对它做了修改，都不会影响到另一方….为了避免这种尴尬的情况，保持一致性。因此简单粗暴的将局部变量设置为final，既然不能同步，那我们大家都不要修改咯。</b></font>这也就是只能访问final修饰的局部变量的原因。</p></li><li><p>访问成员属性<br>在访问成员属性时有所不同，<font color="red"><b>此时局部内部类并不会拷贝一份变量作为自己的成员属性，而是将外围类的引用传递进来(更加霸道..)，此时成员属性仍然只有一份，因此就不会出现不一致的情况了。</b></font></p></li><li><p>辟谣<br>关于网上说的延长生命周期一说，纯属无稽之谈，不知道从谁那里传过来的，真的是害人不浅！！！</p></li><li><p>最后疑问<br>当访问成员属性时，会将外围类的引用传递进来，那么有的同学可能会问了：既然是值传递，如果外围类对象的引用改变了不同样会造成不一致么？这个问题其实很简单，局部内部类定义在方法中，而方法属于外围类对象，当外围类对象引用改变了，那么当前对象就成了垃圾对象，还有存在的必要么？</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 局部内部类 </tag>
            
            <tag> final关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式的底层实现</title>
      <link href="/2020/03/23/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/03/23/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>今天写多线程代码时，用到了Lambda表达式实现Runnable接口，于是我突然想到一个问题：Lambda是Jdk8的新特性，那么Lambda表达式到底是怎么实现的呢？于是我进行了一番测试和上网查找，终于弄明白了Lambda的底层实现，所以特此来记录一下。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Lambda表达式是JDK1.8出现的新特性，能够大大的简化我们的代码，并且Lambda经常和函数式接口一同搭配使用，这是由函数式接口的特点决定的：函数式接口(@FunctionalInterface)只允许有一个抽象方法(静态方法和默认方法不做要求，如果要将Object类的方法变成抽象方法，那么抽象方法也不做要求)。这样在实现函数式接口时，就可以直接使用Lambda表达式来实现。极其方便快捷。但有一点需要注意：Lambda表达式无法处理重载方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class LambdaTest &#123;</span><br><span class="line">    //方法的重载版本：接收InterTest1接口的参数</span><br><span class="line">    public static void method(InterTest1 interTest1) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //方法的重载版本：接收InterTest2接口的参数</span><br><span class="line">    public static void method(InterTest2 interTest2) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">     //这里无法使用Lambda表达式，因为无法判断出该方法需要接受哪个接口作为参数  </span><br><span class="line">        method(()-&gt;&#123; </span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">两个函数式接口</span><br><span class="line">@FunctionalInterface</span><br><span class="line">interface InterTest1 &#123;</span><br><span class="line">    void test(String msg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@FunctionalInterface</span><br><span class="line">interface InterTest2 &#123;</span><br><span class="line">    void test(String msg);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的测试可以看出，当出现方法重载时，我们还是要使用匿名内部类的方式。</p><h1 id="演示Lambda表达式底层原理"><a href="#演示Lambda表达式底层原理" class="headerlink" title="演示Lambda表达式底层原理"></a>演示Lambda表达式底层原理</h1><ol><li><p>我们写一个使用Lambda表达式的类，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class App&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //使用Lambda表达式创建一个接口实现类</span><br><span class="line">        IMarkUp mu=(msg)-&gt;System.out.println(msg);</span><br><span class="line">        //调用该接口方法</span><br><span class="line">        mu.test(&quot;lambda&quot;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface IMarkUp&#123;</span><br><span class="line">    void test(String msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在cmd窗口，使用javac App.java 命令编译该App类，会发现得到了两个Class文件<br><img src="/2020/03/23/Lambda表达式的底层实现/1.png" alt></p></li><li><p>我们使用javap -p App命令反编译一下App类<br><img src="/2020/03/23/Lambda表达式的底层实现/2.png" alt> 通过反编译我们发现，反编译后出现了一个私有静态方法，并且该方法是我们的java源码中不存在的，它接受一个String类型作为参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private static void lambda$main$0(java.lang.String)&#123;</span><br><span class="line">    //该方法的方法体就是我们Lambda表达式的内容</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用java -Djdk.internal.lambda.dumpProxyClasses App来查看接口的实现类，但是我电脑上该命令执行不出来，于是我在IDEA上将前面的命令配置成参数执行，得到了JVM生成的接口的实现类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import java.lang.invoke.LambdaForm.Hidden;</span><br><span class="line"></span><br><span class="line">//该实现类是JVM创建的，继承了我们的函数式接口</span><br><span class="line">final class LambdaTest$$Lambda$1 implements InterTest &#123;</span><br><span class="line">    //私有的构造方法</span><br><span class="line">    private LambdaTest$$Lambda$1() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //实现了接口中的抽象方法</span><br><span class="line">    @Hidden</span><br><span class="line">    public void test(String var1) &#123;</span><br><span class="line">        //通过调用前面的私有静态方法完成功能</span><br><span class="line">        LambdaTest.lambda$main$0(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后我们可以总结JDK1.8下Lambda表达式的底层原理：JVM仍然会生成接口的一个实现类，并在调用方法类中生成一个私有的静态方法，在实现类的方法中调用该方法。可以发现，Lambda只是简化了我们的书写，但是它还是通过实现类完成的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> Lambda表达式 </tag>
            
            <tag> 底层实现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈MySQL架构</title>
      <link href="/2020/03/21/%E6%B5%85%E8%B0%88MySQL%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/03/21/%E6%B5%85%E8%B0%88MySQL%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>一直以来都在学习MySQL，学了MySQL的事务、事务的四大特性及实现原理、索引的使用和实现等等一些MySQL相关的知识，但是对于MySQL的架构，或者通俗的说，MySQL是由哪几部分组成的却忽略了，实际上这是很不应该的，因为只有对MySQL的架构有了一个了解，才能对于SQL语句的执行流程有一个认识，从而能够进行更好的优化。今天就来简单地学习一个MySQL的架构，本文基于MySQL5.5版本。</p><hr><a id="more"></a><h1 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h1><p><img src="/2020/03/21/浅谈MySQL架构/1.jpg" alt> 如图，这就是MySQL的基础架构，可以看到MySQL总体上可以分为三层</p><ol><li>客户层</li><li>Server层</li><li>存储引擎层</li></ol><p>下面我将会对每个部分进行一个简单地介绍</p><h1 id="客户层"><a href="#客户层" class="headerlink" title="客户层"></a>客户层</h1><p>客户层用于向MySQL数据库发送请求，比如我们用的JDBC、以及一些可视化工具如sqlyog和我们使用MySQL的客户端，都属于客户层。客户端发送的请求交给下层的Server层。</p><h1 id="Server层"><a href="#Server层" class="headerlink" title="Server层"></a>Server层</h1><p>这一层比较重要，从上面图中可以看到，这一层分了很多个组件：</p><ol><li>连接器</li><li>分析器</li><li>优化器</li><li>执行器</li><li>缓存</li></ol><p>下面分别对这几个组件进行简单地介绍</p><h2 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a><font size="5">连接器</font></h2><p>我们在登陆时，需要输入用户名，输入密码；在远程登陆时还要输入主机的ip地址以及端口号，从而和MySQL建立连接。这些功能都是由连接器完成。当我们登录MySQL的时候，连接器会建立客户端和服务器的连接(TCP/IP协议)，建立好连接后会验证输入的用户名和密码是否正确。因此连接器主要用于<font color="red"><b>管理连接，进行相关权限的认证</b></font>。我们可以使用<b>show processlist;</b>命令查看服务器的连接。</p><h2 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a><font size="5">分析器</font></h2><p>我们知道，SQL语句是用来操作数据库的，但是我们写的SQL语句服务器是看不懂的，SQL语句是为了方便我们学习使用而发明的。服务器会将我们写的SQL语句编译为它能够看懂的语言(选择投影连接)。分析器会对我们的SQL语句进行</p><ol><li>词法分析，判断我们写的SQL语句中是否有无法识别的词</li><li>语法分析，判断我们的SQL语句是否存在语法错误。比如，我写了SELECT却没有写FROM，这就不能通过语法分析</li><li>生成抽象语法树，这一步主要是方便后面优化器对我们的SQL语句进行优化</li></ol><h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a><font size="5">优化器</font></h2><p>这一组件会根据我们前面生成的抽象语法树对我们的SQL语句做一个优化。我们写一条SQL语句，他可能有很多执行的方式，优化器会对其进行优化，选择比较好的方式执行该SQL语句。优化器非常复杂，这里简单的说几点可能的优化手段：</p><ol><li>重新定义表的关联顺序 (多张表关联查询时，并不一定按照 SQL 中指定的顺序进行，但有一些技巧可以指定关联顺序)</li><li>优化 MIN() 和 MAX()函数 (找某列的最小值，如果该列有索引，只需要查找 B+Tree索引 最左端，反之则可以找到最大值)</li><li>提前终止查询 (比如 : 使用 Limit 时，查找到满足数量的结果集后会立即终止查询)</li><li>优化排序 (在老版本 MySQL 会使用两次传输排序，即先读取行指针和需要排序的字段在内存中对其排序，然后再根据排序结果去读取数据行，而新版本采用的是单次传输排序，也就是一次读取所有的数据行，然后根据给定的列排序。对于I/O密集型应用，效率会高很多)</li></ol><h2 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a><font size="5">执行器</font></h2><p>执行器是直接跟我们的存储引擎进行数据交互的，数据交互就涉及到I/O的问题。我们常听说的一条优化手段是尽量不要使用SELECT * ，这是什么原因呢？如果我们在本地操作数据库，很重要的一点就是I/O，我们常说的优化优化，其实就是减少I/O的次数，减少每次的I/O量，当我们使用SELECT *的时候，会取出一些不必要的字段，加大了I/O。因此我们要养成用什么就取什么的习惯。再回来说说执行器吧，当我们对SQL进行优化后，就得到了最终的执行计划，执行器就会根据该执行计划调用存储引擎查询数据。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><font size="5">缓存</font></h2><p>这一组件已经在后续版本被移除，当时我正在使用的MySQL5.5仍然存在该组件。简单地说，当我们执行SQL语句后，会将查询的结果放入缓存中，如果我们下次仍执行这条SQL语句，那么这时就会直接查询缓存直接返回数据。但是有一点要明确：并不是执行所有SQL语句后都会放入缓存。但是该缓存的效率是不高的，这是因为：<br>我们一般不会执行一条SQL语句多次，并且当我们输入不同的SQL语句时，还会对缓存进行更新。由于缓存命中率低，并且占用内存空间，所以在MySQL8时被移除。</p><h1 id="存储引擎层"><a href="#存储引擎层" class="headerlink" title="存储引擎层"></a>存储引擎层</h1><p>存储引擎是我们听过最多的MySQL的部分了，存储引擎用于管理和组织我们的数据文件，它是数据库中非常重要的组件。<font color="red"><b>存储引擎是表级别的，不是库级别的，我们在创建表时可以为不同的表使用不同的存储引擎</b></font>。MySQL有很多不同的存储引擎，我们可以使用<b>show engines;</b>命令查看MySQL的存储引擎。MySQL有一个非常好的设计，MySQL是一个可插拔的存储引擎系统，也就是说，如果我们自己实现了一个符合规范的存储引擎，我们就可以将自己实现的存储引擎插到MySQL中使用。<br>MySQL的存储引擎种类很多，主要说的就两个：InnoDB和MyISAM存储引擎，不同的存储引擎差别较大，因此我们在说存储引擎的时候，一定要说明是哪一种存储引擎。</p><h2 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a><font size="5">InnoDB存储引擎</font></h2><h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a><font size="5">文件格式</font></h3><p>使用InnoDB存储引擎的表，有两种不同后缀的文件</p><ol><li>.frm文件，存储表的结构(可以理解为创建表语句)</li><li>.ibd文件，存储表的索引</li></ol><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a><font size="5">索引结构</font></h3><ol><li><p>InnoDB的数据表是以索引的形式存在的，表的主键就是一个聚簇索引。索引采用B+树的结构，B+树的每个叶子节点存储着表的记录。InnoDB内部可能会使用哈希索引，但这是我们无法干预的。</p></li><li><p>InnoDB的辅助索引，同样使用B+树结构，辅助索引的叶子节点存储的是对应的主键的值</p></li><li><p>InnoDB不支持全文索引，5.7以后InnoDB已经支持</p><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a><font size="5">加锁</font></h3><p>InnoDB支持表锁和行锁两种锁，并且InnoDB的锁锁的是索引，因为前面说过，InnoDB的表本身就是一个索引文件。如果我们的访问命中了索引，那么会使用行锁索引相应的记录行，如果没有命中索引，则会使用表锁锁全表。因此创建合适的索引并编写合适的SQL语句对于提高查询性能至关重要</p></li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a><font size="5">事务</font></h3><p>InnoDB是支持事务的，对于InnoDB，每一条SQL语句都默认封装成事务，自动提交(set autocomit=0关闭自动提交)。</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a><font size="5">其它</font></h3><ol><li>InnoDB支持外键，这个我们平常也经常使用</li><li>InnoDB不保存表的具体行数，当执行select count(*)时，需要进行全表扫描</li></ol><h2 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a><font size="5">MyISAM存储引擎</font></h2><h3 id="文件格式-1"><a href="#文件格式-1" class="headerlink" title="文件格式"></a><font size="5">文件格式</font></h3><p>使用MyISAM存储引擎的表，有三种不同后缀的文件</p><ol><li>.frm文件，存储表的结构(可以理解为创建表语句)</li><li>.MYD文件，存储表的数据</li><li>.MYI文件，存储表的索引</li></ol><p>MyISAM同样使用B+树结构的索引，但是和InnoDB不同的是，MyISAM不支持聚簇索引。通过上面文件格式也可以发现，MyISAM中索引和数据是分离的。B+树索引的叶子节点存储的是对应记录的地址。</p><h3 id="索引结构-1"><a href="#索引结构-1" class="headerlink" title="索引结构"></a><font size="5">索引结构</font></h3><h3 id="加锁-1"><a href="#加锁-1" class="headerlink" title="加锁"></a><font size="5">加锁</font></h3><p>MyISAM只支持表锁，并且锁的是数据文件，那么为什么MyISAM不支持行锁呢？这点我上网了解了一下，表锁虽然在高并发下性能低，但是它开销小锁表快，可能是以前对于并发要求并不高，于是MyISAM也并不需要使用行锁。</p><h3 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a><font size="5">事务</font></h3><p>MyISAM是不支持事务的，因此它的故障恢复能力较差。</p><h3 id="其它-1"><a href="#其它-1" class="headerlink" title="其它"></a><font size="5">其它</font></h3><ol><li>MyISAM不支持外键</li><li>MyISAM中有一个变量保存了整个表的行数，执行COUNT(*)时速度很快，只需要读出该变量即可。</li></ol><p>那么为什么InnoDB中不使用该变量呢？<br>这是因为，由于InnoDB事务的特性，在同一时刻表中的行数对于不同的事务来说是不一样的，因此count(*)会统计对于当前事务来说可以统计到的行数。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
            <tag> MySQL架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Https</title>
      <link href="/2020/03/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAHttps/"/>
      <url>/2020/03/20/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAHttps/</url>
      
        <content type="html"><![CDATA[<p>本文对于基本的Http协议不再做赘述(如果对Http协议不了解的建议先学习一下Http协议)。在本文中，首先指出Http协议的缺陷，紧接着提出各种解决方法，最后剖析一下Https协议的实现原理。最后对比Http协议和Https协议，分别介绍它们的优缺点。</p><hr><a id="more"></a><h1 id="Http协议存在的问题"><a href="#Http协议存在的问题" class="headerlink" title="Http协议存在的问题"></a>Http协议存在的问题</h1><p>我们知道，Http协议是基于请求响应模型，客户端发送请求，服务器回送响应。这里的关键在于，无论是客户端发送的请求还是服务器回送的响应，都是没有加密的，也就是<font color="red"><b>明文传输</b></font>。由于Http协议是明文传输，因此会造成安全性问题。<br><img src="/2020/03/20/深入浅出Https/1.png" alt><br>如图，当你使用http协议上网时，你在浏览什么网站，你的隐私等等，别人都能够轻而易举地获取，这无疑是很不安全的。</p><h1 id="对称加密传输"><a href="#对称加密传输" class="headerlink" title="对称加密传输"></a>对称加密传输</h1><p>当出现了上面的问题，人们就像，我能不能在发送方对数据进行加密，在接收方对数据进行解密，这样不就安全了么。我们发送方和接收方只需要在交换数据之前，先约定一下加密解密的方法(秘钥)，这样发送方发送数据时先对数据进行加密，然后接收方接收到数据后用对应的解密方法对数据解密。这种加密传输看起来是安全的，但实际上毫无作用，我们来看一下。<br><img src="/2020/03/20/深入浅出Https/2.png" alt><br>就像图中说的，虽然客户端和服务器对数据进行加密传输，但是由于<font color="red"><b>它们的密钥能够被其他人获取到</b></font>，所以这种对称加密方法和明问传输无异。</p><h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>为了解决对称加密出现的问题(密钥能够被第三方获取到)，人们又想出了非对称加密算法。对于非对称加密算法：有一对密钥，一个是公钥、一个是私钥。<font color="red"><b>公钥加密的数据只能用私钥解密，而私钥加密的数据只能用公钥解密</b></font>(至于原理不用深究，只需要知道这一点就足够)。其中私钥是服务器私有的，只有服务器知道，而公钥是发送给客户端的(这就意味着公钥是很容易获取到的)。让我们来看看非对称加密算法能不能解决问题，它又存在哪些问题<br><img src="/2020/03/20/深入浅出Https/3.png" alt><br>从图中可以看到，使用了非对称加密后，客户端发往服务器的数据安全能够得到保障，但是服务器发送给客户端的数据却能够轻易的被他人获取，这仍然是不安全的。那么怎么解决呢？我们继续往下看</p><h1 id="非对称加密-对称加密"><a href="#非对称加密-对称加密" class="headerlink" title="非对称加密+对称加密"></a>非对称加密+对称加密</h1><p>我们可以看到，无论是对称加密还是非对称加密，都存在安全问题，于是人们又想出了一种办法：将对称加密和非对称加密结合使用。它的大致思路是这样的：</p><ol><li>客户端先获取服务器的公钥，然后自己生成一个密钥(这里假设是K)。</li><li>客户端使用公钥对该密钥K进行加密，注意是对密钥K加密而不是对数据加密(由于这一步是安全的，因此黑客无法获取到该密钥K)</li><li>服务器收到加密数据后，使用私钥解密数据得到客户端的密钥K。</li><li>然后客户端和服务器使用该密钥K对数据进行加密解密(对称加密)</li></ol><p><img src="/2020/03/20/深入浅出Https/4.png" alt><br>我们可以看到，客户端和服务器使用非对称加密算法保证密钥K的安全，然后使用对称加密算法对数据进行加密。但是这样就万无一失了么？我们看看这样会存在什么问题？<br><img src="/2020/03/20/深入浅出Https/5.png" alt><br>通过分析我们发现，使用非对称加密+对称加密算法后，黑客仍然能够获取到对称加密的密钥，从而获取篡改数据，这种方法也不是万无一失的。</p><h1 id="CA认证"><a href="#CA认证" class="headerlink" title="CA认证"></a>CA认证</h1><p>通过分析我们可以发现，使用非对称+对称加密时之所以会出现问题，是因为客户端无法辨别服务器的身份，换句话说，就是它<font color="red"><b>不知道它收到的公钥是来自服务器还是来自客户端。</b></font>既然知道了问题所在，那我们就来解决。于是CA机构就出现了。</p>什么是CA认证呢？我们来打个比方：现在有两个人A、B和C，它们互相都不认识。当A和B想要进行交流时，C插入进来，C对A说它是B，然后对B说它是A。由于A、B互相不认识并且都不认识C，因此它们并不会怀疑C的身份，于是它们就开始交流。这样A和B交流的所有内容都被C得知，并且C还可以改变它们对对方说的话。而CA机构就像一个警察，它认识A、B和C，并且<font color="red"><b>三者都信任他</b></font>。当C对A说它是B时，警察就告诉A：他不是B，它是C...这样以来，A就知道C是伪装的，C就无法窃取数据了。![](/深入浅出Https/6.png) 如图，由于网络中的计算机都是信任CA机构的，因此借助CA机构，在非对称加密阶段，客户端就能够识别出它收到的公钥是来自黑客还是来自服务器，这样就能够保证安全。<h1 id="CA证书"><a href="#CA证书" class="headerlink" title="CA证书"></a>CA证书</h1><p>CA证书是网站向CA机构申请认证，然后CA机构向网站颁发的能够标识网站身份的电子证书(可以理解为网站的身份证，不同的网站CA证书是不同的)。当网站向CA机构申请认证时，需要将自己的公钥、域名、等等信息提交给CA认证(不同级别的认证提交的信息不同)。CA机构<font color="red"><b>对网站提交的域名、公钥等明文信息使用hash算法(MD5)生成数字数字摘要。最后，CA机构使用自己的私钥对数字摘要进行加密，就得到了数字签名。最后的CA证书中包含了明文和由明文生成的数字签名</b></font><br><img src="/2020/03/20/深入浅出Https/7.png" alt> </p><h1 id="CA认证-非对称加密-对称加密"><a href="#CA认证-非对称加密-对称加密" class="headerlink" title="CA认证+非对称加密+对称加密"></a>CA认证+非对称加密+对称加密</h1><p>下面就介绍一下CA机构+非堆成加密+对称加密是如何保证数据安全的。</p><ol><li>客户端向服务器请求服务器公钥，服务器将自己的CA证书发送给客户端</li><li>客户端收到服务器的CA证书后，使用操作系统的对应的CA机构的公钥解密CA证书的数字签名，获取数字摘要</li><li>这里是关键的一步：客户端使用相同的哈希算法(如MD5)对CA证书的明文部分进行哈希运算，得到网站的数字摘要，然后将生成的数字摘要和解密出的CA证书的数字摘要对比，如果相同，说明该CA证书没有被篡改过</li><li>如果CA证书没有被篡改过，客户端又会根据域名判断该证书是否被掉包</li><li>如果CA证书是真的且没有被掉包，也就是说客户端已经能够确认收到的公钥是服务器的公钥</li><li>客户端生成一个密钥，并使用hash算法对密钥进行hash，将密钥原文和得到的hash值一起使用公钥加密后发送给服务器</li><li>服务器收到后使用私钥解密，并对密钥原文使用同样的hash算法进行hash，如果和客户端发来的哈希值相同，则说明没有被篡改</li><li>此后客户端和服务器通信使用该密钥对称加密。</li></ol><h1 id="Https和Http区别"><a href="#Https和Http区别" class="headerlink" title="Https和Http区别"></a>Https和Http区别</h1><p>Https实际上是Http+TLS/SSL，它并不是一个新的协议，而是在TCP之上，Http之下加了一个TLS/SSL安全套接字。</p><ol><li>它们的端口号不同，Http为80而Https为443</li><li>Http明文传输数据，而Https加密传输数据，安全性更高</li><li>Https需要CA证书，安全性越高的证书费用越高</li><li>Https协议比Http协议耗时开销大。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Https </tag>
            
            <tag> 应用层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈MySQL三种日志</title>
      <link href="/2020/03/15/%E6%B5%85%E8%B0%88MySQL%E4%B8%89%E7%A7%8D%E6%97%A5%E5%BF%97/"/>
      <url>/2020/03/15/%E6%B5%85%E8%B0%88MySQL%E4%B8%89%E7%A7%8D%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>我们都知道数据库有ACID四大特性，分别是原子性、隔离性、一致性和持久性，那么数据库是通过什么手段来实现原子性的呢？又是通过什么手段来实现持久性的呢？答案就是日志。下面让我们来看一看MySQL InnoDB的三种日志：Redo log、Undo log、bin log。</p><hr><a id="more"></a><h1 id="Redo-log"><a href="#Redo-log" class="headerlink" title="Redo log"></a>Redo log</h1><p>Redo log是MySQL InnoDB引擎所产生的。<b>当事务开始时，就开始记录每次变更信息。</b>现在我们假设下面一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update table set name=&quot;tom&quot; where id=3;</span><br></pre></td></tr></table></figure><p>MySQL执行这条语句时，先把id=3的记录查出来然后将name字段给改掉。我们知道MySQL InnDB 的基本存储结构是页(每个树节点一页)，所以MySQL先把对应的页加载进内存，然后修改相应的记录。那么这就有一个问题：如果在内存中把数据改了，该没来得及往磁盘上写，数据库就挂了，这怎么办？这可能会违反一致性。但是如果每次请求都将数据立马写入磁盘，那么速度就会很慢。因此MySQL InnoDB引入了Redo log。</p><p>当内存写完了，就会写一份Redo log，这份log记录的是这次在某个页(物理位置)上做了什么修改，其实在写Redo log时也会先写如缓冲区，至于什么时候写入内存，可以自行配置。写Redo log也是需要写入磁盘的，但是它是顺序I/O，要比随机I/O快很多。因此Redo log的存在是为了：当我们修改时，写完内存但数据还没有写入磁盘中，此时数据库挂了，我们可以用Redo来进行数据恢复。Redo log顺序I/O，写入速度快，并且文件体积小，恢复速度快。</p><h1 id="bin-log"><a href="#bin-log" class="headerlink" title="bin log"></a>bin log</h1><p>bin log是所有数据库都有的一种日志。和Redo log不同的是，bin log是在事务提交的时候才记录。bin log记录了数据库表结构和表数据的变更，例如update/delete/insert/drop等，他不会记录select语句。对于bin log，我们可以理解为：存储着每条变更的SQL语句，在什么时间、什么事务(事务ID)执行了什么SQL语句。</p><p>bin log主要用来复制和恢复数据，其实这也很好理解，bin log记录着每条改变数据库表结构和数据的语句，那么我们将这些语句再执行一遍，不就可以得到一个一样的数据库了么？</p><h1 id="bin-log和Redo-log"><a href="#bin-log和Redo-log" class="headerlink" title="bin log和Redo log"></a>bin log和Redo log</h1><p>到这里你可能会有疑惑，Redo log和bin log好像很相似，其实它们的区别还是挺大的，我们来看看：</p><h2 id="存储内容"><a href="#存储内容" class="headerlink" title="存储内容"></a><font size="5">存储内容</font></h2><p>前面说过，Redo记录的是磁盘的那一页修改了什么内容，是实际的物理变化。而bin log记录的是什么事务在什么时间执行了什么SQL语句，并不对应着磁盘的位置，是一个逻辑变化</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a><font size="5">功能</font></h2><p>Redo log的作用是为了持久化而生的，写完内存后如果数据库挂了，Redo log能够保证更新的数据能够持久化到磁盘上。而bin log的作用是复制和恢复。还有一点：Redo log存储的是物理数据的变更，如果我们已经将数据刷到了磁盘上，那么Redo log就失效了。</p><h1 id="Redo-log和bin-log写入细节"><a href="#Redo-log和bin-log写入细节" class="headerlink" title="Redo log和bin log写入细节"></a>Redo log和bin log写入细节</h1><p>到这你可能会想，这两种log的写入顺序又是什么样的呢？前面说了，Redo log在事务开始的时候就开始记录变更信息，而bin log在事务提交时才记录。那么现在有一个问题：我写其中某一个log，失败了该怎么办？现在假设我们先写Redo log再写bin log</p><ol><li>如果Redo log失败了，那么我们就会滚这次事务，不再写bin log</li><li>如果Redo log成功了，但是bin log写了一半失败了，此时我们还是会对数据库进行回滚(撤销Redo log的影响)，将无效的bin log删除。</li><li>只有两者都写成功了，事务才算是真正成功了。</li></ol><h1 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h1><p>简单地说：MySQL需要保证Redo log和bin log的数据是一致的，为了保证这种一致性，MySQL使用了两阶段提交</p><ol><li>阶段一<br>InnDB Redo log写入磁盘，事务进入prepare状态</li><li>阶段二<br>bin log写入磁盘，InnoDB事务进入commit状态</li><li>每个bin log的末尾，都会记录一个XID event，标志着事务是否提交成功。也就是说，在恢复时，bin log最后一个XID event之后的内容都应该被清除。</li></ol><h1 id="Undo-log"><a href="#Undo-log" class="headerlink" title="Undo log"></a>Undo log</h1><p>其实Undo log我们在MVCC时就已经介绍过了，它主要有两个作用：回滚和MVCC。前面说过，在数据修改时，不仅记录了Redo log还记录了Undo log。如果因为某些原因导致事务失败或者回滚，可以用Undo log进行回滚。</p><p>Undo log主要存储逻辑日志，比如我现在insert了一条语句，那么Undo log会记录一条delete语句，这很好理解，因为回滚时就是要做相反的操作嘛。Undo log保证了事务地原子性，一个事务要么全部完成要么什么都不做。这个"什么都不做"就是通过Undo log回滚实现的。</p><hr><p>参考文章：<br><a href="https://mp.weixin.qq.com/s/0z6GmUp0Lb1hDUo0EyYiUg" target="_blank" rel="noopener">微信公众号</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 日志 </tag>
            
            <tag> Redo </tag>
            
            <tag> Undo </tag>
            
            <tag> bin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷配置Maven插件方式</title>
      <link href="/2020/03/13/IDEA%E5%BF%AB%E6%8D%B7%E9%85%8D%E7%BD%AEMaven%E6%8F%92%E4%BB%B6%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/03/13/IDEA%E5%BF%AB%E6%8D%B7%E9%85%8D%E7%BD%AEMaven%E6%8F%92%E4%BB%B6%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，使用Maven构建Java Web项目时需要在pom.xml文件中配置jar包坐标以及各种插件，而每次配置插件时都需要做一些大致相同的操作，比较繁琐，因此这里记录一种使用IDEA工具的快捷配置方式。</p><hr><a id="more"></a><h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><ol><li>进入IDEA的设置页面，file-&gt;settings。<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/1.png" alt></li><li>在设置界面的搜索框输入live，就能找到Live Templates设置<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/2.png" alt></li><li>点击+号，选择下面的Template Group，创建一个组<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/3.png" alt></li><li>设置好组的名字后在上面的列表中找到自己创建的组(我这里创建的MyLive)，选中我创建的组后，再点击+号，选择上面的Live Template创建一个模板<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/4.png" alt></li><li>如图，设置模板的名称，和模板的代码内容<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/5.png" alt></li><li>我这里设置的模板名称为jdk1.8，作用在XML文件上(pom.xml文件就是XML形式)<br><img src="/2020/03/13/IDEA快捷配置Maven插件方式/6.png" alt></li><li>这样一来，我们的JDK模板就配置好了。</li></ol><h1 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h1><p>打开pom.xml文件，在<plugins>标签中输入我们之前设置的模板名称(jdk1.8)，会自动弹出之前设置好的配置，直接选择就好。</plugins></p><hr>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门学习</title>
      <link href="/2020/03/12/Redis%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/03/12/Redis%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Redis是一款高性能的NOSQL系列的非关系型数据库。它是一种支持Key-Value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。该数据库使用ANSI C语言编写，支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。今天就对Redis进行一个入门的学习。</p><hr><a id="more"></a><h1 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h1><p>前面说了，Redis是一款非关系型数据库，和传统的关系型数据库不同，它采用key-value的方式存储数据，将数据存储在内存中(适当的时候可以持久化到磁盘上)。和传统的关系型数据库相比，Redis具有以下优点：</p><ol><li>成本低：NOSQL数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>查询速度：NOSQL数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及NOSQL数据库。</li><li>存储数据的格式：NOSQL的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ol><p>相应的，NOSQL系列数据库也有一些缺点</p><ol><li>维护的工具和资料有限，因为NOSQL是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>不同的NOSQL数据库操作不一样，学习和使用成本高。</li><li>不提供关系型数据库对事务的处理(Redis支持事务操作)。</li></ol><h1 id="为什么使用Redis"><a href="#为什么使用Redis" class="headerlink" title="为什么使用Redis"></a>为什么使用Redis</h1><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，因为传统的关系型数据库需要进行磁盘操作，查询速度较慢。NOSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。一般来说，我们将Redis和传统的关系型数据库搭配使用，<font color="red"><b>将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</b></font>。在需要数据库查询时，如果NOSQL里面有，那么就不需要进行磁盘操作只需要从内存读取，这样速度就会快很多。</p><h1 id="Redis简单操作"><a href="#Redis简单操作" class="headerlink" title="Redis简单操作"></a>Redis简单操作</h1><p>Redis是以键值对的形式存储数据，并且Redis的键只能是String类型，但是它的<font color="red"><b>值有5种类型</b></font>：</p><ol><li>String类型</li><li>hash类型</li><li>list类型</li><li>set类型</li><li>sortedset类型</li></ol><p>下面就分别介绍一下这几种类型以及相应的操作</p><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a><font size="5">String类型</font></h2><p>字符串类型是redis中最基本的数据类型，它能存储任何形式的字符串，包括二进制数据。你可以用它存储用户的邮箱、json化的对象甚至是图片。一个字符类型允许存储的最大容量是512M。</p><ol><li><p><b>添加/修改操作</b><br><font color="red"><b>set 键名</b></font>:向数据库种添加键值对。如果键值对不存在，那么添加进去，如果键值对存在，则修改键值对的值</p></li><li><p><b>获取操作</b><br><font color="red"><b>get 键名</b></font>:获取指定键对应的值，如果不存在返回空</p></li><li><p><b>删除操作</b><br><font color="red"><b>del 键名</b></font>:删除指定键对应的值</p></li></ol><h2 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a><font size="5">hash类型</font></h2><p>类似于Java中的hashmap，是一个key+(key-value)的数据结构，对于值为hash类型的键值对，每一个键对应一个hashmap。</p><ol><li><p><b>添加/修改操作</b><br><font color="red"><b>hset 键名 key value</b></font>:向数据库种添加hash值类型的键值对，并向值得hashmap种添加一个键值对。如果该键值对存在则覆盖原来的值</p></li><li><p><b>获取操作</b></p><ul><li><font color="red"><b>hget 键名 key</b></font>:获取指定键值对得值(hashmap)，在从该值中获取指定key得value</li><li><font color="red"><b>hgetall 键名</b></font>:获取该键值对得值(hashmap)，并获取该值中所有的key-value</li></ul></li><li><p><b>删除操作</b><br><font color="red"><b>hdel 键名 key</b></font>:类似的，删除指定键值对中值的指定键值对。</p></li></ol><h2 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a><font size="5">list类型</font></h2><p>该类型可以存储一个有序的字符串列表，允许存储重复元素。常用的操作是向列表两端添加元素或者获得列表的某一个片段。列表类型内部使用双向链表实现，所以向列表两端添加元素的时间复杂度为O(1), 获取越接近两端的元素速度就越快。这意味着即使是一个有几千万个元素的列表，获取头部或尾部的10条记录也是很快的。</p><ol><li><p><b>添加</b></p><ul><li><font color="red"><b>lpush key value</b></font>: 将元素加入列表左表</li><li><font color="red"><b>rpush key value</b></font>：将元素加入列表右边</li></ul></li><li><p><b>获取</b><br><font color="red"><b>lrange 键名 start end</b></font>：范围获取。如果start=0 end=-1，那么表示获取list的所有元素</p></li><li><p><b>删除</b></p><ul><li><font color="red"><b>lpop 键名</b></font>:删除列表最左边的元素，并将元素返回</li><li><font color="red"><b>rpop 键名</b></font>:删除列表最右边的元素，并将元素返回    </li></ul></li></ol><h2 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a><font size="5">set类型</font></h2><p>是一个集合类型，和list类型不同，它不允许存储重复元素。同时集合类型中的数据是无序的。一个集合类型值可以存储至多232-1个数据。集合类型和列表类型的最大的区别是<font color="red"><b>有序性和唯一性</b></font>。集合类型的常用操作是向集合中加入或删除元素、判断某个元素是否存在。由于集合类型在redis内部是使用的值为空的散列表(hash table)，所以这些操作的时间复杂度都是O(1)。</p><ol><li><p><b>存储</b><br><font color="red"><b>sadd 键名 value</b></font>:向指定键值对的值中添加元素</p></li><li><p><b>获取</b><br><font color="red"><b>smembers 键名</b></font>:获取指定键值对的值中set集合的所有元素</p></li><li><p><b>删除</b><br><font color="red"><b>srem 键名 value</b></font>:删除指定键值对中值的set集合的某个元素    </p></li></ol><h2 id="sortedset类型"><a href="#sortedset类型" class="headerlink" title="sortedset类型"></a><font size="5">sortedset类型</font></h2><p>和前面讲的集合类型的区别就是多了有序的功能。在集合类型的基础上，有序集合类型为集合中的每个元素都关联了一个double类型分数，Redis正是通过分数来为集合中的成员进行从小到大的排序。这使得我们不仅可以完成插入、删除和判断元素是否存在等集合类型支持的操作，还能获得分数最高(或最低)的前N个元素、获得指定分数范围内的元素等与分数有关的操作。虽然集合中每个元素都是不同的，但是他们的分数却可以相同。</p><ol><li><p><b>存储</b><br><font color="red"><b>zadd 键名 score value</b></font>:向指定键值对的值的sortde集合中添加一个元素，并为该元素关联一个source</p></li><li><p><b>获取</b><br><font color="red"><b>zrange key start end [withscores]</b></font>:从指定键值对的值的有序集合中获取指定范围内元素，如果start=0，end=-1则获取所有元素。如果加上withscores还可以获取每个值对应的source。</p></li><li><p><b>删除</b><br><font color="red"><b>zrem key value</b></font>:删除指定键值对值得集合中的指定元素。</p></li></ol><h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a><font size="5">通用命令</font></h2><p>下面介绍三个命令对于所有的数据类型通用</p><ol><li>keys * : 查询所有的键</li><li>type key ： 获取键对应的value的类型</li><li>del key：删除指定的key value</li></ol><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><p>前面我们说过，Redis将数据存储在内存中，那我们都知道内存断电后数据会消失，因此Redis还提供了持久化机制。它能够将数据库中的数据持久化到磁盘上，下次启动时重新加载进内存。Redis提供了两种持久化机制：</p><ol><li><b>RBD</b></li><li><b>AOF</b></li></ol><p>下面对这两种持久化机制做一个简单地介绍。</p><h2 id="RBD"><a href="#RBD" class="headerlink" title="RBD"></a><font size="5">RBD</font></h2><p>该方式是Redis的默认方式，不需要进行配置，默认就使用这种机制。RBD方式在一定的间隔时间中，检测key的变化情况，然后持久化数据。这就意味着可能会引起数据的丢失。通过修改redis.windows.conf配置文件中的save字段我们可以设置持久化条件，Redis默认设置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//如果15分钟内至少有一条数据发生改变，则进行持久化</span><br><span class="line">save 900 1</span><br><span class="line"></span><br><span class="line">//如果5分钟内至少有10条记录发生改变，则进行持久化</span><br><span class="line">save 300 10</span><br><span class="line"></span><br><span class="line">//如果1分钟内至少有10000条记录发生改变，则进行持久化</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a><font size="5">AOF</font></h2><p>日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据。我们编辑redis.windwos.conf文件，设置appendonly字段为yes开启AOF持久化。同时AOF下也有三种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always：每一次操作都进行持久化</span><br><span class="line">appendfsync everysec：每隔一秒进行一次持久化(AOF默认方式)</span><br><span class="line">appendfsync no：不进行持久化</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于Redis的入门学习就到这里，Redis还有许许多多的操作，留到后面慢慢学习。另外Redis的一些实现原理，底层结构后续也会慢慢介绍。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> NOSQL </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口和抽象类的区别</title>
      <link href="/2020/03/07/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/03/07/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>最近在复习Java的基础知识为面试做准备，发现对于Java中接口和抽象类的区别还是说不完整。因此这里做一下总结，方便后期回顾。本文基于JDK1.8版本</p><hr><a id="more"></a><h1 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h1><ol><li><p>概念不一样。<font color="red"><b>接口是对动作的抽象，抽象类是对本质的抽象。</b></font>抽象类表示的是，这个对象是什么。接口表示的是，这个对象能做什么。比如，男人，女人，这两个类（如果是类的话……），他们的抽象类是人，说明他们都是人。人可以吃东西，狗也可以吃东西，你可以把“吃东西”定义成一个接口，然后让这些类去实现它。所以，在高级语言上，一个类只能继承一个类（抽象类）(正如人不可能同时是生物和非生物)，但是可以实现多个接口(吃饭接口、走路接口)。</p></li><li><p><font color="red"><b>当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。</b></font>抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为Java中每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度的。</p></li><li><p>语法不一样，这点我会在下面一节着重进行对比</p></li></ol><h1 id="接口和抽象类的语法区别"><a href="#接口和抽象类的语法区别" class="headerlink" title="接口和抽象类的语法区别"></a>接口和抽象类的语法区别</h1><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a><font size="5">抽象类</font></h2><ol><li>类访问控制权限：抽象类的访问控制权限可以是public和default两种。实际上Java中所有的类，要么是public、要么是default(除了内部类，内部类可以使用private和protected)。</li><li>方法访问控制权限<ol><li>抽象方法：JDK1.8后默认是default，可以使用public和protected，不能使用private、static、final等修饰</li><li>非抽象方法：都可以使用，和类没有区别。</li></ol></li><li>成员属性控制权限：和类一样。</li><li>拥有构造方法，但是不能实例化。</li><li>如果子类继承该抽象类，那么该子类要么是抽象类，要么实现父类所有抽象方法。</li></ol><p><font color="red"><b>总结</b></font>：抽象类除了抽象方法不能用private、static、final修饰(这也很好理解，因为这些方法都不能被重写)，不能实例化对象以外，和正常的类没有区别。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a><font size="5">接口</font></h2><ol><li><p>接口访问权限控制：接口默认是default的，也可以使用public，但是不能使用其他访问权限控制</p></li><li><p>方法访问控制权限：</p><ol><li>抽象方法：接口中的抽象方法只能是public abstruct修饰</li><li>静态方法：默认public static修饰。可以在实现类中通过接口名.方法名调用</li><li>默认方法：顾名思义，该方法为default修饰。子类可以重写该方法。(JDK1.8及以后才有)</li><li>私有方法：peivate修饰</li><li>私有静态方法：private static修饰(4和5两个方法在JDK1.9时添加)</li></ol></li><li><p>成员属性控制权限：public static final修饰(事实上可以省略)。在接口中如果定义了属性，那么默认是public常量。</p></li><li><p>一个类可以继承多个接口，接口没有构造方法。</p></li><li><p>一个接口同样可以继承多个接口。</p></li></ol><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a><font size="5">对比</font></h2><p>通过前面的介绍我们可以得出结论：</p><ol><li>除了内部类以外，接口、抽象类、类的访问权限都只能是public和default</li><li>抽象类除了抽象方法有些不同、不能实例化以外，其他方法和普通的类基本一样。</li><li>接口中的属性只能是常量，接口中抽象方法只能是public。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Java基础 </tag>
            
            <tag> 接口 </tag>
            
            <tag> 抽象类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Java实例构造器</title>
      <link href="/2020/03/05/%E8%AF%A6%E8%A7%A3Java%E5%AE%9E%E4%BE%8B%E6%9E%84%E9%80%A0%E5%99%A8/"/>
      <url>/2020/03/05/%E8%AF%A6%E8%A7%A3Java%E5%AE%9E%E4%BE%8B%E6%9E%84%E9%80%A0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>说到构造方法，学习Java的人应该都使用过，通过构造方法我们能得到一个类的实例。但是你真的了解构造方法么？下面我将对构造方法进行一个详细全面的介绍。</p><hr><a id="more"></a><h1 id="构造方法的使用"><a href="#构造方法的使用" class="headerlink" title="构造方法的使用"></a>构造方法的使用</h1><p>在Java中，每个类都必须有构造方法，如果你没有写构造方法，那么编译器会自动添加一个空参数构造方法。但是如果写了构造方法，那么编译器不会自动添加空参构造方法。</p><p>在调用子类构造方法时，如果没有显式的在第一行使用super(...)调用父类构造方法，那么会自动调用父类的空参构造方法。因此我们在编写Java类时，一定要手动写一个空参构造方法(哪怕该方法什么都不执行)。如果不这样做，一旦有类继承了该类，那么子类执行构造方法时有可能会调用父类空参构造方法，此时会报错。</p><hr><h2 id="在构造方法中调用构造方法"><a href="#在构造方法中调用构造方法" class="headerlink" title="在构造方法中调用构造方法"></a><font size="5">在构造方法中调用构造方法</font></h2><ol><li><p><font color="red"><b>调用其他构造器</b></font><br>我们可以在一个构造方法中调用该类的其他构造方法，使用this(…)进行调用，并且该this()语句必须是第一条语句，否则编译器会报错。</p></li><li><p><font color="red"><b>调用父类构造器</b></font><br>前面说过，如果没有显式调用，那么子类构造方法可以自动调用父类的无参构造方法，其实我们也可以使用super(…)显式的调用父类的构造方法。同样的，该语句必须是第一条语句，否则会报错。</p></li><li><p><font color="red"><b>总结</b></font><br>不知道你发现没有，this(…)和super(….)都必须是构造器中的第一行语句。那么这就意味着：如果你要调用该类的其他构造方法，那么就不能显式的调用父类的构造方法，反之亦然。即this(…)和super(…)只能二选一。</p></li><li><p><font color="red"><b>疑问</b></font><br>前面说过，在子类构造方法中如果不显式调用，则会默认调用父类的无参数构造方法。那么我们如果在构造方法中调用了子类其他构造方法，那么此时还会调用父类的无参构造方法么？如果会，两者谁先被调用呢？我们来演示一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class father&#123;</span><br><span class="line">    father() &#123;</span><br><span class="line">        System.out.println(&quot;father&apos;s constructor()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Son extends father&#123;</span><br><span class="line">    int x;</span><br><span class="line"></span><br><span class="line">    Son() &#123;</span><br><span class="line">        this(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Son(int x) &#123;</span><br><span class="line">        System.out.println(&quot;Son&apos;s constructor&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Son son = new Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">Output:</span><br><span class="line">father&apos;s constructor()</span><br><span class="line">Son&apos;s constructor</span><br></pre></td></tr></table></figure></li></ol><p>通过实验可以发现，此时仍会调用父类无参构造方法，并且先于this(…)执行。即：<font color="red"><b>子类构造器在执行的时候一定会最先执行父类的构造方法，如果在子类构造方法中使用了this(…)调用子类的其他构造方法，那么就不能使用super(…)，只能自动地调用父类无参构造方法。</b></font></p><hr><h1 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用"></a>构造方法的作用</h1><h2 id="构造方法执行过程"><a href="#构造方法执行过程" class="headerlink" title="构造方法执行过程"></a><font size="5">构造方法执行过程</font></h2><p>看到这里你可能会觉得奇怪，构造方法不就是创建实例的么？还能有什么作用？如果你这样认为，那就大错特错了。让我们接着往下看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">还是上面的例子，我们创建一个对象</span><br><span class="line">Son son = new Son(1);</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">查看编译后的字节码文件</span><br><span class="line">0: new           #6      // class jvmtest/Son</span><br><span class="line">3: dup</span><br><span class="line">4: iconst_1</span><br><span class="line">5: invokespecial #1      // Method &quot;&lt;init&gt;&quot;:(I)V</span><br><span class="line">8: astore_1</span><br></pre></td></tr></table></figure><p>以上5条指令创建了一个Son实例，来分析一下这5条指令</p><ol><li>通过new指令可以创建出一个空对象(这里的空对象是指实例数据为空，不是null)，该对象除了对象头以外都是初始化值。(参见我的博客<a href="http://www.bytes.xin/2019/09/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%80/" target="_blank" rel="noopener">深入理解JVM虚拟机一</a>) 。此时，创建出来的空对象位于堆中，栈顶保存的是该空对象的引用。</li><li>dup指令复制栈顶内容并压会栈顶，那么此时栈顶和次栈顶都是空对象的引用。</li><li>iconst_1指令将int型常量1压倒栈顶</li><li>此时执行&lt; init&gt;方法，到这里才开始执行构造方法。通过查看元数据得知，该方法需要两个参数：this(隐式传入)和int型变量；因此从栈顶弹出两个值执行构造方法。</li><li>构造方法执行完毕后，才创建出我们想要创建的对象，此时栈顶元素还是对象的引用。</li><li>astore_1指令将栈顶的引用存入局部变量表，到此为止。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>通过上述构造方法的执行过程，可以发现：<font color="red"><b>构造方法的作用仅仅是初始化对象，不负责创建对象，new关键字用来创建对象。并且构造方法只能在new表达式(或其他构造方法)中被调用，这保证了对象的创建和初始化是一起的不能被分开。并且调用构造方法时会自动传入this参数。</b></font></p><hr><h1 id="构造方法是静态方法么"><a href="#构造方法是静态方法么" class="headerlink" title="构造方法是静态方法么"></a>构造方法是静态方法么</h1><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a><font size="5">静态方法</font></h2><p>我们先解释一下什么是静态方法，静态方法有哪些特征</p><ol><li>被static修饰的方法</li><li>静态方法属于类，不属于对象，因此不能被重写</li><li>静态方法中没有this隐式参数。这很好理解，因为静态方法不和对象绑定</li><li>因为不会产生多态，所以静态方法在类加载时就被解析，属于静态绑定。</li><li>调用静态方法时使用invokestatic指令</li></ol><p>对于静态方法的特点大致就这么多，和静态方法相对的就是实例方法，下面来介绍一下实例方法。</p><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a><font size="5">实例方法</font></h2><ol><li>实例方法分为两种：虚方法和非虚方法</li><li>对于final或者private修饰的方法(非虚方法)，无法被重写进而不会产生多态，因此在类加载时被解析，属于静态绑定</li><li>对于虚方法，可能会产生多态，一般需要等到运行时根据调用者的实际类型来选择调用哪个版本的方法，属于运行时绑定</li><li>调用虚方法时使用invokevirtual指令</li><li>调用实例构造器、显式父类实例构造器(super)、final方法和private方法时使用invokespecial指令</li><li>实例方法调用时都会隐式添加this参数</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><font size="5">结论</font></h2><p>实例构造器无法被重写不参与多态，因而可以是静态绑定，从这种意义上可以称实例构造器是”静态的“，但并不能说实例构造器是一个静态方法。前面对静态方法和实例方法的介绍可以得出结论：实例构造器不是静态方法！</p><hr><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>参考书籍：《深入理解JVM虚拟机》<br>参考文章：<a href="https://www.iteye.com/blog/rednaxelafx-652719" target="_blank" rel="noopener">构造方法是静态方法么</a></p>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 构造方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Java的直接引用与符号引用</title>
      <link href="/2020/03/05/%E8%AF%A6%E8%A7%A3Java%E7%9A%84%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%E4%B8%8E%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8/"/>
      <url>/2020/03/05/%E8%AF%A6%E8%A7%A3Java%E7%9A%84%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%E4%B8%8E%E7%AC%A6%E5%8F%B7%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>如果你看过《深入理解JVM虚拟机》，那么你一定对里面的直接引用和符号引用有印象。在很长一段时间，我对这两个概念的理解仅仅停留在一个可以标识目标一个可以找到目标的层面上，对于具体细节一概不知。知道最近看了一篇文章，茅塞顿开，所以特此来记录一下。</p><hr><a id="more"></a><h1 id="书上概念"><a href="#书上概念" class="headerlink" title="书上概念"></a>书上概念</h1><p>下面我先把《深入理解JVM虚拟机中》中的解释贴出来</p><ol><li><b>符号引用</b><br>符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义地定位目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。</li><li><b>直接引用</b><br>直接引用可以是直接指向目标的指针、相对偏移量或一个能间接定位到目标的句柄，直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同地虚拟机翻译出来的直接引用一般不会相同。如果有了直接引用，那么引用的目标必定已经在内存中存在。</li></ol><h1 id="符号引用"><a href="#符号引用" class="headerlink" title="符号引用"></a>符号引用</h1><p>我们先看一下class文件里的”符号引用”。以下面的Java类为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package jvmtest;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public void foo() &#123;</span><br><span class="line">        bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void bar() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出来的class文件为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Classfile /F:/IDEA/Java_Review/out/production/Java_Review/jvmtest/test.class</span><br><span class="line">  Last modified 2020年3月5日; size 397 bytes</span><br><span class="line">  MD5 checksum 87203ab04d5632033698e70476839318</span><br><span class="line">  Compiled from &quot;test.java&quot;</span><br><span class="line">public class jvmtest.test</span><br><span class="line"></span><br><span class="line">  //类信息</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 56</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #3                          // jvmtest/test</span><br><span class="line">  super_class: #4                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 0, methods: 3, attributes: 1</span><br><span class="line">   </span><br><span class="line">//class文件常量池</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #4.#16         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Methodref          #3.#17         // jvmtest/test.bar:()V</span><br><span class="line">   #3 = Class              #18            // jvmtest/test</span><br><span class="line">   #4 = Class              #19            // java/lang/Object</span><br><span class="line">   #5 = Utf8               &lt;init&gt;</span><br><span class="line">   #6 = Utf8               ()V</span><br><span class="line">   #7 = Utf8               Code</span><br><span class="line">   #8 = Utf8               LineNumberTable</span><br><span class="line">   #9 = Utf8               LocalVariableTable</span><br><span class="line">  #10 = Utf8               this</span><br><span class="line">  #11 = Utf8               Ljvmtest/test;</span><br><span class="line">  #12 = Utf8               foo</span><br><span class="line">  #13 = Utf8               bar</span><br><span class="line">  #14 = Utf8               SourceFile</span><br><span class="line">  #15 = Utf8               test.java</span><br><span class="line">  #16 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #17 = NameAndType        #13:#6         // bar:()V</span><br><span class="line">  #18 = Utf8               jvmtest/test</span><br><span class="line">  #19 = Utf8               java/lang/Object</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//无参构造方法</span><br><span class="line">&#123;</span><br><span class="line">  public jvmtest.test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Ljvmtest/test;</span><br><span class="line"></span><br><span class="line">//foo()方法</span><br><span class="line">  public void foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokevirtual #2                  // Method bar:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 4</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       5     0  this   Ljvmtest/test;</span><br><span class="line"></span><br><span class="line">//bar()方法</span><br><span class="line">  public void bar();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=1, args_size=1</span><br><span class="line">         0: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 10: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       1     0  this   Ljvmtest/test;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;test.java&quot;</span><br></pre></td></tr></table></figure><p>可以看到，Class文件中有一段叫做常量池(Class文件常量池)，里面存储的该Class文件里的大部分常量的内容。我们看看foo()方法里的一条字节码指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: invokevirtual #2                  // Method bar:()V</span><br></pre></td></tr></table></figure><p>这在Class文件中的二进制编码为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[B6] [00 02]</span><br></pre></td></tr></table></figure><p>其中0xB6是invokevirtual指令的操作码，后面的0x0002是该指令的操作数，用于指定要调用的目标方法。这个参数是Class文件里常量池的下标，那么去找下标为2的常量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#2 = Methodref          #3.#17         // jvmtest/test.bar:()V</span><br></pre></td></tr></table></figure><p>这在Class文件中的二进制编码为(Class文件使用高位在前)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0A] [00 03] [00 17]</span><br></pre></td></tr></table></figure><p>其中0x0A是CONSTANT_Methodref_info的tag(CONSTANT_Methodref_info其实是一张表，如果不知道可以参考《深入理解JVM虚拟机中》第八章》)，后面的0x0003和0x0011是该表的两项：class_index和name_and_type+index分别引用这另外两个常量池项。其实从名字就可以看出：一个能够找到该方法所属的类，一个能够找到该方法的名字返回值信息。我们顺着这条线索把引用的常量池项都找出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#2 = Methodref          #3.#17         // jvmtest/test.bar:()V</span><br><span class="line">#3 = Class              #18            // jvmtest/test</span><br><span class="line">#18 = Utf8               jvmtest/test</span><br><span class="line">#17 = NameAndType        #13:#6         // bar:()V</span><br><span class="line">#13 = Utf8               bar</span><br><span class="line">#6 = Utf8               ()V</span><br></pre></td></tr></table></figure><p>我们将这几个常量的引用关系化成一棵树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   #2 Methodref jvmtest/test.bar:()V</span><br><span class="line">       /               \</span><br><span class="line">   #3 Class        #17 = NameAndType </span><br><span class="line">       |               /     \</span><br><span class="line">#18 jvmtest/test   #13 bar   #6 ()V</span><br></pre></td></tr></table></figure><p>通过这棵树就可以发现：Class文件中的invokevirtual指令的操作数经过几层间接搜索之后，最后都是又字符串表示的。这就是<font color="red"><b>Class文件里的”符号引用”：带有类型(tag)/结构(如上例所示的符号间的引用层次)的字符串。</b></font></p><hr><h1 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h1><p>我们在来看看JVM中直接引用的样子，在开始介绍本节之前，你要对Java的虚方法表有简单地认识(如果你不了解，《深入理解JVM虚拟机》p257)。在这里不拿hotspot VM举例(较为复杂)，使用Sun的元祖JVM–Sun JDK 1.0.2的32位x86上的做法。<br><b>Sun Class VM</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HObject             ClassObject</span><br><span class="line">                       -4 [ hdr            ]</span><br><span class="line">--&gt; +0 [ obj     ] --&gt; +0 [ ... fields ... ]</span><br><span class="line">    +4 [ methods ] \</span><br><span class="line">                    \         methodtable            ClassClass</span><br><span class="line">                     &gt; +0  [ classdescriptor ] --&gt; +0 [ ... ]</span><br><span class="line">                       +4  [ vtable[0]       ]      methodblock</span><br><span class="line">                       +8  [ vtable[1]       ] --&gt; +0 [ ... ]</span><br><span class="line">                       ... [ vtable...       ]</span><br></pre></td></tr></table></figure><p>该元祖JVM在做类加载时会把Class文件的各个部分分别解析为JVM的内部数据结构。例如类的元数据记录在ClassClass结构体中，每个方法的元数据记录在各自的methodblock结构体中...</p><p>在刚加载好一个类时，Class文件里的Class文件常量池和每个方法的字节码(Code属性)会被原样拷贝到内存中，也就是说仍处于使用符号引用的状态；直到真的要被使用到的时候才会被解析为直接引用(hotspot中一部分方法和字段会在类加载时解析)。</p><p>假定我们要第一次执行到foo()方法里调用bar()方法的那条invokevirtual指令了。此时JVM会发现该指令尚未被解析，所以会先解析一下。</p><ol><li>通过其操作数所记录的常量池下标0x0002，找到常量池项#2，发现该常量池项也尚未被解析（resolve），于是进一步去解析一下。</li><li>通过Methodref所记录的class_index找到类名，进一步找到被调用方法的类的ClassClass结构体；然后通过name_and_type_index找到方法名和方法描述符，到ClassClass结构体上记录的方法列表里找到匹配的那个methodblock；最终把找到的methodblock的指针写回到常量池项#2里。</li></ol><p>也就是说，原本常量池项#2在类加载后的运行时常量池里的内容跟Class文件里的一致，是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[00 03] [00 17]</span><br><span class="line"></span><br><span class="line">（tag被放到了别的地方。小细节：刚加载进来的时候数据仍然是按高位在前字节序存储的）</span><br></pre></td></tr></table></figure><p>而在解析后，假设找到的methodblock *是0x45762300，那么常量池项#2的内容会变为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[00 23 76 45]</span><br><span class="line"></span><br><span class="line">（解析后字节序使用x86原生使用的低位在前字节序（little-endian），为了后续使用方便）</span><br></pre></td></tr></table></figure><p>这样，<font color="red"><b>以后再查询到常量池项#2时，里面就不再是一个符号引用，而是一个能直接找到Java方法元数据的methodblock<em>了。</em></b></font>这里的methodblock就是一个<b>“直接引用”</b>。<br>解析好常量池项#2之后回到invokevirtual指令的解析。<br>回顾一下，在解析前那条指令的内容是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[B6] [00 02]</span><br></pre></td></tr></table></figure><p>而在解析后，这块代码被改写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[D6] [06] [01]</span><br></pre></td></tr></table></figure><p>其中opcode部分<font color="red"><b>从invokevirtual改写为invokevirtual_quick，以表示该指令已经解析完毕。</b></font>原本存储操作数的2字节空间现在分别存了2个1字节信息，第一个是虚方法表的下标（vtable index），第二个是方法的参数个数。这两项信息都由前面解析常量池项#2得到的methodblock*读取而来。<br>也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invokevirtual_quick vtable_index=6, args_size=1</span><br></pre></td></tr></table></figure><p>这里例子里，类test对应在JVM里的虚方法表会是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0]: java.lang.Object.hashCode:()I</span><br><span class="line">[1]: java.lang.Object.equals:(Ljava/lang/Object;)Z</span><br><span class="line">[2]: java.lang.Object.clone:()Ljava/lang/Object;</span><br><span class="line">[3]: java.lang.Object.toString:()Ljava/lang/String;</span><br><span class="line">[4]: java.lang.Object.finalize:()V</span><br><span class="line">[5]: test.foo:()V</span><br><span class="line">[6]: test.bar:()V</span><br></pre></td></tr></table></figure><p>所以JVM在执行invokevirtual_quick要调用test.bar()时，只要顺着对象引用查找到虚方法表，然后从中取出第6项的methodblock*，就可以找到实际应该调用的目标然后调用过去了。</p><p>假如类test还有子类Y，并且Y覆写了bar()方法，那么类Y的虚方法表就会像这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0]: java.lang.Object.hashCode:()I</span><br><span class="line">[1]: java.lang.Object.equals:(Ljava/lang/Object;)Z</span><br><span class="line">[2]: java.lang.Object.clone:()Ljava/lang/Object;</span><br><span class="line">[3]: java.lang.Object.toString:()Ljava/lang/String;</span><br><span class="line">[4]: java.lang.Object.finalize:()V</span><br><span class="line">[5]: test.foo:()V</span><br><span class="line">[6]: Y.bar:()V</span><br></pre></td></tr></table></figure><p>于是通过vtable_index=6就可以找到类Y所实现的bar()方法。所以说在解析/改写后的invokevirtual_quick指令里，虚方法表下标（vtable index）也是一个“直接引用”的表现。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在现在的HotSpot VM里，围绕常量池、invokevirtual的解析（再次强调是resolve）的具体实现方式跟元祖JVM不一样，但是大体的思路还是相通的。由此可见：</p><ol><li>符号引用通常是设计字符串的——用文本形式来表示引用关系。</li><li>直接引用是JVM（或其它运行时环境）所能直接使用的形式。它既可以表现为直接指针（如上面常量池项#2解析为methodblock*），也可能是其它形式（例如invokevirtual_quick指令里的vtable index）。关键点不在于形式是否为“直接指针”，而是在于JVM是否能“直接使用”这种形式的数据。</li></ol><hr><p>本文内容基本全部来自于<br><a href="https://www.zhihu.com/answer/51335493" target="_blank" rel="noopener">知乎回答</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-红黑树</title>
      <link href="/2020/03/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2020/03/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>大家都知道，从JDK1.8开始，HashMap从原来的数组+链表变成了<b>数组+链表+红黑树</b>。不管是面试还是日常应用，HashMap都逃不开，因此我也在很久之前就看过了HashMap的源码，但是看的时候对于其中的红黑树部分真的是一塌糊涂因此就跳过这部分没看。最近复习HashMap源码，决定先学习红黑树，再认真的看一下HashMap。下面就让我们来看看红黑树到底有什么神秘之处吧。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>红黑树是一种自平衡的二叉查找树，是一种高效的查找树。它是由Rudolf Bayer于1972年发明，在当时被称为对称二叉B树(symmetric binary B-trees)。后来，在1978年被 Leo J. Guibas 和 Robert Sedgewick 修改为如今的红黑树。红黑树具有良好的效率，它可在<b>O(logN)</b>时间内完成查找、增加、删除等操作。因此，红黑树的应用很广泛，比如Java中的TreeMap，JDK1.8中的HashMap、C++ STL中的map均是基于红黑树结构实现的。在本文中，只涉及红黑树的插入操作(对于删除中的双黑修复我没整明白)，最后手动实现一颗红黑树作为总结。</p><h1 id="什么是红黑树"><a href="#什么是红黑树" class="headerlink" title="什么是红黑树"></a>什么是红黑树</h1><p>红黑树的每个节点包含四个属性&lt;color,left,right,p&gt;：这四个属性的含义分别是：颜色、指向左子节点的指针、指向右子节点的指针、指向父节点的指针。</p><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a><font size="5">红黑树的性质</font></h2><p>我们看看红黑树有哪些性质：</p><ol><li>节点是红色或黑色。</li><li>根节点是黑色。</li><li>所有叶子都是黑色(叶子是NIL节点)。</li><li>每个红色节点必须有两个黑色的子节点。也就是说，从每个叶子到根的所有路径上<font color="red"><b>不能有两个连续的红色节点。</b></font></li><li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点(简称黑高)。</li><li>每次新插入的节点为红色节点。</li></ol><h2 id="红黑树的最长路径"><a href="#红黑树的最长路径" class="headerlink" title="红黑树的最长路径"></a><font size="5">红黑树的最长路径</font></h2><p>有了上面的几个性质作为限制，即可避免二叉查找树退化成单链表的情况。但是，仅仅避免这种情况还不够，这里还要考虑某个节点到其每个叶子节点路径长度的问题。如果某些路径长度过长，那么，在对这些路径上的及诶单进行增删查操作时，效率也会大大降低。这个时候性质4和性质5用途就凸显了，有了这两个性质作为约束，即可保证<font color="red"><b>任意节点到其每个叶子节点路径最长不会超过最短路径的2倍。</b></font> </p>为什么会出现这样的情况，我们来分析一下原因：<ol><li><p><b>最短路径</b><br>一个节点到其所有子节点的路径什么时候是最短呢？我们通过性质可知，红黑树不允许两个连续红节点，允许连续的黑节点。但是要保证节点到其每个叶子节点的路径上的黑节点个数相同。那么最短路径很容易得到：即如果某节点P到它的某个叶子节点S路径上的所有节点均为黑节点，那么P到其所有叶子节点的最短路径为P-&gt;S。</p></li><li><p><b>最长路径</b><br>分析完了最短路径，我们来看看最长路径。还是前面的例子，如果P到其子节点的最短路径已知(为P-&gt;S)，那么P到其所有所有子节点路径上的黑节点数目就已知了(性质5)。黑节点数量确认了，那么就能够得到最长路径：如果P到其叶子节点N的路径为最长路径，那么N一定是红节点，并且P和N之间的左右节点红黑交替。</p></li><li><p><b>总结</b><br>通过上面的分析我们得知：<font color="red"><b>最短路径为全黑，最长路径为红黑交替</b></font>。因此最长路径不能超过最短路径的2倍。我们来看下面一张图<br><img src="/2020/03/03/数据结构-红黑树/1.jfif" alt> 从图中可以看到：节点M到其所有叶子节点的最短路径为M-&gt;E，其中一条最长路径为M-&gt;Q-&gt;Y-&gt;Z。</p></li></ol><h2 id="为什么新插入节点为红节点"><a href="#为什么新插入节点为红节点" class="headerlink" title="为什么新插入节点为红节点"></a><font size="5">为什么新插入节点为红节点</font></h2><p>不知道在介绍红黑树性质的时候你有没有疑问：为什么新插入的节点是红节点而不是黑节点呢？</p>原因也不难理解。如果插入的节点是黑色，那么这个节点所在路径比其他路径多出一个黑色节点，这个调整起来会比较麻烦（参考红黑树的删除操作，就知道为啥多一个或少一个黑色节点时，调整起来这么麻烦了）。如果插入的节点是红色，此时所有路径上的黑色节点数量不变，仅可能会出现两个连续的红色节点的情况。这种情况下，通过变色和旋转进行调整即可，比之前的简单多了。<h1 id="红黑树的操作"><a href="#红黑树的操作" class="headerlink" title="红黑树的操作"></a>红黑树的操作</h1><p>在这里主要介绍红黑树的两大操作：插入和删除。其实如果这两个操作搞清楚了，那么红黑树也就没问题了。</p><h2 id="旋转和染色"><a href="#旋转和染色" class="headerlink" title="旋转和染色"></a><font size="5">旋转和染色</font></h2><p>在介绍插入删除操作之前，先介绍一下和红黑树有关的三个基本操作，对红黑树的插入和删除大多离不开这三个基本操作。在这之前，如果你知道AVL树，那么你要注意，这里的左旋和右旋与AVL树里的LR调整、RL调整相似却又不同。一定要注意区分。</p><ol><li><b>左旋</b></li><li><b>右旋</b></li><li><b>染色</b></li></ol><p>染色很简单，就是修改节点的color属性。旋转操作分为左旋和右旋，<font color="red"><b>左旋是将某个节点旋转为其右孩子的左孩子，而右旋是节点旋转为其左孩子的右孩子。</b></font>乍一听，有点儿绕口。我们来看图：<br><img src="/2020/03/03/数据结构-红黑树/2.jfif" alt> 该图包含对M进行右旋和对E进行左旋操作。具体的左旋右旋过程如下图所示：</p><p><img src="/2020/03/03/数据结构-红黑树/1.png" alt><br><img src="/2020/03/03/数据结构-红黑树/2.png" alt> </p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a><font size="5">插入</font></h2><p>红黑树的插入过程和二叉查找树插入过程基本类似。不同的地方在于：<b>红黑树插入新节点后，需要进行调整，以满足红黑树的性质。</b>接下来，将分析插入红色节点后红黑树的情况。这里假设要插入的节点为 N，N的父节点为P，祖父节点为G，叔叔节点为U。插入红色节点后，会出现5种情况，分别如下：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a><font size="5">情况一</font></h3><p>插入的新节点N是红黑树的根节点。这种情况下：<font color="red"><b>我们把节点N的颜色由红色变为黑色</b></font>。性质2(根是黑色)被满足。同时N被染成黑色后，红黑树所有路径上的黑色节点数量增加一个，性质5(从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点)仍然被满足。<br><img src="/2020/03/03/数据结构-红黑树/4.jfif" alt> </p><h3 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a><font size="5">情况二</font></h3><p>要插入节点N的父节点是黑色。这种情况下，性质4(每个红色节点必须有两个黑色的子节点)和性质5没有受到影响，不需要调整。<br><img src="/2020/03/03/数据结构-红黑树/5.jfif" alt> </p><h3 id="染色型"><a href="#染色型" class="headerlink" title="染色型"></a><font size="5">染色型</font></h3><p><b>插入节点N的父节点是红色(节点P为红色，P的父节点必然为黑色)，叔叔节点U也是红色。</b>由于P和N均为红色，性质4被打破，此时需要进行调整。这种情况下，<font color="red"><b>先将P和U的颜色染成黑色，再将G的颜色染成红色。</b></font>此时经过G的路径上的黑色节点数量不变，性质5仍然满足。但需要注意的是：<b>G被染成红色后，可能会和它的父节点形成连续的红色节点，此时需要递归向上调整。</b><br><img src="/2020/03/03/数据结构-红黑树/6.jfif" alt> </p><h3 id="左左型"><a href="#左左型" class="headerlink" title="左左型"></a><font size="5">左左型</font></h3><p><b>N的父节点P为红色，叔叔节点U不存在或者为黑色。节点N是P的左孩子，且节点P是G的左孩子。</b>我们称这种情况为<font color="red"><b>左左型</b></font><br><img src="/2020/03/03/数据结构-红黑树/4.png" alt> 如图：插入节点N为65，父节点P为66，祖父节点G为69，叔叔节点U不存在。此时<font color="red"><b>我们对祖父节点G右旋，并交换G和P的颜色</b></font></p><h3 id="左右型"><a href="#左右型" class="headerlink" title="左右型"></a><font size="5">左右型</font></h3><p><b>N的父节点P为红色，叔叔节点U不存在或者为黑色。节点N是P的右孩子，且节点P是G的左孩子。</b>我们称这种情况为<font color="red"><b>左右型</b></font><br><img src="/2020/03/03/数据结构-红黑树/3.png" alt> 如图：各个节点对应情况：N-67 P-66 G-69 U-null。先将父节点左旋，转换为<font color="red"><b>左左型</b></font>。然后按照左左型处理</p><h3 id="右右型"><a href="#右右型" class="headerlink" title="右右型"></a><font size="5">右右型</font></h3><p>和左左型镜象对称：<b>N的父节点P为红色，叔叔节点U不存在或者为黑色。节点N是P的右孩子，且节点P是G的右孩子。</b>我们称这种情况为<font color="red"><b>右右型</b></font><br><img src="/2020/03/03/数据结构-红黑树/5.png" alt> 如图：插入节点N为70，父节点P为69，祖父节点G为66，叔叔节点U为null。此时<font color="red"><b>我们对祖父节点G左旋，并交换G和P颜色</b></font></p><h3 id="右左型"><a href="#右左型" class="headerlink" title="右左型"></a><font size="5">右左型</font></h3><p>同样的，和左右型镜像对称：<b>N的父节点P为红色，叔叔节点U不存在或者为黑色。节点N是P的左孩子，且节点P是G的右孩子。</b>我们称这种情况为<font color="red"><b>右左型</b></font><br><img src="/2020/03/03/数据结构-红黑树/6.png" alt> 如图：<font color="red"><b>我们先对P右旋，转换成右右型处理</b></font></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们发现，前两种情况比较简单。后面四种情况其实最终都转换成左左和右右两种类型处理。可以看到红黑树的插入操作还是比较简单的。</p><h1 id="代码实现红黑树插入"><a href="#代码实现红黑树插入" class="headerlink" title="代码实现红黑树插入"></a>代码实现红黑树插入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line">public class RBTree&lt;T extends Comparable&lt;? super T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    //静态内部类表示树节点</span><br><span class="line">    private static class RBNode&lt;T extends Comparable&lt;? super T&gt;&gt; &#123;</span><br><span class="line">        T val;</span><br><span class="line">        RBNode&lt;T&gt; parent;</span><br><span class="line">        RBNode&lt;T&gt; left;</span><br><span class="line">        RBNode&lt;T&gt; right;</span><br><span class="line">        //表明节点的颜色(红色为true)</span><br><span class="line">        boolean color;</span><br><span class="line"></span><br><span class="line">        public RBNode() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public RBNode(T val) &#123;</span><br><span class="line">            this(val, null, null, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //创建出来的节点默认为红色</span><br><span class="line">        public RBNode(T val, RBNode&lt;T&gt; parent, RBNode&lt;T&gt; left, RBNode&lt;T&gt; right) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">            this.parent = parent;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">            this.color = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //根节点</span><br><span class="line">    private RBNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对节点t左旋</span><br><span class="line">     *</span><br><span class="line">     * @param t</span><br><span class="line">     */</span><br><span class="line">    private void LeftRotate(RBNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            RBNode&lt;T&gt; right = t.right;</span><br><span class="line">            RBNode&lt;T&gt; parent = t.parent;</span><br><span class="line"></span><br><span class="line">            //将right的左子节点赋给t的右子节点</span><br><span class="line">            t.right = right.left;</span><br><span class="line">            if (t.right != null) &#123;</span><br><span class="line">                t.right.parent = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //将t变为right的左子节点</span><br><span class="line">            right.left = t;</span><br><span class="line">            t.parent = right;</span><br><span class="line"></span><br><span class="line">            right.parent = parent;</span><br><span class="line">            if (parent == null) &#123;</span><br><span class="line">                root = right;</span><br><span class="line">            &#125; else if (parent.left == t) &#123;</span><br><span class="line">                parent.left = right;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                parent.right = right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对节点t右旋</span><br><span class="line">     *</span><br><span class="line">     * @param t</span><br><span class="line">     */</span><br><span class="line">    private void RightRotate(RBNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            RBNode&lt;T&gt; left = t.left;</span><br><span class="line">            RBNode&lt;T&gt; parent = t.parent;</span><br><span class="line">            t.left = left.right;</span><br><span class="line">            if (left.right != null) &#123;</span><br><span class="line">                left.right.parent = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            left.right = t;</span><br><span class="line">            t.parent = left;</span><br><span class="line">            left.parent = parent;</span><br><span class="line">            if (parent == null) &#123;</span><br><span class="line">                root = left;</span><br><span class="line">            &#125; else if (parent.left == t) &#123;</span><br><span class="line">                parent.left = left;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                parent.right = left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前当前节点的父节点</span><br><span class="line">     *</span><br><span class="line">     * @param t</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private RBNode&lt;T&gt; getParent(RBNode&lt;T&gt; t) &#123;</span><br><span class="line">        return (t == null) ? null : t.parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前节点的祖父节点</span><br><span class="line">     *</span><br><span class="line">     * @param t</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private RBNode&lt;T&gt; getGrandfather(RBNode&lt;T&gt; t) &#123;</span><br><span class="line">        RBNode&lt;T&gt; father;</span><br><span class="line">        if ((father = getParent(t)) != null) &#123;</span><br><span class="line">            return getParent(getParent(t));</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 插入节点</span><br><span class="line">     *</span><br><span class="line">     * @param val</span><br><span class="line">     */</span><br><span class="line">    public void insert(T val) &#123;</span><br><span class="line">        //如果插入值为null，抛出异常</span><br><span class="line">        if (val == null) &#123;</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        &#125;</span><br><span class="line">        //如果当前RBTree为空，那么插入根节点</span><br><span class="line">        //颜色为黑，直接返回</span><br><span class="line">        if (root == null) &#123;</span><br><span class="line">            root = new RBNode&lt;&gt;(val);</span><br><span class="line">            root.color = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //和二叉搜索树插入原理一样，找到合适的插入节点</span><br><span class="line">        int res;</span><br><span class="line">        RBNode&lt;T&gt; temp = root;</span><br><span class="line">        RBNode&lt;T&gt; current;</span><br><span class="line">        res = val.compareTo(root.val);</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            current = root.left;</span><br><span class="line">        &#125; else if (res &gt; 0) &#123;</span><br><span class="line">            current = root.right;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (current != null) &#123;</span><br><span class="line">            temp = current;</span><br><span class="line">            res = val.compareTo(current.val);</span><br><span class="line">            if (res &lt; 0) &#123;</span><br><span class="line">                current = current.left;</span><br><span class="line">            &#125; else if (res &gt; 0) &#123;</span><br><span class="line">                current = current.right;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RBNode&lt;T&gt; newNode = new RBNode&lt;&gt;(val, temp, null, null);</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            temp.left = newNode;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp.right = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //插入节点后，对RBTree进行调整</span><br><span class="line">        balance(newNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void balance(RBNode&lt;T&gt; t) &#123;</span><br><span class="line">        //如果当前节点不为空，且不为根节点</span><br><span class="line">        //并且当前节点的父节点为红色，这时候需要调整</span><br><span class="line">        while (t != null &amp;&amp; t != root &amp;&amp; t.parent.color) &#123;</span><br><span class="line">            //如果满足while条件，那么当前节点一定有祖父节点</span><br><span class="line"></span><br><span class="line">            //当前节点的父节点和祖父节点</span><br><span class="line">            RBNode&lt;T&gt; grandfather = getGrandfather(t);</span><br><span class="line">            RBNode&lt;T&gt; father = getParent(t);</span><br><span class="line"></span><br><span class="line">            //t的父节点是祖父节点的左子节点</span><br><span class="line">            if (grandfather.left == father) &#123;</span><br><span class="line">                //叔叔节点</span><br><span class="line">                RBNode&lt;T&gt; uncle = grandfather.right;</span><br><span class="line"></span><br><span class="line">                //如果叔叔节点存在且为红节点==&gt;直接变色</span><br><span class="line">                if (uncle != null &amp;&amp; uncle.color) &#123;</span><br><span class="line">                    grandfather.color = true;</span><br><span class="line">                    uncle.color = false;</span><br><span class="line">                    father.color = false;</span><br><span class="line">                    //继续向上调整</span><br><span class="line">                    t = grandfather;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //叔叔节点为空或为黑色==&gt;旋转+变色</span><br><span class="line">                else &#123;</span><br><span class="line">                    //三角形==&gt;左旋转换为直线型</span><br><span class="line">                    if (t == father.right) &#123;</span><br><span class="line">                        t = father;</span><br><span class="line">                        LeftRotate(t);//执行完毕后，t仍为直线型中最低的节点</span><br><span class="line">                    &#125;</span><br><span class="line">                    grandfather.color = true;</span><br><span class="line">                    t.parent.color = false;</span><br><span class="line">                    //对祖父节点右旋，完成调整</span><br><span class="line">                    RightRotate(grandfather);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //当前节点的父节点是祖父节点的右子节点</span><br><span class="line">            else &#123;</span><br><span class="line">                //叔叔节点</span><br><span class="line">                RBNode&lt;T&gt; uncle = grandfather.left;</span><br><span class="line"></span><br><span class="line">                //如果叔叔节点为红色==&gt;变色</span><br><span class="line">                if (uncle != null &amp;&amp; uncle.color) &#123;</span><br><span class="line">                    father.color = false;</span><br><span class="line">                    uncle.color = false;</span><br><span class="line">                    grandfather.color = true;</span><br><span class="line">                    //继续向上调整</span><br><span class="line">                    t = grandfather;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //叔叔节点为空或者是黑色</span><br><span class="line">                else &#123;</span><br><span class="line">                    //三角形，通过左旋转换为直线型</span><br><span class="line">                    if (father.left == t) &#123;</span><br><span class="line">                        t = father;</span><br><span class="line">                        RightRotate(t);//执行完毕后，t仍为直线型中最低的节点</span><br><span class="line">                    &#125;</span><br><span class="line">                    //直线型==&gt;右旋+变色</span><br><span class="line">                    else &#123;</span><br><span class="line">                        grandfather.color = true;</span><br><span class="line">                        t.parent.color = false;</span><br><span class="line">                        //调整完毕</span><br><span class="line">                        LeftRotate(grandfather);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //根接待你永远为黑色</span><br><span class="line">        root.color = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>红黑树的查询、遍历等操作和二叉搜索树完全一样，这里就不做赘述。上述代码亲测保证正确性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>本文参考一下文章：<br><a href="https://www.cnblogs.com/LiaHon/p/11203229.html" target="_blank" rel="noopener">关于红黑树(R-B tree)原理，看这篇如何</a><br><a href="https://segmentfault.com/a/1190000012728513" target="_blank" rel="noopener">红黑树详细分析，看了都说好</a><br><a href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html" target="_blank" rel="noopener">动画演示红黑树操作</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 红黑树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么String是final的</title>
      <link href="/2020/03/03/%E4%B8%BA%E4%BB%80%E4%B9%88String%E6%98%AFfinal%E7%9A%84/"/>
      <url>/2020/03/03/%E4%B8%BA%E4%BB%80%E4%B9%88String%E6%98%AFfinal%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>在实际开发中，开发者会用到大量的字符串，可以说我们无时无刻不在与字符串打交道。我们都知道String类是final修饰的，这意味着它不可被继承。但是如题：为什么String是final的？下面我们就探讨一下这个问题(基于JDK1.8版本)。</p><hr><a id="more"></a><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>Java的关键字final通常指的是”这是无法改变的”，不想做出改变可能出于两种理由：<font color="red"><b>设计和效率</b>。final关键字可以修饰类、方法和数据。下面分别介绍final这三种用法各有什么作用</font></p><h2 id="修饰数据"><a href="#修饰数据" class="headerlink" title="修饰数据"></a><font size="5">修饰数据</font></h2><ol><li><p><b>final修饰基本类型</b><br>当final修饰一个基本类型数据时，这意味着该数据的值是不能被改变的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//一个编译时常量，在编译时可以知道值</span><br><span class="line">public final int c=9</span><br><span class="line"></span><br><span class="line">//不是编译时常量</span><br><span class="line">public static Random rand=new Random(47)</span><br><span class="line">public final int c=rand.nextInt(29)</span><br></pre></td></tr></table></figure></li><li><p><b>final修饰引用类型</b><br>当final修饰一个引用类型时，这意味着该引用不可变，但是引用指向的实例本身数据可以改变。</p></li><li><p><b>final修饰类的成员属性</b><br>当final修饰类的成员属性时，必须在定义处赋值或在构造器中用表达式进行赋值。要确保该成员属性在使用前必须被初始化。</p></li><li><p><b>final修饰参数</b><br>Java允许参数列表中以声明的方式指明参数未final，这在向匿名内部类传递数据时很有用，这里不是重点。</p></li></ol><h2 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a><font size="5">修饰方法</font></h2><p>Java中使用final方法的原因是处于设计的考虑：把一个方法锁定，防止任何继承类修改它的含义。即确保在继承中方法的行为不变，不会被子类重写。</p><h2 id="final类"><a href="#final类" class="headerlink" title="final类"></a><font size="5">final类</font></h2><p>如果一个类被定义为final，这意味着不能被继承。同时，这个类中所有的方法被隐式的指明为final方法，如果该类无法被继承，那么该类的方法自然也就不能被重写。</p><h1 id="关于String类"><a href="#关于String类" class="headerlink" title="关于String类"></a>关于String类</h1><p>简单地介绍了一下final关键字，下面我们就来看看String类。<br><img src="/2020/03/03/为什么String是final的/1.png" alt> 如图所示，String中用于保存数据的char数组也是final修饰的，那么这么做到底是什么原因？</p><p>前面说过，final类意味着不可被继承，String类用final修饰是设计人员不希望客户端程序员继承String类并有可能重写其中的方法。使用String的最佳实践应该是关联或依赖而不是继承。String被定义为final主要从两个方面来考虑：<font color="red"><b>安全和性能</b></font></p><h2 id="final修饰char数组"><a href="#final修饰char数组" class="headerlink" title="final修饰char数组"></a><font size="5">final修饰char数组</font></h2><p>通过上面图我们可以看到，不仅String类被定义为final，该类的成员属性–char类型的数组也被定义为final。我们先说一说这个final char[]。<br>我们在日常使用中，会有大量的字符串被轻易创建出来，这就涉及到一个很严重的问题：<font color="red"><b>性能的开销</b></font>。我们知道分配给JVM的内存是有限的，如果不加节制的创建字符串对象，那么弊端显而易见：<font color="red"><b>内存迅速被占满，程序执行缓慢</b></font>。于是Java设计者想到了一个非常好的解决方法：<font color="red"><b>共享字符串</b></font>。共享字符串对象的方法是将字符串对象放到JVM堆中(之前是在方法区)的字符串常量池中。不同的类、不同的方法甚至是不同的线程，可以使用同一个字符串，这样极大的降低了内存的损耗，提高了程序的运行效率。</p><p>因此我们说：<font color="red"><b>字符串共享是解决内存损耗以及庞大的性能开销的必然选择</b></font>。说了这么多，我们还没有解释为什么char数组要用final修饰。用final修饰的原因来自于字符串带来的问题：<font color="red"><b>安全性问题</b></font>。这里的安全性指的是线程安全性。</p><p>现在我们已经确定了一个前提：<b>字符串共享</b>。但是共享的问题在于：<b>不同的线程可能会修改这个共享对象。</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如：thread_1正在循环一个List，每个元素和&quot;abc进行比较&quot;</span><br><span class="line">同时thread_2也在使用&quot;abc&quot;这个对象，如果thread_2改变了这个共享字符串</span><br><span class="line">那么这将会造成thread_1的结果不可预测</span><br></pre></td></tr></table></figure><p>并且通过查看String源码发现，String中的方法都避免了对char数组中的值进行改变，基本都是通过复制生成一个新数组然后返回一个新的String对象，这种做法保证了一个String对象一旦构造出来，那么它保存在char数组中的值就不会发生变化。保证了线程安全性</p><h2 id="final修饰String类"><a href="#final修饰String类" class="headerlink" title="final修饰String类"></a><font size="5">final修饰String类</font></h2><p>说完了final修饰char数组，现在来说一下为什么还要用final修饰类。在这里我也从安全性和性能两方面来说明</p><ol><li><b>安全性</b><br>前面一节说了，为了保证安全性，String内部的方法全都避免了对char数组进行修改的操作，但是如果String可以被继承，那么就意味着它的方法可以被子类重写。这太危险了，因为使用者完全可以在重写的方法中对char数组进行修改。之所以用final修饰String，是为了表明这个类是不可被继承的。确保使用使用String对象的代码是绝对安全的。</li><li><b>性能</b><br>我们知道，多态是Java的三大特性之一。虚函数是实现多态的基础，什么是<b>虚函数</b>：可以定义一个父类的指针，指向一个子类的对象，当通过父类指针调用函数时，可以在运行时决定应该调用父类函数还是子类函数。大致过程是这样的：当通过父类指针调用一个方法时，JVM会在<b>虚函数表</b>中查找并判断究竟应该调用父类方法还是子类方法，甚至是调用哪个子类的方法。在大量使用字符串的情况下，会影响性能。(虚函数表相关知识不做赘述，《深入理解JVM虚拟机》P257)</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>用final修饰String和其内部保存数据的char数组，并且String内部的所有修改字符串的方法都会返回一个新的String而不是在原来的char数组上进行修改。这些设计保证了：<font color="red"><b>一个String实例一旦创建，就不可被改变。</b></font>一个不可变的对象一定是线程安全的。</p><ol><li>性能方面：实现了字符串共享(常量池)，减少内存开销。避免了频繁创建和回收字符串带来的时间开销。</li><li>安全方面：String类不可被继承，确保了不会产生子类，防止因多态带来了安全隐患；并且还避免了查找虚函数表的时间开销。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解String.intern()方法</title>
      <link href="/2020/03/02/%E8%AF%A6%E8%A7%A3String-intern-%E6%96%B9%E6%B3%95/"/>
      <url>/2020/03/02/%E8%AF%A6%E8%A7%A3String-intern-%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近又重新回顾了一下String的源码。对于其中的interrn()方法还是有点疑惑，因此特意上网再次查了一番，在这里做一下记录方便日后回顾。下面主要介绍一下String.intern()方法。这个方法还是非常有意思的，我们来看一看</p><hr><a id="more"></a><h1 id="到底有几个对象"><a href="#到底有几个对象" class="headerlink" title="到底有几个对象"></a>到底有几个对象</h1><p>我们来看下面几条语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. String str1=new String(&quot;Think In Java&quot;);</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">2. String str2=&quot;我爱学习&quot;;</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">3. String str3=&quot;a&quot;+&quot;b&quot;+&quot;c&quot;+&quot;d&quot;;</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">4. String str4=new String(&quot;a&quot;)+&quot;b&quot;;</span><br></pre></td></tr></table></figure><p>你知道这些语句到底创建了几个对象么？我们来分析一下</p><ol><li><p><font color="red"><b>String str1=new String(“Think In Java”);</b></font><br>分情况而定：</p><ul><li>如果常量池中没有”Think In Java”，那么会创建两个对象，一个位于常量池，一个位于堆中；并且str1指向堆中的实例。此时创建了两个对象</li><li>如果常量池已经存在了该字符串，那么只在堆中创建一个实例，str1指向堆中。此时创建了一个对象</li></ul></li><li><p><font color="red"><b>String str2=”我爱学习”;</b></font><br>一个对象，当使用””形式创建String实例时，会在字符串常量池中添加该实例，并且str2指向常量池。</p></li><li><p><font color="red"><b>String str3=”a”+”b”+”c”+”d”;</b></font><br>一个对象。赋值符号右边的”a”、”b”、”c”、”d”、”e”都是常量。对于常量，编译时就直接存储它们的字面值而不是它们的引用，即在编译时就直接讲它们连接的结果提取出来变成了”abcde”。该语句在class文件中就相当于String s = “abcde”<br>我们来看看字节码验证一下：<br><img src="/2020/03/02/详解String-intern-方法/1.png" alt> 可以看到，常量池中只有一个字符串常量，那就是”abcde”。</p></li><li><p><font color="red"><b>String str4=new String(“a”)+”b”;</b></font><br>一共创建了5个对象：其中”a”和”b”放在常量池中、还有一个”a”的实例在堆中、另外创建了一个StringBuilder对象，调用它的append()方法将字符串拼接起来，然后调用toString()方法生成一个新的字符串实例”ab”放在堆中，因此一共是5个对象。但是在JDK9之后情况不一样了(通过字节码发现的，此时没有创建StringBuilder实例，这里我也不清楚具体情况)。</p></li></ol><h1 id="关于intern-方法"><a href="#关于intern-方法" class="headerlink" title="关于intern()方法"></a>关于intern()方法</h1><p>因为该方法在JDK1.7前后发生了变化，因此在本节我分不同版本的JDK进行介绍。</p><h2 id="JDK1-7之前"><a href="#JDK1-7之前" class="headerlink" title="JDK1.7之前"></a><font size="5">JDK1.7之前</font></h2><p>我们看下面两条语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String ps3 = new String(&quot;Something&quot;);</span><br><span class="line">String ps4 = ps3.intern();</span><br><span class="line">System.out.println(ps3==ps4);</span><br><span class="line"></span><br><span class="line">===============</span><br><span class="line">Output:</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>我们来分析一下原因：</p><ol><li>首先第一句分别在常量池和堆上创建了两个实例”Something”，并且ps3指向堆中实例</li><li>我们调用ps3.intern方法时，会这样做：首先检查常量池中是否有”Something”实例<ol><li>如果有，那么直接返回常量池中该实例的引用</li><li>如果没有，则在常量池创建该实例，然后返回常量池中该实例的引用</li><li>在本例中，常量池中存在”Something”，因此，直接返回引用，此时ps4指向常量池中的”Something”</li></ol></li></ol><p><b>结论</b>：在JDK1.7之前，调用intern方法时，会先检查常量池中是否存在该实例(调用者的实例)。如果存在，那么直接返回对常量池中该实例的引用；否则，现在常量池中创建该实例，然后再返回常量池中该实例的引用。</p><h2 id="JDK1-7之后"><a href="#JDK1-7之后" class="headerlink" title="JDK1.7之后"></a><font size="5">JDK1.7之后</font></h2><p>我们来看下面语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String str1 = new String(&quot;1&quot;)+new String(&quot;2&quot;);</span><br><span class="line">String str2 = &quot;12&quot;;</span><br><span class="line">str1.intern();</span><br><span class="line">System.out.println(str1==str2);</span><br><span class="line"></span><br><span class="line">Output:false</span><br><span class="line"></span><br><span class="line">==========================</span><br><span class="line">String str1 = new String(&quot;1&quot;)+new String(&quot;2&quot;);</span><br><span class="line">str1.intern();</span><br><span class="line">String str2 = &quot;12&quot;;</span><br><span class="line">System.out.println(str1==str2);</span><br><span class="line"></span><br><span class="line">Output:false</span><br></pre></td></tr></table></figure><p>我们看到，上面两个演示，唯一的区别在于intern()方法执行的顺序不同，得到的结果也不同，这是为什么呢？我们来逐个分析</p><ol><li><p>演示一</p><ol><li>先不考虑str1的创建到底创建了几个对象，有一点很明确，此时常量池中没有”12”，str1指向堆中”12”实例</li><li>创建str2后，常量池中存在”12”实例，并且str2指向该实例</li><li>此时由于常量池中已经存在”12”，因此什么也不做，直接返回常量池中该实例的引用</li><li>此时str1指向堆中，str2指向常量池中，因此返回false</li></ol></li><li><p>演示二</p><ol><li>这条语句和演示一一样，此时常量池中没有”12”，str1指向堆中实例</li><li>这里很关键，调用instern()时，发现常量池中没有”12”，这时候做法和JDK1.7之前不同：它将堆中”12”的引用放到常量池中(不是在常量池中创建一个实例了)。</li><li>由于常量池中已经存在”12”(确切的说是存在指向”12”的引用)，所以直接返回该引用。</li><li>通过第三步可以发现，此时str1和str2实际上指向同一个对象，即位于堆中的”12”实例。</li></ol></li></ol><p><b>总结</b>：在JDK1.7之后调用instern()方法，会先检查常量池中是否存在该实例(调用者的实例)。如果存在，那么直接返回对常量池中该实例的引用；否则，而是生成一个指向堆中该对象的引用在常量池中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>jdk1.7之前，如果常量池中存在”12”字符串，则返回常量池中”12”字符串的引用；否则，就将”12”字符串添加到常量池，并返回常量池中”12”字符串的引用。</li><li>jdk1.7及之后版本，如果常量池中存在”12”字符串，则返回常量池中”12”字符串的引用(如果常量池中存的是”12”字符串的引用，则返回该引用)。否则，就将Java堆中”12”字符串的引用添加到常量中，并返回该引用。</li></ol><hr><p>参考文章：<br><a href="https://blog.csdn.net/qq_41797857/article/details/93374654" target="_blank" rel="noopener">java String的intern方法</a><br><a href="https://www.liangzl.com/get-article-detail-121715.html" target="_blank" rel="noopener">java.lang.String中intern方法的作用</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 面试 </tag>
            
            <tag> String类 </tag>
            
            <tag> interrn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈MySQL索引使用</title>
      <link href="/2020/03/01/%E6%B5%85%E8%B0%88MySQL%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/01/%E6%B5%85%E8%B0%88MySQL%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在前面一篇我们对MySQL InnoDB/MyISAM 存储引擎索引的实现原理进行了简单的介绍。今天我们就来实际的介绍一下MySQL中索引的种类、不同的索引如何创建使用以及如何让索引发挥更大的作用(优化策略)。本文所有实验演示全部基于Win10环境下MySQL5.5版本(InnoDB)。</p><hr><a id="more"></a><h1 id="MySQL索引的分类"><a href="#MySQL索引的分类" class="headerlink" title="MySQL索引的分类"></a>MySQL索引的分类</h1><p>索引是在存储引擎中实现的，也就是说不同的存储引擎，会使用不同的索引。MyISAM和InnoDB存储引擎只支持BTREE索引，也就是说默认使用BTREE(虽然说是BTree，但实际上使用的是B+Tree结构，这点要注意)。总体来说，MySQL中索引分为一下几种：</p><ol><li><b>普通索引</b><br>最简单的索引，对索引列没有任何要求</li><li><b>唯一索引</b><br>该索引要求索引列必须唯一，但索引列可以存在空值</li><li><b>主键索引</b><br>顾名思义，在主键列上的索引，要求非空且唯一</li><li><b>组合索引</b><br>指多个字段上创建的索引</li><li><b>全文索引</b><br>全文索引，只有在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引</li><li><b>空间索引(了解)</b></li></ol><p>MySQL中的索引大概就是这些，其中<font color="red"><b>只有主键索引是聚簇索引</b></font>。在介绍索引的创建和使用时主要介绍前四种索引。</p><h1 id="MySQL索引的创建和删除"><a href="#MySQL索引的创建和删除" class="headerlink" title="MySQL索引的创建和删除"></a>MySQL索引的创建和删除</h1><p>其实对于不同的索引，创建的方式大同小异，创建的时间也分为几种：创建表时直接创建索引，创建表后添加索引以及删除索引。下面我们创建Index_test表，并以Index_text表为例进行演示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Index_test(</span><br><span class="line">    ID INT PRIMARY KEY,</span><br><span class="line">    name VARCHAR(16) NOT NULL,</span><br><span class="line">    count INT</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在介绍如何创建索引之前，先看一条SQL语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEX FROM 表名;</span><br></pre></td></tr></table></figure><p>该SQL语句能够查看表中已创建的所有索引。介绍这条语句是为了方便我们在测试时能够随时查看索引创建情况。</p><h2 id="CREATE方式创建"><a href="#CREATE方式创建" class="headerlink" title="CREATE方式创建"></a><font sise="5">CREATE方式创建</font></h2><p>这是最直接的创建方式，用于表创建之后添加索引，格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX [索引名称]</span><br><span class="line">    ON 表名(字段名) [USING 索引方法]；</span><br></pre></td></tr></table></figure><p>我们解释一下各个字段含义</p><ol><li><b>UNIQUE</b>:表示该索引是<b>唯一索引</b>。</li><li><b>FULLTEXT</b>:表示该索引是<b>全文索引</b>。</li><li><b>SPATIAL</b>:表示该索引是<b>空间索引</b>。</li><li>MySQL默认的索引方法为B+Tree。并且InnoDB和MyISAM也只能用B+Tree。</li></ol><ul><li><b>在count列上创建普通索引</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_count </span><br><span class="line">    ON Index_test(count);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/03/01/浅谈MySQL索引使用/1.png" alt><br>如图所示，可以看到我们创建的索引。其Non_unique=1，说明不是唯一的；其NULL=YES，说明可以有空值。</p><ul><li><b>在count列上创建非空索引</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们先将count列上原来的索引删除(删除语句后面说)</span><br><span class="line">CREATE UNIQUE INDEX index_count </span><br><span class="line">    ON Index_test(count);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/03/01/浅谈MySQL索引使用/2.png" alt><br>如图所示，可以看到我们创建的索引。其Non_unique=0，说明是唯一索引；其NULL=YES，说明可以有空值。</p><ul><li><p><b>主键索引</b><br>对于主键索引，InnoDB会在创建表时自动在主键上创建该索引。如果创建表时没有定义主键，则InnoDB选择第一个唯一非空的列作为主键并在其上创建主键索引；否则，InnoDB添加一个6字节大小的自增主键(该列称为ROWID)并在其上创建主键索引。在本例中，我们指定ID为主键，因此InnoDB在ID列上创建了主键索引。</p></li><li><p><b>在(name,count)列上创建联合索引</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_count </span><br><span class="line">    ON Index_test(name,count);</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2020/03/01/浅谈MySQL索引使用/3.png" alt><br>如图，我们创建了一个联合索引，由于创建表示约束了name列非空，因此索引中name也不能为NULL。联合索引中列的顺序对索引的性能影响很大，后面我们会说到。</p><h2 id="ALTER方式创建"><a href="#ALTER方式创建" class="headerlink" title="ALTER方式创建"></a><font xise="5">ALTER方式创建</font></h2><p>除了以CREATE的方式直接创建以外，我们还可以使用ALTER操作，以修改表的方式创建索引，其语法格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 </span><br><span class="line">    ADD [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY [索引名] </span><br><span class="line">    (字段名1[(长度)] [ASC|DESC]) [USING 索引方法]；</span><br></pre></td></tr></table></figure><p><img src="/2020/03/01/浅谈MySQL索引使用/4.png" alt><br>如图，除了创建方式不同以外，创建出来的索引没有任何区别，对于其他索引也一样，这里就不做演示。</p><h2 id="创建表时添加索引"><a href="#创建表时添加索引" class="headerlink" title="创建表时添加索引"></a><font size="5">创建表时添加索引</font></h2><p>我们可以在创建表时直接给相应的列添加索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    字段名 数据类型 [完整性约束条件],</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY</span><br><span class="line">    [索引名](字段名1[(长度)] [ASC|DESC]) [USING 索引方法]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同样的，创建出来的索引没有什么不同，这里不做演示。</p><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a><font size="5">删除索引</font></h2><p>删除索引也有两种方式，其实和创建很类似，可以对比记忆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用DROP直接删除</span><br><span class="line">DROP INDEX 索引名 ON 表名</span><br><span class="line"></span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">使用ALTER以修改表的方式删除</span><br><span class="line">ALTER TABLE 表名 DROP INDEX 索引名</span><br></pre></td></tr></table></figure><p>这里只演示其中一种即可，我们来使用DROP直接删除索引，如图所示：<br><img src="/2020/03/01/浅谈MySQL索引使用/5.png" alt></p><h1 id="索引的优缺点及使用原则"><a href="#索引的优缺点及使用原则" class="headerlink" title="索引的优缺点及使用原则"></a>索引的优缺点及使用原则</h1><p>了解了如何创建/删除索引，那么我们再来看看索引的优点和缺点，从而进一步学习索引的使用原则：即什么时候创建索引、在哪些列上创建索引以及什么时候不能使用索引等等。</p><h2 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a><font size="5">索引的优点</font></h2><p>其实这个问题的答案在前面一篇MySQL索引的实现原理已经提到，索引的优点主要有三</p><ol><li>索引大大减少了存储引擎需要扫描的数据量</li><li>索引可以帮助我们进行排序以避免使用临时表</li><li>索引可以把随机I/O变为顺序I/O，大大减少I/O次数，提升插叙速度</li><li>MySQL中，所有的字段类型都可以被索引，即可以给任意字段设置索引</li></ol><h2 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a><font size="5">索引的缺点</font></h2><p>任何事务都是有两面性的，索引也不例外，索引有这么多的优点，它自然也有一些缺点，其缺点主要有三</p><ol><li>创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加</li><li>索引也是数据，也需要占空间。我们知道数据表中的数据也会有最大上线设置的，如果我们有大量的索引，索引文件可能会比数据文件更快达到上线值</li><li>当对表中的数据进行增加、删除、修改时，索引也需要动态的维护，降低了数据的维护速度</li></ol><p>知道了索引的优缺点后，在下面一节将介绍一些索引的使用原则。即什么时候使用索引，什么时候不该使用索引。</p><h2 id="索引使用原则"><a href="#索引使用原则" class="headerlink" title="索引使用原则"></a><font size="5">索引使用原则</font></h2><ol><li><font color="red"><b>定义有主键的列一定要建立索引</b></font>(InnoDB自动实现)。因为主键可以加速定位到表中的某行。</li><li><font color="red"><b>定义有外键的列一定要建立索引</b></font>。外键列通常用于表与表之间的连接，在其上创建索引可以加快表间的连接。</li><li><font color="red"><b>对经常查询的数据列最好建立索引</b></font>。<ol><li>对于需要在指定范围内快速或频繁查询的数据列，因为索引已经排序，其指定的范围是连续的，查询可以利用索引的排序，加快查询的时间。</li><li>经常用在where子句中的数据列，将索引建立在where子句的集合过程中，对于需要加速或频繁检索的数据列，可以让这些经常参与查询的数据列按照索引的排序进行查询，加快查询的时间。</li></ol></li><li><font color="red"><b>对经常更新的表就避免对其进行过多的索引</b></font>。因为表的更新会导致索引结构的变化，系统维护索引需要耗费时间。</li><li><font color="red"><b>数据量小的表最好不要使用索引</b></font>。因为由于数据较少，可能查询全部数据花费的时间比遍历索引的时间还要短，索引就可能不会产生优化效果。</li><li><font color="red"><b>在不同值少的列上(字段上)不要建立索引</b></font>，比如在学生表的”性别”字段上只有男，女两个不同值。相反的，<font color="red"><b>在一个字段上不同值较多可以建立索引。</b></font></li></ol><p>索引的使用远不止这些，这里只是简单地总结几点。要想用好索引，最好是通过实际应用来学习，由于我是在校生，所以只能到这里了…</p><h1 id="最左前缀原理与相关优化"><a href="#最左前缀原理与相关优化" class="headerlink" title="最左前缀原理与相关优化"></a>最左前缀原理与相关优化</h1><h2 id="EXPLAIN的使用"><a href="#EXPLAIN的使用" class="headerlink" title="EXPLAIN的使用"></a><font size="5">EXPLAIN的使用</font></h2><p>在开始这部分内容之前，需要再补充一条SQL语句，用好了它对于我们查看索引的使用大有裨益。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT ....</span><br><span class="line">即在SELECT语句之前添加EXPLAIN字段</span><br></pre></td></tr></table></figure><p>使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是如何处理你的SQL语句的。对于EXPLAIN的使用这里不是重点，因此不做赘述。如果你还不了解，文末EXPLAIN的学习博客链接。</p><h2 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a><font size="5">组合索引</font></h2><p>MySQL中的索引可以以一定顺序引用多个列，这种索引叫做组合索引。一个联合索引是一个有序元组<a1, a2, …, an>，其中各个元素均为数据表的一列。</a1,></p><p><font color="red"><b>创建一个组合索引index(rol1,rol2,rol3)，相等于创建了三个索引：index(rol1)，index(rol1,rol2)，index(rol1,rol2,rol3)。</b></font></p><h3 id="选择列的顺序"><a href="#选择列的顺序" class="headerlink" title="选择列的顺序"></a><font size="5">选择列的顺序</font></h3><p>前面说了，使用组合索引时列的顺序对至关重要，那么如何选择列的顺序呢？原则有三</p><ol><li><b>经常被用到的列优先</b></li><li><b>选择性高的列优先</b></li><li><b>宽度小的列优先</b></li></ol><h2 id="覆盖索引-Covering-Indexes"><a href="#覆盖索引-Covering-Indexes" class="headerlink" title="覆盖索引(Covering Indexes)"></a><font size="5">覆盖索引(Covering Indexes)</font></h2><p>索引包含满足查询的所有列(SELECT 后面跟的列)。只需要读取索引而不用读取数据，大大提高查询性能。</p><ol><li><p>索引项通常比记录要小，使得MySQL访问更少的数据</p></li><li><p>索引都按值排序存储，相对于随机访问记录，需要更少的I/O</p></li><li><p>大多数据引擎能更好的缓存索引，比如MyISAM只缓存索引。这样如果使用了覆盖索引，那么就能避免MyISAM表进行系统调用。</p></li><li><p>覆盖索引对于InnoDB表尤其有用，因为InnoDB使用聚集索引组织数据，如果二级索引中包含查询所需的数据，就不再需要在聚集索引中查找了。</p></li><li><p><b>覆盖索引不能是任何索引，只有B-TREE索引存储相应的值。</b>并且并不是所有存储引擎都实现了覆盖索引</p></li><li><p><font color="red"><b>索引覆盖查询(index-covered query)，使用EXPLAIN时可以在Extra列中看到Using index。</b></font>记住这点，后面再演示的时候你会看到什么情况下会使用覆盖索引。</p></li></ol><p><font color="red"><b>不能使用覆盖索引的情况：</b></font></p><ol><li><p>存储引擎不支持覆盖索引</p></li><li><p>查询中使用了太多的列，如果有一个列不在索引中，就不能使用覆盖索引</p></li><li><p>使用了双%的模糊查询 </p></li></ol><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a><font size="5">实战测试</font></h2><p>我们创建一张表，下面的所有实验都基于该表进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> CREATE TABLE titles(</span><br><span class="line">    emp_no INT,</span><br><span class="line">    title VARCHAR(50),</span><br><span class="line">    from_date DATE,</span><br><span class="line">    to_date DATE,</span><br><span class="line">    PRIMARY KEY(emp_no,title,from_date)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们来看看这张表上有几个索引<br><img src="/2020/03/01/浅谈MySQL索引使用/6.png" alt>如图，由于该表包含一个联合主键，因此该表的主索引是一个组合索引。</p><h3 id="覆盖索引测试"><a href="#覆盖索引测试" class="headerlink" title="覆盖索引测试"></a><font size="5">覆盖索引测试</font></h3><p>为了更好的进行演示，我们在from_date列上创建一个辅助索引，如图所示：<br><img src="/2020/03/01/浅谈MySQL索引使用/17.png" alt> 我们知道，InnoDB中辅助索引存储的是主键的值，那么只要我们要查询的列在(emp_no,title,from_date)之间，就会使用到覆盖索引。</p><p><img src="/2020/03/01/浅谈MySQL索引使用/18.png" alt> 可以看到，Extra中Using Index，使用到了覆盖索引<br><img src="/2020/03/01/浅谈MySQL索引使用/19.png" alt> 在这里，要查询的列包括to_date，因此需要回表查数据，此时不能使用覆盖索引。Extra中是Using Where</p><h3 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a><font size="5">全值匹配</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/7.png" alt> <font color="red"><b>当按照索引中所有列进行精确匹配（这里精确匹配指“=”或“IN”匹配）时，索引可以被用到。&lt;/b</b></font>这里有一点需要注意，理论上索引对顺序是敏感的，但是由于MySQL的查询优化器会自动调整where子句的条件顺序以使用适合的索引，例如我们将where中的条件顺序颠倒：<br><img src="/2020/03/01/浅谈MySQL索引使用/8.png" alt> 效果是一样的</p><h3 id="最左前缀匹配"><a href="#最左前缀匹配" class="headerlink" title="最左前缀匹配"></a><font size="5">最左前缀匹配</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/9.png" alt> 当查询条件精确匹配索引的左边连续一个或几个列时，如<emp_no>或&lt;emp_no, title&gt;，所以可以被用到，但是只能用到一部分，即条件所组成的最左前缀。上面的查询从分析结果看用到了PRIMARY索引，但是key_len为4，说明只用到了索引的第一列前缀。</emp_no></p><h3 id="精确匹配中间缺少条件"><a href="#精确匹配中间缺少条件" class="headerlink" title="精确匹配中间缺少条件"></a><font size="5">精确匹配中间缺少条件</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/10.png" alt> 此时索引使用情况和情况二相同，因为title未提供，所以<font color="red"><b>查询只用到了索引的第一列</b></font>，而后面的from_date虽然也在索引中，但是由于title不存在而无法和左前缀连接，因此<b>虽然使用到了索引，但需要对结果进行扫描过滤from_date</b>(这里由于emp_no唯一，所以不存在扫描)。</p><h3 id="查询条件未指定索引首列"><a href="#查询条件未指定索引首列" class="headerlink" title="查询条件未指定索引首列"></a><font size="5">查询条件未指定索引首列</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/11.png" alt> 不是最左前缀，因此不会用到索引</p><h3 id="匹配某列的前缀字符串"><a href="#匹配某列的前缀字符串" class="headerlink" title="匹配某列的前缀字符串"></a><font size="5">匹配某列的前缀字符串</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/12.png" alt> 此时可以用到索引原，如果通配符%不出现在开头，则可以用到索引，但根据具体情况不同可能只会用其中一个前缀</p><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a><font size="5">范围查询</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/13.png" alt> 由于B+树的顺序特点,尤其适合此类查询。<font color="red"><b>范围列可以用到索引(必须是最左前缀)，但是范围列后面的列无法用到索引。</b></font>同时，索引最多用于一个范围列，因此如果查询条件中有两个范围列则无法全用到索引。</p><h3 id="查询条件中含有函数或表达式"><a href="#查询条件中含有函数或表达式" class="headerlink" title="查询条件中含有函数或表达式"></a><font size="5">查询条件中含有函数或表达式</font></h3><p><img src="/2020/03/01/浅谈MySQL索引使用/14.png" alt> 如果查询条件中含有函数或表达式，则MySQL不会为这列使用索引。虽然图中所示的两个查询的效果是一样的，但是对于第一个查询，不会使用emp_no上的索引。</p><h2 id="B-Tree索引限制"><a href="#B-Tree索引限制" class="headerlink" title="B+Tree索引限制"></a><font size="5">B+Tree索引限制</font></h2><ol><li><p>如果不是按照索引最左列开始查找，无法使用索引</p></li><li><p>使用索引时不能跳过中间的列</p></li><li><p>Not IN和&lt;&gt;操作无法使用索引</p></li><li><p>如果查询中有某个列的范围查询，那么其右边所有的列都无法使用索引</p></li><li><p>OR语句前后没有同时使用索引</p></li><li><p>以%开头的模糊查询</p></li></ol><h1 id="InnoDB的主键选择与插入优化"><a href="#InnoDB的主键选择与插入优化" class="headerlink" title="InnoDB的主键选择与插入优化"></a>InnoDB的主键选择与插入优化</h1><p><font color="red"><b>使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。</b></font></p><p>InnoDB使用聚集索引，数据记录本身被存于主索引（一颗B+Tree）的叶子节点上。这就要求同一个叶子节点内(大小为一个内存页或磁盘页)的各条数据记录按主键顺序存放。因此<b>每当有一条新的记录插入时，MySQL会根据其主键将其插入适当的节点和位置，如果页面达到装载因子(InnoDB默认为15/16)，则开辟一个新的页(节点)。</b>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。如下图所示：<br><img src="/2020/03/01/浅谈MySQL索引使用/15.png" alt> 这样就会形成一个紧凑的索引结构，近似顺序填满。由于每次插入时也不需要移动已有数据，因此效率很高，也不会增加很多开销在维护索引上。</p><p>如果使用非自增主键（如果身份证号或学号等），由于每次插入主键的值近似于随机，因此每次新纪录都要被插到现有索引页得中间某个位置：<br><img src="/2020/03/01/浅谈MySQL索引使用/16.png" alt><br>此时MySQL不得不为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成了大量的碎片，得到了不够紧凑的索引结构，后续不得不通过OPTIMIZE TABLE来重建表并优化填充页面。</p><p>所以说，<font color="red"><b>如果可以，请尽量在InnoDB上采用自增字段做主键。</b></font></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>本文参考借鉴了一下几篇博客：<br><a href="https://cloud.tencent.com/developer/article/1125452" target="_blank" rel="noopener">MySQL索引及其实现原理(基于MyISAM及InnoDB引擎)</a><br><a href="https://blog.csdn.net/justry_deng/article/details/81458470" target="_blank" rel="noopener">MySQL索引的创建与使用</a><br><a href="https://blog.csdn.net/why15732625998/article/details/80388236" target="_blank" rel="noopener">MySQL高级-EXPLAIN用法和结果分析</a><br><a href="https://www.cnblogs.com/tuanz/p/11806017.html" target="_blank" rel="noopener">回表查询的说明</a><br><a href="https://www.jianshu.com/p/8991cbca3854" target="_blank" rel="noopener">mysql覆盖索引与回表</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引及其实现原理</title>
      <link href="/2020/02/29/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2020/02/29/MySQL%E7%B4%A2%E5%BC%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>前面在介绍MySQL加锁处理的时候，多次的提到了<b>索引</b>，也简单地对MySQL InnoDB的索引进行了介绍，索引在数据库中有着至关重要的作用，通过索引能够大大提高我们的查询速度。那么索引到底是什么？今天我们就对索引进行详细的介绍。</p><hr><a id="more"></a><h1 id="数据结构和算法基础"><a href="#数据结构和算法基础" class="headerlink" title="数据结构和算法基础"></a>数据结构和算法基础</h1><p>在介绍索引之前，我们先介绍两种基本的数据结构：B树和B+树结构</p><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a><font size="5">索引的本质</font></h2><p>官方对索引的定义为：<font color="red"><b>索引(Index)是帮助MySQL高效获取数据的数据结构。因此索引本质上是一种数据结构。</b></font></p><p>查询是数据库的最主要功能之一。我们都希望查询速度能尽可能快，因此数据库系统的设计者会从查询算法角度优化。最基本的查询算法当然是顺序查找(linear search)，这种复杂度为O(n)的算法在数据量很大时显然是糟糕的。好在CS的发展提供了很多更优秀的查找算法，如二分查找(binary search)、二叉树查找(binary tree search)等。稍微分析一下会发现，每种查找算法都只能应用于特定数据结构之上，如二分查找要求被检索数据有序，而二叉树查找只能应用于二叉查找树，但数据本身的组织结构不可能完全满足各种数据结构（例如，理论上不可能同时将两列都按顺序进行组织）。所以，在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种ADT，就是索引。<br><img src="/2020/02/29/MySQL索引及其实现原理/1.png" alt><br>图1展示了一种可能的索引方式：左边是数据表，一共有两列14条记录，最左边是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上并不一定物理相邻）。为加快Col2的查找，可维护一个右边所示二叉查找树，每个节点分别包含索引键值及一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在O(log2 N)内取到相应数据。虽然这是一个货真价实的索引，但实际数据库系统几乎没有使用二叉查找树或其进化品种红黑树（red-black tree）实现</p><h2 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a><font size="5">B树和B+树</font></h2><p>目前大多数数据库和文件系统都采用B树及其变种B+树作为索引结构。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a><font size="5">B-树</font></h3><p>我们定义一条数据库记录为(key,data)的二元组</p><ul><li>key：记录的键值，不同的记录key不同</li><li>data：该条记录中除了key以外的部分</li></ul><p>对于一棵n阶B-树，它有如下性质</p><ol><li><b>根节点</b><br>除非整棵树只有一个节点，否则根节点的指针数在区间[2,n]</li><li><b>非叶节点</b><br>key的数目在[(n-1)/2(取上界),n-1]之间，指针数目在[n/2(取上界),n]之间。每个key同时对应一个data。</li><li><b>叶节点</b><br>和非叶节点的结构相同，不过叶节点指针均为null</li><li>如果某个指针在节点node最左边且不为null，则其指向节点的所有key小于v(key1),v(key1)为node的第一个key的值</li><li>如果某个指针在节点node最右边且不为null，则其指向节点的所有key大于v(keym),v(keym)为node的最后一个key的值。</li><li>如果某个指针在节点node的左右相邻key分别是keyi,keyi+1且不为null，则其指向节点的所有key小于v(keyi+1)且大于v(keyi)</li></ol><p>对于概念可能比较陌生，我们来看图<br><img src="/2020/02/29/MySQL索引及其实现原理/2.png" alt></p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a><font size="5">B+树</font></h3><p>B+树是B树的变种，和B树相比主要有一下几点不同</p><ol><li>对于B-树，每个节点指针数=key的数量+1；而B+树不同，B+树的每个节点，节点指针数=key的数量。</li><li>非叶节点不存储数据，只存储key值和指针。数据只存储在叶节点中</li></ol><p><img src="/2020/02/29/MySQL索引及其实现原理/3.png" alt><br>如图所示，一颗3阶B+树。可以看到数据只存储在叶节点中。</p><p>并且数据库实现时对B+树做了进一步的优化，得到了顺序B+树<br><img src="/2020/02/29/MySQL索引及其实现原理/4.png" alt><br>如图：<font color="red"><b>在B+Tree的每个叶节点增加一个指向相邻叶节点指针，形成带有顺序访问指针的B+Tree。</b></font>此优化的目的是提高区间访问的性能，例如图4中如果要查询key为从18到49的所有数据记录，当找到18后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提高了区间查询效率</p><h3 id="计算机硬件知识"><a href="#计算机硬件知识" class="headerlink" title="计算机硬件知识"></a><font size="5">计算机硬件知识</font></h3><p>红黑树也可用来实现索引，但是文件系统及数据库系统普遍采用B/+Tree。这是为什么？</p><p>一般来说，索引本身也很大，不可能全存内存，往往以索引文件的形式存在磁盘。索引查找过程中就要产生磁盘I/O消耗，相对于内存存取，I/O存取的消耗要高几个数量级，所以评价一个数据结构作为索引的优劣最重要的指标就是在查找过程中磁盘I/O操作次数的渐进复杂度。换句话说，索引的结构组织要尽量减少查找过程中磁盘I/O的存取次数。</p><ol><li><p><b>主存存取原理</b><br>我们知道，计算机使用的主存一般为随机读写存储器(RAM)。这里抛却具体差别，抽象出一个十分简单的存取模型来说明RAM的工作原理<br><img src="/2020/02/29/MySQL索引及其实现原理/5.png" alt><br>从抽象角度看，主存是一系列的存储单元组成的矩阵，每个存储单元存储固定大小的数据。<br>每个存储单元有唯一的地址，现代主存的编址规则比较复杂，这里将其简化成一个二维地址：通过一个行地址和一个列地址可以唯一定位到一个存储单元<br><b>存取过程</b><br>当系统需要读取主存时，将地址信号通过地址总线传给主存，主存读到地址信号后，解析信号并定位到指定存储单元，然后将此存储单元数据放到数据总线，供其它部件读取<br>写主存的过程类似，系统将要写入单元地址和数据分别放在地址总线和数据总线上，主存读取两个总线的内容，做相应的写操作<br>这里可以看出，<font color="red"><b>主存存取的时间仅与存取次数呈线性关系，因为不存在机械操作，两次存取的数据的“距离”不会对时间有任何影响。</b></font>例如，先取A0再取A1和先取A0再取D3的时间消耗是一样的。</p></li><li><p><b>磁盘存储原理</b><br>上文说过，<font color="red"><b>索引一般以文件形式存储在磁盘上，索引检索需要磁盘I/O。</b></font>对于主存来说，”距离”不会对存储时间产生影响，但是对于磁盘来说并非如此。与主存不同，磁盘I/O存在机械消耗，因此磁盘I/O时间消耗巨大<br><img src="/2020/02/29/MySQL索引及其实现原理/6.png" alt><br>磁盘的整体结构示意图<br><b>磁盘由大小相同且同轴的圆形盘片组成，磁盘可以转动（各磁盘必须同步转动）。</b><br>在磁盘的一侧有磁头支架，磁头支架固定了一组磁头，每个磁头负责存取一个磁盘的内容。磁头不能转动，但是可以沿磁盘半径方向运动（实际是斜切向运动），每个磁头同一时刻也必须是同轴的，即从正上方向下看，所有磁头任何时候都是重叠的（不过目前已经有多磁头独立技术，可不受此限制）。<br><img src="/2020/02/29/MySQL索引及其实现原理/7.png" alt><br>磁盘结构的示意图<br>盘片被划分成一系列同心环，圆心是盘片中心，每个同心环叫做一个<b>磁道</b>，所有半径相同的磁道组成一个<b>柱面</b>。磁道被沿半径线划分成一个个小的段，每个段叫做一个<b>扇区</b>，每个扇区是磁盘的最小存储单元。为了简单起见，我们下面假设磁盘只有一个盘片和一个磁头。<br>当需要从磁盘读取数据时，系统会将数据逻辑地址传给磁盘，磁盘的控制电路按照寻址逻辑将逻辑地址翻译成物理地址，即确定要读的数据在哪个磁道，哪个扇区。<br>为了读取这个扇区的数据，需要将磁头放到这个扇区上方，为了实现这一点，磁头需要移动对准相应磁道，这个过程叫做<b>寻道</b>，所耗费时间叫做<b>寻道时间</b>，然后磁盘旋转将目标扇区旋转到磁头下，这个过程耗费的时间叫做<b>旋转时间</b>。</p></li><li><p><b>局部性原理与磁盘预读</b><br>由于存储介质特性，磁盘本身存取就比主存慢，再加上机械运动耗费，磁盘的存取速度往往是主存的几百万分之一，因此为了提高效率，要尽量减少磁盘I/O。<br>为了达到这个目的，<b>磁盘往往不是严格按需读取，而是每次都会预读。</b>即使只需要一个字节，磁盘也会从这个位置开始，顺序向后读取一定长度的数据放入内存。这样做的理论依据是计算机科学中著名的<font color="red"><b>局部性原理</b></font>：<br><b>当一个数据被用到时，其附近的数据也通常会马上被使用</b>。程序运行期间所需要的数据通常比较集中<br>由于磁盘顺序读取的效率很高（不需要寻道时间，只需很少的旋转时间），因此<b>对于具有局部性的程序来说，预读可以提高I/O效率。</b><br>预读的长度一般为页（page）的整数倍。<b>页</b>是存储器的逻辑块，操作系统往往<b>将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页</b>（在许多操作系统中，页大小通常为4k），主存和磁盘以页为单位交换数据。当程序要读取的数据不在主存中时，会触发一个缺页异常，此时系统会向磁盘发出读盘信号，磁盘会找到数据的起始位置并向后连续读取一页或几页载入内存中，然后异常返回，程序继续运行</p></li></ol><h3 id="B-B-树性能分析"><a href="#B-B-树性能分析" class="headerlink" title="B/B+树性能分析"></a><font size="5">B/B+树性能分析</font></h3><p>到这里终于可以分析B-/+Tree索引的性能了。上文说过一般<font color="red"><b>使用磁盘I/O次数评价索引结构的优劣。</b></font></p><ol><li><p><b>先分析B-Tree</b><br>根据B-Tree的定义，可知检索一次最多需要访问h个节点(h为树的高度)。数据库系统的设计者巧妙利用了磁盘预读原理，<font color="red"><b>将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。</b></font><br>为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：<font color="red"><b>每次新建节点时，直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</b></font><br>B-Tree中一次检索最多需要h-1次I/O(根节点常驻内存)，渐进复杂度为O(h)=O(lognN)(N为总记录数)。一般实际应用中，出度n(指针数)是非常大的数字，通常超过100，因此h非常小(通常不超过3)。综上所述，用B-Tree作为索引结构效率是非常高的。</p></li><li><p><b>为什么不使用红黑树</b><br>我们知道红黑树的出度d最大为2，因此对于相同数量的数据，红黑树h明显要深的多。由于逻辑上很近的节点（父子）物理上可能很远，无法利用局部性，所以红黑树的I/O渐进复杂度也为O(h)，效率明显比B-Tree差很多。</p></li></ol><h3 id="为什么使用B-树而不是B树"><a href="#为什么使用B-树而不是B树" class="headerlink" title="为什么使用B+树而不是B树"></a><font size="5">为什么使用B+树而不是B树</font></h3><p>通过前面这么多的介绍，这个问题应该很好回答，主要有三点：</p><ol><li><b>B+树的磁盘读写代价更低</b>：前面说过，B+树的非叶节点不存储data域，因此对于一个节点(页)，B+树比B树存储的key更多，这就意味着B+树的非叶节点的出度更多。进行一次I/O能够获得更多的信息，从而减少I/O次数。</li><li><b>B+树的查询效率更加稳定</b>：由于所有数据都存于叶子节点。所有关键字查询的路径长度相同，每一个数据的查询效率相当。</li><li>B树在提高了IO性能的同时并没有解决元素遍历效率低下的问题，正是为了解决这个问题，B+树应用而生。<b>B+树只需要去遍历叶子节点就可以实现整棵树的遍历。</b></li></ol><p>这一章从理论角度讨论了与索引相关的数据结构与算法问题，下一章将讨论B+Tree是如何具体实现为MySQL中索引，同时将结合MyISAM和InnDB存储引擎介绍非聚集索引和聚集索引两种不同的索引实现形式。</p><h1 id="MyISAM引擎索引实现"><a href="#MyISAM引擎索引实现" class="headerlink" title="MyISAM引擎索引实现"></a>MyISAM引擎索引实现</h1><p>MyISAM引擎使用B+Tree作为索引结构，叶节点<font color="red"><b>data域存放数据记录的地址</b></font>。</p><ol><li><p><b>主索引(聚簇索引)</b><br><img src="/2020/02/29/MySQL索引及其实现原理/8.png" alt><br>MyISAM主索引的原理图<br>设Col1为主键，则图8是一个MyISAM表的主索引（Primary key）示例。可以看出<font color="red"><b>MyISAM的索引文件仅仅保存数据记录的地址。</b></font></p></li><li><p><b>辅助索引</b><br>在MyISAM中，<b>主索引和辅索引(Secondary key)在结构上没有任何区别</b>，只是主索引要求key是唯一的，而辅索引的key可以重复。如果我们在Col2上建立一个辅索引，则此索引的结构如下图所示：<br><img src="/2020/02/29/MySQL索引及其实现原理/9.png" alt><br>如图：同样也是一颗B+Tree，data域保存数据记录的地址</p></li><li><p><b>MyISAM中索引检索的算法</b><br>首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。 </p></li></ol><h1 id="InnoDB引擎索引实现"><a href="#InnoDB引擎索引实现" class="headerlink" title="InnoDB引擎索引实现"></a>InnoDB引擎索引实现</h1><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。一个重大区别是<font color="red"><b>InnoDB的数据文件本身就是索引文件。</b></font><br>通过上面的介绍，我们知道：</p><ol><li><p>MyISAM索引文件和数据文件是分离的，索引文件仅保存数据记录的地址</p></li><li><p><font color="red"><b>在InnoDB中，表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。</b></font>这个索引的key是数据表的主键，<font color="red"><b>InnoDB表数据文件本身就是主索引</b></font></p></li><li><p><b>主索引(辅助索引)</b><br><img src="/2020/02/29/MySQL索引及其实现原理/10.png" alt><br>InnoDB主索引(同时也是数据文件)的示意图<br>可以看到叶节点包含了完整的数据记录，这种索引叫做聚集索引。因为InnoDB的数据文件本身要按主键聚集，所以<b>InnoDB要求表必须有主键(MyISAM可以没有)</b>，如果没有显式指定，则MySQL系统会自动选择一个<font color="red"><b>唯一非空列</b></font>作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p></li><li><p><b>辅助索引</b><br>InnoDB的辅助索引和MyISAM也不一样。<font color="red"><b>InnoDB的辅索引data域存储相应记录主键的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域。</b></font>并且当我们创建表时，InnoDB会自动为表中的唯一列(unique约束)创建唯一索引<br><img src="/2020/02/29/MySQL索引及其实现原理/11.png" alt><br>聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：<b>首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</b></p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助。例如</p><ol><li>知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅索引都引用主索引，过长的主索引会令辅索引变得过大。</li><li>非单调(varchar等)的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择</li></ol><p>今天的学习就到这里，对于索引的使用和索引的优化我会另写一篇文章</p><hr><p>参考书籍：《数据库系统概念》<br><a href="https://zhuanlan.zhihu.com/p/88866208" target="_blank" rel="noopener">一文搞懂MySQL索引</a><br><a href="https://cloud.tencent.com/developer/article/1125452" target="_blank" rel="noopener">MySQL索引及其实现原理(基于MyISAM及InnoDB引擎)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL加锁处理</title>
      <link href="/2020/02/29/%E8%AF%A6%E8%A7%A3MySQL%E5%8A%A0%E9%94%81%E5%A4%84%E7%90%86/"/>
      <url>/2020/02/29/%E8%AF%A6%E8%A7%A3MySQL%E5%8A%A0%E9%94%81%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在前面的文章中，对MySQL的MVCC机制进行了介绍，我们知道MVCC的特点就是读不加锁写加锁，实现了读写分离，那么今天就来介绍一下MySQL在并发控制中的加锁处理，理解这一点对于我们编写高效的SQL语句和处理死锁情况尤为重要。本文基于Win10环境下MySQL5.5版本/InnoDB存储引擎。</p><hr><a id="more"></a><h1 id="MVCC回顾"><a href="#MVCC回顾" class="headerlink" title="MVCC回顾"></a>MVCC回顾</h1><p>MySQL InnoDB存储引擎，实现的是基于多版本并发控制协议MVCC(与MVCC相对的是基于锁的并发控制协议)。MVCC最大的好处，相信也是耳熟能详：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能，这也是为什么现阶段，几乎所有的RDBMS，都支持了MVCC。</p><p>在MVCC并发控制中，读操作可以分成两类：<font color="red"><b>快照读(snapshot read)与当前读(current read)</b></font>。快照读：读取的是记录的可见版本(有可能是历史版本)，不用加锁。当前读：读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p><p>在一个支持MVCC并发控制的系统中，哪些读操作是快照读？哪些操作又是当前读呢？以MySQL InnoDB为例：</p><ul><li><p><b>快照读</b><br>简单的select操作，属于快照读，不加锁。(在SERIALIZABLE下情况有所不同，后面会说)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM  table where ?</span><br></pre></td></tr></table></figure></li><li><p><b>当前读</b><br>特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from table where ? lock in share mode;</span><br><span class="line">select * from table where ? for update;</span><br><span class="line">insert into table values (…);</span><br><span class="line">update table set ? where ?;</span><br><span class="line">delete from table where ?;</span><br></pre></td></tr></table></figure></li></ul><p>除了第一条SQL加S锁以外，其他都加X锁</p><p><font size="5"><b>为什么将 <font color="red">插入/更新/删除</font> 操作，都归为当前读？可以看看下面这个 更新 操作，在数据库中的执行流程：</b></font><br><img src="/2020/02/29/详解MySQL加锁处理/1.webp" alt></p><p>从图中，可以看到，一个Update操作的具体流程：当Update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个Update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，Update操作内部，就包含了一个当前读。同理，Delete操作也一样。Insert操作会稍微有些不同，简单来说，就是Insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。</p><font size="5"><b>注</b></font>：根据上图的交互，<font color="red"><b>针对一条当前读的SQL语句，InnoDB与MySQL Server的交互，是一条一条进行的，因此，加锁也是一条一条进行的。</b></font>先对一条满足条件的记录加锁，返回给MySQL Server，做一些DML操作；然后在读取下一条加锁，直至读取完毕。<h1 id="Cluster-Index-聚簇索引"><a href="#Cluster-Index-聚簇索引" class="headerlink" title="Cluster Index-聚簇索引"></a>Cluster Index-聚簇索引</h1><p>MySQL InnoDB引擎使用的是B+树索引，InnoDB实现方式是这样的：<b>表数据文件本身就是按B+Tree组织的一个索引结构，这棵树的叶节点data域保存了完整的数据记录。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引，所以加锁锁的也是索引。</b>对于辅助索引，也是B+树结构，辅助索引的data域存储的是主键的值。聚集索引这种实现方式使得按主键的搜索十分高效，但是辅助索引搜索需要检索两遍索引：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。(对于本文来说，索引理解到这里就够了，但是对于索引的学习是远远不够的，我会另开博客进行介绍)</p><h1 id="2PL-两阶段封锁协议"><a href="#2PL-两阶段封锁协议" class="headerlink" title="2PL-两阶段封锁协议"></a>2PL-两阶段封锁协议</h1><p>这个在前面介绍过，2PL比较容易理解，说的是锁操作分为两个阶段：加锁阶段与解锁阶段，并且保证加锁阶段与解锁阶段不相交。但是MySQL在实际应用时为了提高性能，有时可能会违反2PL协议，后面会说。</p><h1 id="Isolation-Level"><a href="#Isolation-Level" class="headerlink" title="Isolation Level"></a>Isolation Level</h1><p>隔离级别，前面也介绍过，这里简单提一下<br>MySQL/InnoDB定义的4种隔离级别：</p><ul><li><b>Read Uncommited</b><br>可以读取未提交记录。此隔离级别，基本不会使用，忽略。</li><li><b>Read Committed(RC)</b><br>快照读前面介绍过，本文不考虑。<br>针对当前读，RC隔离级别保证对读取到的记录加锁 (记录锁)，存在幻读现象。</li><li><b>Repeatable Read(RR)</b><br>快照读本文不考虑。<br>针对当前读，RR隔离级别保证对读取到的记录加锁 (记录锁)，同时保证对读取的范围加锁，新的满足查询条件的记录不能够插入 (间隙锁)，不存在幻读现象。</li><li><b>Serializable</b><br>从MVCC并发控制退化为基于锁的并发控制。不区别快照读与当前读，所有的读操作均为当前读，读加读锁 (S锁)，写加写锁 (X锁)。<br>Serializable隔离级别下，读写冲突，因此并发度急剧下降，在MySQL/InnoDB下不建议使用。</li></ul><h1 id="一条简单SQL是加锁分析"><a href="#一条简单SQL是加锁分析" class="headerlink" title="一条简单SQL是加锁分析"></a>一条简单SQL是加锁分析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL1：select * from t1 where id = 10;</span><br><span class="line">SQL2：delete from t1 where id = 10;</span><br></pre></td></tr></table></figure><p>对于上面两条SQL语句，如果你问我分别加什么锁，那么我可能会说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL1：不加锁，因为MVCC实现了快照读</span><br><span class="line">SQL2：加对id=10这条记录加记录锁(行级锁)，走主键索引。</span><br></pre></td></tr></table></figure><p>但是这样说对么？可能对也可能不对。因为已知条件不足，这样问问题的无异于耍流氓。在不同的条件下加锁情况是不一样的。那么可能需要哪些条件呢？</p><ul><li><p><b>前提一</b>：id列是不是主键？</p></li><li><p><b>前提二</b>：当前系统的隔离级别是什么？</p></li><li><p><b>前提三</b>：id列如果不是主键，那么id列上有索引吗？</p></li><li><p><b>前提四</b>：id列上如果有二级索引，那么这个索引是唯一索引吗？</p></li><li><p><b>前提五</b>：两个SQL的执行计划是什么？索引扫描？全表扫描？</p></li></ul><p>没有这些条件，直接给一条SQL语句问我怎么加锁，那太不专业了。而有了这些条件，那么再来回答加锁情况，答案就显而易见了。下面我将分不同的隔离级别，对这些问题进行组合，然后看看MySQL分别加什么锁。</p><h1 id="RC级别"><a href="#RC级别" class="headerlink" title="RC级别"></a>RC级别</h1><p>在该级别下，我们有四种组合</p><ul><li><p><b>组合一</b>：id列是主键</p></li><li><p><b>组合二</b>：id列是二级唯一索引</p></li><li><p><b>组合三</b>：id列是二级非唯一索引</p></li><li><p><b>组合四</b>：id列上没有索引</p></li></ul><p>对于这四种情况，SQL1语句全都是快照读不加锁，我们主要讨论SQL2。</p><h2 id="id列是主键"><a href="#id列是主键" class="headerlink" title="id列是主键"></a><font size="5">id列是主键</font></h2><p>这个组合是最简单、最容易分析的组合。<font color="red"><b>id是主键，Read Committed隔离级别，给定SQL：delete from t1 where id = 10; 只需要将主键上id = 10的记录加上X锁即可。</b></font><br><img src="/2020/02/29/详解MySQL加锁处理/2.webp" alt><br><b>结论</b>：where中<font color="red"><b>使用主键进行等值查询</b></font>时，只需要对指定记录加行级X锁。</p><h2 id="id列是二级唯一索引"><a href="#id列是二级唯一索引" class="headerlink" title="id列是二级唯一索引"></a><font size="5">id列是二级唯一索引</font></h2><p>id不是主键，而是一个Unique的二级索引键值(唯一索引)。那么在RC隔离级别下，delete from t1 where id = 10; 需要加什么锁呢？<br><img src="/2020/02/29/详解MySQL加锁处理/3.webp" alt><br><b>注意</b>：在InnoDB中索引都是B+树结构，这里为了方便简化了实际结构。<br>此组合中，<b>id是unique索引，而主键是name列。</b></p><ol><li><p>由于id是unique索引，因此delete语句会选择走id列的索引进行where条件的过滤</p></li><li><p>在找到id=10的记录后，首先会将unique索引上的id=10索引记录加上X锁</p></li><li><p>同时，会根据读取到的name列，回主键索引(聚簇索引)，然后将聚簇索引上的name = ‘d’ 对应的主键索引项加X锁。</p></li></ol><ul><li>为什么聚簇索引上的记录也要加锁？<br>试想一下，如果有一个并发的SQL语句，是通过主键索引来更新：update t1 set id = 100 where name = ‘d’; 此时，如果delete语句没有将主键索引上的记录加锁，那么并发的update就会感知不到delete语句的存在，违背了同一记录上的更新/删除需要串行执行的约束。</li></ul><p><b>结论</b>：where中<font color="red"><b>使用唯一索引(辅助索引)进行等值查询时，需要对聚簇索引和辅助索引上的记录分别加锁，即加两次锁。</b></font></p><h2 id="id列是二级非唯一索引"><a href="#id列是二级非唯一索引" class="headerlink" title="id列是二级非唯一索引"></a><font size="5">id列是二级非唯一索引</font></h2><p>id列上的约束又降低了，id列不再唯一，只有一个普通的索引。假设delete from t1 where id = 10; 语句，仍旧选择id列上的索引进行过滤where条件，那么此时会持有哪些锁？<br><img src="/2020/02/29/详解MySQL加锁处理/4.webp" alt><br>可以看到，</p><ol><li>id列索引上，满足id = 10查询条件的记录，均已加锁。</li><li>同时，这些记录对应的主键索引上的记录也都加上了锁。</li></ol><p><b>结论</b>：<font color="red"><b>加锁步骤和唯一索引相同。区别在于：使用唯一索引时最多只有一个满足等值查询的记录，而使用普通索引时会将所有满足查询条件的记录都加锁。</b></font></p><h2 id="id列上没有索引"><a href="#id列上没有索引" class="headerlink" title="id列上没有索引"></a><font size="5">id列上没有索引</font></h2><p>此时更加特殊，id列上没有索引。where id = 10;这个过滤条件就没法通过索引进行过滤，那么只能走全表扫描做过滤。对应于这个组合，SQL会加什么锁？或者是换句话说，全表扫描时，会加什么锁？<br><img src="/2020/02/29/详解MySQL加锁处理/5.webp" alt></p><p><font color="red"><b>由于id列上没有索引，因此只能走聚簇索引，进行全部扫描。</b></font>从图中可以看到，满足删除条件的记录有两条，但是聚簇索引上所有的记录，都被加上了X锁。<font color="red"><b>无论记录是否满足条件，全部被加上X锁。</b></font>既不是加表锁，也不是在满足条件的记录上加行锁。</p><ul><li><p><b>为什么不是只在满足条件的记录上加锁呢？</b><br>这是由于MySQL的实现决定的。如果一个条件无法通过索引快速过滤，那么存储引擎层面就会将所有记录加锁后返回，然后由MySQL Server层进行过滤。因此也就把所有的记录，都锁上了。</p></li><li><p><b>MySQL的改进</b><br>在实际的实现中，MySQL有一些改进：<font color="red"><b>在MySQL Server过滤条件，发现不满足后，会调用unlock_row方法，把不满足条件的记录放锁 (违背了2PL的约束)。</b></font>这样做，保证了最后只会持有满足条件记录上的锁，但是每条记录的加锁操作还是不能省略的。</p></li></ul><p><b>结论</b>：<font color="red"><b>若id列上没有索引，SQL会走聚簇索引的全扫描进行过滤，由于过滤是由MySQL Server层面进行的。因此每条记录，无论是否满足条件，都会被加上X锁。但是，为了效率考量，MySQL做了优化，对于不满足条件的记录，会在判断后放锁；最终持有的是满足条件的记录上的锁，但是不满足条件的记录上的加锁/放锁动作不会省略。</b></font>该优化违背了2PL的约束。</p><h1 id="RR级别"><a href="#RR级别" class="headerlink" title="RR级别"></a>RR级别</h1><p>同样的，我们也介绍和RC一样的四种组合</p><ul><li><p><b>组合一</b>：id列是主键</p></li><li><p><b>组合二</b>：id列是二级唯一索引</p></li><li><p><b>组合三</b>：id列是二级非唯一索引</p></li><li><p><b>组合四</b>：id列上没有索引</p></li></ul><p>但是在介绍之前，需要介绍一种锁：间隙锁–Gap_Lock。这是RR级别防止幻读的关键锁。</p><h2 id="Gap-Lock–间隙锁"><a href="#Gap-Lock–间隙锁" class="headerlink" title="Gap_Lock–间隙锁"></a><font size="5">Gap_Lock–间隙锁</font></h2><p>和记录锁(行级锁)不同，间隙锁锁的不是索引，而是索引之间的间隙。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">假设现在又有下列值</span><br><span class="line">1 3 5 8 9</span><br><span class="line">那么这些值之间的间隙有</span><br><span class="line">(-∞,1)</span><br><span class="line">(1,3)</span><br><span class="line">(3,5)</span><br><span class="line">(5,8)</span><br><span class="line">(8,9)</span><br><span class="line">(9,+∞)</span><br></pre></td></tr></table></figure><p>间隙锁和记录锁组合称为Next-Key Lock(下一键锁)，该锁在RR级别下进行当前读时预防了幻行现象。(注：进行快照读时，MVCC本身能够预防幻行)</p><h2 id="id列是主键-1"><a href="#id列是主键-1" class="headerlink" title="id列是主键"></a><font size="5">id列是主键</font></h2><p><b>结论</b>：<font color="red"><b>在RR级别下，where条件使用主键进行等值查询时，加锁情况和RC级别一样。只对指定记录加记录锁(行级锁)。</b></font></p><h2 id="id列是二级唯一索引-1"><a href="#id列是二级唯一索引-1" class="headerlink" title="id列是二级唯一索引"></a><font size="5">id列是二级唯一索引</font></h2><p><b>结论</b>：<font color="red"><b>在RR级别下，使用唯一索引(辅助索引)进行等值查询时，加锁情况和RC级别一样。需要对聚簇索引和辅助索引上的记录分别加锁，即加两次锁。</b></font></p><h2 id="id列是二级非唯一索引-1"><a href="#id列是二级非唯一索引-1" class="headerlink" title="id列是二级非唯一索引"></a><font size="5">id列是二级非唯一索引</font></h2><p>我们知道：RC隔离级别允许幻读，而RR隔离级别不允许存在幻读。但是在前面讲到的两种情况下，加锁行为又是与RC下的加锁行为完全一致。那么RR隔离级别下，如何防止幻读呢？在这种组合下我们将会用到间隙锁。</p><p>Repeatable Read隔离级别，id上有一个非唯一索引，执行delete from t1 where id = 10; 假设选择id列上的索引进行条件过滤，最后的加锁行为，是怎么样的呢？<br><img src="/2020/02/29/详解MySQL加锁处理/6.webp" alt><br>我们看到，和RC级别不同的是，RR级别在聚簇索引上不仅加了记录锁(行级锁)，还加上了前面介绍的间隙锁(Gap_Lock)。这样就能防止幻行了么？我们来详细分析一下</p><h3 id="幻行解决原理分析"><a href="#幻行解决原理分析" class="headerlink" title="幻行解决原理分析"></a><font szie="5">幻行解决原理分析</font></h3><p>所谓防止幻行：就是同一个事务，连续做两次当前读 (例如：select * from t1 where id = 10 for update;)，那么这两次<b>当前读</b>返回的是完全相同的记录 (记录数量一致，记录本身也一致)，第二次的当前读，不会比第一次返回更多的记录 (幻象)。</p><p>为了保证两次当前读返回一致的记录，那就需要在<b>第一次当前读与第二次当前读之间，其他的事务不会插入新的满足条件的记录并提交。</b>为了实现这个功能，GAP锁应运而生。<font color="red"><b>从图中我们可以发现，由于B+树的有序性，当聚簇索引上加上了三个Gap_Lock以后，其他事务就不能在插入id=10的记录，因此就不会出现幻行。</b></font></p><ul><li>看到这里你可能会问，为什么前两种组合不使用Gap_Lock，而这种情况需要使用呢？<br>这个问题其实很简单，对于主键和唯一索引，值是唯一的，那么进行等值查询时最多只会返回一条记录，因此也就避免了Gap_Lock的使用。</li></ul><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a><font szie="5">结论</font></h3><p>RR级别下，id列上有一个非唯一索引，对应SQL：delete from t1 where id = 10; </p><ol><li>首先，通过id索引定位到第一条满足查询条件的记录，加记录上的X锁，并加上相应的GAP锁</li><li>然后加主键聚簇索引上的记录X锁，返回读取下一条，重复进行。直至进行到第一条不满足条件的记录</li><li>此时，不需要加记录X锁，但是仍旧需要加GAP锁，最后返回结束。</li><li>注意：在这种情况下Gap_Lock加在辅助索引上而不是聚簇索引上！！！！</li></ol><h2 id="id列上没有索引-1"><a href="#id列上没有索引-1" class="headerlink" title="id列上没有索引"></a><font size="5">id列上没有索引</font></h2><p>RR级别下，id列上没有索引。此时SQL：delete from t1 where id = 10; 没有其他的路径可以选择，只能进行全表扫描。最终的加锁情况，如下图所示：<br><img src="/2020/02/29/详解MySQL加锁处理/7.webp" alt></p><p>这是一个很恐怖的现象。首先，聚簇索引上的所有记录，都被加上了X锁。其次，聚簇索引每条记录间的间隙(GAP)，也同时被加上了GAP锁。这个示例表，只有6条记录，一共需要6个记录锁，7个GAP锁。试想，如果表上有1000万条记录呢？</p><p>此时，<font color="red"><b>除了不加锁的快照读，其他任何加锁的并发SQL，均不能执行:不能更新、不能删除也不能插入，全表被锁死。</b></font></p><p><b>结论</b>：<font color="red"><b>若id列上没有索引，SQL会走聚簇索引的全扫描进行过滤，对表的每一条记录加记录锁(行级锁)，并对所有的间隙加间隙锁(Gap_Lock)。和RC不同，此时不会释放不满足条件的锁！！</b></font></p><h1 id="SERIALIZABLR级别"><a href="#SERIALIZABLR级别" class="headerlink" title="SERIALIZABLR级别"></a>SERIALIZABLR级别</h1><p>在该级别下，<font color="red"><b>MVCC退化为基于锁的协议，读均为当前读，读写都要加锁。遵循严格两阶段封锁协议，即所有的锁只在事务提交/终止时释放。</b></font></p><h1 id="对于复杂的SQL语句"><a href="#对于复杂的SQL语句" class="headerlink" title="对于复杂的SQL语句"></a>对于复杂的SQL语句</h1><p>到目前为止，我们介绍的所有情况都是WHERE后面为等值检索的情况，那么对于范围检索呢？我们来看一看。</p><h2 id="RR级别-1"><a href="#RR级别-1" class="headerlink" title="RR级别"></a><font size="5">RR级别</font></h2><p>同样的分两种情况</p><ol><li>如果WHERE中的检索条件有索引(聚簇索引/唯一索引/普通索引)，那么使用记录锁(行级锁)+Gap_Lock。</li><li>如果没有索引，则走聚簇索引进行全表扫描，锁定每一条记录和相应的间隙。</li></ol><h2 id="RC级别-1"><a href="#RC级别-1" class="headerlink" title="RC级别"></a><font size="5">RC级别</font></h2><ol><li>如果WHERE中检索条件有索引，那么使用记录锁(行级锁)锁定满足条件的记录，不使用Gap_Lock。</li><li>如果没有索引，同样走聚簇索引进行全表扫描，首先对所有的记录都加锁，但是不使用Gap_Lock，最后释放不满足条件的记录上的锁(违反2PL规定)。</li></ol><h1 id="RC级别-2"><a href="#RC级别-2" class="headerlink" title="RC级别"></a>RC级别</h1><p>RC级别基本不使用，这里简单介绍一下</p><ol><li>读为当前读(每次读取最新数据)，并且不加锁</li><li>写加锁，加锁方式和RC级别类似。</li></ol><h1 id="RR级别下的特殊情况"><a href="#RR级别下的特殊情况" class="headerlink" title="RR级别下的特殊情况"></a>RR级别下的特殊情况</h1><p>前面说了，在RR级别下，WHERE检索条件中使用聚簇索引/唯一索引进行等值查询时候，不需要使用Gap_Lock。因为Gap_Lock主要用于防止幻读，而在这种情况下最多检索出一条记录。那么现在有一种特殊情况：如果没有检索到满足条件的记录，此时Gap_Lock能省略么？<br><img src="/2020/02/29/详解MySQL加锁处理/1.png" alt><br>如图，假设我们在SQL语句为update table set name=’E’ where id=3;此时由于表中没有id=3的记录，那么此时应该使用Gap_Lock，将id=3所在的间隙使用间隙锁锁住，防止其他事务在此期间插入数据。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于MySQL InnoDB存储引擎在并发环境下的加锁情况大概就是这些，对于更复杂情况(WHERE中有多个不同的检索条件)，这里不做介绍。有一点需要注意：不管是什么隔离级别，对于满足条件的记录，一旦加锁，锁只能等到事务提交/终止时释放。</p><hr><p><a href="https://www.jianshu.com/p/e96e26c89869" target="_blank" rel="noopener">MySQL加锁分析–简书</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 并发控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看MySQL正在执行的事务/锁/等待信息</title>
      <link href="/2020/02/28/%E6%9F%A5%E7%9C%8BMySQL%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BA%8B%E5%8A%A1-%E9%94%81-%E7%AD%89%E5%BE%85%E4%BF%A1%E6%81%AF/"/>
      <url>/2020/02/28/%E6%9F%A5%E7%9C%8BMySQL%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BA%8B%E5%8A%A1-%E9%94%81-%E7%AD%89%E5%BE%85%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>在5.5中，information_schema库中增加了三个关于锁的表，它们分别是：innodb_trx–当前运行的所有事务、innodb_locks–当前出现的锁以及innodb_lock_waits–锁等待的对应关系。今天看了一篇博客，对这方面进行了介绍。觉得写得很好，为了防止原博客404，特此记录一下。</p><hr><a id="more"></a><h1 id="常用的showstatus命令"><a href="#常用的showstatus命令" class="headerlink" title="常用的showstatus命令"></a>常用的showstatus命令</h1><ol><li>查询返回的行数<br>show status like ‘%innodb_rows_read%’ </li><li>插入成功的行数<br>show status like ‘%innodb_rows_inserted%’ </li><li>更新成功的行数<br>show status like ‘%innodb_rows_updated%’ </li><li>删除成功的行数<br>show status like ‘%innodb_rows_deleted%’ </li><li>查看慢查询<br>show status like ‘%Slow%’ </li><li>查看运行时间<br>show status like ‘%up%’ </li><li>查看锁的时间分布<br>show status like’%innodb_row_lock%’; </li><li>执行select的计数<br>show status like ‘%Com_select%’ </li><li>执行insert的计数，批量插入算一次<br>show status like ‘%Com_insert%’ </li><li>执行更新操作的计数<br>show status like ‘%Com_update%’ </li><li>执行删除操作的计数<br>show status like ‘%Com_delete%’ </li><li>提交事务计数<br>show status like ‘%Com_commit%’ </li><li>回滚事务计数<br>show status like ‘%Com_rollback%’ </li><li>查看警告信息<br>show warnings<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;innodb_row_lock_%&apos;;</span><br><span class="line">+-------------------------------+-----------+</span><br><span class="line">| Variable_name                 | Value     |</span><br><span class="line">+-------------------------------+-----------+</span><br><span class="line">| Innodb_row_lock_current_waits | 2         |</span><br><span class="line">| Innodb_row_lock_time          | 334377476 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 50678     |</span><br><span class="line">| Innodb_row_lock_time_max      | 51974     |</span><br><span class="line">| Innodb_row_lock_waits         | 6598      |</span><br><span class="line">+-------------------------------+-----------+</span><br><span class="line"></span><br><span class="line">解释如下：</span><br><span class="line">Innodb_row_lock_current_waits : 当前等待锁的数量</span><br><span class="line">Innodb_row_lock_time : 系统启动到现在，锁定的总时间长度</span><br><span class="line">Innodb_row_lock_time_avg : 每次平均锁定的时间</span><br><span class="line">Innodb_row_lock_time_max : 最长一次锁定时间</span><br><span class="line">Innodb_row_lock_waits : 系统启动到现在总共锁定的次数</span><br></pre></td></tr></table></figure></li></ol><h1 id="innodb-locks"><a href="#innodb-locks" class="headerlink" title="innodb_locks"></a>innodb_locks</h1><ol><li>在MySQL下使用desc information_schema.innodb_locks;语句可以查看innodb_locks表的结构，如图所示<br><img src="/2020/02/28/查看MySQL正在执行的事务-锁-等待信息/1.png" alt></li><li>使用select * from information_schema.innodb_locks\G;查看表中数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">表各个字段含义</span><br><span class="line">+-------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------------+---------------------+------+-----+---------+-------+</span><br><span class="line">| lock_id | varchar(81) | NO | | | |#锁ID</span><br><span class="line">| lock_trx_id | varchar(18) | NO | | | |#拥有锁的事务ID</span><br><span class="line">| lock_mode | varchar(32) | NO | | | |#锁模式</span><br><span class="line">| lock_type | varchar(32) | NO | | | |#锁类型</span><br><span class="line">| lock_table | varchar(1024) | NO | | | |#被锁的表</span><br><span class="line">| lock_index | varchar(1024) | YES | | NULL | |#被锁的索引</span><br><span class="line">| lock_space | bigint(21) unsigned | YES | | NULL | |#被锁的表空间号</span><br><span class="line">| lock_page | bigint(21) unsigned | YES | | NULL | |#被锁的页号</span><br><span class="line">| lock_rec | bigint(21) unsigned | YES | | NULL | |#被锁的记录号</span><br><span class="line">| lock_data | varchar(8192) | YES | | NULL | |#被锁的数据</span><br><span class="line">+-------------+---------------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure><h1 id="innodb-lock-waits"><a href="#innodb-lock-waits" class="headerlink" title="innodb_lock_waits"></a>innodb_lock_waits</h1><ol><li>使用desc information_schema.innodb_lock_waits;命令查看innodb_lock_waits表的结构，如图所示<br><img src="/2020/02/28/查看MySQL正在执行的事务-锁-等待信息/2.png" alt></li><li>使用select * from information_schema.innodb_lock_waits\G;查看表中数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">表各个字段含义</span><br><span class="line">+-------------------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+-------------------+-------------+------+-----+---------+-------+</span><br><span class="line">| requesting_trx_id | varchar(18) | NO | | | |#请求锁的事务ID</span><br><span class="line">| requested_lock_id | varchar(81) | NO | | | |#请求锁的锁ID</span><br><span class="line">| blocking_trx_id | varchar(18) | NO | | | |#当前拥有锁的事务ID</span><br><span class="line">| blocking_lock_id | varchar(81) | NO | | | |#当前拥有锁的锁ID</span><br><span class="line">+-------------------+-------------+------+-----+---------+-------+</span><br></pre></td></tr></table></figure></li></ol><h1 id="innodb-trx"><a href="#innodb-trx" class="headerlink" title="innodb_trx"></a>innodb_trx</h1><ol><li>使用desc information_schema.innodb_trx;命令查看innodb_trx表的结构，如图所示<br><img src="/2020/02/28/查看MySQL正在执行的事务-锁-等待信息/3.png" alt></li><li>使用select * from information_schema.innodb_trx\G;查看表中数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">表各个字段的含义</span><br><span class="line">desc information_schema.innodb_trx;</span><br><span class="line">+----------------------------+---------------------+------+-----+---------------------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+----------------------------+---------------------+------+-----+---------------------+-------+</span><br><span class="line">| trx_id | varchar(18) | NO | | | |#事务ID</span><br><span class="line">| trx_state | varchar(13) | NO | | | |#事务状态：</span><br><span class="line">| trx_started | datetime | NO | | 0000-00-00 00:00:00 ||#事务开始时间；</span><br><span class="line">| trx_requested_lock_id | varchar(81) | YES | | NULL ||#innodb_locks.lock_id</span><br><span class="line">| trx_wait_started | datetime | YES | | NULL | |#事务开始等待的时间</span><br><span class="line">| trx_weight | bigint(21) unsigned | NO | | 0 | |#</span><br><span class="line">| trx_mysql_thread_id | bigint(21) unsigned | NO | | 0 ||#事务线程ID</span><br><span class="line">| trx_query | varchar(1024) | YES | | NULL | |#具体SQL语句</span><br><span class="line">| trx_operation_state | varchar(64) | YES | | NULL ||#事务当前操作状态</span><br><span class="line">| trx_tables_in_use | bigint(21) unsigned | NO | | 0 ||#事务中有多少个表被使用</span><br><span class="line">| trx_tables_locked | bigint(21) unsigned | NO | | 0 ||#事务拥有多少个锁</span><br><span class="line">| trx_lock_structs | bigint(21) unsigned | NO | | 0 | |#</span><br><span class="line">| trx_lock_memory_bytes | bigint(21) unsigned | NO | | 0 ||#事务锁住的内存大小（B）</span><br><span class="line">| trx_rows_locked | bigint(21) unsigned | NO | | 0 ||#事务锁住的行数</span><br><span class="line">| trx_rows_modified | bigint(21) unsigned | NO | | 0 ||#事务更改的行数</span><br><span class="line">| trx_concurrency_tickets | bigint(21) unsigned | NO | | 0 ||#事务并发票数</span><br><span class="line">| trx_isolation_level | varchar(16) | NO | | | |#事务隔离级别</span><br><span class="line">| trx_unique_checks | int(1) | NO | | 0 | |#是否唯一性检查</span><br><span class="line">| trx_foreign_key_checks | int(1) | NO | | 0 | |#是否外键检查</span><br><span class="line">| trx_last_foreign_key_error | varchar(256) | YES | | NULL ||#最后的外键错误</span><br><span class="line">| trx_adaptive_hash_latched | int(1) | NO | | 0 | |#</span><br><span class="line">| trx_adaptive_hash_timeout | bigint(21) unsigned | NO | | 0 ||#</span><br><span class="line">+----------------------------+---------------------+------+-----+---------------------+-------+</span><br></pre></td></tr></table></figure></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一旦事务开启，innodb_trx表就有数据，有多少个未提交事务就有多少条数据。只有产生锁等待时，innodb_locks和innodb_lock_waits这两张表才会有数据。<br><a href="https://www.lenzhao.com/topic/58ddd36991788f6621e758fb" target="_blank" rel="noopener">查看Mysql正在执行的事务，锁，等待</a><br><a href="http://blog.sina.com.cn/s/blog_8dc13ec50102xi2d.html" target="_blank" rel="noopener">mysqlshowstatus常用命令</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中获取锁超时和死锁问题</title>
      <link href="/2020/02/28/MySQL%E4%B8%AD%E8%8E%B7%E5%8F%96%E9%94%81%E8%B6%85%E6%97%B6%E5%92%8C%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/02/28/MySQL%E4%B8%AD%E8%8E%B7%E5%8F%96%E9%94%81%E8%B6%85%E6%97%B6%E5%92%8C%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>MySQL地InnoDB引擎地并发控制有两种形式：分别是MVCC和两阶段封锁协议。在前面说过，两阶段封锁协议可能会出现死锁问题，那么出现死锁之后该如何处理呢？通过本文你将了解MySQL处理死锁问题以及获取锁超时问题地方式。本文所有实验演示全部基于Win10环境下MySQL5.5版本</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在多个事务并发执行时，可能会出现两种情况</p><ol><li>一个事务长时间地持有锁，导致其他事务长时间阻塞–获取锁超时。</li><li>死锁问题。</li></ol><p>下面我将通过实验演示MySQL如何解决这两种情况。</p><h1 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h1><p>在数据库中，死锁的定义如下：两个事务都持有对方需要的锁，并且在等待对方释放，并且双方都不会释放自己已经持有的锁。<br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/1.jpg" alt><br>由于MySQL使用的是两阶段封锁协议，因此MySQL在并发环境下可能会出现死锁。</p><h1 id="死锁检测和恢复"><a href="#死锁检测和恢复" class="headerlink" title="死锁检测和恢复"></a>死锁检测和恢复</h1><p>MySQL不能保证不产生死锁，那么它就必须采用检测和恢复机制。检查系统状态的算法周期新激活，判断有无死锁发生。如果发生死锁，则系统必须尝试着从死锁中恢复。</p><h2 id="死锁检测"><a href="#死锁检测" class="headerlink" title="死锁检测"></a><font size="5">死锁检测</font></h2><p>死锁可以用称为等待图的有向图来描述，该图由G=(V,E)来描述，其中V是顶点集，E是边集。顶点集由系统中所有事务组成，边集E的每个元素是一个有序对Ti–&gt;Tj。如果Ti–&gt;Tj属于E，则表示Ti在等待Tj释放所需要的数据项。当Ti申请的数据项被Tj持有时，边Ti–&gt;Tj被插入等待图中，只有当Tj不再持有Ti需要的数据项时，Ti–&gt;Tj才被删除。<br><font size="5" color="red"><b>当且仅当等待途中包含环时，系统中存在死锁，该环的每一个事务称为处于死锁状态。</b></font>要检测死锁，系统需维护等待图，并周期性的激活一个在等待图中搜索环的算法。<br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/1.png" alt><br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/2.png" alt><br>如上图，第一张图中不存在环，因此没有死锁发生；而在第二张图中存在环，因此T2、T3以及T4处于死锁状态，需要进行死锁恢复。</p><h2 id="死锁恢复"><a href="#死锁恢复" class="headerlink" title="死锁恢复"></a><font size="5">死锁恢复</font></h2><p>当检测到死锁时，系统必须从死锁中恢复，解除死锁最通常的做法是回滚一个或多个事务。采取的动作有三个：</p><ol><li><p><b>选择牺牲者</b><br>死锁发生后，系统选择插入更新或者删除数量最少的事务进行回滚(基于INFORMATION_SCHEMA.INNODB_TRX表中的trx_weight字段来判断)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用该SQL语句可以查看事务信息(后面的博客会详细介绍)</span><br><span class="line">select * from information_schema.innodb_trx\G;</span><br></pre></td></tr></table></figure></li><li><p><b>饿死</b><br>防止某个事务在发生死锁时总是被回滚，导致该事务总是无法执行完毕，这样就发生饿死。为了防止这种情况，可以将事务的回滚次数作为一个影响因素来计算trx_weight。</p></li></ol><h2 id="死锁实验"><a href="#死锁实验" class="headerlink" title="死锁实验"></a><font size="5">死锁实验</font></h2><p>我们创建一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table deadlock_test(</span><br><span class="line">    ID  int primary key,</span><br><span class="line">    number int</span><br><span class="line">);</span><br><span class="line">并插入几条记录</span><br></pre></td></tr></table></figure><p>开启两个事务T1和T2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T1: update deadlock_test set number=-1 where ID=13;</span><br><span class="line">    update deadlock_test set number=-1 where ID=1;</span><br><span class="line">    update deadlock_test set number=-1 where ID=3;</span><br><span class="line"></span><br><span class="line">T2:update deadlock_test set number=-2 where ID=3;</span><br><span class="line">   update deadlock_test set number=-2 where ID=1;</span><br></pre></td></tr></table></figure><p>为了更明显的区分，我让T1多做了一次update操作，这样发生死锁时就会回滚T2。以上事务执行顺序如下</p><ol><li>T1先执行前两个SQL语句</li><li>T2执行第一条SQL语句</li><li>T1再执行第三条SQL语句</li><li>T2执行第二条SQL语句</li></ol><p><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/3.png" alt>，再RR级别下，只有更新操作时，被回滚的事务直接终止。</p><h1 id="超时等待"><a href="#超时等待" class="headerlink" title="超时等待"></a>超时等待</h1><p>在MySQL中，还有一种情况：那就是当一个事务长时间持有锁时，被阻塞的事务会一直等待该锁，那么等待多久呢？超时之后呢？</p><h2 id="等待多久"><a href="#等待多久" class="headerlink" title="等待多久"></a><font size="5">等待多久</font></h2><p>在MySQL中，InnoDB默认的行级锁等待时间为50s。可以通过设置innodb_lock_wait_timeout的值来改变超时时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innodb_lock_wait_timeout</span><br><span class="line">默认值：50s</span><br><span class="line">最小值：1s</span><br><span class="line">最大值：1073741824</span><br></pre></td></tr></table></figure><p>可以通过下面命令查看超时等待时间</p><ol><li><font size="5" color="red"><b>show variables like ‘innodb_lock_wait_timeout’;–查看当前会话</b></font></li><li><font size="5" color="red"><b>show global variables like ‘innodb_lock_wait_timeout’;–查看全局设置</b></font></li></ol><p>通过下面SQL语句修改会话当前会话行级锁超时时间</p><ol start="3"><li><font size="5" color="red"><b>set innodb_lock_wait_timeout=?；</b></font></li></ol><h2 id="超时之后"><a href="#超时之后" class="headerlink" title="超时之后"></a><font size="5">超时之后</font></h2><p>当事务等待锁超时之后，会进行事务回滚，回滚到当前SQL语句(使事务等待锁的语句)上一步。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><font size="5">测试</font></h2><p>锁超时的实验很好测试，表还是上面的表，开启两个事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T1:update deadlock_test set number=-1 where ID=1;</span><br><span class="line"></span><br><span class="line">T2:update deadlock_test set number=-2 where ID=1;</span><br></pre></td></tr></table></figure><p>两事务同时对一条记录进行修改，就会发生锁争用现象，后面的事务会被阻塞，知道获得锁或者超时。<br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/4.png" alt></p><h1 id="附-查看修改超时时间操作截图"><a href="#附-查看修改超时时间操作截图" class="headerlink" title="附(查看修改超时时间操作截图)"></a>附(查看修改超时时间操作截图)</h1><ol><li>查看行级锁超时时间<br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/5.png" alt></li><li>设置当前会话行级锁超时时间<br><img src="/2020/02/28/MySQL中获取锁超时和死锁问题/6.png" alt></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于MySQL中的死锁问题的介绍就到这里，由于MySQL使用两阶段封锁协议，不能保证不发生死锁，因此InnoDB具有完善的死锁检测和恢复机制。今天的介绍就到这里。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
            <tag> 死锁 </tag>
            
            <tag> 锁超时 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库封锁协议</title>
      <link href="/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%81%E9%94%81%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>在前一篇文章中介绍了数据库中常见的锁，本文主要介绍数据库并发控制中的两种封锁协议，它们分别是：三级封锁协议和两阶段封锁协议。</p><hr><a id="more"></a><h1 id="三级封锁协议"><a href="#三级封锁协议" class="headerlink" title="三级封锁协议"></a>三级封锁协议</h1><p>三级封锁协议，主要约定了申请锁、释放锁的时机。</p><h2 id="一级封锁协议"><a href="#一级封锁协议" class="headerlink" title="一级封锁协议"></a><font size="5">一级封锁协议</font></h2><p><font color="red"><b>事务T要修改数据A时必须加X锁，直到T结束才释放锁。</b></font>可以解决丢失修改问题(脏写)，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。<br><img src="/2020/02/28/数据库封锁协议/1.png" alt></p><h2 id="二级封锁协议"><a href="#二级封锁协议" class="headerlink" title="二级封锁协议"></a><font size="5">二级封锁协议</font></h2><p>在一级封锁协议的基础上，<font color="red"><b>事务对数据的访问必须加S锁，访问完毕后立刻释放。</b></font>可以解决读脏数据问题，因为如果一个事务在对数据A进行修改，根据一级封锁协议，会加X锁，那么就不能再加S锁了，也就是不会读入数据。<br><img src="/2020/02/28/数据库封锁协议/2.png" alt></p><h2 id="三级封锁协议-1"><a href="#三级封锁协议-1" class="headerlink" title="三级封锁协议"></a><font size="5">三级封锁协议</font></h2><p>在二级封锁协议的基础上，<font color="red"><b>要求读取数据A时必须加S锁，直到事务结束了才能释放S锁。</b></font>可以解决不可重复读的问题，因为读A时，其它事务不能对A加X锁，从而避免了在读的期间数据发生改变。<br><img src="/2020/02/28/数据库封锁协议/3.png" alt><br>可以发现，对于第三级封锁协议，所有的锁都在事务结束时释放。</p><h1 id="两阶段封锁协议"><a href="#两阶段封锁协议" class="headerlink" title="两阶段封锁协议"></a>两阶段封锁协议</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font size="5">定义</font></h2><p>该协议要求每个事务分两个阶段提出加锁和解锁申请</p><ol><li><b>增长阶段</b><br>事务可以获得锁，但是不能释放锁</li><li><b>缩减阶段</b><br>事务可以释放锁，但是不能获得新锁。</li></ol><p>最初事务处于增长阶段，事务根据需要获得锁，一旦事务释放了锁，那么事务就进入了缩减阶段，并且不能再发出加锁请求。在两阶段封锁协议中，解锁阶段不必出现在事务末尾。</p><h2 id="冲突可串行化"><a href="#冲突可串行化" class="headerlink" title="冲突可串行化"></a><font size="5">冲突可串行化</font></h2><ul><li><b>冲突可串行化</b><br>如果一个调度与一个串行调度冲突等价，那么我们称该调度是冲突可串行化的。简而言之，一个冲突可串行化的调度可以转换为一个串行调度。</li></ul><p>可以证明：两阶段封锁协议保证了冲突可串行化。对于任何事务，在调度中获得其最后加锁的位置(增长阶段结束点)称为事务的封锁点。这样，多个事务可以根据可以根据它们的封锁点进行排序。实际上，这个顺序就是事务地一个可串行化顺序。</p><h2 id="严格两阶段封锁协议-S2PL"><a href="#严格两阶段封锁协议-S2PL" class="headerlink" title="严格两阶段封锁协议(S2PL)"></a><font size="5">严格两阶段封锁协议(S2PL)</font></h2><p>在两阶段封锁协议下，级联回滚是可能发生的。</p><ul><li><b>级联回滚</b><br>一个事务T1读取到了T2未提交的数据并对该数据进行了操作，当T2回滚时，T1也必须跟着回滚，这就是级联回滚。级联回滚导致大量撤销工作，是我们不希望发生的<br><img src="/2020/02/28/数据库封锁协议/4.png" alt>如图所示，三个事务都满足两阶段封锁协议，但是会出现级联回滚现象：T3事务读取到A的数据后T1发生回滚，那么T2和T3都要回滚。</li></ul><p>为了防止级联回滚现象，我们可以使用严格两阶段锁协议：在两阶段封锁协议的基础上，<font color="red"><b>严格两阶段封锁协议要求所有的锁只能在事务提交时释放。</b></font>这样以来，就不会出现级联回滚。<br><img src="/2020/02/28/数据库封锁协议/1.jpg" alt>如图所示，所有的锁在事务结束时释放。</p><h1 id="锁转换"><a href="#锁转换" class="headerlink" title="锁转换"></a>锁转换</h1><p>我们考虑下面两个事务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">T1: read(a1);</span><br><span class="line">    read(a2);</span><br><span class="line">    ......</span><br><span class="line">    read(an);</span><br><span class="line">    write(a1);</span><br><span class="line"></span><br><span class="line">===============</span><br><span class="line">T2: read(a1);</span><br><span class="line">    read(a2);</span><br><span class="line">    display(a1+a2);</span><br></pre></td></tr></table></figure><p>如果我们使用两阶段封锁协议或者是严格两阶段封锁协议，那么T1必须对a1加排他锁。这样一来，两个事务相当于是串行执行。如果我们这样做：<font color="red"><b>T1在开始时对a1加共享锁，然后在需要时将其变更为排他锁，那么可以获得更高的并发度。</b><br>我们对两阶段封锁协议加以修改，使之允许锁转换。我们提供将共享锁升级为排他锁，以及将排他锁降级为共享锁的机制。</font></p><ol><li><font size="5"><b>升级：共享锁–&gt;排他锁，只发生在增长阶段。</b></font></li><li><font size="5"><b>降级：排他锁–&gt;共享锁，只发生在缩减阶段。</b></font></li></ol><hr><h1 id="三级封锁协议和两阶段封锁协议区别"><a href="#三级封锁协议和两阶段封锁协议区别" class="headerlink" title="三级封锁协议和两阶段封锁协议区别"></a>三级封锁协议和两阶段封锁协议区别</h1><p>个人认为两种协议的目的是不一样的，对于三级封锁协议，目的是为了保证一致性，能够解决脏写、脏读、不可重复读等一致性问题；而对于两阶段封锁协议，是为了保证事务的隔离性，前面说过，使用两阶段封锁协议的调度一定是冲突可串行化的，也就是说，一个调度如果使用两阶段协议，那么该调度一定能保证多个事务在并发情况下可以串行执行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>严格两阶段封锁协议(含锁转换)在数据库管理系统中广泛使用(如MySQL的SERIALIZABLE下使用的就是该协议)，我们总结一下该协议</p><ol><li>当事务T进行read(Q)操作时，系统产生lock-S(Q)指令，该read(Q)紧跟其后</li><li>当事务T进行write(Q)操作时，系统检查R是否已在Q上持有共享锁<ul><li>若有，则系统进行锁升级。发出upgrade(Q)指令，后面紧跟write(Q)指令</li><li>否则，系统发出lock-X(Q)指令，write(Q)指令紧跟其后</li></ul></li><li>当一个事务提交或终止后，该事务释放所有的锁。</li></ol><p>另外需要注意，无论是2PL还是S2PL，都可能会出现死锁。至于死锁出现后如何解决，后面介绍。</p><hr><p>参考书籍：《数据库系统概念》<br><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#%E5%B0%81%E9%94%81%E7%B2%92%E5%BA%A6" target="_blank" rel="noopener">参考文章</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 并发控制 </tag>
            
            <tag> 封锁协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的锁类型</title>
      <link href="/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%94%81%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%94%81%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍数据库并发控制中几种不同的锁类型，为后面MySQL在四种隔离级别下的加锁情况做铺垫。</p><hr><a id="more"></a><h1 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h1><ol><li><font size="5"><b>按锁的粒度分</b></font><ul><li>表级锁</li><li>行级锁</li><li>页级锁</li></ul></li><li><font size="5"><b>按加锁方式分</b></font><ul><li>自动锁(隐式锁)</li><li>显式锁</li></ul></li><li><font size="5"><b>按锁的级别分</b></font><ul><li>共享锁</li><li>排他锁</li><li>意向锁</li></ul></li><li><font size="5"><b>按使用方式分</b></font><ul><li>乐观锁</li><li>悲观锁</li></ul></li></ol><p>下面我们就来介绍一下这些锁</p><h1 id="行级锁、表级锁和页级锁"><a href="#行级锁、表级锁和页级锁" class="headerlink" title="行级锁、表级锁和页级锁"></a>行级锁、表级锁和页级锁</h1><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a><font size="5">行级锁</font></h2><p>行级锁分为共享锁(S)和排他锁(X)，行级锁是MySQl中粒度最细的锁。InnoDB引擎支持行级锁和表级锁，只有通过索引条件检索数据时，才会使用行级锁，否则就会使用表级锁。行级锁开销大，加锁粒度最小，发生锁争用概率最低，性能最高。</p><h2 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a><font size="5">表级锁</font></h2><p>表级锁也分为共享锁(S)和排他锁(X)。表级锁开销小，加锁快，锁定力度大，发生锁争用概率高，并发度最低。</p><h2 id="页级锁"><a href="#页级锁" class="headerlink" title="页级锁"></a><font size="5">页级锁</font></h2><p>页级锁是MySQL中锁定粒度介于行级锁和表级锁之间的锁。表级锁速度快，但冲突多，行级锁锁定满但冲突少；于是取了折中的页级锁，一次锁定相邻的一组记录。BDB支持页级锁。</p><h1 id="隐式-显式锁"><a href="#隐式-显式锁" class="headerlink" title="隐式/显式锁"></a>隐式/显式锁</h1><p>如果某个事务T对数据库中的一个表加了共享的或者是排他的表级锁，那么该事务T隐式的对该表的所有记录加上了相同类型的(S/X)行级锁。<br>前者是显式锁，而后者是隐式锁。</p><h1 id="共享锁、排他锁和意向锁"><a href="#共享锁、排他锁和意向锁" class="headerlink" title="共享锁、排他锁和意向锁"></a>共享锁、排他锁和意向锁</h1><h2 id="排他锁-X-exclusive-Lock"><a href="#排他锁-X-exclusive-Lock" class="headerlink" title="排他锁(X-exclusive Lock)"></a><font size="5">排他锁(X-exclusive Lock)</font></h2><p>排他锁又叫写锁，如果事务T对A加上排他锁，那么其他事务都不能对A加任何类型的锁(即其他事务对A的访问修改必须等到该锁被释放之后)。持有排他锁的事务既能读取数据，又能修改数据。</p><h2 id="共享锁-S-share-Lock"><a href="#共享锁-S-share-Lock" class="headerlink" title="共享锁(S-share Lock)"></a><font size="5">共享锁(S-share Lock)</font></h2><p>共享锁又叫读锁，如果事务T对A加上共享锁，则其他事务可以继续对A加共享锁，但是不能加排他锁(即多个事务可以同时持有数据的共享锁)。持有共享锁的事务只能读取数据，不能修改数据。</p><h2 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a><font size="5">意向锁</font></h2><p>意向锁是表级锁，又分为两种</p><ol><li>意向共享锁(IS)</li><li>意向排他锁(IX)</li></ol><p>现在来考虑一个问题：<font color="red"><b>事务T1锁住了表的一行r1，而事务T2要锁住整张表。</b></font>这样明显会出现问题，两个事务在r1上会发生冲突。这时行级锁和表级锁就会发生冲突，这时候就需要用到意向锁。<br>有了意向锁之后，当事务A在申请行级锁(写锁)之前，数据库会自动给事务A申请表的意向锁(写锁)。当事务B去申请表的写锁时就会失败，因为表上有意向排他锁之后事务B申请表的写锁时会被阻塞。</p><p>下面是S锁、X锁、IS锁和IX锁之间的兼容关系<br><img src="/2020/02/28/数据库的锁类型/1.png" alt></p><h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p>乐观锁和悲观锁实际上说的是并发控制的两种思想，其中悲观锁会假设事务在访问数据的时候一定会发生冲突，因此每次在访问的时候都会加锁，这里的锁是指前面讲到的行级锁、表级锁等。而乐观锁，顾名思义比较乐观，假定事务每次访问数据时不会发生冲突，因此不会对数据进行加锁，当出现冲突时再进行补救。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对锁的介绍就到这里，其实还有一些锁没有介绍，例如间隙锁(Gap Lock)、下一键锁(Next-Key Lock)等，这两种锁能够解决幻行问题，在介绍MySQL可重复读级别下加锁情况时再另外介绍。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 并发控制 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解MySQL的InnoDB引擎MVCC机制</title>
      <link href="/2020/02/27/%E8%AF%A6%E8%A7%A3MySQL%E7%9A%84InnoDB%E5%BC%95%E6%93%8EMVCC%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/02/27/%E8%AF%A6%E8%A7%A3MySQL%E7%9A%84InnoDB%E5%BC%95%E6%93%8EMVCC%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在前面两篇博客中分别介绍了数据库的四大特性和数据库的四大隔离级别。那么不知道你有没有想过：数据库是怎么实现四大隔离级别的呢？由于不同的数据库实现方法可能不同，我就以我常用的MySQL为例，介绍一下MySQL的InnoDB如何实现数据库四大隔离级别，本文基于Win10环境下MySQL5.5版本。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>多版本并发控制(MVCC)是MySQL的InnoDB存储引擎实现隔离级别的一种具体方式，该方式主要实现了提交读和可重复读两种隔离级别，至于未提交读较为简单，要求很低，无需使用MVCC；而较高的隔离级别SERIALIZABLE，通过两阶段锁协议实现。这些在后文我会一一进行介绍。</p><h1 id="MySQL行记录的元信息"><a href="#MySQL行记录的元信息" class="headerlink" title="MySQL行记录的元信息"></a>MySQL行记录的元信息</h1><p>我们在创建一张表时，会指明这张表有哪些列(属性)，列名以及列的类型(int char等)。但是在InnoDB中，除了我们指定的列以外，MySQL还会添加两个隐藏列：</p><ol><li><font color="red"><b>trx_id</b></font><br>存储操作(增删改)这条记录的事务ID，后面会介绍ID的概念。</li><li><font color="red"><b>db_roll_ptr</b></font><br>一个指向Undo记录的指针。同样，后面会介绍Undo记录。</li></ol><p>这两个列被称为<b>ROW HEADER–元信息</b>。我们来举例说明，假设我们创建一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table t(</span><br><span class="line">    ID int,</span><br><span class="line">    count int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>那么该表在InnoDB中是这样的：<br><img src="/2020/02/27/详解MySQL的InnoDB引擎MVCC机制/1.png" alt><br>在本节中，我们只需要了解行记录的元信息即可，至于它们的作用在后面的小节介绍。</p><h1 id="MySQL版本号"><a href="#MySQL版本号" class="headerlink" title="MySQL版本号"></a>MySQL版本号</h1><p>MySQL维护了两个版本号</p><ol><li><font color="red"><b>系统版本号(sys_id)</b></font><br>是一个递增的数字，每开启一个事务，该版本号+1。</li><li><font color="red"><b>事务版本号(trx_id)</b></font><br>事务开始时系统的版本号。事务的版本号能够表明事务开启的先后顺序。</li></ol><p>其中行记录元信息中的trx_id即为事务的版本号。</p><h1 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h1><p>InnoDB中使用B+树索引结构，并且主键所在的索引为<font color="red"><b>聚簇索引</b></font>。索引的每个叶子节点中保存了对应的数据内容。一个表只能有一个主键，所以只能有一个聚簇索引。<font color="red"><b>在MySQL中，聚簇索引只能是主键。</b></font>如果我们在创建表时候没有指定索引，那么对于InnoDB</p><ol><li>如果创建表时定义了主键，那么系统会自动为该主键创建聚簇索引</li><li>如果创建表时没有定义主键，<b>则系统会自动选择一个可以唯一标识数据记录的列作为主键。</b></li><li>如果没有满足条件的列，那么InnoDB会生成一个隐藏的主键作为聚簇索引。该隐藏主键6字节，并且自增。</li></ol><p>如果你对B+树有一定的了解，那么到目前为止你应该已经知道了MySQL中数据的组织方式。<font color="red"><b>即一张表就是一个B+树，树的每一个叶子节点就是表中的一条记录。</b></font></p><h1 id="回滚日志-Undo-Log"><a href="#回滚日志-Undo-Log" class="headerlink" title="回滚日志-Undo Log"></a>回滚日志-Undo Log</h1><p>MySQL的InnoDB中存在多种日志，如Redo Log、bin Log以及Undo Log等，而今天要介绍的就是和MVCC相关的Undo Log–回滚日志。当然，这里只是对回滚日志进行极其简单的学习，为后面的学习做准备。Undo Log用于数据的撤回操作，它记录了修改的反向操作，如插入对应删除、修改对应修改为原来的数据，通过Undo Log可以实现事务回滚，并且可以回滚到某个特定版本的数据，实现MVCC。<br>Undo Log分为INSERT和UPDATE两种(DELETE被视为特殊的更新，在记录上修改删除标记)</p><ol><li>当进行插入操作时，生成的INSERT Undo Log在事务提交后即可删除，这很容易理解，因为其他事务不需要这个Undo Log</li><li>进行删除修改操作时，生成对应的Undo Log。记录相应信息。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如在MySQL创建了一个表t，包含主键id和一个字段x，</span><br><span class="line">并假设系统版本号sys_id=1</span><br><span class="line">我们对该表进行如下操作：</span><br><span class="line">INSERT INTO t VALUES(1,&apos;a&apos;);</span><br><span class="line">UPDATE t SET x=&apos;b&apos; WHERE id=1;</span><br><span class="line">UPDATE t SET x=&apos;c&apos; WHERE id=1;</span><br></pre></td></tr></table></figure><p>我们没有使用start transaction来开启一个事务，因此根据MySQL的AUTOCOMMIT机制，每一条SQL语句都被当作一个事务执行，因此一共执行了三个事务，事务的版本号分别为1，2，3。<br><img src="/2020/02/27/详解MySQL的InnoDB引擎MVCC机制/2.png" alt><br>到目前为止，我们知道了数据在MySQL中的组织方式以及Undo记录，上图中Undo记录中每一个数据行被称为一张快照。</p><h1 id="事务执行状态的快照–ReadView"><a href="#事务执行状态的快照–ReadView" class="headerlink" title="事务执行状态的快照–ReadView"></a>事务执行状态的快照–ReadView</h1><p>MVCC维护了一个被称为READ VIEW的结构，它的基本结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReadView&#123;</span><br><span class="line">    creator_trx_id</span><br><span class="line">    trx_id_min</span><br><span class="line">    trx_id_max</span><br><span class="line">    id1</span><br><span class="line">    id2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构包含了当前系统所有活动的事务(未提交的事务)的trx_id。MVCC还维护了最大值(TRX_ID_MAX)和最小值(TRX_ID_MIN)，这表示当前未提交的事务中最年轻事务(最新开启)的ID和最年老事务(最早开启)的ID。<br><img src="/2020/02/27/详解MySQL的InnoDB引擎MVCC机制/1.jpg" alt><br>ReadView用于进行可见性判断，我们在后面详细说，现在你只需要知道：ReadView是由事务创建的(至于什么时候创建什么时候更新由不同的隔离级别决定)，用于可见性判断。</p><h1 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h1><p>在正式介绍四大隔离级别的实现时，我们先介绍两个概念，个人觉得这两个概念对于后面的学习至关重要。</p><h2 id="快照读-snapshot-read"><a href="#快照读-snapshot-read" class="headerlink" title="快照读(snapshot read)"></a><font size="5">快照读(snapshot read)</font></h2><p>MVCC中的SELECT操作读取的是快照中的数据，你可以理解为前面图中Undo记录中的数据，并不是B+树的节点。该操作不需要加锁。<br>在提交读和可重复读两种隔离级别下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ? FROM table WHERE ?</span><br></pre></td></tr></table></figure><p>这类普通的SELECT语句全部都是快照读！</p><h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a><font size="5">当前读</font></h2><p>MVCC其他修改数据的操作读取的是最新的数据，你可以理解为前面图中B+树的叶子节点。该操作需要加锁，至于加什么锁怎么加锁视情况而定。<br>在提交读和可重复读两种隔离级别下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT ? FROM table WHERE ? FOR SHARE MODE--加共享锁</span><br><span class="line">SELECT ? FROM table WHERE ? FOR UPDATE</span><br><span class="line">UPDATE</span><br><span class="line">INSERT</span><br><span class="line">DELETE</span><br></pre></td></tr></table></figure><p>除了第一条加共享锁外，其余都加排他锁。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>不知道你发现没有，<font color="red"><b>MVCC在进行普通SELECT时，读的都是快照中的数据，而在进行修改时，修改的都是B+树叶子节点上的数据(最新的数据)–这一结论仅在提交读和可重复读级别下成立。</b></font>这很类似于Java中的CopyOnWrite，实现了读写分离。</p><h1 id="READ-COMMIT-提交读"><a href="#READ-COMMIT-提交读" class="headerlink" title="READ COMMIT-提交读"></a>READ COMMIT-提交读</h1><p>在此隔离级别下，会存在不可重复读的问题。我们来看看此时MVCC是如何工作的</p><h2 id="ReadView的创建和更新时机"><a href="#ReadView的创建和更新时机" class="headerlink" title="ReadView的创建和更新时机"></a><font size="5">ReadView的创建和更新时机</font></h2><p>事务每一次快照读(snapshot read)都会创建一个新的ReadView，可以理解为每次SELECT时都会更新ReadView，得到所有当前最新的未提交的事务。</p><h2 id="MVCC具体实现–判断可见性"><a href="#MVCC具体实现–判断可见性" class="headerlink" title="MVCC具体实现–判断可见性"></a><font size="5">MVCC具体实现–判断可见性</font></h2><p>在进行普通SELECT操作时，根据数据行快照的trx_id与ReadView中trx_id_min和trx_id_max之间的关系，判断快照是否可用</p><ul><li><p><font color="blue" size="5"><b>trx_id==creator_trx_id</b></font><br>表示该数据行的快照是当前事务创建的，可以使用。</p></li><li><p><font color="blue" size="5"><b>trx_id&lt;trx_id_min</b></font><br>表示该数据行快照在当前所有未提交事务启动之前更改的，因此可以使用(即SELECT读取到该快照)。</p></li><li><p><font color="blue" size="5"><b>trx_id&gt;trx_id_max</b></font><br>表示该数据行快照是在事务启动后被修改的，因此不可使用该快照。</p></li><li><p><font color="blue" size="5"><b>trx_id_min&lt;=trx_id&lt;=trx_id_max</b></font><br>此时有两种情况</p><ol><li>如果该快照的trx_id在ReadView中，说明该快照对应的事务还没有提交，则该快照不可使用</li><li>如果该快照的trx_id不在ReadView中，说明该快照对应的事务已提交，在该隔离级别下可以使用。</li></ol></li><li><p><font color="red"><b>如果当前数据行快照不可使用，那么沿着db_roll_ptr找到该数据行的下一个快照重复上述步骤。</b></font></p></li></ul><h1 id="READ-REAPETABLE-可重复读"><a href="#READ-REAPETABLE-可重复读" class="headerlink" title="READ REAPETABLE-可重复读"></a>READ REAPETABLE-可重复读</h1><p>该隔离级别解决了不可重复读的问题，但是会存在幻行。</p><h2 id="ReadView的创建和更新时机-1"><a href="#ReadView的创建和更新时机-1" class="headerlink" title="ReadView的创建和更新时机"></a><font size="5">ReadView的创建和更新时机</font></h2><p>和提交读不同，在RR级别下，ReadView只创建一次，创建以后不会改变，在事务开始后第一此快照读(snapshot read)时创建。</p><h2 id="MVCC具体实现"><a href="#MVCC具体实现" class="headerlink" title="MVCC具体实现"></a><font size="5">MVCC具体实现</font></h2><p>在进行普通SELECT操作时，根据数据行快照的trx_id与ReadView中trx_id_min和trx_id_max之间的关系，判断快照是否可用</p><ul><li><font color="blue" size="5"><b>trx_id==creator_trx_id</b></font><br>表示该数据行的快照是当前事务创建的，可以使用。</li><li><font color="blue" size="5"><b>trx_id&lt;trx_id_min</b></font><br>表示该数据行快照在当前所有未提交事务启动之前更改的，因此可以使用(即SELECT读取到该快照)。</li><li><font color="blue" size="5"><b>trx_id&gt;trx_id_max</b></font><br>表示该数据行快照是在事务启动后被修改的，因此不可使用该快照。</li><li><font color="blue" size="5"><b>trx_id_min&lt;=trx_id&lt;=trx_id_max</b></font><br>所有的快照都不可使用，因为如果可以使用的话，那么就会产生不可重复读的问题。</li><li><font color="red"><b>如果当前数据行快照不可使用，那么沿着db_roll_ptr找到该数据行的下一个快照重复上述步骤。</b></font></li></ul><h1 id="READ-UNCOMMITTED-未提交读"><a href="#READ-UNCOMMITTED-未提交读" class="headerlink" title="READ UNCOMMITTED-未提交读"></a>READ UNCOMMITTED-未提交读</h1><p>在当前隔离级别下，每次读取只会读取最新的数据，不会遍历版本链(Undo记录)，不会进行查找可见版本，因此可能会出现脏读。即读取到其他未提交事务修改的数据。</p><h1 id="SERIALIZABLE-可串行化"><a href="#SERIALIZABLE-可串行化" class="headerlink" title="SERIALIZABLE-可串行化"></a>SERIALIZABLE-可串行化</h1><p>在此隔离级别上，MySQL执行严格两阶段锁(S2PL)并发控制协议，读操作全部是当前读，并且读写都要加锁！</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>对于MySQL并发事务的读操作，通过本文你应该了解了MVCC是如何进行控制的。我们知道，除非特别指定，MVCC下普通的读都是快照读，写都是要加锁的。那么问题来了，在不同的隔离级别下分别怎么加锁，要加什么锁呢？我会在后面的博客进行介绍。</p><hr><p>参考文章<br><a href="https://www.zhihu.com/question/263820564/answer/289269082" target="_blank" rel="noopener">来自知乎解答</a><br><a href="https://liuzhengyang.github.io/2017/04/18/innodb-mvcc/" target="_blank" rel="noopener">InnoDB存储引擎MVCC实现原理</a><br><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86.md#" target="_blank" rel="noopener">来自个人博客</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 隔离级别 </tag>
            
            <tag> InnoDB </tag>
            
            <tag> MVCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的四大隔离级别</title>
      <link href="/2020/02/26/%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2020/02/26/%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在上一篇博客中介绍了事务的四大特性，并且也说：为了提高性能和利用率，我们有时候会弱化一致性，设置不同的隔离级别。那么到底怎么做呢？设置不同的隔离级别之后又会带来哪些负面效果呢？下面就让我们来看一看事务的四大隔离级别。本文中相关实验基于Windows10环境下的MySQL实现。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数据库事务有四中隔离级别，级别越高，并发执行中安全性越高，但是性能相对越差，它们分别是：</p><ol><li><b>READ UNCIMMITTED–未提交读</b></li><li><b>READ COMMITTED–提交读</b></li><li><b>REPEATABLE READ–可重复读</b></li><li><b>SERIALIZABLE–可串行化</b></li></ol><p>下面我会通过实验分别介绍MySQL事务在四种隔离级别下会出现的问题。在此之前，我再介绍MySQL数据库中两条和隔离级别相关的SQL语句</p><ul><li><font color="red"><b>SELECT @@TX_ISOLATION</b></font><br>查看当前会话的隔离级别</li><li><font color="red"><b>SET SESSION TRANSACTION ISOLATION LEVEL 隔离级别</b></font><br>设置当前会话的隔离级别</li></ul><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>在正式开始介绍隔离级别之前，为了方便后面的实验演示，先为后面的相关实验做一下铺垫</p><ol><li>在Windows10下打开两个CMD窗口，并且在两个窗口中都登陆MySQL。如图所示<br><img src="/2020/02/26/事务的四大隔离级别/1.png" alt></li><li>我们先创建一个银行账户表(isolation_demo)，只有ID和count两个属性。方便我们后面做测试。如图我已经创建好了<br><img src="/2020/02/26/事务的四大隔离级别/2.png" alt></li><li>下面我们对于四种隔离级别下存在的问题将会在这张表上进行测试。</li></ol><h1 id="未提交读"><a href="#未提交读" class="headerlink" title="未提交读"></a>未提交读</h1><h2 id="作用及存在问题"><a href="#作用及存在问题" class="headerlink" title="作用及存在问题"></a><font size="5">作用及存在问题</font></h2><p>这是数据库事务最低的隔离级别，在此隔离级别下：<font color="red"><b>事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这种情况被称为脏读。</b></font>这个级别会导致许多问题，并且从性能上来说，该级别不会比其他级别好太多，但是却缺乏其他级别的很多好处，因此除非真的有非常必要的理由，在实际应用中很少使用。</p><h2 id="实验演示"><a href="#实验演示" class="headerlink" title="实验演示"></a><font size="5">实验演示</font></h2><ol><li><p>为了方便起见，我们将两个CMD窗口下的会话隔离级别都设置为READ UNMMITTED。<br><img src="/2020/02/26/事务的四大隔离级别/3.png" alt></p></li><li><p>在两个会话中各开启一个事务(先开启T1后开启T2)(start transaction;)，分别称为T1和T2(左图为T1)。</p></li><li><p>我们在T2中完成转账操作：A向B转账50元。在T1中进行查询余额。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T2的SQL操作</span><br><span class="line">update isolation_demo set count=count-50 where ID=&apos;A&apos;;--语句1</span><br><span class="line">update isolation_demo set count=count+50 where ID=&apos;B&apos;;--语句2</span><br><span class="line"></span><br><span class="line">=============================</span><br><span class="line">T1的SQL操作</span><br><span class="line">select * from isolation_demo;</span><br><span class="line">...执行多次该语句</span><br></pre></td></tr></table></figure></li><li><p>在T2事务的语句1执行之前，我们执行一次查询，得到如图所示结果<br><img src="/2020/02/26/事务的四大隔离级别/4.png" alt></p></li><li><p>我们转过来执行T2事务的语句1，得到如图所示结果<br><img src="/2020/02/26/事务的四大隔离级别/5.png" alt></p></li><li><p>我们在T1事务中再执行一次查询(select)<br><img src="/2020/02/26/事务的四大隔离级别/6.png" alt><br>和在第四步中查询得到的结果不同。这时候问题来了，我们看到T1中此时查询得到的是T2事务没有提交的修改，违反了事务的一致性，这样会导致很严重的问题。</p></li><li><p>在T2中执行语句2后，在T1中再执行一次查询，可以看到T1查询得到的结果再次发生变化，这里不做演示。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>我们可以看到，在未提交读级别下，会出现很严重的问题：<b>如果另一个事务在对数据进行修改，修改的过程中可能会违反数据库的一致性(如转账)，导致数据库处于不一致状态(在前面介绍ACID四大特性时有提到)，此时其他事务居然可以获取到该不一致状态</b>，这是很严重的问题。因此我们说，非必须情况下不适用该级别。</p><h1 id="提交读"><a href="#提交读" class="headerlink" title="提交读"></a>提交读</h1><h2 id="作用及存在问题-1"><a href="#作用及存在问题-1" class="headerlink" title="作用及存在问题"></a><font size="5">作用及存在问题</font></h2><ol><li><b>作用</b><br>大多数数据库的默认隔离级别都是READ COMMITTED(不包括MySQL)。该隔离级别解决了前面提到的脏读的问题。也就是说，一个事务从开始到提交之前，所做的任何修改对其他事务是不可见的。</li><li><b>存在问题</b><br>这个级别也叫做不可重复读，因为一个事务两次执行相同的查询，可能由于其他事务的修改可能得到不同的结果</li></ol><h2 id="实验演示-1"><a href="#实验演示-1" class="headerlink" title="实验演示"></a><font size="5">实验演示</font></h2><ol><li>同样的，我们将隔离级别改为READ COMMITTED。<br><img src="/2020/02/26/事务的四大隔离级别/7.png" alt></li><li>分别开启两个事务(先开启T1后开启T2)，并且两个事务的操作和前面相同。</li><li>在T2事务语句1执行前，语句1执行后语句2执行前，T2事务提交后这三个时刻T1事务各执行一次查询<br>T2事务语句1执行前<br><img src="/2020/02/26/事务的四大隔离级别/8.png" alt><br>T2事务语句1执行后，语句2执行前<br><img src="/2020/02/26/事务的四大隔离级别/9.png" alt><br>T2事务提交后<br><img src="/2020/02/26/事务的四大隔离级别/10.png" alt><br>如图，我们可以发现，T2事务中所做的修改对于T1是不可见的，但是由于T2事务对数据的修改，T1事务执行相同的查询得到了不一样的结果，这就是不可重复读。</li></ol><h1 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h1><h2 id="作用及存在问题-2"><a href="#作用及存在问题-2" class="headerlink" title="作用及存在问题"></a><font size="5">作用及存在问题</font></h2><ol><li><b>作用</b><br>通过名字不难理解，该级别不仅解决了脏读的问题，也解决了不可重复读的问题。也就是说，该级别保证了同一个事务多次读取同样的记录结果是一致的。MySQL默认的隔离级别即为可重复读。</li><li><b>存在问题</b><br>在该级别下，会存在幻行的问题，所谓幻行，指的是当事务A在读取某个范围内的记录时，另外一个事务B又在该范围内插入了新的记录，当之前的事务A再次读取该范围内的记录时，会产生幻行(即读取到事务B新插入的数据)。</li></ol><h2 id="实验演示-2"><a href="#实验演示-2" class="headerlink" title="实验演示"></a><font size="5">实验演示</font></h2><ol><li>我们将隔离级别改为REPEATABLE READ。<br><img src="/2020/02/26/事务的四大隔离级别/11.png" alt></li><li>分别开启两个事务(先开启T1后开启T2)，并且两个事务的操作和前面相同。</li><li>在T2事务语句1执行前，语句1执行后语句2执行前，T2事务提交后这三个时刻T1事务各执行一次查询<br>T2事务语句1执行前<br><img src="/2020/02/26/事务的四大隔离级别/12.png" alt><br>T2事务语句1执行后，语句2执行前<br><img src="/2020/02/26/事务的四大隔离级别/13.png" alt><br>T2事务提交后<br><img src="/2020/02/26/事务的四大隔离级别/14.png" alt><br>可以看到，当T1事务开启时，无论T2对数据进行怎样的修改，T1中重复查询多次得到的结果相同，这就叫做可重复读。至于该级别下的幻行问题，已经由MySQL的InnoDB执行引擎通过MVCC(多版本并发控制)解决，因此这里无法进行演示。</li></ol><h1 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h1><h2 id="作用及存在问题-3"><a href="#作用及存在问题-3" class="headerlink" title="作用及存在问题"></a><font size="5">作用及存在问题</font></h2><ol><li><b>作用</b><br>这是四大隔离级别中最高的级别。它通过强制事务串行执行，避免了前面说到的换行问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁，所以可能导致大量的超时和锁争用问题，实际应用中也很少使用这一级别。只有在非常需要确保数据一致性并且可以接受没有并发的情况下才考虑使用。</li><li><b>存在问题</b><br>性能低下，没有并发。</li></ol><h2 id="实验演示-3"><a href="#实验演示-3" class="headerlink" title="实验演示"></a><font size="5">实验演示</font></h2><ol start="2"><li>分别开启两个事务(顺序无所谓)，并且两个事务的操作和前面相同。</li><li>我们将隔离级别改为SERIALIZABLE。<br><img src="/2020/02/26/事务的四大隔离级别/15.png" alt></li><li>T2事务先执行语句1(此时T2事务对表加锁)，然后T1事务进行查询。<br><img src="/2020/02/26/事务的四大隔离级别/16.png" alt><br>由于是截图，所以不够直观，但是可以告诉你：<b>由于T2对表进行加锁，因此T1对该表的任何操作都会等到T2提交释放锁，T1获得锁之后才能进行，因此图中T1的查询操作会阻塞知道获得锁为止。</b>可以看到，此时所有事务串行执行，没有并发，性能低下。</li></ol><hr>对于事务四大隔离级别的介绍就到这里，文中提到的MVCC会在后续的博客中进一步介绍。<hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 隔离级别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务的ACID四大特性</title>
      <link href="/2020/02/25/%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/"/>
      <url>/2020/02/25/%E4%BA%8B%E5%8A%A1%E7%9A%84ACID%E5%9B%9B%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍数据库中事务的ACID四大特性。那么什么是事务？构成单一逻辑工作单元的操作集称作事务，一个事务可能包含很多个操作(多条SQL语句)，这些操作要么全部执行，要么全都不执行。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>既然说到了事务的四大特性，那么究竟是哪四大特性呢？我们来看看</p><ol><li><b>A(Atomic)–原子性</b></li><li><b>C(Consistency)–一致性</b></li><li><b>I(Isolation)–隔离性</b></li><li><b>D(Durebility)–持久性</b></li></ol><p>下面将分别对以上四大特性进行介绍，其中事务的一致性相对于其它三个特性比较模糊，因此着重介绍。</p><h1 id="Atomic–原子性"><a href="#Atomic–原子性" class="headerlink" title="Atomic–原子性"></a>Atomic–原子性</h1><p>一个事务必须被视为一个不可分割的最小单元，整个事务中所有的操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中一部分操作，这就是事务的原子性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">假设有两个银行账户A(余额1000)和B(余额2000)</span><br><span class="line">现在A要向B转账100元，即</span><br><span class="line">A=A-100；</span><br><span class="line">-----&gt;发生故障</span><br><span class="line">B=B+100；</span><br></pre></td></tr></table></figure><p>如上所示，数据库在实行完A-100后发生故障(如断电等)，那么由于事务的原子性，该事务将会回滚，即回到事务执行前的状态(A=1000，B=2000)，就像事务没有发生过一样。</p><ul><li><font size="5"><b>保证事务原子性的一个思路是</b></font><br><font color="red"><b>对于事务要执行写的数据项，数据库系统再磁盘上记录其旧值(本例中旧值分别为1000和2000)。这个信息记录在一个称为日志的文件中。如果事务没有完成它的执行，那么数据库从日志中恢复这个旧值，使得事务看上去从未执行过。</b></font>而这项恢复任务是通过数据库的恢复系统完成，也就是说，<b>保证原子性是数据库本身的责任。</b></li></ul><h1 id="Isolation–隔离性"><a href="#Isolation–隔离性" class="headerlink" title="Isolation–隔离性"></a>Isolation–隔离性</h1><p>事务可能并发执行，当多个用于并发访问数据库时，系统保证：<font color="red"><b>对于任何一对事务T1和T2，在T1看来，T2要么在T1开始之前已经完成，要么在T1结束之后开始执行。</b></font>事务的隔离性确保事务在并发执行后的系统状态与这些事务以某种次序一个接一个地执行后的状态是等价的。确保隔离性由数据库系统中的并发控制系统完成，也是数据库本身地任务。<br>隔离性描述的是当前事务能够看到其他事务中间状态的能力，这个能力通过设置隔离级别来体现。在下一篇文章中，将对事务地四大隔离级别进行着重介绍。</p><h1 id="Consistency–一致性"><a href="#Consistency–一致性" class="headerlink" title="Consistency–一致性"></a>Consistency–一致性</h1><p>数据库一致性这个概念和另外三个特性相比确实抽象一些导致难以理解。通过翻阅书籍和网上查询，得到了一个我认为正确的、能够理解地解释。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font size="5">定义</font></h2><p>数据库一致性是指事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。即<font color="red"><b>数据库中的数据是正确的，随着状态的迁移，总是保持正确。</b></font>那么什么时候数据是正确的什么时候数据又是不正确的呢？我们知道，数据库以一定的模式存储数据，本质是对真实世界建模，因此这里的正确是指：<b>数据能够反映现实世界的状态。</b></p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a><font size="5">举例说明</font></h2><p>我们举例说明：</p><ol><li>案例1<br>假设有一个账户表<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table&#123;</span><br><span class="line">    ID  pramary key,</span><br><span class="line">    count   &gt;0 not null</span><br><span class="line">&#125;;</span><br><span class="line">假设有一条记录(张三，90)：表示张三账户余额90元</span><br></pre></td></tr></table></figure></li></ol><p>现在张三要向外转账100元，由于90-100&lt;0，违反了完整性约束。不满足事务的一致性</p><ol start="2"><li>案例2<br>先假设有两条记录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(张三，1000)</span><br><span class="line">(李四，1000)</span><br></pre></td></tr></table></figure></li></ol><p>现在张三向李四转账，那么在本案例中一致性要求事务的执行不会改变两人账户余额之和，即事务开始前两者和为2000，事务提交后和仍位2000。</p><ol start="3"><li>案例3<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">现在假设另外一种情况</span><br><span class="line">账户表为</span><br><span class="line">create table&#123;</span><br><span class="line">    ID  pramary key,</span><br><span class="line">    count  not null</span><br><span class="line">&#125;;</span><br><span class="line">和前面的不同，此时对于count属性没有&gt;0的完整性约束。</span><br></pre></td></tr></table></figure></li></ol><p>和案例1一样，张三向外转账100元，此时没有违反完整性约束，但是由于在现实世界中账户余额是不能为负的，此时数据不能够反应现实世界的真实状态，因此该操作也违反了事物的一致性。<br>由此可见，<font color="red"><b>和前面另外三个特性不同，如何保证事务的一致性是编写事务人员的职责，而不是数据库系统的职责。</b></font></p><h1 id="三者之间联系"><a href="#三者之间联系" class="headerlink" title="三者之间联系"></a>三者之间联系</h1><p>我们已经介绍了原子性、隔离性和一致性，那么它们三者之间有什么区别呢？</p><h2 id="一致性和原子性"><a href="#一致性和原子性" class="headerlink" title="一致性和原子性"></a><font size="5">一致性和原子性</font></h2><p>同样的，还是转账的案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">现假设有两个账户进行转账</span><br><span class="line">(张三，1000)</span><br><span class="line">(李四，1000)</span><br><span class="line">张三向李四转账100元，我们开启一个事务</span><br><span class="line"></span><br><span class="line">start transaction;</span><br><span class="line">update demo set count=count-100 where ID=张三;</span><br><span class="line">update demo set count=count+100 where ID=李四;</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">我们知道，这个事务在执行前和执行后都满足一致性。但是要注意</span><br><span class="line">系统仍会在某一时刻处于不一致状态，即使该事务能够执行完毕最终提交，</span><br><span class="line">但是在执行第一条语句和第二条语句之间时，此时</span><br><span class="line">张三余额为900，而李四余额为1000</span><br></pre></td></tr></table></figure><p><b>虽然上述不一致状态最终会被一致性状态代替，但是我们必须保证上述转账过程中的不一致状态在数据库中是不可见的。</b>这样，一个事务要么不开始，要么全部执行。这样以来不一致状态除了在事务执行当中以外，在其他时刻是不可见的。这就是需要原子性的原因：<font color="red"><b>如果具有原子性，某个事务的所有动作要么在数据库中全部反映出来，要么全部不反映。</b></font></p><h2 id="一致性和隔离性"><a href="#一致性和隔离性" class="headerlink" title="一致性和隔离性"></a><font size="5">一致性和隔离性</font></h2><p>如果多个事务并发的执行，即使每个事务都能确保原子性和一致性，但是它们的操作会以人们所不希望的某种方式交叉执行，这也会导致不一致状态(数据不能反映真实世界的状态)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">现在开启两个事务T1和T2</span><br><span class="line">T1事务为转账事务(A向B转账100元)</span><br><span class="line">A=A-100;</span><br><span class="line">B=B+100;</span><br><span class="line"></span><br><span class="line">T2事务为查询A和B账户余额和并存储</span><br><span class="line">SUM=A+B;</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">有两条记录</span><br><span class="line">(A,1000)</span><br><span class="line">(B,1000)</span><br></pre></td></tr></table></figure><p>我们考虑这样一种执行情况：在事务T1执行完A=A-100后，执行B=B+100之前，T2事务查询A和B账户余额和，那么此时事务2存储的两者和为1900。我们发现：<font color="red"><b>事务1和事务2都满足原子性和一致性，但是最终却导致数据库处于不一致状态。</b></font></p><p>解决事务在并发执行下所引起的问题，其中一种解决方案是让事务一个接一个的执行。这样就保证了即使多个事务并发执行，仍能够保证一致性。但是这种方法效率比较低，<font color="red"><b>有时候我们会适当的弱化一致性，设置较低的隔离级别来提升性能</b></font>，至于怎么做，我们留到我们下一篇文章介绍的四大隔离级别。</p><h1 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h1><p>持久性和其它三个特性关系不是特别大，并且比较简单。因此留在最后进行介绍。<br>一个事务提交后，该事务对数据库的改变必须是永久的，即使发生故障信息也不会丢失。</p><hr>对事务ACID四大特性的介绍就到这里，在写博客的同时我也在边查阅边学习边记录，因此修修改改了很久，到现在也算是对ACID四大特性有了一定的认识，如果有哪里不准确欢迎指正。<hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库范式那点儿事</title>
      <link href="/2020/02/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F%E9%82%A3%E7%82%B9%E5%84%BF%E4%BA%8B/"/>
      <url>/2020/02/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F%E9%82%A3%E7%82%B9%E5%84%BF%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>什么是范式？范式是符合某一级别的关系模式的集合。关系型数据库中的关系必须满足一定的要求，满足不同程度要求的为不同范式。下面将主要介绍数据库的三大范式，并对BC范式进行简单了解。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正式学习范式之前，我们先要了解几个介绍范式用到的概念。由于书本的严谨性，书上讲解的关于范式的理论过于抽象，在本文将尽力用通俗易懂的说法和适当的举例把范式这块介绍清楚。</p><ol><li><p><b>函数依赖</b><br>对于关系模式r(R)，关系模式名为r，属性集为R。对于其中的两个属性集α和β(α∈R且β∈R)。如果某两行记录他们在属性集α上的取值相同，那么这两条记录他们在β上的取值一定相同，记作α-&gt;β(β函数依赖α)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">举例说明：</span><br><span class="line">对于一个关系模式(一张表)r&lt;ID,name,class,phone,address&gt;</span><br><span class="line">属性集α&lt;ID&gt; 属性集β&lt;name,class,phone,address&gt;</span><br><span class="line">我们知道ID是唯一的，ID相同的两条记录他们的&lt;name,class,phone,address&gt;一定相同。</span><br><span class="line">因此说明β依赖于α，即α-&gt;β。</span><br></pre></td></tr></table></figure></li><li><p><b>完全依赖</b><br>如果存在两个属性集α和β，并且α-&gt;β。那么<font color="red"><b>β依赖于α中所有属性，而不是依赖于α中的某些属性，则称β完全依赖与α。</b></font>说起来可能难以理解，我们举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">属性集α&lt;商品数量,单价&gt;</span><br><span class="line">属性集β&lt;总价&gt;</span><br><span class="line">在上述两个属性集中，β由α中所有属性决定，因此β完全依赖于α</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">属性集α&lt;商品数量，单价，日期&gt;</span><br><span class="line">属性集β&lt;总价&gt;</span><br><span class="line">在上述两个属性集中，β只由α中的两个属性&lt;商品数量,单价&gt;决定，不受日期影响</span><br><span class="line">因此β部分依赖于α</span><br></pre></td></tr></table></figure></li><li><p><b>传递依赖</b><br>有三个属性集α、β、γ。其中<font color="red"><b>α-&gt;β，β-&gt;γ。那么可以得到α-&gt;γ，即γ传递依赖于α。</b></font>同样的我们举例说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">现有一关系模式r&lt;student_ID,name,dept_ID(系编号),dept_name&gt;，其中student_ID是主码</span><br><span class="line">假设三个属性集</span><br><span class="line">α&lt;student_ID&gt;</span><br><span class="line">β&lt;dept_ID&gt;</span><br><span class="line">γ&lt;dept_name&gt;</span><br><span class="line"></span><br><span class="line">我们可以得到α-&gt;β，β-&gt;γ。这不难理解</span><br><span class="line">那么我们可以得到α-&gt;γ，即&lt;student_ID&gt; -&gt; &lt;dept_ID&gt;</span><br><span class="line">事实上也是这样，因为α是主码属性集</span><br></pre></td></tr></table></figure></li></ol><p>对于概念的介绍就到这里，不知道你理解了没有。接下来就一次介绍三大范式</p><h1 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h1><h2 id="范式定义"><a href="#范式定义" class="headerlink" title="范式定义"></a><font size="5">范式定义</font></h2><p>第一范式的定义为：<font color="red" size="5"><b>符合1NF关系中的所有属性都不可再分，同一列不能有多个值(不能有多值属性)。</b></font></p><h2 id="反面案例"><a href="#反面案例" class="headerlink" title="反面案例"></a><font size="5">反面案例</font></h2><ol><li><b>属性可再分</b><br><img src="/2020/02/23/数据库范式那点儿事/1.jpg" alt><br>该关系模式就不满足第一范式，因为进货属性和售价属性可以被分割成属性</li><li><b>多值属性</b><br><img src="/2020/02/23/数据库范式那点儿事/2.png" alt="数据库范式那点儿事"><br>对于图中关系模式的phone属性，一个人可以有多个电话号码(同一列有多个值)，因此该关系模式不符合第一范式。</li></ol><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><font size="5">解决方法</font></h2><ol><li><p>对于非原子属性(复合属性)，解决方法很简单，我们直接将该属性的所有子属性拿出来作为关系模式的属性即可。<br><img src="/2020/02/23/数据库范式那点儿事/2.jpg" alt><br>如图，该关系模式就符合第一范式</p></li><li><p>对于多值属性，将该属性单独拆分成一个关系。<br><img src="/2020/02/23/数据库范式那点儿事/3.png" alt><br>对于多值属性，单独创建一个关系，和原关系模式进行外码约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关系1&lt;ID,name&gt; ID为主码</span><br><span class="line">关系2&lt;ID,phone&gt; ID为关系1的外码，&lt;ID,phone&gt;共同构成关系2主码</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>对于关系型数据库而言，1NF是最基本的要求。我们在关系型数据库(MySQL,SQLServer,Oracle等)中创建表的时，如果不符合1NF，那么操作是一定不可能成功的。换句话说，<font color="red"><b>只要在关系型数据库中存在的表，一定符合1NF。</b></font></p><h1 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h1><h2 id="范式定义-1"><a href="#范式定义-1" class="headerlink" title="范式定义"></a><font size="5">范式定义</font></h2><p>第二范式的定义为：<font color="red" size="5"><b>在满足第一范式的基础上，所有的非主属性对码完全函数依赖。</b></font></p><h2 id="反面案例-1"><a href="#反面案例-1" class="headerlink" title="反面案例"></a><font size="5">反面案例</font></h2><p><img src="/2020/02/23/数据库范式那点儿事/3.jpg" alt><br>对于图中所示的关系模式，它是满足第一范式的，但是仍然存在许多问题</p><ol><li><b>数据冗余过大</b><br>每一个学生的学号、姓名、系名、系主任重复多次。每个系的系主任重复多次</li><li><b>插入异常</b><br>加入学校新创建了一个系，但是还没有招生，那么该系的信息无法插入进数据</li><li><b>删除异常</b><br>假设某个系所有的学生都转走了，即该系中所有学生相关的记录都删除了，那么这个系相应的信息也没有了</li><li><b>修改异常</b><br>如果李小明要转到法律系，为了保证一致性，要修改三条记录。</li></ol><p>对于一个符合1NF的关系模式，仍然可能存在许许多多的问题，因此我们需要提高设计标准。使其符合第二范式</p><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a><font size="5">解决方法</font></h2><p>对于满足第一范式不满足第二范式的关系模式，要使其满足第二范式，我们应该这么做：<font color="red"><b>若存在非主属性依赖于码的部分属性，那么要将发生部份依赖的这一组属性单独新建一个关系模式，并使用外码约束和原关系模式相连。</b></font>具体为一下四个步骤</p><ol><li>找出数据表中所有的码(能作为主键的属性集)</li><li>根据第一步的码，找到所有的主属性</li><li>数据表中，去掉主属性，剩下的就是非主属性</li><li>是否存在非主属性对码的部份依赖</li></ol><p>对于上述关系模式，我们四步走</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 找码：α&lt;学号，课名&gt;</span><br><span class="line">2. 主属性：学号和课名</span><br><span class="line">3. 非主属性：姓名、系名、系主任、分数</span><br><span class="line">4. 判断是否存在部份依赖</span><br></pre></td></tr></table></figure><p>如图得到关系模式中所有的依赖关系：<br><img src="/2020/02/23/数据库范式那点儿事/4.jpg" alt><br>可以发现，属性集&lt;学号,姓名,系名,系主任&gt;存在部份依赖。因此将该属性集提取出来创建一个新的关系模式<br><img src="/2020/02/23/数据库范式那点儿事/5.jpg" alt><br><img src="/2020/02/23/数据库范式那点儿事/6.jpg" alt><br>上图所示，分解得到的两个表是满足第二范式的。</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>我们再来看看对于前面存在的4个问题，满足第二范式后还存在么？</p><ol><li>数据冗余：学生的姓名、系名、系主任重复次数减少，冗余情况得到改善。但是仍存在冗余(系主任)</li><li>插入异常：仍无法插入一个没有学生的新系–&gt;<b><font color="red">无改进</font></b></li><li>删除异常：删除某个系所有学生记录后，该系信息随之丢失–&gt;<b><font color="red">无改进</font></b></li><li>修改异常：李小明转到法律系后，只需要修改一条对应记录，得到改善。<br>由此看来，当关系模式满足2NF后，仍会存在一些问题。我们发现出现问题的原因在于：存在非主属性对码的传递依赖。为了进一步解决问题，我们要使关系模式满足第三范式</li></ol><h1 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h1><h2 id="范式定义-2"><a href="#范式定义-2" class="headerlink" title="范式定义"></a><font size="5">范式定义</font></h2><p>第三范式的定义为：<font color="red" size="5"><b>在满足2NF的基础上，关系模式中的所有非主属性直接依赖于码，不存在传递依赖</b></font></p><h2 id="反面案例-2"><a href="#反面案例-2" class="headerlink" title="反面案例"></a><font size="5">反面案例</font></h2><p><img src="/2020/02/23/数据库范式那点儿事/6.jpg" alt><br>对于该满足第二范式的两个表，我们来看一看它们是否也满足第三范式</p><ol><li>选课表<br>主码为&lt;学号,课名&gt;，主属性为学号和课名，非主属性为分数。不可能存在传递依赖，所以选课表满足3NF。</li><li>学生表<br>主码为学号，主属性为学号，非主属性为姓名、系名和系主任。因为<b>学号-&gt;系名，并且系名-&gt;系主任，因此学号-&gt;系主任。存在传递依赖</b>，故学生表不满足3NF。</li></ol><h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a><font size="5">解决方法</font></h2><p><font color="red"><b>如果关系模式中存在非主属性对主码的传递依赖，那么我们将发生传递依赖的属性创建一个新的关系模式，并和原关系模式外码约束。</b></font><br><img src="/2020/02/23/数据库范式那点儿事/5.jpg" alt><br>从图中可以看到，学生表的系主任对主码存在传递依赖，因此我们将发生传递依赖的部分&lt;系名,系主任&gt;单独创建关系模式，并使用外码约束：<br><img src="/2020/02/23/数据库范式那点儿事/7.jpg" alt><br><img src="/2020/02/23/数据库范式那点儿事/8.jpg" alt></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>经过分解，由最开始的一个关系模式得到现在的三个关系模式，并且三个模式都满足3NF，那么我们再来看看满足第三范式后，前面的问题还存在么？</p><ol><li>数据冗余：在2NF的基础上，更加少了。</li><li>插入异常：可以插入一个没有学生的系。</li><li>删除异常：删除某个系所有的学生记录，那么该系仍然存在。</li></ol><h1 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h1><p>我们看到，在满足第三范式，基本上就解决了数据冗余、插入异常、删除异常和修改异常的问题。除了第三范式以外，还有BC范式，第四范式，第五范式甚至是第六范式。那么我们在设计数据库时，是满足范式等级越高越好么？<br><b>当然不是这样！！！我们可以看到，满足的范式等级越高，表的数量越多。这往往也会带来一些问题:我们在使用数据库时，往往是查询操作比较多，当表过多时，查询时就需要连接多个表，增加了查询的复杂性，降低了数据库的性能。</b>因此我们在实际应用中只一般只需要满足第三范式即可。<br>最后再对三大范式进行总结</p><ol><li>1NF：字段是最小的的单元不可再分</li><li>2NF：满足1NF,表中的字段必须完全依赖于全部主键而非部分主键 (一般我们都会做到)</li><li>3NF：满足2NF,非主键外的所有字段必须互不依赖</li></ol><hr><p>参考书籍：《数据库系统概念》<br><a href="https://blog.csdn.net/wenco1/article/details/88077279" target="_blank" rel="noopener">详细图文讲解(包含BC范式)</a><br><a href="https://www.zhihu.com/question/24696366/answer/246513577" target="_blank" rel="noopener">知乎总结回答</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 三大范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个Web页面的请求(计网知识综合)</title>
      <link href="/2020/02/21/%E4%B8%80%E4%B8%AAWeb%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82-%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%E7%BB%BC%E5%90%88/"/>
      <url>/2020/02/21/%E4%B8%80%E4%B8%AAWeb%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%AF%B7%E6%B1%82-%E8%AE%A1%E7%BD%91%E7%9F%A5%E8%AF%86%E7%BB%BC%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>学习计算机网络以来，我陆陆续续写了很多这方面的博客，到上一篇为止，链路层的以太网已进行了介绍。因此在本文中，我希望对之前学过的知识做一个全面的整合梳理，所以我就以一个Web页面的请求过程为例，来对前面学过的知识进行整合梳理。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如图所示：一名学生A将他的笔记本与学校的以太网交换机相连，下载一个Web页面(假设是谷歌的主页)。<br><img src="/2020/02/21/一个Web页面的请求-计网知识综合/1.jpg" alt><br>我们假定A启动他的计算机，然后用一根以太网电缆连接到学校的以太网交换机，交换机又和学校的路由器相连。学校的路由器和一个ISP相连(图中ISP为comcast.net)。comcast.net为学校提供了DNS服务，并且DHCP服务器运行在路由器中。</p><h1 id="准备：DHCP、UDP、IP和以太网"><a href="#准备：DHCP、UDP、IP和以太网" class="headerlink" title="准备：DHCP、UDP、IP和以太网"></a>准备：DHCP、UDP、IP和以太网</h1><p>当A将计算机和网络连接时，该主机还没有IP地址，如果没有IP地址那么它就不能做任何事情。<font color="red"><b>因此，计算机所采取的第一个网络相关动作是运行DHCP协议，从本地DHCP服务器中获得一个IP地址以及其他信息。</b></font></p><ol><li>计算机的操作系统生成一个DHCP请求报文(为了方便起见，这里省略了DHCP协议的前两步骤，实际上前面两步并不是必须的)，并将这个报文放到目的端口为67(DHCP服务器)和源端口68(DHCP客户端)的UDP报文段。该报文段被封装在目的地址为255.255.255.255(受限广播地址)、源地址为0.0.0.0的IP数据报中。</li><li>包含DHCP请求的IP数据报被放置到以太网帧中。该以太网帧的目的地址为ff:ff:ff:ff:ff:ff(广播地址)，将该帧广播到与交换机相连的所有设备中；该帧的源MAC地址为A携带计算机地MAC地址00:16:D3:23:68:8A。</li><li>包含DHCP请求的广播以太网帧是第一个由主机发送到以太网交换机的帧，交换机在所有的出端口转发该帧。</li><li>路由器在它00:22:6B:45:1F:1B的端口接收到该广播帧，并从中抽取出IP数据报，并以此向上拆分得到DHCP请求报文(由于DHCP服务器运行在路由器中，实际上进行拆分的是DHCO服务器，路由器只能处理IP数据报)。</li><li>我们假设路由器能够以CIDR块68.85.2.0/24分配IP地址。所以在本例中，在学校内使用的所有IP地址都在Comcast地址快中。我们假设DHCP服务器分配地址68.85.2.101给计算机。DHCP服务器生成包含这个IP地址以及DNS服务器的IP地址(68.87.71.226)、默认网关路由器的IP地址(68.85.2.1)和子网块(68.85.2.0.24,等价为网络掩码)的DHCP ACK报文。该DHCP报文被放到UDP报文段中，UDP报文段被封装到IP数据报中，IP数据报又被封装到以太网帧中(这里源IP/MAC地址是路由器归属网络这一端端口的IP/MAC地址，目的IP/MAC地址是计算机的IP/MAC地址)。</li><li>包含DHCP ACK的以太网帧由路由器发送给交换机。由于交换机自学习特性，该帧会直接从和计算机关联的端口转发出去。</li><li>计算机收到包含DHCP ACK的以太网帧，层层提取得到DHCP ACK报文。DHCP客户端记录它的<font color="red"><b>IP地址和DNS服务器的IP地址，并在其IP转发表中安装默认网关地址。此后计算机会向默认网关发送目的地址为其子网以外的所有数据报。</b></font></li></ol><p>到此为止，一台刚刚连接网络的计算机有了属于自己的IP地址以及其它信息，能够和网络进行交互。</p><h1 id="继续准备：DNS和ARP"><a href="#继续准备：DNS和ARP" class="headerlink" title="继续准备：DNS和ARP"></a>继续准备：DNS和ARP</h1><p>当计算机可以上网后，当学生A将www. google.com的URL键入到其Web浏览器时，他开启了一系列事件，最终谷歌主页会显示到浏览器上。A的浏览器通过生成一个TCP套接字开始了该过程，套接字用于向www. google.com发送HTTP请求。<font color="red"><b>为了生成该套接字，计算机需要知道www .google.com的IP地址，因此我们会用到DNS协议。</b></font></p><ol><li>计算机的操作系统生成一个DNS查询报文，该报文被放到端口号53的UDP报文段中。该报文段被放置到目的地址为68.87.71.226(DNS服务器IP地址，在DHCP ACK中得知)中</li><li>将包含DNS查询报文的IP数据报封装到以太网帧中发往网关路由器(68.85.2.1)，那么问题来了：<font color="red"><b>主机只知道网关路由器的IP地址(来自DHCP ACK)，并不知道该路由器的MAC地址，为了获取路由器的MAC地址，要用到ARP协议。</b></font></li><li>计算机生成一个ARP查询报文(该报文的目的IP为路由器的IP地址，目的MAC地址为00:00:00:00:00:00)，并将该查询报文封装到广播帧中，交换机广播该帧。</li><li>网关路由器收到包含ARP请求报文的广播帧后，生成一个ARP响应报文(在该报文中附带了自己的MAC地址)，并将该响应报文封装到目的MAC地址为00:16:D3:23:68:8A(计算机)的以太网帧中。向交换机发送该帧，再由交换机发送给计算机。</li><li>计算机收到该ARP响应报文后，从中得到网关路由器的MAC地址。</li><li>最终，包含DNS查询报文的IP数据报被封装到以太网帧中，该帧的目的地址为网关路由器靠近网络一端的MAC地址。计算机向交换机发送该帧，再由交换机发送给路由器。</li></ol><h1 id="仍在准备：跨越网络的DNS查询"><a href="#仍在准备：跨越网络的DNS查询" class="headerlink" title="仍在准备：跨越网络的DNS查询"></a>仍在准备：跨越网络的DNS查询</h1><ol><li>网关路由器接受该帧，并抽取得到IP数据报，路由器通过IP数据报的目的IP地址和转发表决定将该数据报发送到Comcast网络的最左边路由器。于是IP数据报放置到链路层帧(此时链路层运行的可能不是以太网协议)中，发往下一台路由器。</li><li>在Comcast网络最左边的路由器接收到该帧，抽取得到IP数据报，检查目的地址并根据转发表确定出口，封装成帧后继续往下一个路由器出发。</li><li>经过若干路由器后，最终包含DNS查询报文的IP数据报到达DNS服务器。DNS服务器得到www. google.com的IP地址(64.233.169.105)。形成DNS应答报文返回给计算机。(这里假设DNS服务器缓存有相应的记录，并不需要进行递归+迭代查询)</li><li>计算机得到DNS应答报文，从中获取www. google.com的IP地址。经过大量工作后，下一步就能和www. google.com服务器正式接触了。</li></ol><h1 id="Web交互：TCP和HTTP"><a href="#Web交互：TCP和HTTP" class="headerlink" title="Web交互：TCP和HTTP"></a>Web交互：TCP和HTTP</h1><ol><li>既然得知了www. google.com的IP地址，那么套接字也就能够生成了。该套接字用于向www. google.com服务器发送HTTP GET报文。<font color="red"><b>当计算机生成TCP套接字时，必须先进行三次握手。</b></font></li><li>在www. google.com的HTTP服务器从TCP套接字中获取HTTP GET报文，生成一个HTTP响应报文，将计算机请求的Web页面放到响应体中，并将响应报文推送进套接字。</li><li>包含HTTP响应报文的数据通过谷歌、Comcast和学校网络转发，到达学生A的计算机。计算机的Web浏览器程序从套接字读取HTTP响应报文，从响应体中获取html文件。最终显示到Web浏览器上。</li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>一个Web页面的请求过程大致就是这些，可能在实际工作中有一些差异，但基本流程大同小异。有一点我还是有疑惑的：通过ipconfig/all命令我发现，默认网关、DHCP服务器以及DNS服务器的地址是一样的。如图所示：<br><img src="/2020/02/21/一个Web页面的请求-计网知识综合/1.png" alt><br>个人猜测，<font color="red"><b>可能是将DHCP服务器和本地DNS服务器都放到了网关路由器中</b></font>，因此三者的IP地址一样。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链路层协议之以太网协议的前世今生</title>
      <link href="/2020/02/19/%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
      <url>/2020/02/19/%E9%93%BE%E8%B7%AF%E5%B1%82%E5%8D%8F%E8%AE%AE%E4%B9%8B%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</url>
      
        <content type="html"><![CDATA[<p>我们知道，在因特网五层体系中，链路层位于第二层。而以太网协议又是当今世界上最流行的局域网协议，今天就让我们走进链路层，了解一下以太网协议的前世今生。</p><hr><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在链路层的讨论中，我们将看到两种截然不同的链路层信道</p><ol><li>点对点链路<br>其中，点对点链路由链路一端的单个发送方和链路另一端的单个接收方组成，许多链路层协议如点对点协议(PPP)、高级数据链路控制协议(HDLC)就是为点对点链路设计。</li><li>广播链路<br>能够让多个发送和接收节点都连接到相同的、单一的、共享的广播信道上。这里之所以使用<b>广播</b>这一术语，是因为当任何一个节点传输一个帧时，信道广播该帧，每个其他节点都收到一个副本。以太网和无线局域网就是广播链路层技术的例子。</li></ol><h1 id="多路访问问题"><a href="#多路访问问题" class="headerlink" title="多路访问问题"></a>多路访问问题</h1><p>在具体介绍以太网之前，我们先研究一个对链路层很重要的一个问题：如何协调多个发送节点和接收节点对一个共享信道的访问，即<font color="red"><b>多路访问问题</b></font>。<br>因为所有的节点都能够传输帧，所以多个节点可能会同时传输帧。当发生这种情况时，所有的节点同时接收到多个帧；也就是说，传输的帧在所有的接受方处发生碰撞。当碰撞发生时，没有一个节点能够有效地获得任何传输的帧。当许多节点要频繁的传输帧时，如果不进行协调，那么就会发生大量的碰撞，导致许多帧失效，从而造成信道的浪费。<br>大量的链路层技术中已经实现了几十种多路访问协议，我们可以将这些协议分为三类</p><ol><li>信道划分协议(频分复用、时分复用、码分复用)</li><li>随机接入协议</li><li>轮流协议</li></ol><p>其中，信道划分协议和轮流协议在这里不是重点，我们主要对随机接入协议进行介绍，因为以太网采用的就是这类协议。</p><h1 id="局域网协议的鼻祖-ALOHA协议"><a href="#局域网协议的鼻祖-ALOHA协议" class="headerlink" title="局域网协议的鼻祖-ALOHA协议"></a>局域网协议的鼻祖-ALOHA协议</h1><p>ALOHA协议属于随机接入协议。对于一个纯ALOHA协议：</p><ol><li>如果一个节点有数据，则立即发送(想发就发，并不关心此时广播信道是否被占用)。并通过信号反馈检测信道以确定是否发送成功。</li><li>如果发送失败，则经随机时延后再发送</li><li>总结一下就是每个站点可在任意时间发送数据，不关心信道是否被占用，两个以上的节点在发送数据时就会发生冲突</li></ol><p><img src="/2020/02/19/链路层协议之以太网协议的前世今生/1.png" alt><br>我们可以看到，这种纯ALOHA协议在活跃节点较多时可能会发生严重的碰撞。事实上，通过计算可以知道该协议的信道利用率最高仅为18%。即82%的信道都被浪费。</p><h1 id="ALOHA协议的改进-时隙ALOHA协议"><a href="#ALOHA协议的改进-时隙ALOHA协议" class="headerlink" title="ALOHA协议的改进-时隙ALOHA协议"></a>ALOHA协议的改进-时隙ALOHA协议</h1><p>人们对ALOHA协议进行了改进，发明了时隙ALOHA协议。在时隙ALOHA协议中</p><ol><li>把时间分成时间片，时隙的长度对应一帧的传输时间</li><li>帧是随机产生的(数据随即到达节点)，但是时隙ALOHA不允许随机发送(和纯ALOHA的区别)，规定每个节点必须在时隙的起点发送帧</li><li>这样冲突只会在时隙的起点发生，冲突发生时只会浪费一个时隙。</li></ol><p><img src="/2020/02/19/链路层协议之以太网协议的前世今生/2.png" alt><br>可以看出，和纯ALOHA相比，时隙ALOHA只会在时隙开始部分发生碰撞。相比于纯ALOHA信道利用率提高了一倍，事实上通过计算可以得到时隙ALOHA的信道利用率为37%。虽然ALOHA协议从今天看来效率并不算高，但是正是在ALOHA协议的启发下，Metcalfe修改了ALOHA协议，创造了CSMA协议和以太网</p><h1 id="载波侦听多路访问-CSMA协议"><a href="#载波侦听多路访问-CSMA协议" class="headerlink" title="载波侦听多路访问-CSMA协议"></a>载波侦听多路访问-CSMA协议</h1><p>无论是纯ALOHA协议还是时隙ALOHA协议，一个节点的传输独立于连接到这个广播上的其他节点的活动。即，一个节点不关心在它开始传输时是否有其它节点在传输。<br>在CSMA协议中：</p><ol><li>节点在发送数据之前，先<b>侦听信道</b></li><li>如果信道忙，则等待；如果信道空闲，则立即发送数据</li><li>CSMA协议分为三种<ol><li>1-坚持CSMA：侦听到信道忙，则<font color="red"><b>持续侦听</b></font>，一旦空闲立刻发送</li><li>0-坚持CSMA：侦听到信道忙，则<font color="red"><b>等待一随机时间后重新侦听</b></font>。</li><li>p-坚持CSMA：侦听到信道忙，则<font color="red"><b>持续侦听，信道空闲后p概率发送，(1-p)概率等待一个时隙发送。</b></font></li></ol></li></ol><p>但是在CSMA协议中还存在一个问题：当发生碰撞后，节点还在继续传输帧，造成信道浪费。你可能会好奇，在发送之前都已经侦听了为什么还会出现碰撞？这个问题留到后面介绍总线型以太网时解答。<br><img src="//" alt></p><h1 id="具有碰撞检测的CSMA-CSMA-CD协议"><a href="#具有碰撞检测的CSMA-CSMA-CD协议" class="headerlink" title="具有碰撞检测的CSMA-CSMA/CD协议"></a>具有碰撞检测的CSMA-CSMA/CD协议</h1><h2 id="CSMA-CD工作流程"><a href="#CSMA-CD工作流程" class="headerlink" title="CSMA/CD工作流程"></a><font size="5">CSMA/CD工作流程</font></h2><p>在CSMA/CD协议中(我们假设以太网采用CSMA/CD协议，事实上现在以太网已经不使用该协议)：</p><ol><li>准备发送：适配器从网络层获得一个分组，加上以太网首部，组成以太网帧放到缓存中，在发送之前先侦听信道</li><li>侦听信道：不同的侦听信道(1-坚持)，一直等到信道空闲，并在96bite时间(帧间隙，以太网规定连续发送两个帧，他们之间应该间隔的时间)内信道保持空闲，就发送该帧</li><li>在<font color="red"><b>发送的过程中持续侦听信道</b></font>，即边发送边侦听<ol><li>如果在发送的过程中没有检测到碰撞，则该帧发送成功</li><li>如果在发送过程中检测到碰撞，则停止传送该帧，并发送32bite人为干扰信号。然后执行指数退避算法，等待一定时间后回到步骤2。若重传16次仍不能成功，则停止重传向上报错。</li></ol></li></ol><p>因此以太网每发送一帧，一定要将已经发送的帧暂时保留，如果在发送时检测到碰撞，那么还要进行重传。</p><h2 id="指数退避算法"><a href="#指数退避算法" class="headerlink" title="指数退避算法"></a><font size="5">指数退避算法</font></h2><p>当传输一个给定帧时，在该帧经历了一连串的n次碰撞后，该节点随机从{0,1,2,…,2(n次方)-1}中随机选择一个值K(K的最大值为10)，等待K*512bite时间后重新发送该帧。这就是二进制指数退避算法。</p><h1 id="以太网协议"><a href="#以太网协议" class="headerlink" title="以太网协议"></a>以太网协议</h1><p>在介绍以太网时，我将先介绍以太网帧的格式。这样做是由原因的，以太网经过这么多年的发展，早已和最初的以太网大不相同，唯一不变的就是以太网帧的格式了。其次我将一次介绍三个阶段的以太网：总线型、集线器型以及交换机型。</p><h2 id="以太网帧格式"><a href="#以太网帧格式" class="headerlink" title="以太网帧格式"></a><font size="5">以太网帧格式</font></h2><p><img src="/2020/02/19/链路层协议之以太网协议的前世今生/6.png" alt><br>如图所示即为以太网帧格式图</p><ol><li><b>前同步码(8个字节)</b>：用于唤醒接收适配器并同步接收方和发送方时钟</li><li><b>目的地址/源地址(各6字节)</b>：使用的是MAC地址</li><li><b>类型(2字节)</b>：当以太网帧到达主机适配器，适配器通过该字段得知该帧需要交给哪一个网络层协议</li><li><b>数据(46~1500)</b>：封装的是网络层数据报，有时还有一些填充数据</li><li><b>CRC校验码(4字节)</b>：以太网采用CRC来完成差错控制</li></ol><ul><li><b>为什么数据字段的长度为46~1500？</b><br>以太网帧的首部加尾部(前同步码不算)一共6+6+2+4=18字节，而以太网帧最短为64字节(后面会说到原因)，因此当网络层数据报小于46字节时，以太网帧要进行填充，保证数据部分最小为46字节。</li><li><b>以太网帧的最大长度是多少？</b><br>以太网帧的最大长度(不包括前同步码)：帧首部+帧尾部+最大数据=14+1500+4=1518。这里要注意的是，<font color="red"><b>TCP的最大数据字段(MSS)为1460，IP数据报最大为最大传输单元(MTU)1500，以太网帧最大为1518。</b></font></li></ul><h2 id="以太网的发展"><a href="#以太网的发展" class="headerlink" title="以太网的发展"></a><font size="5">以太网的发展</font></h2><p>上面介绍了这么多，重点在于CSMA/CD协议。而介绍CSMA/CD协议，也是为了以太网协议做铺垫。以太网协议经历了三个阶段</p><ol><li>20世纪70年代中期，初期以太网问世，初始的以太网用同轴电缆来连接节点，使用总线拓扑结构。此时以太网还是一个半全工网络，采用了CSMA/CD协议。</li><li>20世纪90年代后期，基于集线器的星形拓扑结构的以太网问世，此时以太网仍是采用CSMA/CD协议(后面会介绍集线器)</li><li>21世纪初，以太网经发生了革命性变化，基于以太网交换机的星形拓扑结构的以太网得到了应用，由于交换机的特性，CSMA/CD协议已经不再使用，此时以太网协议为双全工。</li></ol><h2 id="总线型以太网"><a href="#总线型以太网" class="headerlink" title="总线型以太网"></a><font size="5">总线型以太网</font></h2><p><img src="/2020/02/19/链路层协议之以太网协议的前世今生/3.png" alt><br>如图即为早期的总线拓扑结构的以太网。当一台计算机发送数据时，总线上的所有计算机都能检测到这个数据。当我们需要在总线上进行1对1通信时，就需要使每一台计算机的网卡拥有一个与其他网卡都不同的地址(MAC地址)，我们发送帧时表明接收方的地址，只有地址与其相同的主机才接受该帧，否则否则丢弃帧。</p><h3 id="无连接工作方式"><a href="#无连接工作方式" class="headerlink" title="无连接工作方式"></a><font size="5">无连接工作方式</font></h3><p>为了通信方便，以太网采用了无连接的工作方式，即不必建立连接就可以直接发送数据。网卡对发送的数据帧不进行编号，也不要求对方进行确认，这样做可以使以太网工作起来非常简单。<font color="red"><b>以太网所提供的服务是尽力而为服务，即不可靠的服务。</b></font></p><h3 id="CSMA发生碰撞原因？"><a href="#CSMA发生碰撞原因？" class="headerlink" title="CSMA发生碰撞原因？"></a><font size="5">CSMA发生碰撞原因？</font></h3><p>前面有一个问题：既然CSMA(或CSMA/CD)在发送之前已经侦听信道，为什么还是会出现碰撞？我们现在假设一个以太网上只有两台主机A、B。它们都挂在一个总线上</p><ol><li>此时主机A要发送数据，A侦听信道，发现空闲，则开始传输帧</li><li>过了很短的时间，主机B也要发送数据，此时由于A的数据还没有传播到B，因此B侦听信道时发现信道也是空闲的，B开始传输帧。</li><li>这样一来，就会发生碰撞。</li></ol><p><img src="/2020/02/19/链路层协议之以太网协议的前世今生/4.png" alt></p><h3 id="以太网帧最小长度"><a href="#以太网帧最小长度" class="headerlink" title="以太网帧最小长度"></a><font size="5">以太网帧最小长度</font></h3><p>SMA/CD协议在帧的传输期间如果检测到碰撞，则会停止传输帧发送干扰信号，等待一定时间(指数退避)后重传该帧。那么可能存在这样一种情况：<br><b>节点A发送了一个帧，但发生了碰撞，不过在帧发送完后才检测到发生了碰撞(即帧传输完后碰撞信号才到达节点A)，这时已经没有办法中止帧传输，该帧也无法重传，就会产生错误。<br>注：数据帧能够重传需要保证发送节点在收到冲突信号时帧没有传输完</b><br>基于上述情况，以太网规定了以太网帧的最短长度为64字节，即512bite。<br>如图，<font color="red">一个站点在发送帧后，持续侦听2d时间就能够确定此次传输不会出现碰撞。这段时间就是所谓的<b>争用期</b>。</font><br><img src="/2020/02/19/链路层协议之以太网协议的前世今生/5.png" alt><br>争用期通常取值为51.2μs，对于10Mb/s的以太网来说，在争用期可以发送512bite，也就是64字节。这就是以太网帧长最短为64字节的原因。</p><ul><li><b>那么节点一定能在51.2μs中检测到冲突么？我们来算一算:</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">电磁波在1km电缆的传播时延为5μs，即信号在以太网上传播1km需要5μs</span><br><span class="line">以太网两端点的最大传播时延应该小于争用期的一半(小于25.6μs)</span><br><span class="line">即侦听信号一来一回的时间小于51.2μs，因此以太网的最大端到端长度为</span><br><span class="line">25.6/5≈5km。而实际上以太网覆盖范围远没有那么大，因此实际应用的以太网</span><br><span class="line">都能在争用期检测可能发生的碰撞。</span><br></pre></td></tr></table></figure></li></ul><p>但是要注意，以太网选择51.2μs作为争用期，并不仅仅考虑了端到端时延，还考虑了其他很多因素。</p><h3 id="以太网帧最大长度"><a href="#以太网帧最大长度" class="headerlink" title="以太网帧最大长度"></a><font size="5">以太网帧最大长度</font></h3><p>前面说了，以太网帧的最大长度为1518，那么为什么要这样设置呢？</p><ol><li>为了防止节点占用信道时间过长</li><li>相对于小包来说，大包更容易发生丢包。</li><li>如果最大帧长过小，传输速率又不高。例如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">如果选择以太网最大帧长为218Byte</span><br><span class="line">那么TCP可携带数据=</span><br><span class="line">218-以太网首部/尾部-IP首部-TCP首部=160</span><br><span class="line">此时有效传输速率为160/218=73%</span><br><span class="line"></span><br><span class="line">======================</span><br><span class="line">当最大帧长为1518时</span><br><span class="line">有效传输速率为1460/1518=96%</span><br></pre></td></tr></table></figure></li></ol><h3 id="以太网为什么建立重传机制？"><a href="#以太网为什么建立重传机制？" class="headerlink" title="以太网为什么建立重传机制？"></a><font size="5">以太网为什么建立重传机制？</font></h3><p>我们知道CSMA/CD中当帧出现碰撞时，节点会在之后重传该帧，那么这样做的原因是什么呢？<br>首先，我们前面说过，以太网是无连接的，这样能够提高效率；但是以太网又想实现一定的重传机制，因为<b>以太网的重传是微妙级，而传输层的重传如TCP达到毫秒级，应用层的重传更是达到了秒级</b>。因此在以太网上实现一定的重传机制能够提高效率。</p><h2 id="基于集线器以太网"><a href="#基于集线器以太网" class="headerlink" title="基于集线器以太网"></a><font size="5">基于集线器以太网</font></h2><p>集线器是一个物理层设备，它作用于bite而不是帧。当一个bite到达集线器其中一个接口时，集线器重新生成该bite并对其进行放大，然后将其转发到其他所有接口。<br><img src="/2020/02/19/链路层协议之以太网协议的前世今生/7.png" alt><br>如图为基于集线器的以太网结构，由于集线器具有以下特点</p><ol><li>集线器只是简单地转发bite，不会进行碰撞检测</li><li>集线器不会对帧进行缓存</li><li>当有两个不同的端口同时收到帧时，就会出现碰撞</li></ol><p>事实上<font color="red"><b>基于集线器的以太网在逻辑上仍是总线网，各节点共享逻辑上的总线，仍使用CSMA/CD协议。</b></font></p><h3 id="集线器的作用"><a href="#集线器的作用" class="headerlink" title="集线器的作用"></a><font size="5">集线器的作用</font></h3><p>基于集线器的以太网要比总线以太网好在哪里呢？让我们来看一下集线器的作用</p><ol><li>能够对信号进行放大，使其传播距离更远</li><li>当其中一个端口出现故障时，集线器能够自动隔离该端口。不会影响其他节点</li><li>避免各个网段之间发生冲突，如上图，A向B发送数据可以和E向F发送数据同时进行。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h3><p>集线器和我们后面说到的以太网交换机不同，它不具有MAC地址，只是简单的转发放大bite，因此基于集线器的星形拓扑以太网在逻辑上仍是总线型以太网，只不过和总线型以太网相比它更加健壮。</p><h2 id="基于交换机以太网"><a href="#基于交换机以太网" class="headerlink" title="基于交换机以太网"></a><font size="5">基于交换机以太网</font></h2><p>从集线器到以太网交换机，这是以太网的革命性进步。以太网仍采用星形拓扑结构，不过集线器被交换器所取代。接下来我们将认识到：由于交换机的使用，此时的以太网已经不需要使用CSMA/CD协议了，因为交换机本身就是无碰撞的，并且能够实现存储转发分组。</p><h3 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a><font size="5">以太网交换机</font></h3><p>和集线器不同，以太网交换机工作于链路层。交换机自身对于子网中的主机来说是透明的，即某主机/路由器向另一个主机/路由器寻址一个帧(而不是向交换机寻址该帧)，然后将该帧送进局域网，并不知道某交换机将会接受该帧并将它转发到另一个节点。并且交换机的输出接口设有缓存，让我们来看一下交换机的工作原理。</p><h4 id="转发和过滤"><a href="#转发和过滤" class="headerlink" title="转发和过滤"></a><font size="5"><b>转发和过滤</b></font></h4><p><b>过滤</b>是决定一个帧应该转发到某个接口还是应该将其丢弃的交换机功能。<br><b>转发</b>是决定一个帧应该被导向哪个接口，并把该帧移动到那些接口的交换机功能。<br>交换机的转发和过滤借助于交换机表完成。交换机表和路由器表类似，由<font color="red">{MAC地址|接口|时间}</font>三项组成。借助该表和帧的目的MAC地址，交换机能够将该帧丢弃或者转发到对应的接口。<br><img src="/2020/02/19/链路层协议之以太网协议的前世今生/8.png" alt><br>如上图是一张交换机表，为了便于理解该表我们举例说明<br>假定目的地址为DD:DD:DD:DD:DD:DD的帧从接口1到达。交换机用该目的地址对交换机表进行索引，此时有三种情况：</p><ol><li>表中没有DD:DD:DD:DD:DD:DD的表项，此时交换机<b>向除了接口1的所有接口转发该帧</b></li><li>表中有DD:DD:DD:DD:DD:DD的表项，但是该项和接口1关联，那么<b>交换机丢弃该帧</b></li><li>表中有DD:DD:DD:DD:DD:DD的表项，并且和除了接口1的其他接口关联(假设是接口2)，交换机将该帧从接口2转发出去</li></ol><h4 id="自学习方式"><a href="#自学习方式" class="headerlink" title="自学习方式"></a><font size="5"><b>自学习方式</b></font></h4><p>通过前面的介绍我们了解了交换机如何借助交换机表进行工作，那么问题来了：交换机表是怎么来的呢？是人工配置的么？答案当然是否定的。事实上交换机具有令人惊奇的特性，那就是它的表是自动、动态和自治地建立地。换句话说，<font color="red"><b>交换机是自学习的</b></font>。</p><ol><li>交换机表初始为空</li><li>对于在每个接口收到的每个入帧，该交换机在其表中存储{该帧地源MAC地址|该帧到达地接口|该帧到达的时间}。</li><li>如果在一段时间(老化期)后，交换机没有收到以该地址为源地址地帧，那么就在表中删除该项。</li></ol><h4 id="链路层交换机的性质"><a href="#链路层交换机的性质" class="headerlink" title="链路层交换机的性质"></a>链路层交换机的性质</h4><p>上面介绍了交换机的工作原理，这里补充一点：<font color="red"><b>交换机是即插即用设备(不需要认为干预)并且是双全工的。</b></font>下面就介绍一下交换机的性质</p><ol><li><b>消除碰撞</b><br>这一点非常重要，在使用交换机的以太网中，没有因碰撞而浪费带宽。也是由于这一点，基于交换机的以太网已经不再使用CSMA/CD协议</li><li><b>异质的链路</b><br>交换机将链路彼此隔离，因此局域网中不同的链路能够以不同的速率运行并且能够在不同的媒体上运行。</li></ol><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>对于以太网的介绍就到这里，以太网经过几十年的发展，几乎占领着整个有线局域网市场。而以太网经过不断的改革进化已经发展成如今的基于以太网交换机的、星型拓扑结构的双全工以太网。今天的以太网经过了千变万化，唯一保持不变的就是以太网帧格式，或许这才是以太网标准的一个真正重要的特征。</p><hr><p>参考书籍：《计算机网络自顶向下方法》<br><a href="https://blog.csdn.net/qq_25077833/article/details/53428684" target="_blank" rel="noopener">链路层帧长度</a><br><a href="https://www.jianshu.com/p/0db17c55fd0f" target="_blank" rel="noopener">集线器相关</a><br><a href="https://blog.csdn.net/lucyxiaomeng/article/details/80563845" target="_blank" rel="noopener">CSMA/CD协议(较全面)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 以太网协议 </tag>
            
            <tag> 链路层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络工具之科来数据包生成器</title>
      <link href="/2020/02/19/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E4%B9%8B%E7%A7%91%E6%9D%A5%E6%95%B0%E6%8D%AE%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>/2020/02/19/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E4%B9%8B%E7%A7%91%E6%9D%A5%E6%95%B0%E6%8D%AE%E5%8C%85%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>学习完了ARP协议后，准备模拟一下ARP欺骗。上网查阅相关资料发现，要自行实现ARP欺骗，需要WireShark抓包工具和一个数据包生成器协助实现，并且需要两台主机(或者一台主机上安装一个虚拟机)，因此这里先学习一下科来数据包生成器的使用，开学后借助室友电脑来完成ARP欺骗。</p><hr><a id="more"></a><h1 id="下载安装-Win10环境"><a href="#下载安装-Win10环境" class="headerlink" title="下载安装(Win10环境)"></a>下载安装(Win10环境)</h1><ol><li>百度搜索<font color="red">科来</font>，点击第一条进入科来官网下载界面并点击下载中心<br><img src="/2020/02/19/网络工具之科来数据包生成器/1.png" alt></li><li>如图，进入下载中心后不要直接下载科来数据包生成器(直接下载该应用会出现找不到网卡的错误)<br><img src="/2020/02/19/网络工具之科来数据包生成器/2.png" alt></li><li>剩下的就是下载安装，傻瓜式一直下一步即可。</li></ol><h1 id="科来数据包生成器使用"><a href="#科来数据包生成器使用" class="headerlink" title="科来数据包生成器使用"></a>科来数据包生成器使用</h1><ol><li>安装完成后打开界面，如图点击左上角按钮-&gt;点击工具-&gt;选择数据包生成器工具<br><img src="/2020/02/19/网络工具之科来数据包生成器/3.png" alt></li><li>打开数据包生成器界面后，点击添加按钮，可以选择要生成的数据包。<br><img src="/2020/02/19/网络工具之科来数据包生成器/4.png" alt></li><li>可以对数据包进行编辑，修改IP地址、MAC地址等。<br><img src="/2020/02/19/网络工具之科来数据包生成器/5.png" alt></li><li>点击发送即可将构造好的ARP分组发给指定主机/路由器。</li></ol><h1 id="总结备忘"><a href="#总结备忘" class="headerlink" title="总结备忘"></a>总结备忘</h1><p>有了以上的知识基础，再搭配WireShark抓包工具。就可以实现ARP欺骗，开学后完成该实验，特此备忘！</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
            <tag> 科来 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层协议之ARP协议</title>
      <link href="/2020/02/18/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE%E4%B9%8BARP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/02/18/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8D%8F%E8%AE%AE%E4%B9%8BARP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>尽管有些书上将ARP协议看作是位于网络层和链路层之间的协议，但是和IP协议一样，ARP协议是封装在链路层帧上在网络中传输的。因此我更倾向于把ARP协议当作网络层协议。下面就让我们来学习一下ARP协议。</p><hr><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>网络设备有数据要发送给另一台网络设备时，必须要知道对方的网络层地址（即IP地址）。IP地址由网络层来提供，但是仅有IP地址是不够的，IP数据报文必须封装成帧才能通过数据链路进行发送。数据帧必须要包含目的MAC地址，因此发送端还必须获取到目的MAC地址。通过目的IP地址获取的MAC地址的过程是由ARP（Address Resolution Protocol）协议来实现的。</p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a><font size="5">MAC地址</font></h2><p>IP地址前面介绍过，就不做赘述。这里主要介绍一下MAC地址。实际上，并不是主机或者路由器具有MAC地址，而是它们的适配器(网络接口)具有MAC地址。因此，如果一个主机或路由器有多个网络接口，那么它就有多个MAC地址。MAC地址长度为6个字节，通常用十六进制表示法，每个字节用一个十六进制数表示，字节之间用’-‘连接，例如：ff-ff-ff-ff-ff-ff。</p><h2 id="MAC的获取"><a href="#MAC的获取" class="headerlink" title="MAC的获取"></a><font size="5">MAC的获取</font></h2><p>和IP地址不同，MAC地址是一个硬件地址，是制造商在制造的时候添加的，一旦确定不会发生变化。并且每个网络接口的MAC地址都是独一无二的。那么制造商的MAC地址是哪来的呢？答案是IEEE。该机构在管理着MAC地址空间，当一个公司要生产适配器时，它象征性的支付一定的费用购买组成2(24次方)个地址的一块地址空间。IEEE分配的方式是：前24个比特由IEEE指定，后面24个bite由生产厂商自己搭配。</p><h1 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h1><h2 id="ARP分组格式"><a href="#ARP分组格式" class="headerlink" title="ARP分组格式"></a><font size="5">ARP分组格式</font></h2><p>这里直接简单的介绍一下ARP分组的格式作为了解，对于ARP协议，主要在于了解它的工作流程<br><img src="/2020/02/18/网络层协议之ARP协议/2.jpg" alt></p><ol><li>硬件类型：发送方硬件接口类型，1为以太网</li><li>协议类型：发送方请求解析的协议地址类型，0x0800为IP协议地址</li><li>硬件地址长度：发送方硬件地址长度，MAC地址(以太网地址)为48</li><li>协议地址长度：请求解析的协议地址长度，IP协议为32</li><li>操作类型：本报文的操作类型，1为ARP请求、2为ARP响应、3和4分别为RARP请求和响应</li><li>剩下的就是源IP地址和源MAC地址以及目的IP地址和目的MAC地址</li></ol><h2 id="ARP协议工作流程-重要"><a href="#ARP协议工作流程-重要" class="headerlink" title="ARP协议工作流程(重要)"></a><font size="5">ARP协议工作流程(重要)</font></h2><p>现在假设在一个局域网内有两台主机A、B。现A要向B发送数据。因此数据在主机A中被层层封装，应用层、传输层、网络层、链路层。但是问题来了：A只知道B的IP地址，因此只能封装到网络层(即将数据封装成IP数据报)，如果要将IP数据报成帧，那么就必须知道B的MAC地址。那么A如何得知B的MAC地址呢？</p><ol><li>每台主机内都有一个ARP缓存表，该表记录了最近运行时使用过的(IP-MAC)映射对，如果A的ARP缓存表中有B的IP-MAC映射，那么直接将B的MAC地址作为目的MAC地址，成帧后发送给主机B。如果所示在Windows下使用arp-a查看本机ARP缓存：<br><img src="/2020/02/18/网络层协议之ARP协议/1.png" alt></li><li>如果本机的ARP缓存中没有目标主机的(IP-MAC)映射对，则在本局域网内发送广播帧(即链路层帧首部的目的MAC地址字段为ff-ff-ff-ff-ff-ff-ff)，本局域网内的所有主机都会收到该ARP广播帧，但是只有IP地址和ARP中的目的IP相同的主机在会进行响应，向发送方回送一个标准帧(目的地址为发送方MAC地址)，其余的主机会丢弃该分组。</li><li>当主机A收到B的ARP响应后，就得知了主机B的MAC地址，因此就能和主机B进行数据传输了。</li><li>有一点需要区分清楚：<font color="red">ARP请求分组中的源IP地址和源MAC地址为A的IP地址和MAC地址，而目的IP地址为B的IP地址，目的MAC地址为0-0-0-0-0-0(因为A并不知道B的MAC地址)。</font></li></ol><p>通过WireShark捕获的一组ARP请求/响应报文<br><img src="/2020/02/18/网络层协议之ARP协议/2.png" alt><br><img src="/2020/02/18/网络层协议之ARP协议/3.png" alt><br>从图中我们可以清楚的看到，ARP请求报文中目的MAC地址为0-0-0-0-0-0，但是应该是由于缓存的原因，该请求报文是一个标准帧而不是一个广播帧。</p><h1 id="免费ARP"><a href="#免费ARP" class="headerlink" title="免费ARP"></a>免费ARP</h1><p>前面介绍的ARP又被称为标准ARP，那么我们接下来就介绍另外一种：即免费ARP协议(又称无偿ARP协议)。免费ARP的主要作用为验证同一个局域网中该主机的IP地址是否冲突。<br>当一个ARP请求分组满足以下条件时：</p><ol><li>源IP和目的IP相同，都是发送该ARP报文的主机IP地址</li><li>源MAC地址为该主机的MAC地址</li><li>目的MAC地址为0-0-0-0-0-0(和ARP请求报文一样)</li><li>是一个广播帧(链路层首部字段的目的MAC地址为ff-ff-ff-ff-ff-ff-ff)。</li></ol><p>通俗的说，免费ARP可以这么理解：一个主机A对一个局域网内的所有其他主机发起询问:我的IP地址是….，有没有和我重复的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 网络层 </tag>
            
            <tag> ARP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过WireShark抓包学习DHCP协议</title>
      <link href="/2020/02/17/%E9%80%9A%E8%BF%87WireShark%E6%8A%93%E5%8C%85%E5%AD%A6%E4%B9%A0DHCP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2020/02/17/%E9%80%9A%E8%BF%87WireShark%E6%8A%93%E5%8C%85%E5%AD%A6%E4%B9%A0DHCP%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>当我们的主机接入网络时，它还没有自己的IP地址、子网掩码等一些必要的信息，这些信息需要从别处获取。那么这些信息是如何获取的？是人为配置的么？当然不是的。如果每一台主机的接入和断开都需要网络管理员进行配置(IP的分配回收等)，那管理员是忙不过来的。幸好，有DHCP协议来自动完成这些配置。下面，我将通过WireShark抓包来具体的介绍DHCP是如何工作的。</p><hr><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>在学习DHCP协议之前，先介绍一个Windows命令行指令(打开CMD窗口)以及基本的WireShark操作</p><ol><li><p>ipconfig命令(对于下面命令可以自己在cmd上进行试验)<br>该命令能够查询本机的IP地址以及一些其他的信息。</p><ul><li>ipconfig/all：显式更详细的信息</li><li>ipconfig/release：断开网络连接，主机IP变为0.0.0.0，主机与网络断开，不能访问网络。 </li><li>ipconfig/renew：更新适配器信息，请求连接网络，这条命令结束之后，主机会获得一个可用的IP，再次接入网络。</li></ul></li><li><p>WireShark操作<br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/1.png" alt><br>这是WireShark3的界面，我使用的WiFi连接，因此<font color="red">点击WLAN选项</font><br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/2.png" alt><br>如图，<font color="red">在过滤器中输入DHCP(只捕获DHCP协议的分组)</font></p></li></ol><p>关于前期准备就介绍到这里，下面开始介绍DHCP协议。</p><h1 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h1><h2 id="DHCP简介"><a href="#DHCP简介" class="headerlink" title="DHCP简介"></a><font size="5">DHCP简介</font></h2><p>DHCP(Dynamic Host Configuration Protocol),动态主机配置协议，是一个<font color="red">应用层协议</font>并且运行在UDP协议之上。当我们将客户主机ip地址设置为动态获取方式时，DHCP服务器就会根据DHCP协议给客户端分配IP，使得客户机能够利用这个IP上网。</p><h2 id="DHCP协议工作过程"><a href="#DHCP协议工作过程" class="headerlink" title="DHCP协议工作过程"></a><font size="5">DHCP协议工作过程</font></h2><p><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/3" alt><br>DHCP的实现分为4步，分别是： </p><ol><li>第一步(DHCP发现)：Client端在局域网内发起一个DHCP　Discover包，目的是想发现能够给它提供IP的DHCP Server。 </li><li>第二步(DHCP提供)：可用的DHCP Server接收到Discover包之后，通过发送DHCP Offer包给予Client端应答，意在告诉Client端它可以提供IP地址。 </li><li>第三步(DHCP请求)：Client端接收到Offer包之后，发送DHCP Request包请求分配IP。 </li><li>第四步(DHCP响应)：DHCP Server发送ACK数据包，确认信息。</li></ol><hr><h2 id="WireShark抓包实验"><a href="#WireShark抓包实验" class="headerlink" title="WireShark抓包实验"></a><font size="5">WireShark抓包实验</font></h2><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a><font size="5">实验环境</font></h3><ol><li>操作系统:Windows10</li><li>WireShark版本:3.2.1</li><li>网络环境:无线连接</li></ol><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a><font size="5">实验步骤</font></h3><ol><li>使用ipconfig/release命令断开连接<br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/3.png" alt><br>此时能观察到WireShark捕获到一个DHCP Release分组<br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/4.png" alt></li><li>使用ipconfig/renew命令重新连接<br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/5.png" alt><br>此时WireShark再次捕获到4个DHCP分组<br><img src="/2020/02/17/通过WireShark抓包学习DHCP协议/6.png" alt><br>在这里，有一点很重要:DHCP的四个分组中，目的地址应该都是255.255.255，但是在实际抓包实验中发现DHCP OFFER和DHCP ACK包的目的地址都是实际给主机分配的地址。这应该是缓存导致的。至于DHCP四个包的内容，有兴趣可以自行使用WireShark抓包观察一下，比较简单就不做赘述。</li></ol><h1 id="DHCP协议如何工作"><a href="#DHCP协议如何工作" class="headerlink" title="DHCP协议如何工作"></a>DHCP协议如何工作</h1><p>最后，将前面的文章梳理一遍，再对DHCP的工作流程进行进一步的介绍。</p><ol><li>DHCP发现:一台新到达主机的首要任务就是发现一个要与其交互的DHCP服务器。此时主机并不知道DHCP服务器的地址，甚至还没有自己的IP地址，因此该分组的源地址为0.0.0.0，目的地址为255.255.255.255。</li><li>DHCP提供:当DHCP服务器收到一个DHCP发现报文时，用DHCP提供报文向客户作出响应，此报文的目的地址仍为255.255.255。这是因为，一个子网中可能有多个DHCP服务器，客户可以从这几个服务器中选择一个合适的。(此时DHCP为客户机保留该选中的IP，如果在此期间收到了其他主机的DHCP发现报文，该IP不会被分配给其他主机)</li><li>DHCP请求:新到达主机从一个或多个服务器提供中选择一个，并向选中的服务器发送DHCP请求报文，回显DHCP 提供报文中服务器配置的参数</li><li>DHCP响应:服务器用DHCP ACK报文对客户机的请求作出响应，证实所要求的参数。</li><li>客户端在接收到DHCP ack广播后，会向网络发送三个针对此IP地址的ARP解析请求以执行冲突检测(免费ARP，后面会说到)，查询网络上有没有其它机器使用该IP地址；如果发现该IP地址已经被使用，客户机会发出一个DHCP decline数据包给DHCP服务器，拒绝此IP地址租约，并重新发送DHCP discover信息。此时，在DHCP服务器管理控制台中，会显示此IP地址为BAD_ADDRESS。</li><li>如果没有，则该IP地址正式被主机使用。</li></ol><hr><p><a href="https://blog.csdn.net/zqixiao_09/article/details/77131239" target="_blank" rel="noopener">参考文章1(参考较多)</a><br><a href="https://blog.csdn.net/zzd_zzd/article/details/88372014" target="_blank" rel="noopener">参考文章2(较详细深入)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 应用层 </tag>
            
            <tag> DHCP协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子网号全0全1那些事儿</title>
      <link href="/2020/02/17/%E5%AD%90%E7%BD%91%E5%8F%B7%E5%85%A80%E5%85%A81%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2020/02/17/%E5%AD%90%E7%BD%91%E5%8F%B7%E5%85%A80%E5%85%A81%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p>前面对IP编址进行了简单的介绍，同时也留下了一些问题:为什么使用分类编址时全0全1的子网号不能使用，而使用CIDR编址时子网号却可以使用全0全1？我将在这篇文章中进行详细说明。</p><hr><a id="more"></a><h1 id="IP寻址"><a href="#IP寻址" class="headerlink" title="IP寻址"></a>IP寻址</h1><p>如果要详细的说明原因，就不得不先对IP寻址进行一个简单地介绍。</p><h2 id="什么是IP寻址"><a href="#什么是IP寻址" class="headerlink" title="什么是IP寻址"></a><font size="5">什么是IP寻址</font></h2><p>每一个路由器中都保存有一张路由表。路由表中主要有两项:网络地址(主机号全0)、下一跳地址(最佳输出链路)。当分组到达一个路由器时，需要根据分组的目的地址选择一条链路输出，这就是IP寻址。下面就分别介绍一下划分子网的IP寻址和CIDR的IP寻址</p><h2 id="划分子网的IP寻址"><a href="#划分子网的IP寻址" class="headerlink" title="划分子网的IP寻址"></a><font size="5">划分子网的IP寻址</font></h2><ol><li>当一个IP分组到达时，路由器通过子网掩码(与运算)获取该分组的网络地址(网络号+子网号)<ol><li>如果是本网，则启动寻找主机过程</li><li>如果是其他网络，则根据网络前缀和路由表选择输出链路，将分组发送到下一个路由器</li></ol></li><li>如果路由表中找不到目的网络，则将分组转发到缺省路由器中，缺省路由器具有更加广泛的路由信息</li></ol><h2 id="CIDR的IP寻址"><a href="#CIDR的IP寻址" class="headerlink" title="CIDR的IP寻址"></a><font size="5">CIDR的IP寻址</font></h2><p>此时在查找路由表时可能会匹配到不止一个网络地址，这时应当从匹配结果中选择具有最长网络前缀的路由，即最长匹配前缀原则。网络前缀越长，其地址块就越小，因而路由就越具体。</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a><font size="5">举例说明</font></h2><p>现假设一个路由器中的路由表有两个项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">206.0.68.0/22   出口1</span><br><span class="line">206.0.71.128/25 出口2</span><br></pre></td></tr></table></figure><p>此时路由器中到达了一个分组A，该分组的目的地址为:206.0.71.128</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. 查找路由器的第一个项目，项目1的掩码为22个连续的1，即</span><br><span class="line">[11111111 11111111 111111]00 00000000</span><br><span class="line">我们将分组A的目的地址和该掩码做与运算</span><br><span class="line">11001110 00000000 01000111 10000000</span><br><span class="line">11111111 11111111 11111100 00000000</span><br><span class="line">————————————————————————————————</span><br><span class="line">11001110 00000000 01000100 00000000</span><br><span class="line">即206.0.68.0，和项目1的网络地址匹配</span><br><span class="line"></span><br><span class="line">=====================================</span><br><span class="line">2. 查找路由器第二个项目，项目2的掩码为25个连续的1，即</span><br><span class="line">[11111111 11111111 11111111 1]0000000</span><br><span class="line">同样的，我们将分组A的目的地址和该掩码做与运算</span><br><span class="line">11001110 00000000 01000111 10000000</span><br><span class="line">11111111 11111111 11111111 10000000</span><br><span class="line">—————————————————————————————————</span><br><span class="line">11001110 00000000 01000111 10000000</span><br><span class="line">即206.0.71.128，和项目2的网络地址也匹配</span><br></pre></td></tr></table></figure><p>在上述情况下，由于两个都匹配，因此选择两个匹配地址中更长的一个，即项目2。因此该分组最终从出口2转发。这就是最长匹配原则</p><h1 id="分类编址子网划分"><a href="#分类编址子网划分" class="headerlink" title="分类编址子网划分"></a>分类编址子网划分</h1><p>现假设我们有一个网络：192.168.0.0(C类网络，前24位位网络号)，我们现在需要两个子网。由于子网号全0和全1不能使用，因此我们就需要从主机号中划分2位作为子网号，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.64-&gt;[192.168.0.01]000000</span><br><span class="line">192.168.0.128-&gt;[192.168.0.10]000000</span><br></pre></td></tr></table></figure><p>下面我们假设子网号全0和全1可以使用，那么就可以划分四个子网，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">四个子网:</span><br><span class="line">192.168.0.0-&gt;[192.168.0.00]000000</span><br><span class="line">192.168.0.64-&gt;[192.168.0.01]000000</span><br><span class="line">192.168.0.128-&gt;[192.168.0.10]000000</span><br><span class="line">192.168.0.192-&gt;[192.168.0.11]000000</span><br><span class="line">==============================</span><br><span class="line">主网络:</span><br><span class="line">192.168.0.0</span><br></pre></td></tr></table></figure><p>我们对上面五个网络，分别得到它们网络地址和广播地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">主网络:192.168.0.0</span><br><span class="line">网络地址:192.168.0.0</span><br><span class="line">广播地址:192.168.0.255</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">子网1:192.168.0.0 -&gt;子网号全0的子网</span><br><span class="line">网络地址:192.168.0.0</span><br><span class="line">广播地址:192.168.0.63</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">子网2:192.168.0.64</span><br><span class="line">网络地址:192.168.0.64</span><br><span class="line">广播地址:192.168.0.127</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">子网3:192.168.0.128</span><br><span class="line">网络地址:192.168.0.128</span><br><span class="line">广播地址:192.168.0.191</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">子网4:192.168.0.192 -&gt;子网号全1的子网</span><br><span class="line">网络地址:192.168.0.192</span><br><span class="line">广播地址:192.168.0.255</span><br></pre></td></tr></table></figure><p>通过上面的对比我们不难发现：</p><ol><li>对于子网号全0的子网，它的网络地址和主网络的网络地址相同</li><li>对于子网号全1的子网，它的网络地址和主网络的广播地址相同</li></ol><p>显然，这样会造成混乱。比如一个192.168.0.255的广播是发送给主网络还是发送给子网呢？这就是使用分类IP编址时子网号不能全0和全1的原因。</p><h1 id="CIDR子网划分"><a href="#CIDR子网划分" class="headerlink" title="CIDR子网划分"></a>CIDR子网划分</h1><p>我们再来看看CIDR子网划分，当使用CIDR表示法时，每个IP地址后面都会有一个”/+前缀长度”。回到前面的例子，即使你使用了全0的子网(子网1)，启用CIDR的路由器总是以prefix+length的形式记录网络地址，所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子网的网络地址:192.168.0.0/26</span><br><span class="line">主网的网络地址:192.168.0.0/24</span><br></pre></td></tr></table></figure><p>这样一来，两个网络就得到了区分。</p><h1 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h1><p>最后，再说两个特殊的IP地址</p><ol><li>0.0.0.0，该IP地址在主机刚进入网络还没有被分配IP地址时使用，此时主机向DHCP服务器发送分组(后面会说到)，分组的源地址即为0.0.0.0</li><li>255.255.255.255，受限广播地址。尽在本地网络广播，路由器不会转发这类分组。和0.0.0.0搭配使用，前面发送给DHCP服务器的分组源地址为0.0.0.0，目的地址就是255.255.255.255</li></ol><hr><ol start="2"><li>255.255.255.255，受限广播地址。尽在本地网络广播，路由器不会转发这类分组。和0.0.0.0搭配使用，前面发送给DHCP服务器的分组源地址为0.0.0.0，目的地址就是255.255.255.255</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> IP编址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈IP编址</title>
      <link href="/2020/02/15/%E6%B5%85%E8%B0%88IP%E7%BC%96%E5%9D%80/"/>
      <url>/2020/02/15/%E6%B5%85%E8%B0%88IP%E7%BC%96%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>我们知道，我们的电脑都有一个IP地址(确切的说，是一个接口对应一个IP地址，不过在这里不影响)，它能够唯一的标识我们的主机，那么电脑的IP地址又是怎么来的呢？这就涉及到了IP编址。(本文仅涉及到IPv4编址，并不涉及IPv6)</p><hr><a id="more"></a><h1 id="IP编址的前世今生"><a href="#IP编址的前世今生" class="headerlink" title="IP编址的前世今生"></a>IP编址的前世今生</h1><p>IP地址经历了三个阶段，它们分别是</p><ol><li>分类的IP地址阶段</li><li>划分子网阶段</li><li>无分类间域路由选择(CIDR)阶段</li></ol><p>目前主要采用CIDR编址，分类编址已经渐渐被淘汰，因此本文主要介绍CIDR编址。</p><h1 id="分类编址"><a href="#分类编址" class="headerlink" title="分类编址"></a>分类编址</h1><p>早期的IP地址被分为5类，它们分别是A、B、C、D、E类。不过我们常用的只有A类、B类和C类。<br><img src="/2020/02/15/浅谈IP编址/1.png" alt><br>IP地址由<font color="red">网络号+主机号</font>组成，这几类地址的不同之处在于网络号和主机号各自占的位数不同。并且对于任意一类地址，它们主机号全0和全1不能使用(有特殊用途)，因此各类地址能表示的主机数：<br><img src="/2020/02/15/浅谈IP编址/2.jpg" alt></p><ol><li><font color="red"><b>主机号全0:表示这个网络的地址</b></font></li><li><font color="red"><b>主机号全1:本子网内的广播地址</b></font></li></ol><p>例如:210.45.240.0就表示一个C类地址，同样的210.45.240.255就表示该C类地址的广播地址</p><h1 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h1><p>后来发现，使用分类编址有两个问题：</p><ol><li>造成IP地址的大量浪费。例如：现有一个公司需要分配一个网络地址，已知该公司内有300台主机。这时候，就需要给该公司分配一个B类地址(因为C类地址最多表示254台主机)，但是问题来了，一个B类地址能够表示65534台主机，而在这里只用了300个，那么剩余的65234个IP地址都被浪费了。这样会造成IP地址的迅速衰竭。</li><li>给每一个物理网络分配一个网络号会使路由表太大。</li></ol><h2 id="划分方法"><a href="#划分方法" class="headerlink" title="划分方法"></a><font size="5">划分方法</font></h2><p>子网划分实际上就是将原来的两级IP地址转变为三级IP地址，此时<font color="red">IP地址为{网络号+子网号+主机号}</font>。从这里可以看出，子网划分其实就是从32位中拿出几位来表示子网号。要注意的是，这里网络号不变，子网号就是从主机号接走的。所以就很好理解了，<font color="red">子网划分实际上就是减少了主机数，分配到不同的子网，每个子网包含一定的主机数。</font>但是对于网络外部来说，还是一个大的网络，从外部看并没有变化。<br>有一点非常重要，由于子网号是从主机号中拿出几位表示的，而前面说过，主机号全0和全1不能使用，因此每次划分子网时，子网号全0和全1仍不能使用，因此每划分一次子网，同样会浪费一些IP地址<br><img src="/2020/02/15/浅谈IP编址/3.jpg" alt></p><h2 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a><font size="5">子网掩码</font></h2><p>子网划分中有一个十分重要的概念就是子网掩码。大家想一想，在在传输的过程中，路由器是怎么识别子网划分后的IP地址中的网络地址的？如果不提供任何信息，路由器是无法分清楚的，所以就出现了子网掩码。子网掩码很简单，<font color="red">就是将网络号和子网号对应的位置1，将主机号对应位置0，就得到了子网掩码。</font>将子网掩码和IP地址做“与”逻辑运算，就得到了网络地址。</p><h1 id="CIDR编址"><a href="#CIDR编址" class="headerlink" title="CIDR编址"></a>CIDR编址</h1><p>CIDR的全称是无分类间域路由选择，该方法在一定程度上解决了路由表过大问题。之所以被称为无分类，是因为CIDR完全放弃了之前的分类表示法，消除了传统的A类、B类、C类以及划分子网的概念。使用CIDR时，<font color="red">IP地址={网络前缀+主机号}/网络前缀所占位数</font>。CIDR仅将IP地址划分为网络前缀和主机号两部分，可以说又回到了二级IP表示。但是有一点要注意，最后用斜线/分隔，并写上网络前缀所占的位数，这样就不需要告知路由器地址掩码，仅需要通过网络前缀所占位数就可以得到地址掩码。为了便于介绍，CIDR中的地址掩码在本文中仍称作子网掩码。<br>CIDR表示法给出任何一个IP地址，就相当于给出了一个地址块，一个由连续地址构成的地址块，这样就实现了路由聚合：即从一个IP地址就可以得知一个CIDR地址块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例如:已知一个IP地址128.14.35.7/20。我们来分析一下</span><br><span class="line">128.14.35.7/20=[10000000 00001110 0010]0011 00000011</span><br><span class="line">即前20位是网络前缀，后12位是主机号，那么我们令主机号</span><br><span class="line">全0和全1就可以得到一个CIDR地址块的最小地址和最大地址</span><br><span class="line"></span><br><span class="line">128.14.32.0=[10000000 00001110 0010]0000 00000000-&gt;最小地址</span><br><span class="line">128.14.47.255=[10000000 00001110 0010]1111 11111111-&gt;最大地址</span><br><span class="line">255.255.240.0=[11111111 11111111 1111]0000 00000000-&gt;子网掩码</span><br><span class="line"></span><br><span class="line">可以看出，该CIDR地址块可以指派(47-32+1)*255=4096个IP地址</span><br><span class="line">包括全0和全1</span><br></pre></td></tr></table></figure><h1 id="CIDR子网划分"><a href="#CIDR子网划分" class="headerlink" title="CIDR子网划分"></a>CIDR子网划分</h1><p>CIDR表示法也可以进行进一步的子网划分，和前面的子网划分类似，我们只需要从主机号中借走一定的位数即可。但是和前面不同的是，这里子网号全0和全1可以使用。也就是说，如果借走两位作为子网号，那么可以划分4个子网。</p><h1 id="总结-重要"><a href="#总结-重要" class="headerlink" title="总结(重要)"></a>总结(重要)</h1><p>通过上面的介绍，相信你对IP地址的划分已经有了初步的了解，这里再强调几点</p><ol><li>不管是CIDR编址还是传统的分类编址，主机号全0和主机号全1都有特殊意义<ol><li>主机号全0:本网络的地址</li><li>主机号全1:本网络的IP地址</li></ol></li><li>CIDR的子网划分和分类编址子网划分不同的是，CIDR子网划分时子网号全0和全1可以使用(是子网号而不是主机号)。</li></ol><p>对于上面两点你可能会疑惑为什么，但是没关系，我将在下面一篇文章中详细说明。</p><hr><p>参考书籍：《计算机网络自顶向下方法》<br><a href="https://blog.csdn.net/dan15188387481/article/details/49873923" target="_blank" rel="noopener">参考文章(内含CIDR子网划分举例)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> IP编址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈IP分片机制</title>
      <link href="/2020/02/15/%E6%B5%85%E8%B0%88IP%E5%88%86%E7%89%87%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/02/15/%E6%B5%85%E8%B0%88IP%E5%88%86%E7%89%87%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>我们知道，并不是所有的链路层协议都能承载相同长度的网络层分组，因为IP数据报被封装在链路层协议中，因此链路层协议的的最大传送单元(MTU)就限制了IP数据报的长度。</p><hr><a id="more"></a><h1 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h1><p>在正式介绍IP分片之前，我们先学习一下几个概念</p><ul><li>最大传送单元(MTU)<br>一个链路层帧能够承载的最大数据量就叫做最大传送单元(MTU)。以太网的MTU为1500字节。</li><li>最大报文段长度MSS<br>网络传输数据的最大值，不包括报头。MSS+20(TCP首部)+20(IP首部)=MTU</li></ul><h1 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><font size="5">定义</font></h2><p>在发送方，将一个较大的数据报分成几个小的数据报，使其能够封装成链路层帧；在接收方，将收到的小数据报按序组装成较大的数据报。这就是IP分片</p><h2 id="相关首部字段"><a href="#相关首部字段" class="headerlink" title="相关首部字段"></a><font size="5">相关首部字段</font></h2><p>IP分片借助IP首部的<font color="red"><b>16比特标识、标志(R,MF,DF)以及13比特片偏移</b></font>三个字段来完成。我们来一次介绍这三个字段的作用</p><ol><li><p>16比特标识<br>前面说了，在接收方将IP数据报的各个片重新组装。那么问题来了，接收方怎么知道哪些片原来是一个数据报呢？这就要借助16比特标识来分辨。在接收方，<b>所有该字段值相同的片原来属于一个数据报，它们需要被重新组装。</b></p></li><li><p>标志</p><ul><li>R:保留未用</li><li>DF:不分片标志。该位置1时，则不进行分片</li><li>MF:更多分片标志。当进行分片时，除了最后一片为0其余片都置1</li></ul></li><li><p>13比特片偏移<br>该字段表示分片后，该片在原来数据中的相对位置，接收方借此对片进行组装。以8个字节为单位</p></li></ol><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a><font size="5">举例说明</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">现假设一个长4000B的数据报(那么数据部分为3980B)，到达了一个路由器，</span><br><span class="line">需要转发到一个MTU为1500B的链路上，这时就要进行IP分片。</span><br><span class="line"></span><br><span class="line">由题意知道一共要分三片，现假设16比特标识为777，那么分片结果</span><br><span class="line">片一：标识=777   DF=0    MF=1    片偏移=0(该片有效数据为1500-20=1480)</span><br><span class="line">片二：标识=777   DF=0    MF=1    片偏移=1480/8=185(该片有效数据为1500-20=1480)</span><br><span class="line">片三：标识=777   DF=0    MF=0    片偏移=1480*2/8=370(该片有效数据为3980-1480-1480=1020)</span><br></pre></td></tr></table></figure><h1 id="TCP分片"><a href="#TCP分片" class="headerlink" title="TCP分片"></a>TCP分片</h1><p>前面说到了MSS(TCP首部中的选项字段中)。MSS是TCP数据包每次能够传输的最大数据分段(不包括TCP/IP首部)，当TCP报文段长度大于MSS时，要进行分段传输。TCP协议在建立连接时双方协商MSS值(MSS选项只出现在SYN报文段中，即TCP握手的前两次)，MSS值一般为MTU减去两个首部大小。TCP报文段的分段和重组是在传输层完成的。<br>TCP分段的原因是MSS，而IP分段的原因是MTU，由于MSS&lt;=MTU，因此<font color="red"><b>TCP报文段很少会发生IP分片</b></font>。和TCP不同的是，UDP报文段不会自己进行分段，当长度超过MTU时，会在网络层进行IP分片。同样的，ICMP(网络层中)同样会出现IP分片。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> IP分片 </tag>
            
            <tag> TCP分片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DOS攻击之SYN泛洪攻击</title>
      <link href="/2020/02/15/DOS%E6%94%BB%E5%87%BB%E4%B9%8BSYN%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB/"/>
      <url>/2020/02/15/DOS%E6%94%BB%E5%87%BB%E4%B9%8BSYN%E6%B3%9B%E6%B4%AA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>DOS:Denial of Service。即拒绝服务攻击，该攻击使系统过于忙碌而不能执行有用的业务。常见的DOS攻击有:SYN泛洪攻击、ping泛洪、UDP泛洪、ICMP路由重定向炸弹、分片炸弹等。这里简单地介绍一下TCP的SYN泛洪攻击。</p><hr><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们知道，当服务器收到一个来自客户端的SYN报文段时，会为该报文段分配缓冲区并初始化连接变量，然后发送SYNACK报文段进行响应，并等待来自客户的ACK报文段。如果客户端不发送ACK报文段来完成三次握手的第三步，在一段时间后服务器将终止该半开的连接并回收资源。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>TCP的SYN泛洪攻击就是在这种背景下实现的，攻击者发送大量的TCP SYN报文段，而不完成第三次握手的步骤。这样一来，服务器就会不断地为这些SYN报文段分配资源(但实际上并不会被使用)，导致服务器的资源被耗尽而不能完成正常的服务。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>有一种有效的防御系统被称为SYN cookie被部署在大多数主流的操作系统中。</p><ol><li>当服务器收到一个SYN报文段时，他并不知道该报文段是来自一个合法用户还是来自攻击者。因此服务器并不会为该报文段分配资源。这时，服务器生成一个初始TCP序列号，该序列号是SYN报文段的源和目的IP地址与端口号以及仅有该服务器知道的秘密数的复杂函数(散列函数)。该TCP序列号被称作cookie。服务器发送这种具有特殊序列号的SYNACK报文段。要注意：服务器并不记忆该cookie或任何对应于SYN的状态信息。</li><li>如果客户端是合法的，则他将返回一个ACK报文段。当服务器收到该ACK，需要验证该ACK是与前面的某些SYN对应的。前面说过，服务器并不会记忆SYN的任何信息。此时通过cookie来完成，如果合法则服务器生成一个具有套接字的全开的连接</li><li>如果客户端没有返回ACK报文段，那么并不会产生任何影响，因为服务器并没有为它分配资源。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> DOS攻击 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议的四大定时器</title>
      <link href="/2020/02/15/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2020/02/15/TCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%9B%9B%E5%A4%A7%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>对于TCP协议，有四个非常重要的定时器，它们分别是:重传定时器、坚持定时器、保活定时器、2MSL定时器。下面就分别介绍一下这四大定时器的作用和使用场景。</p><hr><a id="more"></a><h1 id="重传定时器"><a href="#重传定时器" class="headerlink" title="重传定时器"></a>重传定时器</h1><p>该定时器在TCP的可靠数据传输中起到至关重要的作用。有一点很重要：<font color="red"><b>在一个TCP连接中，只有一个重传计时器。</b></font>那么该计时器是如何工作的呢？我们举例说明：</p><ol><li>如果有{1,2,3}三个包需要发送，先发送了1，在没有收到ACK1的情况下发送了2。定时器在发送1的时候启动，在发送2的时候不会被重置，因为当前窗口内仍有已发送但未被确认的报文段。</li><li>同样的有三个包要发送，如果先发送了1，在收到ACK1的情况下发送了2。定时器在发送1的时候启动，在发送2的时候会被重置，因为发送2时，窗口内没有已发送未被确认的报文段(1已经得到确认)。</li></ol><p>通过上述举例我们知道：</p><ul><li><font color="red"><b>一个TCP连接只有一个重传定时器</b></font></li><li><font color="red"><b>在TCP数据发送过程中，只有当前窗口内没有已发送但未被确认的报文段，重传定时器才会被重置。也就是说，如果发送了很多段，如果前面的段没有得到确认，那么后面发送的时候不会重置该定时器。</b></font></li></ul><h1 id="坚持定时器"><a href="#坚持定时器" class="headerlink" title="坚持定时器"></a>坚持定时器</h1><p>该定时器在TCP的流量控制中起到了预防死锁的作用。我们来思考这样一个场景:当接收方窗口大小为0时，接收方向发送方发送一个0窗口确认报文段，当发送方收到后，将会停止向接收方发送报文段。这样一来，发送方并不知道什么时候可以继续发送报文段，这就要用到坚持定时器。发送方收到0窗口确认报文时启动该定时器，当该定时器超时后，如果仍没有收到来了接收方的非0窗口确认(可能是接收方发送了但是丢失了，也有可能是接收方缓存仍满)，那么发送方发送一个1字节数据大小的探测报文并重新启动坚持计时器(每次重新启动定时器的超时时间加倍，最大为64)。这样当接收方缓存有空余时，发送方就能得知，坚持定时器在发送方收到非0窗口确认报文时关闭。</p><h1 id="保活定时器"><a href="#保活定时器" class="headerlink" title="保活定时器"></a>保活定时器</h1><p>该定时器用于确认两主机间TCP连接是否可用。现假设客户端和服务器之间有一个TCP连接，而客户端由于故障关闭了，这时候服务器并不知道客户端的情况，那么服务器端的TCP连接就会一直保持开启状态，但事实上该连接已经没有用了，这种情况下就会造成资源的浪费。<br>要解决这种问题，我们使用保活定时器，每当服务器收到客户端的信息，就重置该定时器。定时器的超时时间通常为2小时，如果服务器在2小时内没有收到客户的信息，它就发送一个探测报文，如果发送了10个探测报文(每隔75s发一个)都没有响应，就假定客户端出了故障，服务器就终止该TCP连接。</p><h1 id="2MSL定时器"><a href="#2MSL定时器" class="headerlink" title="2MSL定时器"></a>2MSL定时器</h1><p>在断开TCP连接中使用(四次挥手)，当最后一次挥手(客户端对服务器的FIN报文段进行确认)后，客户端并不会立刻关闭连接，而是等待2MSL后再关闭(MSL:报文的最大生存时间)。至于为什么等待2MSL，有两点原因:</p><ol><li>为了保证最后的ACK报文段能够到达</li><li>为了使本次连接中所产生的所有报文段都从网络中消失，而不会对下次连接产生影响。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GBN协议、SR协议以及TCP协议区别</title>
      <link href="/2020/02/15/GBN%E5%8D%8F%E8%AE%AE%E3%80%81SR%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8ATCP%E5%8D%8F%E8%AE%AE%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/15/GBN%E5%8D%8F%E8%AE%AE%E3%80%81SR%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8ATCP%E5%8D%8F%E8%AE%AE%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>我们知道GBN协议、SR(选择重传)协议以及TCP协议都能够保证可靠数据传输，那么问题来了:TCP到底采用的是GBN协议还是SR协议来实现的可靠数据传输呢？这里不对三种协议进行详细的介绍，主要介绍三者的区别和联系。</p><hr><a id="more"></a><h1 id="GBN协议"><a href="#GBN协议" class="headerlink" title="GBN协议"></a>GBN协议</h1><ul><li>发送方<br>对于发送方来说，如果某个报文段在超时时间内没有收到来自接收方的ACK应答，那么包括这个报文段在内所有的已发送但是未被确认(即未收到ACK应答报文)都要重新发送。因此发送方需要维护两个变量:send_base(当前窗口内最早的已发送但未被确认报文段序号)和nextseq(当前窗口内最早可以发送但未被发送的报文段序号)；除此之外发送方还需要一个缓冲区来存储哪些已发送但未被确认的报文段，这是为重传做准备。</li><li>接收方<br>对于接收方而言，如果收到一个按序到达的报文段(假设上次到达的报文段序号为n，那么此次到达的报文段序号如果是n+1，那么此报文段就是按序到达的)，则接收方发送一个ACK进行应答，并且将该分组中的数据部分提交给上一层。除此之外的所有情况，接收方丢弃该分组，并未最近按序接受的分组重新发送ACK。因此接受方只需要维护一个变量:exnextseq(下一个按序接受的报文段序号)。</li><li>累计确认<br>GBN协议使用的是累计确认，通过上面的介绍我们发现，在GBN协议中，接收方一次向上层递交一个分组，也就是说，如果分组k已接受并交付，则所有序号比k小的分组也已经交付。</li></ul><h1 id="SR协议"><a href="#SR协议" class="headerlink" title="SR协议"></a>SR协议</h1><p>接收方也设置一个缓冲区，为每个报文段设置计时器，对于乱序到达的报文段，先存储在接收方缓冲区中并发送此报文段的ACK应答。当缺失的报文段到达之后，接收方进行整理排序统一提交给上层(注意和GBN协议的区别)。</p><h1 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h1><p>TCP协议可以理解为GBN协议和SR协议的结合体，它具有累计确认机制(GBN协议)，但是对于失序到达的报文段，接收方并不是丢弃掉而是缓存起来，最后整理排序后提交给上一层(SR协议)，接收方只会对最后一个按序到达的报文段进行确认(发送ACK报文段)(GBN协议)。并且TCP还有快速重传机制:当累计收到对同一个报文段的3个ACK后，不必等待超时时间，立刻重传该报文段。</p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p><img src="/2020/02/15/GBN协议、SR协议以及TCP协议区别/1.png" alt><br><img src="/2020/02/15/GBN协议、SR协议以及TCP协议区别/2.png" alt></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层与链路层校验和</title>
      <link href="/2020/02/14/%E4%BC%A0%E8%BE%93%E5%B1%82%E4%B8%8E%E9%93%BE%E8%B7%AF%E5%B1%82%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
      <url>/2020/02/14/%E4%BC%A0%E8%BE%93%E5%B1%82%E4%B8%8E%E9%93%BE%E8%B7%AF%E5%B1%82%E6%A0%A1%E9%AA%8C%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>我们知道，在传输层协议中，无论是TCP还是UDP都提供了差错检测功能(通过首部字段中的检验和字段实现)。同时，许多链路层协议(如著名的以太网协议)也实现了差错检测功能。说到这里你可能会有疑问：这是否是冗余功能呢？让我们来分析一下。</p><hr><a id="more"></a><p>答案当然是不冗余的，甚至说是必须实现的。原因有两个</p><ul><li>第一，我们知道，在两台主机之间，有多个交换机和多段通信链路，这些不同的通信链路可能使用不同的链路层协议，我们并不能保证这些链路都实现了差错检测(有些链路层协议并不提供差错检测功能)，因此在传输层提供差错检测是必要的。</li><li>第二，更重要的是，即使两台主机之间的所有通信链路都实现了差错检测，当报文存储在路由器中时，也有可能会引入比特差错。链路层协议的差错检测仅仅保证了点到点(路由器到路由器之间)的正确性，并不能保证端到端的正确性(主机到主机之间)，如果要实现端到端的差错检测，就必须在传输层协议实现差错检测功能。这就是系统设计中被称颂的<b>端到端原则</b>。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 校验和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS解析的工作原理及递归与迭代的区别</title>
      <link href="/2020/02/13/DNS%E8%A7%A3%E6%9E%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/02/13/DNS%E8%A7%A3%E6%9E%90%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E9%80%92%E5%BD%92%E4%B8%8E%E8%BF%AD%E4%BB%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>最近在复习计算机网络，发现有些地方之前记录的不够深入。今天让我们来看一看DNS的解析。如题所示，本文不会对DNS进行详细的介绍，主要介绍DNS解析的过程以及递归与迭代的区别。</p><hr><a id="more"></a><h1 id="递归和迭代的区别"><a href="#递归和迭代的区别" class="headerlink" title="递归和迭代的区别"></a>递归和迭代的区别</h1><ul><li>递归查询就是<font color="red">查询的递交者更替变换</font></li><li>迭代查询则是<font color="red">查询的递交者保持不变</font></li></ul><p><font size="5" color="blue"><b>举个例子</b></font></p><ol><li>你想知道某个女孩的电话，并且你偷偷拍了她的照片，回到寝室告诉一个很仗义的哥们儿，这个哥们儿二话没说，拍着胸脯告诉你，甭急，我替你查(<b>此处完成了一次递归查询，问询者的角色更替</b>)。</li><li>然后他拿着照片问了学院大四学长，学长告诉他，这姑娘是xx系的；</li><li>然后这哥们儿马不停蹄又问了xx系的办公室主任助理同学，助理同学说是xx系yy班的，</li><li>然后很仗义的哥们儿去xx系yy班的班长那里取到了该女孩儿电话。最后，他把号码交到了你手里，完成整个查询过程。</li></ol><ul><li>(<b>以上完成若干次迭代查询，问询者角色不变，但反复更替问询对象</b>)</li></ul><h1 id="DNS解析的工作过程"><a href="#DNS解析的工作过程" class="headerlink" title="DNS解析的工作过程"></a>DNS解析的工作过程</h1><p>现在假设我用我的笔记本，在浏览器中输入www. baidu. com，让我们来看看DNS到底是怎么做的</p><ol><li>操作系统会<font color="red">先检查笔记本内的hosts文件</font>是否有该(域名-&gt;IP地址)的映射关系。如果有，就直接使用该IP地址，完成域名解析</li><li>如果hosts里没有这个(域名-&gt;IP地址)映射，则<font color="red">在本地DNS解析器缓存中查找</font>是否有该(域名-&gt;IP地址)映射关系。如果有则直接返回，完成域名解析</li><li>如果仍然没有找到(域名-&gt;IP地址)映射关系，则<font color="red">在TCP/IP参数中设置的首选DNS服务器(即本地DNS服务器)中查询</font>。此服务器收到查询时，如果其中包含(域名-&gt;IP地址)映射关系，则返回解析结果给我的笔记本，完成域名解析</li><li>如果本地DNS服务器中仍没有(域名-&gt;IP地址)映射关系，那么该本地DNS服务器向根DNS服务器发送查询。得到该域名的顶级域服务器IP地址并返回给本地DNS服务器</li><li>本地DNS服务器得到顶级域服务器IP后，向该顶级域服务器发送查询。得到该域名的权威服务器IP地址并返回给本地DNS服务器</li><li>本地DNS服务器得到权威服务器IP后，向该权威服务器发送查询。得到www. baidu. com的IP地址并返回给本地DNS服务器</li><li>最后，本地DNS服务器将解析得到的www .baidu. com的IP地址返回给我的笔记本，完成整个查询过程。</li><li>我的笔记本收到IP地址后，向位于给IP地址的主机的80端口发起TCP连接。</li></ol><p><img src="/2020/02/13/DNS解析的工作原理及递归与迭代的区别/1.jpg" alt></p><hr><p>参考资料:《计算机网络自顶向下方法》<br><a href="https://blog.csdn.net/wytheonly/article/details/37925067" target="_blank" rel="noopener">参考文章</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计之E-R模型</title>
      <link href="/2019/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B9%8BE-R%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E4%B9%8BE-R%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>E-R模型，即实体-联系模型(entity-relationship)。该数据模型能够方便我们的数据库设计，它将在现实世界实体的含义和交互映射到概念模式上。E-R模式涉及到三个基本概念:实体集、联系集和属性。</p><hr><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>这一小节中，主要介绍E-R模型涉及到的三个基本概念，为后面的深入学习做准备，它们分别是实体集、联系集和属性。</p><h2 id="实体集"><a href="#实体集" class="headerlink" title="实体集"></a><font size="5">实体集</font></h2><ol><li><b>实体</b><br><font color="red"><b>实体是现实世界中可区别于所有其他对象的一个事物或对象。</b></font>例如：一个人是一个实体，一支笔也是一个实体…简单地说，实体是现实世界中的任何事物(虽然不准确，但可以简单理解为关系型数据库中的一条记录)。</li><li><b>实体集</b><br><font color="red"><b>实体集是具有相同类型(具有相同性质)的一个实体集合</b></font>，本质上是一个集合。例如:一个大学的所有教师是一个实体集、所有学生是一个实体集、甚至一个大学的所有人也是一个实体集。通俗的讲，实体集就是一类事物的总和，不同的实体集可以相交(可以不准确的理解为关系型数据库中的一张表)。</li><li><b>属性</b><br>实体通过属性来表示，<font color="red"><b>属性是实体集中每个成员所拥有的描述性性质。</b></font>比如一个人，他有身高、体重、年龄等等不同的属性。(一个属性可以不准确的理解为表的一个列)</li></ol><p>每个实体的每个属性都有一个值，现在可以准确的说，该实体所有属性值的集合就相当于关系型数据库中一张表的一条记录。数据库包含一组实体集(若干张表)，每个实体集包括任意数量的相同类型的实体(若干条记录)。</p><h2 id="联系集"><a href="#联系集" class="headerlink" title="联系集"></a><font size="5">联系集</font></h2><ol><li><b>联系</b><br><font color="red"><b>联系是指多个实体间的相互关联。</b></font>例如：我们可以定义关联老师张三和学生李四的联系advisor，这一联系指明张三是李四的导师。(联系实际上也是一张表)</li><li><b>联系集</b><br><font color="red"><b>联系集是相同类型联系的集合。</b></font>正规的说：联系集是N(N&gt;=2)个实体集(可能相同)上的数学关系，如果E1,E2,…,En为实体集，那么联系集R是<br><font size="5" color="red"><b>{(e1,e2,…,en)|e1∈E1,e2∈E2,…en∈En}的一个子集</b></font>，而(e1,e2,…,en)是一个联系。<br>事实上，虽然不够准确，但是可以理解为联系可以通过SQL语言中的主码外码和表来表示。</li><li><b>参与和角色</b><br><font color="red"><b>实体集之间的关联称为参与</b></font>；也就是说，实体集E1,E2,…En参与联系集R。E-R模型中的一个联系实例表示在所建模的现实世界中实体间的一个关联：一个ID为45566的教师实体张三和一个学生ID为12345的学生实体李四参与到了advisor的一个联系实例中。这一联系实例表示在大学中张三是李四的导师。<br><font color="red"><b>实体在联系中扮演的功能称为实体的角色。</b></font>一般来说，参与一个联系集的实体集通常是互异的(类比于一张表参照于另一张表)，这时候角色是隐含的并且一半并不指定。但是，当参与联系的实体集是同一张表时，即同一个实体集以不同的角色参与一个联系集多次，我们需要用到角色。这类联系集有时被称作闭环联系集。例如：<b>一个记录大学开设的所有课程的信息的实体集course，我们用course的有序对来建立一个联系集prep，以描述一门课程(C2)是另一门课程(C1)的先修课。每对课程中的第一门课具有C1角色，第二门课具有C2角色。这时，所有的联系通过(C1,C2)来表示，就排除了(C2,C1)对。</b>(可以类比于SQL表中表自身的依赖关系)</li><li><b>联系的属性</b><br>联系也可以具有描述性属性。例如：考虑前面介绍的张三和李四的联系advisor联系，我们可以给联系一个date属性，表示教师成为学生导师的日期。该date属性既不在教师集中也不在学生集中，它是advisor联系的一个属性。<font color="red">给定联系集中的一个联系实例必须是由参与实体唯一标识的，而不必使用联系自身的描述属性。</font><br><b>参与联系集的实体集的数目称为联系集的度</b>，二元联系集的度为2，三元联系集的度为3。</li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><font size="5">属性</font></h2><p>每个属性都有一个可取值的集合，称为该属性的域，或者值集。在E-R模型中，属性有不同的划分：</p><ol><li><b>简单属性和复合属性</b><br><font color="red"><b>简单属性是指不能够划分为更小的部分。而复合属性可以再划分为更小的部分(即其他属性)。</b></font>例如：属性NAME可以设计为包含first_name,middle_name,last_name的复合属性。如果一个用户希望在一些场景中使用复合属性，而在另外一些场景中仅仅使用属性的一部分，那么我们可以将属性设计为复合属性。<br><img src="/2019/12/08/数据库设计之E-R模型/1.png" alt></li><li><b>单值和多值属性</b><br><font color="red"><b>单值属性对于一个特定的实体只有单独的一个值。</b></font>例如：对于一个学生实体而言，它的ID属性只有一个。<font color="red"><b>而多值属性在某些情况下，对某个特定的实体而言，一个属性值可能对应一组值。</b></font>例如：对于一个教师实体，他可能有多个电话号码，那么它的phone_number属性可能有一组值。我们用{phone_number}来表示该属性是多值属性。</li><li><b>派生属性</b><br><font color="red"><b>这类属性的值可以从别的相关属性或实体派生出来。</b></font>例如：我们假设教师实体有一个属性students_advised，表示一个教师指导了多少个学生。我们可以通过统计一个教师相关联的所有学生实体数来得到这个属性值。或者我们可以通过教师的birth(出生日期)和当前日期来得到教师的年龄age。派生属性的值不存储，而是在需要时计算出来。</li></ol><p><b>当一个实体在某个属性上没有值时可以使用空值，空值可以表示不适用、属性值未知。</b></p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>E-R模式可以定义一些数据库中的数据必须满足的约束，下面我们就讨论映射基数和参与约束。</p><h2 id="映射基数"><a href="#映射基数" class="headerlink" title="映射基数"></a><font size="5">映射基数</font></h2><p><font color="red"><b>映射基数，表示一个实体通过一个联系集能关联的实体的个数。</b></font>映射基数在描述二元联系集时非常有用，它也可以用来表述多元联系集，这里主要介绍二元联系集。对于实体集A和B之间的二元联系集R，映射基数必是以下情况之一</p><ol><li><b>一对一</b><br>A中的多个实体至多与B中的一个实体相关联，并且B中的一个实体也至多与A中的一个实体相关联</li><li><b>一对多</b><br>A中的一个实体可以与B中任意数目(可以是0个)实体相关联，而B中的一个实体至多与A中的一个实体相关联</li><li><b>多对一</b><br>A中的一个实体至多与B中的一个实体相关联，而B中的一个实体可以与A中任意数目实体相关联</li><li><b>多对多</b><br>A中的一个实体可以和B中的任意数目实体相关联，B中的一个实体也可以和A中任意数目实体相关联</li></ol><p>如下图所示<br><img src="/2019/12/08/数据库设计之E-R模型/2.png" alt>，你应该注意到，四种情况下两实体集中都可能会存在没有和另外一个实体集关联的实体。</p><h2 id="参与约束"><a href="#参与约束" class="headerlink" title="参与约束"></a><font size="5">参与约束</font></h2><p><font color="red"><b>如果实体集E的每一个实体都参与到联系集R的至少一个联系中，实体集E在联系中的参与称为全部参与。如果E中只有部分实体参与到R的练习中，实体集E到联系集R的参与称为部分的。</b></font><br>例如，我们期望每个学生实体通过advisor联系至少同一名教师相联系，因而学生实体集在联系集advisor中的参与是全部的；相反的，每个教师实体不是必须指导一个学生，因此很可能只有一部分教师实体通过advisor联系同学生实体集相联系，于是教师实体集在advisor中的参与是部分的。</p><h2 id="码"><a href="#码" class="headerlink" title="码"></a><font size="5">码</font></h2><h3 id="码的定义"><a href="#码的定义" class="headerlink" title="码的定义"></a><font size="5">码的定义</font></h3><p>我们应该有一个区分给定实体集中实体的方法。从概念上说，各个实体间是不同的，但是从数据库观点来看，它们的区别必须通过其属性来体现。我们来介绍三种码</p><ol><li><b>超码</b><br>超码是一个或多个属性的集合，这些属性的组合可以使我们唯一的标识一个元组(关系模型的概念，可以理解为实体，或者是数据库中的一行记录)</li><li><b>候选码</b><br>超码中可能包含无关紧要的属性，例如：ID和name的组合是学生关系(关系模型的概念，相当于数据库中的表，E-R模型中的实体集)，但是我们发现，ID属性就已经足够唯一标识一个元组，即该超码的中含有多余的属性name。<font color="red"><b>如果一个超码的任意真子集都不能称为超码，那么这个超码就是候选码。</b></font></li><li><b>主码</b><br>主码是数据库设计者选定的、用来在一个关系中区分不同元组的候选码。(主码仍是候选码)</li></ol><h3 id="联系集的码"><a href="#联系集的码" class="headerlink" title="联系集的码"></a><font size="5">联系集的码</font></h3><p>上面介绍的关系模型中的三种码同样适用于实体集，即实体的码是一个足以区分每个实体的属性集。<b>码同样用于唯一的标识联系，从而将联系相互区分开来。</b><br>假设R是一个涉及实体集E1,E2,…En的联系集。设主码(Ei)代表构成实体集Ei主码的属性集合。<font color="red"><b>目前我们假设所有主码的属性名是互不相同的，联系集的主码构成依赖于同联系集R相关联的属性集合。</b></font></p><ol><li>如果联系集R没有属性与之相关联，那么属性集合<br><font color="red" size="5"><b>rimary-key(E1)∪primary-key(E2)∪…primary-key(En)</b></font><br>描述了集合R中的一个联系</li><li>如果联系集R有属性a1,a2,…am与之相关联，那么属性集合<br><font color="red" size="5"><b>rimary-key(E1)∪…primary-key(En)∪{a1,a2,…an}</b></font><br>描述了集合R中的一个联系</li><li><b>综合</b><br><b>以上两种情况下，属性集合</b><br><font color="red" size="5"><b>rimary-key(E1)∪primary-key(E2)∪…primary-key(En)</b></font><br><b>构成了联系集R的一个超码</b></li></ol><p>如果实体集间主码的属性名称不是互不相同的，重命名这些属性以区分它们；实体集的名字加属性名可以构成唯一的名称。如果一个实体集不止一次参与某个联系集(前面的prep)，则使用角色名代替实体集名构成唯一属性名。</p><h3 id="联系集的主码"><a href="#联系集的主码" class="headerlink" title="联系集的主码"></a><font size="5">联系集的主码</font></h3><p><b>联系集的主码结构依赖于联系集的映射基数。</b>例如：考虑上面A和B的四种映射基数，假设他们的联系集为AB，则</p><ol><li>如果A和B是多对多的关系，那么AB的主码有A和B的主码的并集组成</li><li>如果联系是从A到B多对一的，那么AB的主码就是A的主码</li><li>如果联系是从A到B一对多的，那么AB的主码就是B的主码</li><li>如果A和B之间是一对一关系，那么AB的主码可以是A的主码也可以是B的</li><li>对于非二元关系，如果没有基数的限制，那么上面的介绍的超码就是联系集的主码；如果有基数限制，后面再进行介绍。</li></ol><h1 id="从实体集中删除冗余属性"><a href="#从实体集中删除冗余属性" class="headerlink" title="从实体集中删除冗余属性"></a>从实体集中删除冗余属性</h1><p>当我们使用E-R数据模型设计数据库时，通常从确定应当包含哪些实体集，当确定好实体集后，我们必须挑选适当的属性。一旦选择好实体和它们相应的属性，不同实体间的联系集就建立起来了。这些联系集可能会导致不同实体集中的属性冗余，我们需要删除冗余的属性。现在假设：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">实体集instructor(教师集)包含属性</span><br><span class="line">ID,name,dept_name,salary。其中ID为主码</span><br><span class="line"></span><br><span class="line">实体集department(系名)包含属性</span><br><span class="line">dept_name,building,budget。其中dept_name为主码</span><br></pre></td></tr></table></figure><p>我们用关联instructor和department的联系集inst_dept对每个教师都有一个关联的系得情况进行建模。属性dept_name在两实体集中都出现了，由于它是department的主码，因此它在实体集instructor中是冗余的，需要将其移除。<br>后面我们会看到，只有当一个教师最多只与一个系关联(多对一)时，属性dept_name才会添加到instructor中。如果一个教师有多个关联的系(一个系也不止一个教师，所以是多对多关系)时，教师与系之间的联系会记录在一个单独的关系inst_dept中。<b>将教师和系之间的关联同统一看成联系，而不是instructor的一个属性，使得逻辑关系明确，并有助于过早的假设每个教师只与一个系关联。</b></p><h1 id="E-R图"><a href="#E-R图" class="headerlink" title="E-R图"></a>E-R图</h1><p>E-R图可以图形化表示数据库的全局逻辑结构，即简单又清晰，在数据库设计中被广泛使用</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a><font size="5">基本结构</font></h2><p>E-R图包括如下几个主要构件</p><ol><li><b>分成两部分的矩形</b><br>代表实体集，一部分包含实体集的名字；另一部分包含实体集中所有属性的名字</li><li><b>菱形</b>代表联系集</li><li><b>未分割的矩形</b><br>代表联系集的属性，构成主码的属性下划线表明</li><li><b>线段</b>将实体集连接到联系集</li><li><b>虚线</b>将联系集属性连接到联系集</li><li><b>双线</b>显式实体在联系集中的参与度(双线表示全部参与)</li><li><b>双菱形</b><br>表示连接到弱实体集的标识性联系集(后面介绍)</li></ol><h2 id="映射基数-1"><a href="#映射基数-1" class="headerlink" title="映射基数"></a><font size="5">映射基数</font></h2><p>前面我们过了映射基数，下面主要介绍如何在E-R图中表示映射基数。如下图所示<br><img src="/2019/12/08/数据库设计之E-R模型/3.png" alt><br>通过图我们可以发现规律，在四种映射关系中：<font color="red"><b>如果实体集是一，则联系集用箭头指向该实体集；如果实体集是多，则联系集用线段指向该实体集。</b></font></p><h2 id="复杂的属性"><a href="#复杂的属性" class="headerlink" title="复杂的属性"></a><font size="5">复杂的属性</font></h2><p>如果一个实体集拥有复杂的属性，那么它的E-R图又该怎么表示？我们假设前面instructor实体集的name属性为复杂属性，则instructor的E-R如下所示<br><img src="/2019/12/08/数据库设计之E-R模型/4.png" alt>可以看到，<font color="red"><b>在E-R图中，我们使用{属性名}表示多值属性。</b></font></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a><font size="5">角色</font></h2><p>前面介绍过，在闭环联系集中，我们需要用到角色，那么E-R图又是如何表示角色的呢？<br><img src="/2019/12/08/数据库设计之E-R模型/5.png" alt>从图中可以看到，我们使用两条线段分别标识不同的角色。</p><h2 id="非二元的联系集"><a href="#非二元的联系集" class="headerlink" title="非二元的联系集"></a><font size="5">非二元的联系集</font></h2><p>非二元的联系集也可以在E-R图中简单地表示，如下图所示<br><img src="/2019/12/08/数据库设计之E-R模型/6.png" alt>如图，在非二元的联系集中，我们可以表示某些类型的多对一关系。假设student在每个项目(project)上最多只能有一位导师(学生和导师多对一)，这种约束可以从proj_guide指向instructor的箭头表示。另外要注意的是：<font color="red"><b>在一个联系集外我们至多允许使用一个箭头。</b></font></p><h2 id="弱实体集"><a href="#弱实体集" class="headerlink" title="弱实体集"></a><font size="5">弱实体集</font></h2><p>前面在介绍E-R图形的时候，说了双菱形代表连接到弱实体集的标识性联系集，下面就来介绍一下什么是弱实体集。</p><h3 id="示例介绍"><a href="#示例介绍" class="headerlink" title="示例介绍"></a><font size="5">示例介绍</font></h3><p>假设一个section(开课)实体，它由课程编号、学期、学年以及开课编号唯一标识。显然，开课实体和课程(course)实体相关联。假定我们在实体集section和course之间创建了一个联系集sec_course。<br>现在，发现sec_course中的信息是冗余的，由于section存在属性course_id，它标识该开课所关联的课程。消除这种冗余的一个方法是删除联系sec_course。然而，这么做会使得section和course之间的联系隐含于一个属性中，这不是一个好办法。消除这种冗余的另一个方法是在实体section中不保留course_id，但是由于course_id参与构成section的主码，去掉之后剩下的属性无法唯一标识一个指定的section实体，为了解决这个问题，我们将联系sec_course视为一个特殊的联系，它给唯一标识section实体提供额外信息，即course_id。</p><h3 id="弱实体集定义"><a href="#弱实体集定义" class="headerlink" title="弱实体集定义"></a><font size="5">弱实体集定义</font></h3><p><font color="red"><b>没有足够的属性以形成主码的实体被称为弱实体集，与之对应的，有主码的实体称作强实体集。</b></font><b>弱实体集必须和另外一个称作标识实体集的实体集关联才有意义，每个弱实体集必须和一个标识实体集关联。我们称标识实体集拥有它所标识的弱实体集。弱实体集和标识实体集相连的联系称为标识性联系。标识性联系从弱实体集到标识实体集是多对一的，并且弱实体集是全部参与的，标识性联系不能有自己的属性。</b></p><h3 id="弱实体集主码"><a href="#弱实体集主码" class="headerlink" title="弱实体集主码"></a><font size="5">弱实体集主码</font></h3><p>通过弱实体集的定义可知，弱实体集是没有主码的，但是我们仍需要依赖于特定强实体集的弱实体集中的实体。<font color="red"><b>弱实体集的主码由标识实体集的主码加上该弱实体集的分辨符构成。</b></font><br>假设上面的section弱实体集，它的分辨符为{sec_id,semester,year}，该弱实体集所依赖的标识实体集course的主码为course_id，因此该弱实体集的主码为{course_id,sec_id,semester,year}。</p><h3 id="弱实体集的E-R图"><a href="#弱实体集的E-R图" class="headerlink" title="弱实体集的E-R图"></a><font size="5">弱实体集的E-R图</font></h3><p>弱实体集和强实体集类似，使用矩形表示，主要有以下两点区别</p><ol><li>弱实体集的分辨符以虚下划线表明，而不是实线</li><li>关联弱实体集和标识实体集的联系集以双菱形表示</li><li>弱实体集是全部参与的并且从标识实体集到弱实体集是一对多的关系</li></ol><p><img src="/2019/12/08/数据库设计之E-R模型/7.png" alt></p><ol><li><b>弱实体集可以参与标识性联系以外的其他联系。</b>例如，一个section实体可以和time_slot实体参与一个联系，以标识开课时间</li><li><b>一个弱实体集可以作为另一个弱实体集的标识实体集</b></li><li><b>一个弱实体集也可能不止与一个标识实体集关联</b>，这样的话，该弱实体集的主码就由这些标识实体集的主码的并集加上弱实体集的分辨符组成。</li></ol><h1 id="E-R模式转换为关系模式"><a href="#E-R模式转换为关系模式" class="headerlink" title="E-R模式转换为关系模式"></a>E-R模式转换为关系模式</h1><p>我们可以将一个复合E-R数据库模式的数据库表示为一些关系模式的集合。在数据库设计中，<font color="red"><b>对于每个实体集以及每个联系集，都有唯一的关系模式与之对应</b></font>，关系模式名即为相应的实体集或联系集的名称。下面就将介绍如何用关系模式来表示E-R模型</p><h2 id="具有简单属性的强实体集表示"><a href="#具有简单属性的强实体集表示" class="headerlink" title="具有简单属性的强实体集表示"></a><font size="5">具有简单属性的强实体集表示</font></h2><p>对于一个只具有简单属性的强实体集，将其转换为关系模式很简单。强实体集的属性就是生成的关系模式的属性，强实体集的主码就是生成的关系模式的主码。</p><h2 id="具有复杂属性的强实体集表示"><a href="#具有复杂属性的强实体集表示" class="headerlink" title="具有复杂属性的强实体集表示"></a><font size="5">具有复杂属性的强实体集表示</font></h2><p>当一个强实体集具有一些非简单属性时。根据不同的属性有不同的处理方法</p><ol><li><b>复合属性</b><br><font color="red"><b>通过为每个子属性创建一个单独的属性来处理复合属性，同时，我们并不为复合属性创建一个单独的属性。</b></font>例如：假设实体集(ID,name,address)，其中name为复合属性(first_name,middle_name,last_name)，那么我们得到的关系模式的属性为(ID,first_name,middle_name.last_name,address)。可以看到，在关系模式中我们将复合属性拆成了子属性。</li><li><b>多值属性</b><br><font color="red"><b>对于多属性，我们会为这些属性创建一个新的关系模式。</b></font>例如：假设有一个实体集(ID,name,phone_number)，其中ID为主码，name为复合属性，phone_number为多值属性。<b>对于多值属性M，构造一个关系模式R，该模式包含一个对应于M的属性A，以及对应于M所在的实体集或联系集的主码的属性。</b>因此，对于实体集(ID,name,phone_number)，我们会得到两个关系模式，分别是(ID,first_name,middle_name,last_name)主码为ID，(ID,phone_number)主码为(ID,phone_number)。<ul><li><b>为多值属性创建的关系模式的主码由该关系模式的所有属性组成</b></li><li><b>为多值属性创建的关系模式的外码由该实体集(ID,name,phone_number)的主码生成的属性去参照实体集所生成的关系。(在上例中，多值属性关系模式的外码为ID，参照实体集的ID属性)</b></li><li><b>在实体集只有两个属性时(一个为主码一个为多值属性)，可以删除掉该实体集对应的关系模式，只保留多值属性对应的关系模式</b></li></ul></li></ol><h2 id="弱实体集的表示"><a href="#弱实体集的表示" class="headerlink" title="弱实体集的表示"></a><font size="5">弱实体集的表示</font></h2><p>假设A是具有属性a1,a2,…am的弱实体集，设B是A所依赖的强实体集，设B的主码为b1,b2,…,bn。那么得到的关系模式A为<br><font color="red" size="5"><b>(a1,a2,…,am,b1,b2,…,bn)</b></font></p><ul><li><b>主码</b>：对于弱实体集转化得到的关系模式，该模式的主码由弱实体集的标识实体集加弱实体集的分辨符组成</li><li><b>外码</b>：模式中来自于标识实体集的属性依赖于标识实体集</li></ul><h2 id="联系集的表示"><a href="#联系集的表示" class="headerlink" title="联系集的表示"></a><font size="5">联系集的表示</font></h2><p>设R是联系集，设a1,a2,…,am表示所有参与R的实体集的主码的并集，设R的描述属性(如果有描述属性的话)b1,b2,…,bn，那么由联系集R得到的关系模式为<br><font size="5" color="red"><b>(a1,a2,…,am,b1,b2,…,bn)</b></font></p><ul><li><p><b>主码</b><br>前面介绍了联系集的主码，现在介绍一下关系模式的主码，其实大体类似</p><ul><li>多对多关系，参与实体集的主码属性的并集成为主码</li><li>一对一关系，任何一个实体集的主码都可以选作主码</li><li>一对多或多对一关系，联系集’多’的那一方的实体集的主码成为主码</li><li>对于边上没有箭头的N元联系集，所有参与联系的实体集的主码并集构成主码</li><li>对于边上有箭头的N元联系集(前面说过至多有一个)，不在箭头侧的实体集的主码(并集)构成主码</li></ul></li><li><p><b>外码</b><br>对于由联系集R得到的关系模式，模式中来自实体集Ei的属性ei参照关系模式Ei的主码。</p></li></ul><h2 id="模式的冗余"><a href="#模式的冗余" class="headerlink" title="模式的冗余"></a><font size="5">模式的冗余</font></h2><p>连接弱实体集和相应强实体集的联系集比较特殊，<font color="red"><b>一般情况下，连接弱实体集与其所依赖的强实体集的联系集的模式是冗余的。</b></font></p><h2 id="模式的合并"><a href="#模式的合并" class="headerlink" title="模式的合并"></a><font size="5">模式的合并</font></h2><p><font color="red"><b>假设从实体集到实体集B的一个一对多联系集AB，并且假设A在该联系中是全部参与的。即A中的每个实体a都必须参与到联系AB中。那么我们可以将A和AB模式进行合并。合并后的模式C的主码就是A的主码，并且B的主码在合并后的模式中作为外码参照B。</b></font>另外，即使A是部分参与，也可以通过使用null值来进行模式的合并。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据库设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接表达式</title>
      <link href="/2019/12/07/MySQL%E8%BF%9E%E6%8E%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2019/12/07/MySQL%E8%BF%9E%E6%8E%A5%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在SQL语句中，查询类语句是使用的最多的，当查询时，可能仅仅对一个表进行查询并不能满足我们的要求，需要对多个表进行操作，这时候连接操作不失为一种好选择。下面我们基于MySQL数据库介绍SQL语言中的连接关键字JOIN。</p><hr><a id="more"></a><h1 id="连接种类"><a href="#连接种类" class="headerlink" title="连接种类"></a>连接种类</h1><p>对于MySQL中的连接，有两种分类</p><ol><li><b>内连接(INNER JOIN)</b><br>这也是默认的连接，INNER可以省略</li><li><b>外连接(OUTER JOIN)</b><br>外连接又分为三种<ul><li><b>LEFT OUTER JOIN</b></li><li><b>RIGHT OUTER JOIN</b></li><li><b>FULL OUTER JOIN</b></li></ul></li></ol><p>下面分别对着几种连接进行介绍</p><h1 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h1><p>在介绍这几种连接之前，先介绍一下最简单的自然连接，该连接方式不需要连接条件，只需要两个关系有相同的属性即可<br>现有两关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//学生表</span><br><span class="line">student(ID,name,dept_name)</span><br><span class="line">//选课表</span><br><span class="line">takes(ID,course_id,credits,dept_name)</span><br></pre></td></tr></table></figure><p>学生表和选课表中有两个相同属性，分别是:ID和dept_name。我们对这两个关系进行自然连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student NATURAL JOIN takes</span><br><span class="line">或</span><br><span class="line">takes NATURAL JOIN student</span><br></pre></td></tr></table></figure><p>以上操作得到一个新的关系，新关系的属性依次为：<font color="red"><b>两关系的共有属性，NATURAL JOIN字段前的关系除了共有属性的属性，NATURAL JOIN后的关系除了共有属性的属性。只有在student.ID=takes.ID并且student.dept_name=takes.dept_name元组才会被合并。</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student NATURAL JOIN takes</span><br><span class="line">得到新关系属性</span><br><span class="line">(ID,dept_name,name,course_id,credits)</span><br></pre></td></tr></table></figure><h1 id="普通连接"><a href="#普通连接" class="headerlink" title="普通连接"></a>普通连接</h1><p>当我们使用自然连接时，我们无法选择两关系连接的条件，例如，在上述两关系中，默认两关系的(ID,dept_name)都相等时才能进行连接，如果我们只需要其中一个条件，即当两关系的ID属性相等时就可以进行连接，自然连接是做不到的，这时候就需要用到普通连接。</p><h2 id="连接条件"><a href="#连接条件" class="headerlink" title="连接条件"></a><font size="5">连接条件</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">student JOIN takes USING(ID)</span><br><span class="line">或</span><br><span class="line">student JOIN takes ON student.ID=takes.ID</span><br><span class="line">该语句表明两关系的ID属性相等的元组(行)可以进行连接</span><br></pre></td></tr></table></figure><p><b>和自然连接不同，以上两种方式所查询到的结果不会去除重复的属性。</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">student JOIN takes ON student.ID=takes.ID</span><br><span class="line">得到新关系属性</span><br><span class="line">(ID,name,dept_name,ID,course_id,credits,dept_name)</span><br></pre></td></tr></table></figure><h2 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a><font size="5">左外连接</font></h2><p>还是对于上面的学生表和选课表，我们假设有一些学生，他们没有选修任何课程。那么student表和takes进行连接时，这些学生是无法被查询到的(因为在takes表中没有这些学生的ID和dept_name)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student LEFT OUTER JOIN takes;</span><br></pre></td></tr></table></figure><p>对于在student但是没有出现在takes的元组(记录)，合并后从student中的得到的属性值不变，从takes中得到的属性值为null</p><h2 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a><font size="5">右外连接</font></h2><p>和左外连接相同，不过不同的是，右外连接保留右边的关系元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student RIGHT OUTER JOIN takes;</span><br></pre></td></tr></table></figure><p>能够保留出现在takes中但是不没有出现在student中的元组。</p><h2 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a><font size="5">全外连接</font></h2><p>相当于将左外连接和右外连接结合起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student FALL OUTER JOIN takes;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前面介绍了ON条件，你可能会发现，ON条件和WHERE条件非常类似，但实际上，对于普通的连接ON都可以用WHERE条件进行替换。但是对于外连接来说，WHERE条件和ON条件的作用就不一样了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//ON条件</span><br><span class="line">SELECT * </span><br><span class="line">    FROM student LEFT OUTER JOIN takes</span><br><span class="line">    ON student.ID=takes.ID;</span><br><span class="line">    </span><br><span class="line">//WHERE条件</span><br><span class="line">SELECT *</span><br><span class="line">    FROM student LEFT OUTER JOIN takes</span><br><span class="line">    ON TRUE</span><br><span class="line">    WHERE student.ID=takes.ID;</span><br></pre></td></tr></table></figure><p>对于上面两条SQL语句，我们得到的查询结果是不同的，我们使用第一个SQL语句时，能够得到在student中出现的但是没有在takes中出现的元组。<br>但是我们使用第二个SQL语句时，它的执行过程是这样的</p><ol><li>由于ON条件是true，所以先将student和takes进行笛卡尔积得到一张新的临时表</li><li>再在新的表中使用WHERE子句进行筛选</li></ol><p>通过上述过程可以发现，这种方式并不能达到左外连接的效果，这是因为外连接只为那些对相应内连接结果没有贡献的元组补上空值并加入结果，ON条件是外连接声明的一部分，但是WHERE子句却不是。</p><h2 id="连接条件-1"><a href="#连接条件-1" class="headerlink" title="连接条件"></a><font size="5">连接条件</font></h2><p>对于以下四种连接类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(INNER) JOIN</span><br><span class="line">LEFT OUTER JOIN</span><br><span class="line">RIGHT OUTER JOIN</span><br><span class="line">FULL OUTER JOIN</span><br></pre></td></tr></table></figure><p>和以下三种连接条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NATURAL</span><br><span class="line">ON 子句</span><br><span class="line">USING(A1,A2....)</span><br></pre></td></tr></table></figure><p><font color="red"><d>任意的连接类型可以和任意的连接条件进行组合</d></font>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NATURAL LEFT OUTER JOIN</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务中对完整性约束的违反</title>
      <link href="/2019/12/07/MySQL%E4%BA%8B%E5%8A%A1%E4%B8%AD%E5%AF%B9%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%BF%9D%E5%8F%8D/"/>
      <url>/2019/12/07/MySQL%E4%BA%8B%E5%8A%A1%E4%B8%AD%E5%AF%B9%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%E7%9A%84%E8%BF%9D%E5%8F%8D/</url>
      
        <content type="html"><![CDATA[<p>我们知道，对于一个外码，它所有的取值都能够在其对应的主码中找到，下面将介绍一种特殊的参照关系，在执行过程中会违反这种参照完整性关系，但是执行过后却又满足这种关系，让我们来看一看MySQL数据库是如何处理这种情况。在学习这篇文章之前，你需要对约束、事务、主码、外码有一定的了解。</p><hr><a id="more"></a><h1 id="情景介绍"><a href="#情景介绍" class="headerlink" title="情景介绍"></a>情景介绍</h1><p>现有一张表person(name,spouse)，该表描述了两个人的配偶关系，其中name属性为person的主码，spouse属性为person表中name的外码，即该表的参照关系是自身。下面是该表的创建语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person(</span><br><span class="line">NAME VARCHAR(32) PRIMARY KEY,</span><br><span class="line">spouse VARCHAR(32),</span><br><span class="line">FOREIGN KEY(spouse) REFERENCES person(NAME)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在一对配偶数据需要插入，分别是(‘Jack’,’Marry’)和(‘Marry’,’Jack’)，Jack和Marry互为配偶。那么问题来了，<font color="red"><b>我们无论先插入那一条数据，都会违反表的完整性约束。</b></font>例如，当你先插入(‘Jack’,’Marry’)时，表中并没有name属性值为’Marry’的元组，这就违反了参照完整性约束。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在《数据库系统概论》(第六版)第75页中介绍了延迟约束检查，但我在MySQL上实验时并没有成功，可能是MySQL不支持，也可能是我没有找到正确的方法。下面就针对不同的情况提供不同的方法来解决</p><h2 id="外码可空"><a href="#外码可空" class="headerlink" title="外码可空"></a><font size="5">外码可空</font></h2><p>当外码没有NOT NULL约束(非空约束)时，我们可以这么解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO person</span><br><span class="line">VALUES (&apos;Jack&apos;,NULL),</span><br><span class="line">       (&apos;Marry&apos;,&apos;Jack&apos;);</span><br><span class="line">UPDATE person</span><br><span class="line">SET spouse=&apos;Marry&apos;</span><br><span class="line">WHERE NAME=&apos;Jack&apos;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ol><li>创建一个事务，先将其中一条记录的spouse属性置为NULL，另一条记录正常插入</li><li>再对NULL属性值进行修改</li><li>提交事务</li></ol><p>以上思路比较简单，但是要注意一点，<font color="red">这些操作最好是放在一个事务当中执行以保证其原子性。</font></p><h2 id="外码非空"><a href="#外码非空" class="headerlink" title="外码非空"></a><font size="5">外码非空</font></h2><p>如果创建表时，对外码spouse进行了非空约束，那么以上方法就不能够使用了，这时候可以使用另外一种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">INSERT INTO person</span><br><span class="line">VALUES (&apos;Jack&apos;,&apos;Jack&apos;),</span><br><span class="line">       (&apos;Marry&apos;,&apos;Marry&apos;);</span><br><span class="line">UPDATE person</span><br><span class="line">SET spouse=&apos;Jack&apos;</span><br><span class="line">WHERE NAME=&apos;Marry&apos;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ol><li>创建事务，将两条记录的spouse属性值都设置为自身的name属性值</li><li>然后再分别对两条记录的spouse属性值进行修改</li><li>提交事务</li></ol><p>同样的，这些操作要放到一个事务中执行以保障原子性，可以看到，这样操作还是比较麻烦的。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>如果你知道MySQL的延迟约束检查执行语句或者有更好的方法，欢迎私信进行讨论。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分发饼干</title>
      <link href="/2019/12/01/%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/"/>
      <url>/2019/12/01/%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百五十五题</b><br>难度：<font color="green">简单</font><br>题目：假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i ，都有一个胃口值 gi ，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j ，都有一个尺寸 sj 。如果 sj &gt;= gi ，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><hr><a id="more"></a>注意：你可以假设胃口值为正。一个小朋友最多只能拥有一块饼干。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [1,2,3], [1,1]</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span><br><span class="line">所以你应该输出1。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>使用贪心算法，用小饼干满足小胃口，大饼干留着满足大胃口</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public int findContentChildren(int[] g, int[] s) &#123;</span><br><span class="line">    Arrays.sort(g);</span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int j=0;res&lt;g.length&amp;&amp;j&lt;s.length;)&#123;</span><br><span class="line">        if(g[res]&lt;=s[j++])&#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小移动次数使数组元素相等</title>
      <link href="/2019/12/01/%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/"/>
      <url>/2019/12/01/%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百五十三题</b><br>难度：<font color="green">简单</font><br>题目：给定一个长度为n的非空整数数组，找到让数组所有元素相等的最小移动次数。每次移动可以使n-1个元素增加1。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入:</span><br><span class="line">[1,2,3]</span><br><span class="line">输出:</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">只需要3次移动（注意每次移动会增加两个元素的值）：</span><br><span class="line">[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><ol><li><b>数学法</b><br>每移动一次，就使n-1个元素增加1，那么反过来看，每移动一次，就使1个元素+1；直到所有的元素都等于最大值为止</li><li><b>动态规划</b><br>首先对数组进行排序，得到一个有序数组a。我们假设前i-1个元素都已经相等，那么我们只需要考虑i位的元素，将差值diff=a[i]-a[i-1]加到总移动次数上，使得第i位也相等(<font color="red">即第i位不变，其他n-1个元素+diff，这样就能使得第i个元素等于前i-1个元素</font>)。moves=moves+diff。但当我们想要继续这一步时，a[i]之后的元素也会被增加diff，亦即a[j]=a[j]+diff，其中 j&gt;i。但当实现本方法时，我们不需要对这样的a[j]进行增加。相反，我们把moves的数量增加到当前元素(a[i])中，a[i]=a[i]+moves。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">diff=moves+a[i]-a[i-1] </span><br><span class="line">a[i]+=moves     --&gt;得到本次移动后，前i个元素的值(前i个元素相等)</span><br><span class="line">moves+=diff     --&gt;目前为止移动的总次数</span><br></pre></td></tr></table></figure></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//数学法</span><br><span class="line">public int minMoves(int[] nums) &#123;</span><br><span class="line">    int min=Integer.MAX_VALUE;</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">        res+=nums[i];</span><br><span class="line">        if(nums[i]&lt;min)&#123;</span><br><span class="line">            min=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res-min*nums.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//动态规划</span><br><span class="line">public int minMoves(int[] nums) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    int moves = 0;</span><br><span class="line">    for (int i = 1; i &lt; nums.length; i++) &#123;</span><br><span class="line">        int diff = (moves + nums[i]) - nums[i - 1];</span><br><span class="line">        nums[i] += moves;</span><br><span class="line">        moves += diff;</span><br><span class="line">    &#125;</span><br><span class="line">    return moves;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数学法需要反向思考，动态规划比较巧妙。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个线程交替打印奇偶数</title>
      <link href="/2019/11/24/%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E5%A5%87%E5%81%B6%E6%95%B0/"/>
      <url>/2019/11/24/%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E5%A5%87%E5%81%B6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>今天看到一个很有意思的面试题：两个线程交替打印奇偶数字，在这里使用synchronized内置锁实现一下。</p><hr><a id="more"></a><h1 id="资源类"><a href="#资源类" class="headerlink" title="资源类"></a>资源类</h1><p>有两个属性，一个是要打印的数字，还有一个布尔类型的flag来控制两个线程谁来打印该数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Num &#123;</span><br><span class="line">    private int num;</span><br><span class="line">    private boolean flag;</span><br><span class="line"></span><br><span class="line">    public Num(int num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getNum() &#123;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setNum(int num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean isFlag() &#123;</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFlag(boolean flag) &#123;</span><br><span class="line">        this.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="奇数线程"><a href="#奇数线程" class="headerlink" title="奇数线程"></a>奇数线程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadA implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private Num num;</span><br><span class="line"></span><br><span class="line">    public ThreadA(Num num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (num.getNum() &lt;= 100) &#123;</span><br><span class="line">            synchronized (num) &#123;</span><br><span class="line">                //当flag=true时，说明应该打印偶数，此时奇数线程阻塞</span><br><span class="line">                if (num.isFlag()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        num.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                //当flag=false时，打印奇数</span><br><span class="line">                else &#123;</span><br><span class="line">                    int currentNum = num.getNum();</span><br><span class="line">                    System.out.println(&quot;ThreadA:--&quot; + currentNum);</span><br><span class="line">                    //要记得将flag设置为true并唤醒偶数线程</span><br><span class="line">                    num.setFlag(true);</span><br><span class="line">                    num.setNum(currentNum + 1);</span><br><span class="line">                    num.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="偶数线程"><a href="#偶数线程" class="headerlink" title="偶数线程"></a>偶数线程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadB implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    private Num num;</span><br><span class="line"></span><br><span class="line">    public ThreadB(Num num) &#123;</span><br><span class="line">        this.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (num.getNum() &lt;= 100) &#123;</span><br><span class="line">            synchronized (num) &#123;</span><br><span class="line">                if (!num.isFlag()) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        num.wait();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    int currentNum = num.getNum();</span><br><span class="line">                    System.out.println(&quot;ThreadB:--&quot; + currentNum);</span><br><span class="line">                    num.setFlag(false);</span><br><span class="line">                    num.setNum(currentNum + 1);</span><br><span class="line">                    num.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>偶数线程和奇数线程逻辑类似</p><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class OddAndEvenPrint &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Num num = new Num(1);</span><br><span class="line">        //两个线程一定要传递同一个num对象</span><br><span class="line">        new Thread(new ThreadA(num)).start();</span><br><span class="line">        new Thread(new ThreadB(num)).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题实现起来难度不大，只要对多线程有一定的了解应该很容易写出来</p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fatal:Could not read from remote repository</title>
      <link href="/2019/11/21/fatal-Could-not-read-from-remote-repository/"/>
      <url>/2019/11/21/fatal-Could-not-read-from-remote-repository/</url>
      
        <content type="html"><![CDATA[<p>今天上传博客时，可能是由于没有使用hexo clean命令，直接使用了hexo g -d，导致上传失败。记录一下解决方法，方便下次使用。</p><hr><a id="more"></a><p>先来看一下出现的问题截图<br><img src="/2019/11/21/fatal-Could-not-read-from-remote-repository/1.png" alt><br>问题翻译过来就是：无法读取远程存储库。这时候，我们需要重新设置一下SSH了</p><ol><li>删除.ssh文件夹里的所有文件。<br><img src="/2019/11/21/fatal-Could-not-read-from-remote-repository/2.png" alt></li><li>重新生成SSH，在窗口输入<font color="red"><b>ssh-keygen -t rsa -C 你的邮箱名</b></font><br><img src="/2019/11/21/fatal-Could-not-read-from-remote-repository/3.png" alt>这时候重新打开.ssh文件夹，会发现里面多出了id_rsa和id_rsa.pub两个文件</li><li>打开GitHub，进入设置页面，点击SSH and GPG keys选项<br><img src="/2019/11/21/fatal-Could-not-read-from-remote-repository/4.png" alt></li><li>点击NEW SSH key按钮，将id_rsa.pub里的内容拷贝进去即可<br><img src="/2019/11/21/fatal-Could-not-read-from-remote-repository/5.png" alt></li></ol><p>之所以出现这种问题，个人猜测可能是由于我在上传之前没有使用hexo clean命令。导致上传失败。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 解决问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客如何绑定域名</title>
      <link href="/2019/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
      <url>/2019/11/21/Hexo%E5%8D%9A%E5%AE%A2%E5%A6%82%E4%BD%95%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>我们使用Hexo+github搭建的个人博客，每次访问时要使用<b>仓库名.github.io</b>也就是github的二级域名来访问，今天突然想自己申请一个域名，然后使用自己申请的域名来访问个人博客，感觉会更个人一些？这里对于域名是什么等一下基础知识不做赘述，如果还不了解的小伙伴可以去学习以下，当然，即使不了解跟着我的步骤来也是能够成功的。话不多说，我们来演示一下</p><hr><a id="more"></a><h1 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h1><p>我申请的是阿里的域名，所以下面就介绍一下申请阿里域名的步骤。<br><img src="/2019/11/21/Hexo博客如何绑定域名/1.png" alt>域名我已经申请好了，登陆阿里云官网申请即可。点击图中解析选项<br><img src="/2019/11/21/Hexo博客如何绑定域名/2.png" alt>将你个人博客的ip地址和登陆博客时使用的二级域名填写进去，下面讲一下如何获取个人博客的ip地址</p><h1 id="获取IP地址"><a href="#获取IP地址" class="headerlink" title="获取IP地址"></a>获取IP地址</h1><p>打开windows的命令行窗口(win+R,然后输入cmd即可)，使用ping命令<br><img src="/2019/11/21/Hexo博客如何绑定域名/3.png" alt></p><h1 id="修改Hexo和GitHub"><a href="#修改Hexo和GitHub" class="headerlink" title="修改Hexo和GitHub"></a>修改Hexo和GitHub</h1><h2 id="Hexo操作"><a href="#Hexo操作" class="headerlink" title="Hexo操作"></a>Hexo操作</h2><p>上面我们已经把域名有关操作做完了，接下来就是在Hexo和GitHub上操作了<br><img src="/2019/11/21/Hexo博客如何绑定域名/4.png" alt><br><img src="/2019/11/21/Hexo博客如何绑定域名/5.png" alt>打开个人博客的source文件夹，在里面创建一个CNAME的txt文件，并在文件中输入你申请的域名(注意不是github的二级域名了)，保存后再将文件的txt后缀删掉。</p><h2 id="GitHub操作"><a href="#GitHub操作" class="headerlink" title="GitHub操作"></a>GitHub操作</h2><ol><li>登录自己的GitHub，点击头像进入设置页面<br><img src="/2019/11/21/Hexo博客如何绑定域名/6.png" alt></li><li>进入设置页面后点击Repositories<br><img src="/2019/11/21/Hexo博客如何绑定域名/7.png" alt></li><li>进入Hexo个人博客托管的仓库<br><img src="/2019/11/21/Hexo博客如何绑定域名/8.png" alt></li><li>进入仓库后再次点击设置<br><img src="/2019/11/21/Hexo博客如何绑定域名/9.png" alt></li><li>进入设置页面后下拉到底如图所示，输入你申请的域名即可<br><img src="/2019/11/21/Hexo博客如何绑定域名/10.png" alt></li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这样你的个人博客就成功地绑定了一个域名，就可以使用自己申请的域名来访问个人博客啦。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中消失的数字</title>
      <link href="/2019/11/18/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019/11/18/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%B6%88%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百四十八题</b><br>难度：<font color="green">简单</font><br>题目：给定一个范围在1≤a[i]≤n(n=数组大小)的整型数组，数组中的元素一些出现了两次，另一些只出现一次。找到所有在[1,n]范围之间没有出现在数组中的数字。(不使用额外空间并且O(n)复杂度，返回的数组不算)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line">输出:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>这道题，我们可以在遍历数组的过程中一边遍历一边将数组元素放到正确的位置(即1放在a[0]中)。第二次遍历时如果数组中元素和下标不对应的即为缺失元素。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; findDisappearedNumbers(int[] nums) &#123;</span><br><span class="line">    List&lt;Integer&gt; list = new ArrayList();</span><br><span class="line">    for(int i = 0;i &lt; nums.length;i++)&#123;</span><br><span class="line">        //nums[i] != nums[nums[i] - 1]，说明没有放到正确位置上</span><br><span class="line">        //当nums[i] == nums[nums[i] - 1]时有两种情况</span><br><span class="line">            //1. 元素放置到了正确的位置上</span><br><span class="line">            //2. 元素发生重复，并且其中一个放置到了正确的位置</span><br><span class="line">        //要用while循环而不能用if，因为交换后的元素可能仍没有在正确位置上</span><br><span class="line">        while(nums[i]!=nums[nums[i]-1])&#123;</span><br><span class="line">            swap(nums,i,nums[i]-1);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    for(int i = 0; i &lt; nums.length;i++)&#123;</span><br><span class="line">        if(i + 1 != nums[i])&#123;</span><br><span class="line">            list.add(i + 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return list;</span><br><span class="line">    &#125;</span><br><span class="line">//不使用额外变量交换元素</span><br><span class="line">private void swap(int[] nums,int index1,int index2)&#123;</span><br><span class="line">    nums[index1]=nums[index1]+nums[index2];</span><br><span class="line">    nums[index2]=nums[index1]-nums[index2];</span><br><span class="line">    nums[index1]=nums[index1]-nums[index2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码注释比较明了，如果不明白最好debug以下就好，主要在于在遍历数组将元素放在正确位置时要使用while循环而不是if循环</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩字符串</title>
      <link href="/2019/11/17/%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/11/17/%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百四十三题</b><br>难度：<font color="green">简单</font><br>题目：给定一组字符，使用原地算法将其压缩。压缩后的长度必须始终小于或等于原数组长度。数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。在完成原地修改输入数组后，返回数组的新长度。(你能否仅使用O(1) 空间解决问题)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：</span><br><span class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line">输出：</span><br><span class="line">返回6，输入数组的前6个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line">说明：</span><br><span class="line">&quot;aa&quot;被&quot;a2&quot;替代。&quot;bb&quot;被&quot;b2&quot;替代。&quot;ccc&quot;被&quot;c3&quot;替代。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：</span><br><span class="line">[&quot;a&quot;]</span><br><span class="line">输出：</span><br><span class="line">返回1，输入数组的前1个字符应该是：[&quot;a&quot;]</span><br><span class="line">说明：</span><br><span class="line">没有任何字符串被替代。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：</span><br><span class="line">[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</span><br><span class="line">输出：</span><br><span class="line">返回4，输入数组的前4个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">由于字符&quot;a&quot;不重复，所以不会被压缩。&quot;bbbbbbbbbbbb&quot;被“b12”替代。</span><br><span class="line">注意每个数字在数组中都有它自己的位置。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>设置三个变量left、right、size，初始化都为0</p><ol><li>right向后遍历，直到和left指向的字符不相等为止</li><li>更新size，并且将当前字符的数量right-left以字符串形式添加进去</li><li>重复1、2，直到数组遍历完毕</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public int compress(char[] chars) &#123;</span><br><span class="line">    //双指针法</span><br><span class="line">    int left = 0;</span><br><span class="line">    int size = 0;</span><br><span class="line">    for (int right = 0; right &lt;= chars.length; right++) &#123;</span><br><span class="line">        //当right遍历完数组或者遍历到不相等字符时</span><br><span class="line">        if (right == chars.length || chars[right] != chars[left]) &#123;</span><br><span class="line">            // 更新字符</span><br><span class="line">            chars[size++] = chars[left];</span><br><span class="line">            // 更新计数，当个数大于 1 时才更新   </span><br><span class="line">            if (right - left &gt; 1) &#123;         </span><br><span class="line">                for(char c : (&quot;&quot;+(right-left)).toCharArray()) &#123;</span><br><span class="line">                    chars[size++] = c;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //更新左边指针</span><br><span class="line">            left = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串相加</title>
      <link href="/2019/11/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/"/>
      <url>/2019/11/17/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百一十五题</b><br>难度：<font color="green">简单</font><br>题目：给定两个字符串形式的非负整数num1和num2，计算它们的和。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">num1 和num2 的长度都小于 5100.</span><br><span class="line">num1 和num2 都只包含数字 0-9.</span><br><span class="line">num1 和num2 都不包含任何前导零。</span><br><span class="line">你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>和链表相加类似，倒着遍历两字符串，短的字符串补0，话不多说，直接上代码。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public String addStrings(String num1, String num2) &#123;</span><br><span class="line">    //判断特殊情况</span><br><span class="line">    if(num1==&quot;&quot;||num1==null)&#123;</span><br><span class="line">        return num2;</span><br><span class="line">    &#125;</span><br><span class="line">    if(num2==&quot;&quot;||num2==null)&#123;</span><br><span class="line">        return num1;</span><br><span class="line">    &#125;</span><br><span class="line">    int carry=0;</span><br><span class="line">    int len1=num1.length();</span><br><span class="line">    int len2=num2.length();</span><br><span class="line">    StringBuilder sb=new StringBuilder();</span><br><span class="line">    //倒着遍历字符串</span><br><span class="line">    for(int i=len1-1,j=len2-1;i&gt;=0||j&gt;=0;i--,j--)&#123;</span><br><span class="line">        int x=i&gt;=0?num1.charAt(i)-48:0;</span><br><span class="line">        int y=j&gt;=0?num2.charAt(j)-48:0;</span><br><span class="line">        int sum=x+y+carry;</span><br><span class="line">        carry=sum/10;</span><br><span class="line">        sb.append(sum%10);</span><br><span class="line">    &#125;</span><br><span class="line">    if(carry==1)&#123;</span><br><span class="line">        sb.append(1);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三大的数</title>
      <link href="/2019/11/17/%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0/"/>
      <url>/2019/11/17/%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百一十四题</b><br>难度：<font color="green">简单</font><br>题目：给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [3, 2, 1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 第三大的数是 1.</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [1, 2]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 第三大的数不存在, 所以返回最大的数 2 .</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: [2, 2, 3, 1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。</span><br><span class="line">存在两个值为2的数，它们都排第二。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题的主要思路在于最开始维护三个变量，分别存放前三大的数，在遍历数组时如果有数字满足条件，就更新这三个数。难点在于如何在初始化得到三个前三大的数。下面采用了一种巧妙地方法，直接上代码</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static int thirdMax(int[] nums) &#123;</span><br><span class="line">    //用long保证max的初始值最小</span><br><span class="line">    long max = Long.MIN_VALUE;</span><br><span class="line">    long mid = Long.MIN_VALUE;</span><br><span class="line">    long min = Long.MIN_VALUE;</span><br><span class="line">    for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">        if (nums[i] &gt; max) &#123;</span><br><span class="line">            min = mid;</span><br><span class="line">            mid = max;</span><br><span class="line">            max = nums[i];</span><br><span class="line">        &#125; else if (nums[i] &gt; mid &amp;&amp; nums[i] &lt; max) &#123;</span><br><span class="line">            min = mid;</span><br><span class="line">            mid = nums[i];</span><br><span class="line">        &#125; else if ((nums[i] &gt; min &amp;&amp; nums[i] &lt; mid)) &#123;</span><br><span class="line">            min = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return min==Long.MIN_VALUE?(int)max:(int)min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题巧妙之处在于初始化三个变量，需要好好揣摩。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文串</title>
      <link href="/2019/11/17/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>/2019/11/17/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百零九题</b><br>难度：<font color="green">简单</font><br>题目：给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">&quot;abccccdd&quot;</span><br><span class="line">输出:</span><br><span class="line">7</span><br><span class="line">解释:</span><br><span class="line">我们可以构造的最长的回文串是&quot;dccaccd&quot;, 它的长度是 7</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>我们分析，如果要一个字母要成为回文串的一部分，那么这个字母至少出现两次。并且如果回文串的长度小于字符串长度，那么回文串长度还要加1，因为位于回文串中间的字符可以只出现一次。由于说明存在大小写字母，因此要使用两个大小为26的数组进行统计。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public int longestPalindrome(String s) &#123;</span><br><span class="line">    //判断特殊情况</span><br><span class="line">    if(s==&quot;&quot;||s==null)&#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int len;</span><br><span class="line">    if((len=s.length())==1)&#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //分别用于统计大写字母和小写字母的个数</span><br><span class="line">    int[] little=new int[26];</span><br><span class="line">    int[] big=new int[26];</span><br><span class="line">    //遍历字符串</span><br><span class="line">    for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">        int index;</span><br><span class="line">        if((index=s.charAt(i))&gt;&apos;Z&apos;)&#123;</span><br><span class="line">            big[index-&apos;a&apos;]++;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            little[index-&apos;A&apos;]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //统计回文长度</span><br><span class="line">    int res=0;</span><br><span class="line">    for(int i=0;i&lt;26;i++)&#123;</span><br><span class="line">        if(little[i]%2==0)&#123;</span><br><span class="line">            res+=little[i];</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            res+=little[i]-1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(big[i]%2==0)&#123;</span><br><span class="line">            res+=big[i];</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            res+=big[i]-1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return res&lt;len?res+1:res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字转十六进制数</title>
      <link href="/2019/11/16/%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/"/>
      <url>/2019/11/16/%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百零五题</b><br>难度：<font color="green">简单</font><br>题目：给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用补码运算方法。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入:</span><br><span class="line">26</span><br><span class="line">输出:</span><br><span class="line">&quot;1a&quot;</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入:</span><br><span class="line">-1</span><br><span class="line">输出:</span><br><span class="line">&quot;ffffffff&quot;</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>十六进制数由16个字符组成:0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f。因此可以使用一个数组来存储这些字符。将数字每四位和15做与运算，映射到数组的相应位置</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public String toHex(int num) &#123;</span><br><span class="line">    if(num==0)&#123;</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    char[] count=&quot;0123456789abcdef&quot;.toCharArray();</span><br><span class="line">    int mark=15;</span><br><span class="line">    String s=&quot;&quot;;</span><br><span class="line">    while(num!=0)&#123;</span><br><span class="line">        s=count[num&amp;mark]+s;</span><br><span class="line">        //每四位二进制转换成一位16进制数</span><br><span class="line">        num&gt;&gt;&gt;=4;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左叶子之和</title>
      <link href="/2019/11/16/%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C/"/>
      <url>/2019/11/16/%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第四百零四题</b><br>难度：<font color="green">简单</font><br>题目：计算给定二叉树的所有左叶子之和。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>对于二叉树，大部分都可以使用递归，这个题当然也可以。我们来分析一下</p><ol><li>如果当前节点为空，返回0(递归出口)</li><li>如果当前节点的左子树为空，那么当前节点的左叶子和就是当前节点右子树的左叶子之和</li><li>如果当前节点的左子树为叶子，那么当前节点的左叶子和就是当前节点的左叶子+当前节点的右子树的左叶子和</li><li>如果当前节点左右子树都存在，那么当前节点的左叶子和就是当前节点的左子树左叶子和+当前节点的右子树的左叶子和</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public int sumOfLeftLeaves(TreeNode root) &#123;</span><br><span class="line">    if (root == null) </span><br><span class="line">        return 0;</span><br><span class="line">    //如果左子树为空，那么只需返回右子树的左叶子和</span><br><span class="line">    if (root.left == null) </span><br><span class="line">        return  sumOfLeftLeaves(root.right); </span><br><span class="line">        </span><br><span class="line">    // 如果左子树为叶子节点，那么需返回右子树的左叶子和 + 左孩子的值</span><br><span class="line">    if (root.left.left == null &amp;&amp; root.left.right == null) </span><br><span class="line">        return sumOfLeftLeaves(root.right) + root.left.val;</span><br><span class="line">        </span><br><span class="line">    // 其他情况需返回左右子树的左叶子和之和</span><br><span class="line">    return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归的代码简单明了，关键在于如何捋清思路。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断子序列</title>
      <link href="/2019/11/16/%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2019/11/16/%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百九十二题</b><br>难度：<font color="green">简单</font><br>题目：给定字符串s和t，判断s是否为t的子序列。你可以认为s和t中仅包含英文小写字母。字符串t可能会很长（长度 ~= 500,000），而s是个短字符串（长度 &lt;=100）。字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">s = &quot;abc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">返回 true.</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">s = &quot;axc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">返回 false.</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题需要结合String类的indexOf()方法来做</p><ol><li>同时遍历两字符串，如果都没有遍历完并且s串当前字符位于t串中(并且在上一个字符的后面)</li><li>遍历下一个字符串，记录当前字符在t串中出现的位置(用于下次循环使用)</li><li>循环结束后，判断s串是否遍历完毕，如果遍历完毕，说明s是t的子序列，返回true；否则返回false</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public boolean isSubsequence(String s, String t) &#123;</span><br><span class="line">    int index = 0,i = 0;</span><br><span class="line">    //从s的上一个字符在t中的位置+1开始往后搜索</span><br><span class="line">    while(index &lt; s.length() &amp;&amp; t.indexOf(s.charAt(index),i) &gt;= i)&#123;</span><br><span class="line">        i = t.indexOf(s.charAt(index),i) + 1;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;    </span><br><span class="line">    return index == s.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找不同</title>
      <link href="/2019/11/16/%E6%89%BE%E4%B8%8D%E5%90%8C/"/>
      <url>/2019/11/16/%E6%89%BE%E4%B8%8D%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百八十九题</b><br>难度：<font color="green">简单</font><br>题目：给定两个字符串 s 和 t，它们只包含小写字母。字符串t由字符串s随机重排，然后在随机位置添加一个字母。请找出在 t 中被添加的字母。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">s = &quot;abcd&quot;</span><br><span class="line">t = &quot;abcde&quot;</span><br><span class="line">输出：</span><br><span class="line">e</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">&apos;e&apos; 是那个被添加的字母。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>又是一道字符串问题，并且题目说了，只包含小写字母；这时，我们第一时间应该想到可以使用大小为26的数组干点儿什么。想到这里就很简单了，不多说直接上代码</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public char findTheDifference(String s, String t) &#123;</span><br><span class="line">    //边界条件</span><br><span class="line">    if(s==&quot;&quot;||s==null)</span><br><span class="line">        return t.charAt(0);</span><br><span class="line">    int[] res=new int[26];</span><br><span class="line">    int lenS=s.length();</span><br><span class="line">    int lenT=t.length();</span><br><span class="line">    //遇到t中字符，相应位置+1</span><br><span class="line">    for(int i=0;i&lt;lenT;i++)</span><br><span class="line">        res[t.charAt(i)-&apos;a&apos;]++;</span><br><span class="line">    //遇到s中字符，相应位置-1</span><br><span class="line">    for(int i=0;i&lt;lenS;i++)</span><br><span class="line">        res[s.charAt(i)-&apos;a&apos;]--;</span><br><span class="line">    //数组中值为1的下标即为不同的字符</span><br><span class="line">    for(int i=0;i&lt;26;i++)</span><br><span class="line">        if(res[i]==1)</span><br><span class="line">            return (char)(i+&apos;a&apos;);</span><br><span class="line">    throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串中唯一字符</title>
      <link href="/2019/11/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
      <url>/2019/11/16/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百八十七题</b><br>难度：<font color="green">简单</font><br>题目：给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。(假设只包含小写字符)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">返回 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">返回 2.</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题，我想出了两种方法解决，一种直接使用哈希表，一种较为巧妙，组要结合String类提供的方法解决</p><ol><li>哈希表，遍历字符串，以字符为键，字符出现的次数为值，存入到哈希表中。最后再遍历字符串，找到字符串中第一个值为1的字符。</li><li>由于题目说明只包含小写字符，那么遍历[a-z]26个小写字母，记录每个字符再字符串中第一次出现的位置(indexOf())first<ol><li>如果first==-1，说明字符串中不包含该字符，直接进行下一次循环</li><li>再找到该字符再字符串中最后一次出现的位置(lastIndexOf())last，如果first==last(说明该字符只出现一次)。</li></ol></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//哈希表实现比较简单，这里说下第二种思路</span><br><span class="line">public int firstUniqChar(String s) &#123;</span><br><span class="line">    //判断特殊情况</span><br><span class="line">    if (s == null || s.length() == 0) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    int min = s.length();</span><br><span class="line">    //遍历26个小写字符</span><br><span class="line">    for (int i = &apos;a&apos;; i &lt;= &apos;z&apos;; i++) &#123;</span><br><span class="line">        int first = s.indexOf(i);</span><br><span class="line">        //如果当前字符不在字符串中，直接判断下一个字符</span><br><span class="line">        if (first == -1) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果当前字符在字符串中只出现了一次并且出现的位置最靠前</span><br><span class="line">        //更新min</span><br><span class="line">        if (first == s.lastIndexOf(i) &amp;&amp; min &gt; first) &#123;</span><br><span class="line">            min = first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return min == s.length() ? -1 : min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在字符串问题中，会经常使用到大小为26的数组来模拟哈希表结构。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赎金信</title>
      <link href="/2019/11/16/%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
      <url>/2019/11/16/%E8%B5%8E%E9%87%91%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百八十三题</b><br>难度：<font color="green">简单</font><br>题目：给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串ransom能不能由第二个字符串magazines里面的字符构成。如果可以构成，返回 true ；否则返回 false。(两个字符串均只含有小写字母)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">canConstruct(&quot;a&quot;, &quot;b&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;ab&quot;) -&gt; false</span><br><span class="line">canConstruct(&quot;aa&quot;, &quot;aab&quot;) -&gt; true</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>题目意思很简单，就是判断一个字符串中是否能由另一个字符串中的字符组成。可以使用哈希结构解决，由于题目说明了只包含小写字母，因此可以使用一个大小为26的数据来代替哈希表</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public boolean canConstruct(String ransomNote, String magazine) &#123;</span><br><span class="line">    //如果没有说明只包含小写字母</span><br><span class="line">    //特殊边界情况</span><br><span class="line">    // if(ransomNote==&quot;&quot;||ransomNote==null)</span><br><span class="line">    //     return true;</span><br><span class="line">    // if(magazine==null||magazine==&quot;&quot;)</span><br><span class="line">    //     return false;</span><br><span class="line">    // if(ransomNote.length()&gt;magazine.length())</span><br><span class="line">    //     return false;</span><br><span class="line">    // Map&lt;Character,Integer&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">    // //将字符串转化为数组</span><br><span class="line">    // char[] m=magazine.toCharArray();</span><br><span class="line">    // char[] r=ransomNote.toCharArray();</span><br><span class="line">    // for(int i=0;i&lt;m.length;i++)&#123;</span><br><span class="line">    //     if(map.containsKey(m[i]))</span><br><span class="line">    //         map.put(m[i],map.get(m[i])+1);</span><br><span class="line">    //     else</span><br><span class="line">    //         map.put(m[i],1);</span><br><span class="line">    // &#125;</span><br><span class="line">    // for(int i=0;i&lt;r.length;i++)&#123;</span><br><span class="line">    //     if(map.containsKey(r[i]))&#123;</span><br><span class="line">    //         int count=map.get(r[i]);</span><br><span class="line">    //         map.put(r[i],--count);</span><br><span class="line">    //         if(count&lt;0)</span><br><span class="line">    //             return false;</span><br><span class="line">    //     &#125;</span><br><span class="line">    //     else</span><br><span class="line">    //         return false;</span><br><span class="line">    // &#125;</span><br><span class="line">    // return true;</span><br><span class="line">    //指明了只包含小写字母，因此可以使用数组代替哈希表</span><br><span class="line">    int[] num=new int[26];</span><br><span class="line">    char[] m=magazine.toCharArray();</span><br><span class="line">    char[] r=ransomNote.toCharArray();</span><br><span class="line">    //遇到杂志上的字符，哈希表相应位置+1</span><br><span class="line">    for(int i=0;i&lt;m.length;i++)</span><br><span class="line">        num[m[i]-&apos;a&apos;]++;</span><br><span class="line">    //遇到赎金信上的字符，响应位置-1</span><br><span class="line">    //如果&lt;0说明不能组成赎金信，返回false</span><br><span class="line">    for(int i=0;i&lt;r.length;i++)</span><br><span class="line">        if(--num[r[i]-&apos;a&apos;]&lt;0)</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之生产者-消费者模式</title>
      <link href="/2019/11/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/11/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>既然前面介绍了阻塞队列，现在就用阻塞队列ArrayBlockingQueue实现一个生产者消费者模式。在本文中，除了使用Java自带的同步容器，还将使用ReentrantLock+Condition的方式实现一个生产者-消费者模式。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>生产者-消费者模式，生产者消费者模式就是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。这个阻塞队列就是用来给生产者和消费者解耦的。在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这种生产消费能力不均衡的问题，所以便有了生产者和消费者模式</p><h1 id="ArrayBlockingQueue实现"><a href="#ArrayBlockingQueue实现" class="headerlink" title="ArrayBlockingQueue实现"></a>ArrayBlockingQueue实现</h1><p>我们先来个简单地方式，使用阻塞队列来实现。后面你会发现，使用该方法其实也就是免去了自己创建仓库类的步骤。</p><h2 id="商品类"><a href="#商品类" class="headerlink" title="商品类"></a><font size="5">商品类</font></h2><p>既然是生产者-消费者模型，那肯定要有一个商品类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class som &#123;</span><br><span class="line">    private final int count;</span><br><span class="line"></span><br><span class="line">    public som(int count) &#123;</span><br><span class="line">        this.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;商品ID: &quot; + count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>商品类很简单，只有一个用于标识商品的count和便于打印商品的toString()方法</p><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a><font size="5">生产者</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Producer implements Runnable &#123;</span><br><span class="line">    //缓冲区</span><br><span class="line">    private ArrayBlockingQueue&lt;som&gt; queue;</span><br><span class="line">    //该线程生产的商品数</span><br><span class="line">    AtomicInteger count = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    public Producer(ArrayBlockingQueue&lt;som&gt; queue) &#123;</span><br><span class="line">        this.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //生产者一直生产商品</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                som s = new som(count.incrementAndGet());</span><br><span class="line">                //将商品添加到缓冲区，使用put方法</span><br><span class="line">                //如果缓冲区满则阻塞</span><br><span class="line">                queue.put(s);</span><br><span class="line">                System.out.println(&quot;|生产线程&quot; + Thread.currentThread().getId() + &quot; 生产 &quot; + s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a><font size="5">消费者</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Consumer implements Runnable &#123;</span><br><span class="line">    //缓冲区</span><br><span class="line">    private ArrayBlockingQueue&lt;som&gt; queue;</span><br><span class="line"></span><br><span class="line">    public Consumer(ArrayBlockingQueue&lt;som&gt; queue) &#123;</span><br><span class="line">        this.queue = queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                //使得消费者消费速度比生产速度慢</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">                //take()方法，如果队列为空则阻塞</span><br><span class="line">                System.out.println(&quot;|消费线程&quot; + Thread.currentThread().getId() + &quot; 消费 &quot; + queue.take());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><font size="5">测试</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class ProducerAndConsumer &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        ArrayBlockingQueue&lt;som&gt; queue = new ArrayBlockingQueue&lt;&gt;(10,true);</span><br><span class="line"></span><br><span class="line">        //启动三个生产者线程</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            exec.execute(new Producer(queue));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //启动10个消费者线程</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            exec.execute(new Consumer(queue));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是使用阻塞队列ArrayBlockingQueue实现生产者-消费者模式。</p><h1 id="ReentrantLock-Concition实现"><a href="#ReentrantLock-Concition实现" class="headerlink" title="ReentrantLock+Concition实现"></a>ReentrantLock+Concition实现</h1><p>接下来我们使用ReentrantLock+Condition创建缓冲区代替阻塞队列来实现生产者-消费者模式</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a><font size="5">仓库</font></h2><p>个人实现，正确性应该没问题，性能应该还好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">public class MyList&lt;E&gt; &#123;</span><br><span class="line">    //存放数据的数组</span><br><span class="line">    E[] list;</span><br><span class="line">    //下一次添加和删除的索引</span><br><span class="line">    private int putIndex;</span><br><span class="line">    private int takeIndex;</span><br><span class="line">    //记录缓冲区元素个数</span><br><span class="line">    private AtomicInteger count = new AtomicInteger(0);</span><br><span class="line">    //数组容量(缓冲区大小)</span><br><span class="line">    private int cal;</span><br><span class="line">    //put锁和take锁，分别对put()和take()加锁</span><br><span class="line">    private ReentrantLock putlock;</span><br><span class="line">    private Condition isFull;</span><br><span class="line">    private ReentrantLock takelock;</span><br><span class="line">    private Condition isEmpty;</span><br><span class="line"></span><br><span class="line">    public MyList(int cal, ReentrantLock putlock, ReentrantLock takelock) &#123;</span><br><span class="line">        list = (E[]) new Object[count];</span><br><span class="line">        cal = cal;</span><br><span class="line">        this.putlock = putlock;</span><br><span class="line">        this.takelock = takelock;</span><br><span class="line">        this.isEmpty = takelock.newCondition();</span><br><span class="line">        this.isFull = putlock.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 唤醒在take方法上阻塞的线程</span><br><span class="line">     */</span><br><span class="line">    private void isEmpty() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            takelock.lock();</span><br><span class="line">            if (count.get() &gt; 0) &#123;</span><br><span class="line">                isEmpty.signalAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            takelock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 唤醒在put方法上阻塞的线程</span><br><span class="line">     */</span><br><span class="line">    private void isFull() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            putlock.lock();</span><br><span class="line">            if (count.get() &lt; list.length) &#123;</span><br><span class="line">                isFull.signalAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            putlock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 同时获得两把锁</span><br><span class="line">     */</span><br><span class="line">    private void AllLock() &#123;</span><br><span class="line">        putlock.lock();</span><br><span class="line">        takelock.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 同时释放两把锁</span><br><span class="line">     */</span><br><span class="line">    private void AllUnlock() &#123;</span><br><span class="line">        takelock.unlock();</span><br><span class="line">        putlock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前缓冲区元素个数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            AllLock();</span><br><span class="line">            return count.get();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            AllUnlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 像缓冲区添加元素</span><br><span class="line">     * @param e</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     */</span><br><span class="line">    public void put(E e) throws InterruptedException &#123;</span><br><span class="line">        //获取put锁</span><br><span class="line">        putlock.lockInterruptibly();</span><br><span class="line">        try &#123;</span><br><span class="line">            //如果当前缓冲区满，则阻塞</span><br><span class="line">            while (count.get() == list.length) &#123;</span><br><span class="line">                isFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            //将元素添加到指定索引位置</span><br><span class="line">            list[putIndex] = e;</span><br><span class="line">            count.getAndIncrement();</span><br><span class="line">            //循环</span><br><span class="line">            if (++putIndex == list.length) &#123;</span><br><span class="line">                putIndex = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            putlock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 取出缓冲区中元素</span><br><span class="line">     * @return 要取出的元素</span><br><span class="line">     * @throws InterruptedException</span><br><span class="line">     */</span><br><span class="line">    public E take() throws InterruptedException &#123;</span><br><span class="line">        E res;</span><br><span class="line">        takelock.lockInterruptibly();</span><br><span class="line">        try &#123;</span><br><span class="line">            while (count.get() == 0) &#123;</span><br><span class="line">                isEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            res = list[takeIndex];</span><br><span class="line">            list[takeIndex] = null;</span><br><span class="line">            if (++takeIndex == list.length) &#123;</span><br><span class="line">                takeIndex = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            count.getAndDecrement();</span><br><span class="line">            return res;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            isFull();</span><br><span class="line">            takelock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，直接使用数组来实现，具体细节和ArrayBlockingQueue相似，但是锁部分则使用的是LinkedBlockingQueue的锁分离思想外加原子变量，能够使得生产和消费线程同时进行，提高了并发性能。</p><h2 id="商品"><a href="#商品" class="headerlink" title="商品"></a><font size="5">商品</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Som &#123;</span><br><span class="line">    private final int ID;</span><br><span class="line"></span><br><span class="line">    public Som(int id) &#123;</span><br><span class="line">        ID = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;商品ID: &quot; + ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和前面的一样</p><h2 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a><font size="5">生产者</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class Producer implements Runnable&#123;</span><br><span class="line">    MyList&lt;Som&gt; list;</span><br><span class="line">    private AtomicInteger count = new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    public Producer(MyList&lt;Som&gt; list) &#123;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Som s = new Som(count.incrementAndGet());</span><br><span class="line">                list.put(s);</span><br><span class="line">                System.out.println(s + &quot; is put in the queue&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者很简单，开启一个线程，不断地往缓冲区添加商品即可</p><h2 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a><font size="5">消费者</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Consumer implements Runnable&#123;</span><br><span class="line">    MyList&lt;Som&gt; list;</span><br><span class="line"></span><br><span class="line">    public Consumer(MyList&lt;Som&gt; list) &#123;</span><br><span class="line">        this.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(2000);</span><br><span class="line">                System.out.println(list.take() + &quot; is out the queue ||&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，不断往缓冲区中拿即可</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>为了日后验证方便，所以将全部代码贴上，如果要运行直接拷贝即可。可以看出，用JDK提供的阻塞队列来实现生产者消费者模式还是很方便的。自己实现的时，如果采用ReentrantLock+Condition方式，可以采用LinkedBlockingQueue源码中的锁分离思想，能够提高并发性能。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayBlockingQueue源码详解</title>
      <link href="/2019/11/16/ArrayBlockingQueue%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/16/ArrayBlockingQueue%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>前面介绍了LinkedBlockingQueue，现在来介绍同步队列容器的另一种实现-ArrayBlockingQueue，很容易理解，该队列的底层数据结构为数组。下面就基于JDK1.8来介绍该容器。</p><hr><a id="more"></a><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><p>先看一下类注释</p><ol><li>有界的阻塞数组，容量一旦创建后续大小无法修改</li><li>元素是有序的，按照先入先出的特性，从队头取出数据，从队尾插入数据</li><li>队列满时，put操作被阻塞；队列空时，take操作被阻塞</li></ol><p>从类注释我们发现，ArrayBlockingQueue和一般的数组结构的容器不同，是不支持后续扩容的。如果队满或队空，put或take会被阻塞</p><h2 id="类字段"><a href="#类字段" class="headerlink" title="类字段"></a><font size="5">类字段</font></h2><p>老样子，我们来先看一看该类有哪些字段，便于我们后期学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//存放数据</span><br><span class="line">final Object[] items;</span><br><span class="line"></span><br><span class="line">//下次拿数据的时候的索引位置</span><br><span class="line">int takeIndex;</span><br><span class="line"></span><br><span class="line">//下次放数据的索引位置</span><br><span class="line">int putIndex;</span><br><span class="line"></span><br><span class="line">//当前集合中元素个数</span><br><span class="line">int count;</span><br><span class="line"></span><br><span class="line">//锁结构</span><br><span class="line">final ReentrantLock lock;</span><br><span class="line">private final Condition notEmpty;</span><br><span class="line">private final Condition notFull;</span><br></pre></td></tr></table></figure><p>以上代码有两个字段takeIndex和putIndex，分别表示下次拿数据和放数据的索引位置，所以说在添加和删除数据时无需计算，可以直接知道相应的索引位置</p><h1 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h1><p>下面我们正式看一下源码</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="5">初始化</font></h2><p>初始化时，有两个重要参数：数组的大小(即队列的容量)，是否公平。和LinkedBlockingQueue一样，初始化方法有三个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//指定大小初始化，默认非公平</span><br><span class="line">public ArrayBlockingQueue(int capacity) &#123;</span><br><span class="line">    this(capacity, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指定大小和是否公平</span><br><span class="line">public ArrayBlockingQueue(int capacity, boolean fair) &#123;</span><br><span class="line">    if (capacity &lt;= 0)</span><br><span class="line">        throw new IllegalArgumentException();</span><br><span class="line">    this.items = new Object[capacity];</span><br><span class="line">    lock = new ReentrantLock(fair);</span><br><span class="line">    notEmpty = lock.newCondition();</span><br><span class="line">    notFull =  lock.newCondition();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//同时向集合中添加数据</span><br><span class="line">public ArrayBlockingQueue(int capacity, boolean fair,</span><br><span class="line">                          Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    this(capacity, fair);</span><br><span class="line"></span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    lock.lock(); // Lock only for visibility, not mutual exclusion</span><br><span class="line">    try &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (E e : c) &#123;</span><br><span class="line">                checkNotNull(e);</span><br><span class="line">                items[i++] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ArrayIndexOutOfBoundsException ex) &#123;</span><br><span class="line">            throw new IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        count = i;</span><br><span class="line">        putIndex = (i == capacity) ? 0 : i;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码可以看出，构造方法的第二个boolean参数，主要是用于创建ReentrantLock时指定锁是否为公平锁。如果锁是公平的，那么在锁竞争时就会按照先来先获取的顺序；如果是非公平锁，锁竞争时是随机的。我们举个例子来说明：</p><ul><li>加入现在队列已满还有很多线程执行put操作，必然会有很多线程被阻塞，当有其他线程执行take操作时，会唤醒等待的线程，如果是公平锁，会按照阻塞等待的顺序依次唤醒等待的线程，如果是非公平锁，会随机唤醒等待的线程。队列空时也是一样的道理<h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a><font size="5">添加元素</font></h2>添加数据时都会按照putIndex的位置进行添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public void put(E e) throws InterruptedException &#123;</span><br><span class="line">    //检查添加元素是否为null，如果为null抛出异常</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    //可响应中断锁</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    try &#123;</span><br><span class="line">        //如果数组已满，该线程等待</span><br><span class="line">        while (count == items.length)</span><br><span class="line">            notFull.await();</span><br><span class="line">        //将元素入队</span><br><span class="line">        enqueue(e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//检查null</span><br><span class="line">private static void checkNotNull(Object v) &#123;</span><br><span class="line">    if (v == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//添加方法</span><br><span class="line">private void enqueue(E x) &#123;</span><br><span class="line">    final Object[] items = this.items;</span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    //实现循环队列</span><br><span class="line">    if (++putIndex == items.length)</span><br><span class="line">        putIndex = 0;</span><br><span class="line">    count++;</span><br><span class="line">    //唤醒其他取数据的线程</span><br><span class="line">    notEmpty.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从源码可以看出，该队列实现的是一个循环队列，当新增到队尾时，下次新增会从队头开始</p><h2 id="取出元素"><a href="#取出元素" class="headerlink" title="取出元素"></a><font size="5">取出元素</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    try &#123;</span><br><span class="line">        //如果数组为空，该线程等待</span><br><span class="line">        while (count == 0)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">        return dequeue();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//取数据方法</span><br><span class="line">private E dequeue() &#123;</span><br><span class="line">    final Object[] items = this.items;</span><br><span class="line">    E x = (E) items[takeIndex];</span><br><span class="line">    items[takeIndex] = null;</span><br><span class="line">    //如果takeIndex已经到队尾，则下次从头开始拿</span><br><span class="line">    if (++takeIndex == items.length)</span><br><span class="line">        takeIndex = 0;</span><br><span class="line">    //元素个数--</span><br><span class="line">    count--;</span><br><span class="line">    if (itrs != null)</span><br><span class="line">        itrs.elementDequeued();</span><br><span class="line">    //唤醒其他等待添加数据的线程</span><br><span class="line">    notFull.signal();</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>take方法的源码也比较简单，就是普通的对循环队列的操作</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a><font size="5">删除元素</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    //如果指定参数为null，直接返回false</span><br><span class="line">    if (o == null) return false;</span><br><span class="line">    final Object[] items = this.items;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    //不可响应中断锁</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        if (count &gt; 0) &#123;</span><br><span class="line">            final int putIndex = this.putIndex;</span><br><span class="line">            int i = takeIndex;</span><br><span class="line">            //从队头开始遍历，找到要删除元素</span><br><span class="line">            do &#123;</span><br><span class="line">                if (o.equals(items[i])) &#123;</span><br><span class="line">                    removeAt(i);</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                //由于是循环队列，因此当遍历到数据末端时从开头继续</span><br><span class="line">                if (++i == items.length)</span><br><span class="line">                    i = 0;</span><br><span class="line">            &#125; while (i != putIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">//删除方法逻辑代码</span><br><span class="line">void removeAt(final int removeIndex) &#123;</span><br><span class="line">   </span><br><span class="line">    final Object[] items = this.items;</span><br><span class="line">    //如果要删除的位置和takeIndex一样</span><br><span class="line">    //则直接将该位置置为null，将takeIndex后移，count--</span><br><span class="line">    if (removeIndex == takeIndex) &#123;</span><br><span class="line">        </span><br><span class="line">        items[takeIndex] = null;</span><br><span class="line">        if (++takeIndex == items.length)</span><br><span class="line">            takeIndex = 0;</span><br><span class="line">        count--;</span><br><span class="line">        if (itrs != null)</span><br><span class="line">            itrs.elementDequeued();</span><br><span class="line">    &#125; </span><br><span class="line">    //如果要删除元素的位置和takeIndex不同</span><br><span class="line">    else &#123;</span><br><span class="line">        </span><br><span class="line">        final int putIndex = this.putIndex;</span><br><span class="line">        //从要删除位置循环向后遍历，直到遍历到putIndex为止</span><br><span class="line">        //将元素依次向前移一个位置</span><br><span class="line">        for (int i = removeIndex;;) &#123;</span><br><span class="line">            int next = i + 1;</span><br><span class="line">            if (next == items.length)</span><br><span class="line">                next = 0;</span><br><span class="line">            if (next != putIndex) &#123;</span><br><span class="line">                items[i] = items[next];</span><br><span class="line">                i = next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                items[i] = null;</span><br><span class="line">                this.putIndex = i;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        if (itrs != null)</span><br><span class="line">            itrs.removedAt(removeIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    //唤醒添加方法上阻塞的线程</span><br><span class="line">    notFull.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>对于ArrayBlockingQueue，底层是一个数组组成了一个循环队列，线程安全并且不可扩容。由于是循环队列，因此当takeIndex和putIndex到达队尾时都会重新从0开始</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayBlockingQueue集合 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedBlockingQueue源码详解</title>
      <link href="/2019/11/16/LinkedBlockingQueue%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/16/LinkedBlockingQueue%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>队列，在我们平时使用的线程池、读写锁、消息队列等技术和框架使用的非常广泛，它是很多高级API的基础，因此今天就来介绍一下一种同步队列–LinkedBlockingQueue。(本文基于JDK1.8版本)</p><hr><a id="more"></a><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><h2 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a><font size="5">继承体系</font></h2><p>LinkedBlockingQueue中文名叫做链表阻塞队列，因此我们可以知道其底层数据结构是链表，并且队列是可阻塞的，首先我们看一看LinkedBlockingQueue的类图<br><img src="/2019/11/16/LinkedBlockingQueue源码详解/1.png" alt>从类图中我们可以看出，该类的继承体系有两条路径</p><ol><li>AbstractQueue-&gt;AbstractCollection-&gt;Collection-&gt;Iterable，这一条路径主要是想复用Collection和迭代器的一些操作</li><li>BlockingQueue-&gt;Queue-&gt;Collection，这里主要说一下BlockingQueue和Queue两个接口</li></ol><p>Queue是最基础的接口，几乎所有的队列实现类都会实现这个接口，该接口定义了三大类操作</p><ol><li><b>新增操作</b><ol><li>add：队列满时抛出异常</li><li>offer：队列满时返回false</li></ol></li><li><b>查看并删除操作</b><ol><li>remove：队列空时抛出异常</li><li>poll：队列空时返回null</li></ol></li><li><b>只查看不删除操作</b><ol><li>element：队列空时抛出异常</li><li>peek：队列空时返回null</li></ol></li></ol><p>一共六种方法，也可以按照是否抛出异常分类</p><ol><li>遇到队空或满时抛出异常，如add、remove、element</li><li>遇到队空或满时返回特殊值，如offer、poll、peek</li></ol><p>BlockingQueue在Queue的基础上加了阻塞的概念，结合上面的几个方法，我们通过一个表格来比较一下</p><table><thead><tr><th align="center">操作类型</th><th align="center">抛异常</th><th align="center">返回特殊值</th><th align="center">一直阻塞</th><th align="center">阻塞一段时间</th></tr></thead><tbody><tr><td align="center">新增-&gt;队满</td><td align="center">add</td><td align="center">offer返回false</td><td align="center">put</td><td align="center">offer超时时间后返回false</td></tr><tr><td align="center">查看并删除-&gt;队空</td><td align="center">remove</td><td align="center">poll返回null</td><td align="center">take</td><td align="center">poll超时时间后返回false</td></tr><tr><td align="center">查看-&gt;队空</td><td align="center">element</td><td align="center">peek返回null</td><td align="center">无</td><td align="center">无</td></tr></tbody></table><p>注意：<b>remove方法BlockingQueue类注释中定义的是抛异常，但是实际实现时返回false</b></p><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><p>接下来我们看一看LinkedBlockingQueue的类注释</p><ol><li>基于链表的阻塞队列，其底层数据结构为链表</li><li>链表维护FIFO，新元素被放在队尾，获取元素从头部拿</li><li>链表大小在初始化时可以设置，默认为Integer的最大值</li><li>可以使用Collection和Iterator连个接口的所有操作</li></ol><h2 id="成员属性"><a href="#成员属性" class="headerlink" title="成员属性"></a><font size="5">成员属性</font></h2><p>我们来看一看LinkedBlockingQueue有哪些字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//链表节点</span><br><span class="line">static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node(E x) &#123; item = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line">//默认容量，为Integer.MAX_VALUE</span><br><span class="line">private final int capacity;</span><br><span class="line">//使用原子类计算链表元素个数</span><br><span class="line">private final AtomicInteger count = new AtomicInteger();</span><br><span class="line">//链表头</span><br><span class="line">transient Node&lt;E&gt; head;</span><br><span class="line">//链表尾</span><br><span class="line">private transient Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">//锁结构</span><br><span class="line">private final ReentrantLock takeLock = new ReentrantLock();</span><br><span class="line">private final Condition notEmpty = takeLock.newCondition();</span><br><span class="line">private final ReentrantLock putLock = new ReentrantLock();</span><br><span class="line">private final Condition notFull = putLock.newCondition();</span><br></pre></td></tr></table></figure><p>从代码上来看，LinkedBlockingQueue结构很清晰，主要是链表存储+锁+迭代器。链表的作用是为了保存当前节点，锁有take锁和put锁，是为了保证操作时线程安全，设计两种锁是为了take和put两种操作可以同时进行，互不影响。</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>下面我们来看一看LinkedBlockingQueue的源码</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="5">初始化</font></h2><p>初始化有三种方式</p><ol><li>指定容量初始化</li><li>默认初始化，默认大小为Integer.MAX_VALUE</li><li>对已有集合数据进行初始化</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">//默认初始化</span><br><span class="line">public LinkedBlockingQueue() &#123;</span><br><span class="line">    this(Integer.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//指定大小初始化</span><br><span class="line">public LinkedBlockingQueue(int capacity) &#123;</span><br><span class="line">    if (capacity &lt;= 0) throw new IllegalArgumentException();</span><br><span class="line">    this.capacity = capacity;</span><br><span class="line">    last = head = new Node&lt;E&gt;(null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//指定数据初始化</span><br><span class="line">public LinkedBlockingQueue(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    this(Integer.MAX_VALUE);</span><br><span class="line">    final ReentrantLock putLock = this.putLock;</span><br><span class="line">    //使用put锁进行同步，即同一时刻只能有一个线程put</span><br><span class="line">    putLock.lock(); </span><br><span class="line">    try &#123;</span><br><span class="line">        int n = 0;</span><br><span class="line">        for (E e : c) &#123;</span><br><span class="line">            //集合中元素不能为空</span><br><span class="line">            if (e == null)</span><br><span class="line">                throw new NullPointerException();</span><br><span class="line">            //元素个数不能超过指定容量</span><br><span class="line">            if (n == capacity)</span><br><span class="line">                throw new IllegalStateException(&quot;Queue full&quot;);</span><br><span class="line">            //将节点插入链表尾</span><br><span class="line">            enqueue(new Node&lt;E&gt;(e));</span><br><span class="line">            ++n;</span><br><span class="line">        &#125;</span><br><span class="line">        //修改size</span><br><span class="line">        count.set(n);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //释放锁</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//插入方法</span><br><span class="line">private void enqueue(Node&lt;E&gt; node) &#123;</span><br><span class="line">    last = last.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述第三种添加方法中，源码在检查容量是在for循环中，每添加一个元素就检查一次，这样不够好；最好是在for循环外(添加元素前)就检查容量是否足够，如果不够直接抛出异常。举个例子：如果当前容量为500，要添加600个元素进去，按照源码的实例，会在添加第501个元素时才抛出异常；如果在循环外面判断，则会直接抛出异常而不用添加这么多次。</p><h2 id="辅助方法"><a href="#辅助方法" class="headerlink" title="辅助方法"></a><font size="5">辅助方法</font></h2><p>在正式介绍添加删除等方法时，先介绍几个后面会用到的辅助方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//唤醒在notEmpty上阻塞的一个线程</span><br><span class="line">private void signalNotEmpty() &#123;</span><br><span class="line">    final ReentrantLock takeLock = this.takeLock;</span><br><span class="line">    takeLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        notEmpty.signal();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        takeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//唤醒在notFull上阻塞的一个线程</span><br><span class="line">private void signalNotFull() &#123;</span><br><span class="line">    final ReentrantLock putLock = this.putLock;</span><br><span class="line">    putLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        notFull.signal();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将元素添加到队尾</span><br><span class="line">private void enqueue(Node&lt;E&gt; node) &#123;</span><br><span class="line">    // assert putLock.isHeldByCurrentThread();</span><br><span class="line">    // assert last.next == null;</span><br><span class="line">    last = last.next = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除队头元素</span><br><span class="line">private E dequeue() &#123;</span><br><span class="line">    Node&lt;E&gt; h = head;</span><br><span class="line">    Node&lt;E&gt; first = h.next;</span><br><span class="line">    //后面迭代器时会讲到为什么这么做</span><br><span class="line">    h.next = h; </span><br><span class="line">    head = first;</span><br><span class="line">    E x = first.item;</span><br><span class="line">    first.item = null;</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="阻塞添加-put方法"><a href="#阻塞添加-put方法" class="headerlink" title="阻塞添加-put方法"></a><font size="5">阻塞添加-put方法</font></h2><p>支持添加的方法不止一个，比如add、put、offer，三者的区别前面已经介绍过，我们下面以put方法为例，进行学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public void put(E e) throws InterruptedException &#123;</span><br><span class="line">    //如果新增元素为null，抛出异常</span><br><span class="line">    if (e == null) throw new NullPointerException();</span><br><span class="line">    </span><br><span class="line">    int c = -1;</span><br><span class="line">    Node&lt;E&gt; node = new Node&lt;E&gt;(e);</span><br><span class="line">    final ReentrantLock putLock = this.putLock;</span><br><span class="line">    final AtomicInteger count = this.count;</span><br><span class="line">    //使用put锁的可中断锁方法</span><br><span class="line">    putLock.lockInterruptibly();</span><br><span class="line">    try &#123;</span><br><span class="line">        //如果队列已满，线程阻塞</span><br><span class="line">        while (count.get() == capacity) &#123;</span><br><span class="line">            notFull.await();</span><br><span class="line">        &#125;</span><br><span class="line">        //队列未满，添加元素到链表尾</span><br><span class="line">        enqueue(node);</span><br><span class="line">        //使用的是getAndIncrement，即先获取后增加</span><br><span class="line">        //和incrementAndGet不同</span><br><span class="line">        //因此获取的c比添加后容量小1</span><br><span class="line">        c = count.getAndIncrement();</span><br><span class="line">        //如果此时链表大小小于容量，说明链表未满</span><br><span class="line">        //调用signal方法尝试唤醒一个put的等待线程</span><br><span class="line">        if (c + 1 &lt; capacity)</span><br><span class="line">            notFull.signal();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    //c=0，代表队列里有一个元素</span><br><span class="line">    //则会尝试唤醒一个take的等待线程</span><br><span class="line">    if (c == 0)</span><br><span class="line">        signalNotEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中我们可以得到</p><ol><li>添加数据之前，使用put锁加锁，所以添加数据是线程安全的</li><li>put方法简单地将数据添加到队尾</li><li>添加时，如果队满，当前线程是会被阻塞的。</li><li>新增数据成功后，在适当的时机会唤起put的等待线程(队列不满时)，或者take的等待线程。这样保证一旦满足put或take条件时立马就能唤起阻塞线程，继续运行。</li></ol><h2 id="阻塞添加-offer方法"><a href="#阻塞添加-offer方法" class="headerlink" title="阻塞添加-offer方法"></a><font size="5">阻塞添加-offer方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">//指定超时时间</span><br><span class="line">public boolean offer(E e, long timeout, TimeUnit unit)</span><br><span class="line">    throws InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    if (e == null) throw new NullPointerException();</span><br><span class="line">    long nanos = unit.toNanos(timeout);</span><br><span class="line">    int c = -1;</span><br><span class="line">    final ReentrantLock putLock = this.putLock;</span><br><span class="line">    final AtomicInteger count = this.count;</span><br><span class="line">    putLock.lockInterruptibly();</span><br><span class="line">    try &#123;</span><br><span class="line">        while (count.get() == capacity) &#123;</span><br><span class="line">            //如果nanos&lt;=0说明超过等待时间，</span><br><span class="line">            //直接返回false</span><br><span class="line">            if (nanos &lt;= 0)</span><br><span class="line">                return false;</span><br><span class="line">            nanos = notFull.awaitNanos(nanos);</span><br><span class="line">        &#125;</span><br><span class="line">        enqueue(new Node&lt;E&gt;(e));</span><br><span class="line">        c = count.getAndIncrement();</span><br><span class="line">        if (c + 1 &lt; capacity)</span><br><span class="line">            notFull.signal();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    if (c == 0)</span><br><span class="line">        signalNotEmpty();</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//不指定时间的offer方法</span><br><span class="line">public boolean offer(E e) &#123;</span><br><span class="line">    if (e == null) throw new NullPointerException();</span><br><span class="line">    final AtomicInteger count = this.count;</span><br><span class="line">    //如果队列满，直接返回false</span><br><span class="line">    if (count.get() == capacity)</span><br><span class="line">        return false;</span><br><span class="line"></span><br><span class="line">    int c = -1;</span><br><span class="line">    Node&lt;E&gt; node = new Node&lt;E&gt;(e);</span><br><span class="line"></span><br><span class="line">    final ReentrantLock putLock = this.putLock;</span><br><span class="line">    putLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        //双重检查，保证队列未满</span><br><span class="line">        //可能其他线程进行了put操作，导致队列满</span><br><span class="line">        if (count.get() &lt; capacity) &#123;</span><br><span class="line">            enqueue(node);</span><br><span class="line">            c = count.getAndIncrement();</span><br><span class="line">            if (c + 1 &lt; capacity)</span><br><span class="line">                notFull.signal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        putLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (c == 0)</span><br><span class="line">        signalNotEmpty();</span><br><span class="line">    //如果添加成功返回true</span><br><span class="line">    //否则返回false</span><br><span class="line">    return c &gt;= 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定等待时间的offer方法和put的区别只在于调用的阻塞方法不同，而不指定等待时间的offer方法如果队列满会直接返回false，不会进行等待。</p><h2 id="阻塞删除-take方法"><a href="#阻塞删除-take方法" class="headerlink" title="阻塞删除-take方法"></a><font size="5">阻塞删除-take方法</font></h2><p>删除的方法也有很多，我们以take方法为例进行学习</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span><br><span class="line">    E x;</span><br><span class="line">    int c = -1;</span><br><span class="line">    final AtomicInteger count = this.count;</span><br><span class="line">    final ReentrantLock takeLock = this.takeLock;</span><br><span class="line">    takeLock.lockInterruptibly();</span><br><span class="line">    try &#123;</span><br><span class="line">        while (count.get() == 0) &#123;</span><br><span class="line">            notEmpty.await();</span><br><span class="line">        &#125;</span><br><span class="line">        //获取头节点值</span><br><span class="line">        x = dequeue();</span><br><span class="line">        //先获取后减1</span><br><span class="line">        c = count.getAndDecrement();</span><br><span class="line">        //如果此时队不为空，唤醒一个take的阻塞线程</span><br><span class="line">        if (c &gt; 1)</span><br><span class="line">            notEmpty.signal();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        takeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    //c==capacity说明队列还有一个空闲空间</span><br><span class="line">    //尝试唤醒一个put方法的阻塞线程</span><br><span class="line">    if (c == capacity)</span><br><span class="line">        signalNotFull();</span><br><span class="line">    return x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>take方法的流程很简单，在take锁的同步块内进行，整体思想和put方法类似，同样的poll方法和前面的offer方法也很类似。下面我们紧接着介绍一下查看方法</p><h2 id="查看-peek方法"><a href="#查看-peek方法" class="headerlink" title="查看-peek方法"></a><font size="5">查看-peek方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public E peek() &#123;</span><br><span class="line">    if (count.get() == 0)</span><br><span class="line">        return null;</span><br><span class="line">    final ReentrantLock takeLock = this.takeLock;</span><br><span class="line">    takeLock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        Node&lt;E&gt; first = head.next;</span><br><span class="line">        if (first == null)</span><br><span class="line">            return null;</span><br><span class="line">        else</span><br><span class="line">            return first.item;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        takeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，peek方法使用的也是take锁，这很容易理解。</p><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>不知道前面你注意到没有，在删除节点调用dequeue()方法删除节点时，使用的是h.next=h，而不是直接将h.next=null，这是什么原因呢？看完了迭代器你就会知道</p><h2 id="辅助方法-1"><a href="#辅助方法-1" class="headerlink" title="辅助方法"></a><font size="5">辅助方法</font></h2><p>在介绍迭代器之前，先介绍三个个辅助方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//将take锁和put锁全部获得</span><br><span class="line">void fullyLock() &#123;</span><br><span class="line">    putLock.lock();</span><br><span class="line">    takeLock.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//释放两锁</span><br><span class="line">void fullyUnlock() &#123;</span><br><span class="line">    takeLock.unlock();</span><br><span class="line">    putLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除方法</span><br><span class="line">void unlink(Node&lt;E&gt; p, Node&lt;E&gt; trail) &#123;</span><br><span class="line">    p.item = null;</span><br><span class="line">    trail.next = p.next;</span><br><span class="line">    if (last == p)</span><br><span class="line">        last = trail;</span><br><span class="line">    //由于进行了删除，因此如果当前集合中还有一个容量</span><br><span class="line">    //则唤醒一个put方法上等待的线程</span><br><span class="line">    if (count.getAndDecrement() == capacity)</span><br><span class="line">        notFull.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是可以理解的，在迭代过程中必须保证既不能添加也不能删除和查看。</p><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a><font size="5">迭代方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">//同样的，返回一个Iterator实现类对象</span><br><span class="line">public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">    return new Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=========================”</span><br><span class="line">//迭代器实现类</span><br><span class="line">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">    //下一次迭代节点</span><br><span class="line">    private Node&lt;E&gt; current;</span><br><span class="line">    //上一次迭代节点</span><br><span class="line">    private Node&lt;E&gt; lastRet;</span><br><span class="line">    private E currentElement;</span><br><span class="line"></span><br><span class="line">    Itr() &#123;</span><br><span class="line">        //进入同步区域</span><br><span class="line">        fullyLock();</span><br><span class="line">        try &#123;</span><br><span class="line">            current = head.next;</span><br><span class="line">            if (current != null)</span><br><span class="line">                currentElement = current.item;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            fullyUnlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return current != null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取下一个节点</span><br><span class="line">    private Node&lt;E&gt; nextNode(Node&lt;E&gt; p) &#123;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            Node&lt;E&gt; s = p.next;</span><br><span class="line">            //此时进行过take操作，并且current指向已经被删除的头节点</span><br><span class="line">            if (s == p)</span><br><span class="line">                return head.next;</span><br><span class="line">            if (s == null || s.item != null)</span><br><span class="line">                return s;</span><br><span class="line">            p = s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public E next() &#123;</span><br><span class="line">        fullyLock();</span><br><span class="line">        try &#123;</span><br><span class="line">            </span><br><span class="line">            if (current == null)</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            //获取当前迭代节点值</span><br><span class="line">            E x = currentElement;</span><br><span class="line">            //赋值上一次迭代节点</span><br><span class="line">            lastRet = current;</span><br><span class="line">            //获取下一次迭代节点</span><br><span class="line">            current = nextNode(current);</span><br><span class="line">            //此时说明链表为空</span><br><span class="line">            currentElement = (current == null) ? null : current.item;</span><br><span class="line">            return x;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            fullyUnlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        //第一次迭代或者当前节点已经被删除</span><br><span class="line">        if (lastRet == null)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        fullyLock();</span><br><span class="line">        try &#123;</span><br><span class="line">            Node&lt;E&gt; node = lastRet;</span><br><span class="line">            lastRet = null;</span><br><span class="line">            for (Node&lt;E&gt; trail = head, p = trail.next;</span><br><span class="line">                 p != null;</span><br><span class="line">                 trail = p, p = p.next) &#123;</span><br><span class="line">                //找到上次迭代的节点进行删除</span><br><span class="line">                if (p == node) &#123;</span><br><span class="line">                    unlink(p, trail);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            fullyUnlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是迭代器方法源码，主要说以下一点</p><ol><li><b>nextNode方法中为什么会存在if (s == p)分支？</b><br>结合前面dequeue方法的源码我们可以得出结论，在dequeue方法中，删除第一个节点后，并不是将next域置为null，而是指向自身。关键就在这里，当删除节点为current指向的节点时，如果将next节点置为null，那么迭代将无法继续。因此将next指向自身，在迭代方法中进行额外判断。<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>LinkedBlockingQueue队列使用带头节点的单向链表+ReentrantLick锁来实现阻塞队列，实现思想比较简单，但是其中同步的细节和迭代器的实现很棒，值得我们学习。<hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> LinkedBlockingQueue集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CopyOnWriteArrayList源码解析</title>
      <link href="/2019/11/13/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/13/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在前面介绍ArrayList集合时，我们说过，ArrayList是一个非线程安全的集合，它的类注释推荐我们自己加锁或者使用Collections.synchronizedList方法来获取线程安全的集合。其实JDK还有另外一种线程安全的List，叫做CopyOnWriteArrayList。接下来将基于JDK1.8版本介绍该集合。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CopyOnWriteArrayList集合具有以下特征</p><ol><li>线程安全的，多线程情况下无需加锁可以直接使用</li><li>通过锁+数组拷贝+volatile关键字保证了线程安全</li><li>每次数组操作，都会把数组拷贝一份出来，在新数组上进行操作，操作成功后再赋值回去</li></ol><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>从整体架构上来说，CopyOnWriteArrayList数据结构和ArrayList是一致的，底层是个数组，只不过CopyOnWriteArrayList在对数组进行操作的时候，基本会走四步：</p><ol><li>加锁</li><li>从原数组中拷贝出新数组</li><li>在新数组上进行操作，并将新数组赋给集合</li><li>解锁</li></ol><p>除了加锁之外，CopyOnWriteArrayList地底层数组还被volatile修饰，意思是一旦数组被修改，其他线程立马能够感知到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private transient volatile Object[] array;</span><br></pre></td></tr></table></figure><p>整体来说，CopyOnWriteArrayList就是利用锁+数组拷贝+volatile关键字保证了List的线程安全。</p><h1 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h1><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><p>我们看看从CopyOnWriteArrayList的类注释上能得到哪些信息：</p><ol><li>所有的操作都是线程安全的，因为操作都是在新拷贝的数组上进行的；</li><li>数组的拷贝虽然有一定的成本，但往往比一般的替代效率高</li><li>迭代过程中，不会影响原来的数组，也不会抛出ConcurrentModificationException异常。</li></ol><h2 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a><font size="5">新增方法</font></h2><p>新增方法有很多种重载形式，比如新增到数组尾部、新增到数组某个索引位置、批量新增等等，操作的思路还是前面说的四步，我们以新增到尾部为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    //获取锁</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        //得到原数组</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        int len = elements.length;</span><br><span class="line">        //将所有数据拷贝到新数组中，长度为len+1，因为要添加一个元素进去</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + 1);</span><br><span class="line">        //在新数组中进行赋值</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        //替换掉原来的数组</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        return true;</span><br><span class="line">    //finally中释放锁</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中我们发现，整个add()方法都是在持有锁的状态下进行的，通过加锁，来保证同一时刻只有一个线程对数组进行访问。除了加锁之外，还会从老数组中创建出一个新数组，然后将老数组中的值拷贝到新数组上。这时候就有一个问题了：既然已经加了锁，为什么还要拷贝一个新数组并且在新数组上操作而不直接在原来数组中进行操作呢？这样做是因为：</p><ol><li>volatile关键字修饰的是数组，如果简单地在原来数组上修改某几个元素的值，是无法触发可见性的，我们必须通过修改数组的内存地址才行，也就是说对数组进行重新赋值</li><li>在新的数组上进行拷贝，对老数组没有任何影响，只有新数组完全拷贝完成之后，外部才能访问到，降低了在赋值过程中老数组数据变动的影响</li></ol><p>下面我们再看看指定位置添加元素的方法源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        int len = elements.length;</span><br><span class="line">        //校验参数是否越界</span><br><span class="line">        if (index &gt; len || index &lt; 0)</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index+</span><br><span class="line">                                                &quot;, Size: &quot;+len);</span><br><span class="line">        Object[] newElements;</span><br><span class="line">        int numMoved = len - index;</span><br><span class="line">        //如果为0说明数据添加位置为数组末尾</span><br><span class="line">        if (numMoved == 0)</span><br><span class="line">            newElements = Arrays.copyOf(elements, len + 1);</span><br><span class="line">        else &#123;</span><br><span class="line">            newElements = new Object[len + 1];</span><br><span class="line">            //第一次拷贝:将[0~index)的数据从原数组拷贝到新数组</span><br><span class="line">            System.arraycopy(elements, 0, newElements, 0, index);</span><br><span class="line">            //第二次拷贝:将[index~len)的数据拷贝的新数组</span><br><span class="line">            //[index+1~len+1)位置</span><br><span class="line">            System.arraycopy(elements, index, newElements, index + 1,</span><br><span class="line">                             numMoved);</span><br><span class="line">        &#125;</span><br><span class="line">        //通过前两次拷贝，新数组中下标为index的位置为空，直接赋值</span><br><span class="line">        newElements[index] = element;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码和注释我们可以很清楚的看到该方法的实现，先将原数组从插入位置一分为二，分别进行两次拷贝，最终将下标为index的位置空出来放置要插入的值</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><font size="5">小结</font></h2><p>从add()方法源码可以看出，CopyOnWriteArrayList通过加锁+数组拷贝+volatile来保证了线程安全，每一个要素都有其独特的含义</p><ol><li>加锁：保证同一时刻只能被一个线程操作</li><li>数组拷贝：保证数组的内存地址被修改，修改后立刻触发volatile可见性，其他线程立刻可以看到数组被修改后的值</li><li>volatile：值被修改后，其他线程能够立马感知最新值</li></ol><p>三要素缺一不可，如果我们只是用1和3，去掉2，这样当我们修改数组中某个值时，并不会触发可见性，只有当数组内存地址被修改后，才能触发可见性</p><h2 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a><font size="5">删除方法</font></h2><p>下面我们来看一看删除方法，删除方法也有不同的重载形式，这里介绍它其中一种，删除指定位置元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    //加锁</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        int len = elements.length;</span><br><span class="line">        //获取老值</span><br><span class="line">        E oldValue = get(elements, index);</span><br><span class="line">        int numMoved = len - index - 1;</span><br><span class="line">        if (numMoved == 0)</span><br><span class="line">            setArray(Arrays.copyOf(elements, len - 1));</span><br><span class="line">        else &#123;</span><br><span class="line">            Object[] newElements = new Object[len - 1];</span><br><span class="line">            System.arraycopy(elements, 0, newElements, 0, index);</span><br><span class="line">            System.arraycopy(elements, index + 1, newElements, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">            setArray(newElements);</span><br><span class="line">        &#125;</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，删除方法和添加方法逻辑类似，从删除位置将将数组分成两部分，进行两次拷贝，具体分为三步</p><ol><li>加锁</li><li>判断索引位置，从而进行不同的拷贝</li><li>解锁</li></ol><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a><font size="5">批量删除</font></h2><p>数组的批量删除比较有意思，下面我们来看一看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">    if (c == null) throw new NullPointerException();</span><br><span class="line">    final ReentrantLock lock = this.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        int len = elements.length;</span><br><span class="line">        //说明当前数组中有值，若当前集合没有元素直接返回false</span><br><span class="line">        if (len != 0) &#123;</span><br><span class="line">            //表示新数组的索引位置</span><br><span class="line">            int newlen = 0;</span><br><span class="line">            Object[] temp = new Object[len];</span><br><span class="line">            //循环，把不包含在c里的元素拷贝到新数组中</span><br><span class="line">            for (int i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">                Object element = elements[i];</span><br><span class="line">                if (!c.contains(element))</span><br><span class="line">                    temp[newlen++] = element;</span><br><span class="line">            &#125;</span><br><span class="line">            //拷贝新数组，变相删除了包含在c中的元素</span><br><span class="line">            if (newlen != len) &#123;</span><br><span class="line">                setArray(Arrays.copyOf(temp, newlen));</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">final void setArray(Object[] a) &#123;</span><br><span class="line">    array = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，我们并不会直接对数组中的元素进行删除，而是先对数组中的值进行循环判断，把不需要删除的数据放到临时数组中，最后临时数组就是我们删除元素后的数组。可以和ArrayList的批量删除思想联系起来，所以我们在需要删除多个元素的时候，最好也采用这种批量删除的思想，而不是在for循环中单个删除；如果单个删除，那么每一次删除都会有拷贝操作；而如果批量删除，就只会有一次拷贝操作。</p><h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a><font size="5">查找方法</font></h2><p>CopyOnWriteArrayList中的查找方法和普通ArrayList中查找方法一样，使用indexOf实现，并且不需要加锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * static version of indexOf, to allow repeated calls without</span><br><span class="line"> * needing to re-acquire array each time.</span><br><span class="line"> * @param 要查找的值</span><br><span class="line"> * @param 搜索的目标数组</span><br><span class="line"> * @param 搜索的开始位置</span><br><span class="line"> * @param 搜索的结束位置</span><br><span class="line"> * @return 返回搜索值得数组下标，未找到返回-1</span><br><span class="line"> */</span><br><span class="line">private static int indexOf(Object o, Object[] elements,</span><br><span class="line">                           int index, int fence) &#123;</span><br><span class="line">    //如果要查找null值，则用==比较</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int i = index; i &lt; fence; i++)</span><br><span class="line">            if (elements[i] == null)</span><br><span class="line">                return i;</span><br><span class="line">    &#125; </span><br><span class="line">    //如果要查找非空值，则使用equals方法</span><br><span class="line">    else &#123;</span><br><span class="line">        for (int i = index; i &lt; fence; i++)</span><br><span class="line">            if (o.equals(elements[i]))</span><br><span class="line">                return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法是一个内部方法，实现了查找的逻辑代码。CopyOnWriteArrayList的内部使用比较广泛，各种重载形式的查找方法、contains内部都调用了该方法。</p><h2 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a><font size="5">迭代方法</font></h2><p>在类注释中，明确的说明了在CopyOnWriteArrayList迭代过程中即使数组的原值被改变，也不会抛出ConcurrentModificationException异常。其根源在于数组每次变动，都会生成新的数组，并不会影响老数组，这样一来，在迭代过程中根本就不会发现迭代数组的变动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">    return new COWIterator&lt;E&gt;(getArray(), 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static final class COWIterator&lt;E&gt; implements ListIterator&lt;E&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    private final Object[] snapshot;</span><br><span class="line">    </span><br><span class="line">    private int cursor;</span><br><span class="line"></span><br><span class="line">    private COWIterator(Object[] elements, int initialCursor) &#123;</span><br><span class="line">        cursor = initialCursor;</span><br><span class="line">        snapshot = elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return cursor &lt; snapshot.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasPrevious() &#123;</span><br><span class="line">        return cursor &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public E next() &#123;</span><br><span class="line">        if (! hasNext())</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        return (E) snapshot[cursor++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public E previous() &#123;</span><br><span class="line">        if (! hasPrevious())</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        return (E) snapshot[--cursor];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int nextIndex() &#123;</span><br><span class="line">        return cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int previousIndex() &#123;</span><br><span class="line">        return cursor-1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不支持删除操作</span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不支持修改操作</span><br><span class="line">    public void set(E e) &#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //不支持添加操作</span><br><span class="line">    public void add(E e) &#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面就是CopyOnWriteArrayList的迭代器源码，可以发现，内部迭代的数组直接持有原数组的引用。并且没有版本号。结合前面的添加删除方法，可以发现，每次操作后集合的内部数组就会改变，因此迭代器持有的数组也变成了无效数组，这也是该迭代器不支持删除、添加、修改操作的原因，因为如果迭代器创建后，如果集合结构发生了改变，那么在该数组上的任何修改操作都不会影响到集合中的数组。<br><img src="/2019/11/13/CopyOnWriteArrayList源码解析/1.png" alt><br>CopyOnWriteArrayList集合底层仍是数组，通过锁+拷贝数组+volatile实现线程安全，实现比较简单。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> CopyOnWriteArrayList集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java线程池(含常见面试题)</title>
      <link href="/2019/11/13/%E6%B5%85%E8%B0%88Java%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%90%AB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/11/13/%E6%B5%85%E8%B0%88Java%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E5%90%AB%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>线程池，从字面上看，是指管理一组同构工作线程的资源池。线程池是与工作队列密切相关的，其中在工作队列中保存了所有等待执行的任务。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在这篇文章中，将包含对线程池常见方法、线程池的内部实现、线程池的拒绝策略逐个进行介绍；除此之外，还包含一些常见的线程池面试题目。<br><img src="/2019/11/13/浅谈Java线程池-含常见面试题/1.png" alt>以上为Executor框架的继承体系结构</p><h1 id="线程池常见方法"><a href="#线程池常见方法" class="headerlink" title="线程池常见方法"></a>线程池常见方法</h1><h2 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a><font size="5">获取方法</font></h2><p>获取一个线程池，我们有两种方法：一是通过Executor框架中Executors的静态方法来获取线程池对象。还可以通过直接创建ThreadPoolExecutor对象来直接创建线程池。这两种方法的差异以及如何选择这两种方法在后面会介绍。这里先介绍使用Executors的静态方法获取线程池对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads)</span><br><span class="line">public static ExecutorService newSingleThreadExecutor()</span><br><span class="line">public static ExecutorService newCachedThreadPool()</span><br><span class="line">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</span><br></pre></td></tr></table></figure><ul><li><p><b>newFixedThreadPool(int nThreads)</b><br>该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变，当有一个新的任务提交时，若线程池中有空闲线程，则立即执行。若没有，则新的任务会被暂存在任务队列中，待有线程空闲时，就处理任务队列中的线程。</p></li><li><p><b>newSingleThreadExecutor()</b><br>该方法返回一个只有一个线程的线程池。若多余一个任务被提交，同样的，该任务会被保存到任务队列中，待到线程空闲时，按先进先出的顺序执行队列中的任务</p></li><li><p><b>newCachedThreadPool()</b><br>该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可复用，则会优先使用可复用线程。若所有线程均在工作，又有新任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池复用。</p></li><li><p><b>newScheduledThreadPool(int corePoolSize)</b><br>该方法返回一个ScheduledExecutorService对象，该对象可以在给定时间执行任务，如在固定时间后执行任务、或者周期性执行执行某个任务</p><h2 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a><font size="5">执行方法</font></h2><p>这里只介绍几个常用的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void execute(Runnable command)</span><br><span class="line">public Future&lt;?&gt; submit(Runnable task)</span><br></pre></td></tr></table></figure></li><li><p><b>execute()</b><br>该方法是定义在Exector接口中的方法，用于执行一个任务，接受一个Runnable接口，无返回值</p></li><li><p><b>submit()</b><br>该方法是ExecutorService接口中定义的方法，用于提交一个任务，接受一个Runnable接口，返回一个Future接口实现类，用于管理提交的任务。</p></li></ul><h1 id="线程池的内部实现"><a href="#线程池的内部实现" class="headerlink" title="线程池的内部实现"></a>线程池的内部实现</h1><p>对于核心的集合线程池，无论是newFixedThreadPool()方法、还是newCachedThreadPool()方法，虽然看起来创建的线程有着完全不同的功能特点，但其内部均使用了ThreadPoolExecutor类。下面给出这三个方法的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span><br><span class="line">    return new ThreadPoolExecutor(nThreads, </span><br><span class="line">                                  nThreads,</span><br><span class="line">                                  0L, </span><br><span class="line">                                  TimeUnit.MILLISECONDS,</span><br><span class="line">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span><br><span class="line">    return new FinalizableDelegatedExecutorService</span><br><span class="line">        (new ThreadPoolExecutor(1, </span><br><span class="line">                                1,</span><br><span class="line">                                0L,</span><br><span class="line">                                TimeUnit.MILLISECONDS,</span><br><span class="line">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span><br><span class="line">    return new ThreadPoolExecutor(0, </span><br><span class="line">                                  Integer.MAX_VALUE,</span><br><span class="line">                                  60L, </span><br><span class="line">                                  TimeUnit.SECONDS,</span><br><span class="line">                                  new SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述三个方法就是Executors类三个工厂方法的源码，通过原阿门可以看到，他们都是返回一个ThreadPoolExecutor对象，只是传递的参数不同。接下来就看看ThreadPoolExecutor类最重要的构造方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span><br><span class="line">                          int maximumPoolSize,</span><br><span class="line">                          long keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>该方法的参数如下：</p><ol><li>corePoolSize：指定线程池中线程的数量</li><li>maximumPoolSize：指定线程池中最大线程的数量</li><li>keepAliveTime：当线程池中线程数量超过corePoolSize时，多余空闲线程的存活时间，即超过corePoolSize的空闲线程，在多长时间内会被销毁</li><li>unit：keepAliveTime的时间单位</li><li>workQueue：任务队列，被提交但尚未被执行的任务</li><li>threadFactory：线程工厂，用于创建线程，一般使用默认的即可</li><li>handler：拒绝策略。当任务太多来不及处理时，如何拒绝任务</li></ol><p>对于以上7个参数，大部分都比较简单，特别说明以下workQueue和handler两个参数</p><ul><li>workQueue<br>是指被提交但尚未执行的任务队列，它是一个BlockingQueue接口的对象，仅用于存放Runnable接口对象。根据队列功能分类，在ThreadPoolExecutor类的构造方法可以使用以下几种BlockingQueue接口<ol><li>直接提交队列：该功能由SynchronousQueue对象提供SynchromousQueue是一个特殊的BlockingQueue。没有容量，每一个插入操作都要等待一个相应的删除操作，反之，每一个删除操作都要等待对应的插入操作。如果使用该队列，那么提交的任务不会被真实的保存，而是总将新任务提交给线程执行，如果没有空闲线程，则尝试创建新的线程，如果线程数量已经达到最大数量，则执行相应的拒绝策略。因此，在使用该队列时，通常要设置很大的maximumPoolSize。</li><li>有界的任务队列：有界的任务队列可以使用ArrayBlockingQueue类实现，ArrayBlockingQueue类的构造方法必须带一个容量参数，表示该队列的最大容量。使用有界的任务队列时，如有新的任务需要执行，如果线程池的实际线程数小于corePoolSize，则创建新的线程执行任务，若大于corePoolSize，则会将新的任务加入等待队列。若等待队列已满，无法加入，则在总线程数不大于maximumPoolSize的前提下，创建新的线程执行人物。若大于maximumPoolSize，则执行拒绝策略。可以发现，有界队列仅在任务队列装满时，才可能将线程数提升到corePoolSize以上。</li><li>无界的任务队列：无界的任务队列可以通过LinkedBlockingQueue类实现，与有界队列相比，除非资源耗尽，否则无界队列不存在入队失败的情况。当有新任务到来，系统线程数小于corePoolSize时，线程池创建新的线程执行任务，但当系统线程数达到corePoolSize后，就不会增加了。若后续仍有任务加入但是没有空闲线程，则任务直接进入队列等待。</li></ol></li></ul><p>解释了ThreadPoolExecutor的构造方法后，Executors的几个获取线程池的工厂方法获取的线程池参数也就很清楚了。</p><h2 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a><font size="5">拒绝策略</font></h2><p>ThreadPoolExecutor类的最后一个参数指定了拒绝策略。也就是当任务数量超过系统实际承载能力时，就要用到拒绝策略了。拒绝策略可以说是系统超负荷运行时的补救措施。JDK内置了四种拒绝策略</p><ol><li>AbortPolicy策略：该策略直接抛出异常，阻止系统正常工作</li><li>CallerRunsPolicy策略：只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。显然这样做不会真的丢弃任务，但是提交线程的性能极有可能会急剧下降。</li><li>DiscardOldestPolicy策略：该策略将丢弃最老的一个请求，也就是即将被执行的一个任务(队头)，并尝试再次提交当前任务</li><li>DiscardPolicy策略：该策略默默丢弃一个无法处理的任务，不予以任何处理。如果允许任务丢失，这是最好的方案。</li></ol><p>以上内置策略均实现了RejectedExecutionHandler接口，若以上策略仍无法实际满足需要，可以自己实现该接口，定义自己的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface RejectedExecutionHandler &#123;</span><br><span class="line"></span><br><span class="line">    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口只有一个抽象方法rejectedExecution，其中r为请求执行的任务，executor为当前线程池。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadPoolExecutorTest implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis() + &quot; : Thread ID: &quot; + Thread.currentThread().getId());</span><br><span class="line">        try &#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        ThreadPoolExecutorTest r = new ThreadPoolExecutorTest();</span><br><span class="line">        ExecutorService ex = new ThreadPoolExecutor(</span><br><span class="line">                5,</span><br><span class="line">                5,</span><br><span class="line">                0L,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                new LinkedBlockingQueue&lt;Runnable&gt;(10),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                new RejectedExecutionHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span><br><span class="line">                        System.out.println(&quot;任务提交过多&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">//                (runnable,executor)-&gt; &#123;</span><br><span class="line">//                    throw new RuntimeException(&quot;任务提交过多&quot;);</span><br><span class="line">//                &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            ex.execute(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果，使用ThreadPoolExecutor构造方法创建线程池时，自己实现了rejectedExecution接口，并重写了rejectedExecution方法(设置自己的拒绝策略)</p><h2 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a><font size="5">ThreadFactory</font></h2><p>介绍了这么多关于线程池的知识，你可能会问：那线程池中的线程从哪里来呢？之前我们说过，线程池的作用主要是为了线程复用，也就是避免线程的频繁创建和销毁，但是最开始的线程又是哪里来的呢？答案就是ThreadFactory。Factory是一个接口，他只有一个用来创建线程的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ThreadFactory &#123;</span><br><span class="line"></span><br><span class="line">    Thread newThread(Runnable r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程池需要新建线程时，就会调用该方法。自定义线程池可以帮助我们做不少事情。比如，我们可以跟踪线程究竟在何时创建了多少个线程，也可以自定义线程名称，组以及优先级等信息，甚至可以将所有线程设置为守护线程。</p><h1 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h1><p>1.<font color="red"><b>什么是线程池？为什么要使用线程池</b></font><br>线程池是一种多线程处理形式，处理过程将任务提交到线程池，任务的执行交由线程池来管理。创建和销毁线程的花销是比较大的，这些时间可能比线程执行的时间还要长。频繁的创建和销毁线程也会给GC造成很大的压力，延长GC停顿时间。为了避免频繁的创建和销毁线程，我们可以让线程复用，线程池正是实现了这个功能，当需要执行任务时，从线程池中取出一个线程，任务执行完毕后线程并不销毁而是返回给线程池用于执行下一个任务。</p><ol start="2"><li><p><font color="red"><b>几种常见的线程池及使用场景</b></font></p><ol><li>newSingleThreadExecutor:创建单个线程的线程池，它只会用唯一的线程来执行任务，并且保证公平性</li><li>newFixedThreadPool:创建定长线程池，可控制最大并发数，超出的线程会在队列中等待</li><li>newCachedThreadPool:创建一个可缓存的线程池，如果线程池长度超过处理需要，可回收灵活空闲线程，如果无可用线程，则会创建线程</li><li>newScheduledThreadPool:创建一个定长线程池，支持定时及周期性任务执行</li></ol></li><li><p><font color="red"><b>线程池中几种重要的参数</b></font></p><ol><li>corePoolSize:核心线程的数量，这些线程在空闲的时候也不会被回收</li><li>maxmumPoolSize:线程池最大可以容纳的线程数</li><li>keepAliveTime:除了核心线程外其他空闲线程最长可保留时间</li><li>unit:计算这个时间的单位</li><li>workQueue:任务队列，如果当前没有空闲线程，那么被提交的任务将被存储在队列中</li><li>ThreadFactory:创建线程的线程工厂，当线程池需要创建新的线程时，就会调用该对象的newThread()方法</li><li>handler:一种拒绝策略，当线程池超负荷运行时，可以拒绝执行某些任务</li></ol></li><li><p><font color="red"><b>线程池的拒绝策略</b></font><br>当任务不断地提交过来，而系统又处理不过来时，我们需要采取一定的拒绝策略来拒绝服务。前面介绍过JDK内置的四种拒绝策略以及自定义拒绝策略地方法，这里不做赘述。</p></li><li><p><font color="red"><b>线程池地关闭</b></font><br>关闭线程池可以调用shutDownNow()和shutdown()两个方法来实现。shutDownNow方法对正在执行的任务全部发出interrupt()中断请求，停止执行，对还未开始执行的任务全部取消，并且返回还没开始的任务列表；shutdown()方法调用后不再接受新任务，但也不会去强制终止已经提交或正在执行中的任务。但是要注意的是，shutDownNow方法并不一定会终结线程，因为它调用的是线程的interrupt()方法，线程是否终止由线程自己来决定。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java同步工具类</title>
      <link href="/2019/11/12/%E6%B5%85%E8%B0%88Java%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2019/11/12/%E6%B5%85%E8%B0%88Java%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>前面相继介绍了两种锁、volatile关键字和FutureTask几种Java并发工具，现在继续介绍几种Java的同步工具类，分别是：CountDownLatch(闭锁)、Semaphore(信号量)、Condition。</p><hr><a id="more"></a><h1 id="CountDownLatch–闭锁"><a href="#CountDownLatch–闭锁" class="headerlink" title="CountDownLatch–闭锁"></a>CountDownLatch–闭锁</h1><p>这是一个非常实用的多线程控制工具类，闭锁的作用相当于一扇门：在闭锁到达结束状态之前，这扇门是一直关闭的，并且没有任何线程能够通过，当到达结束状态时，这扇门会打开并允许所有的线程通过。闭锁到达结束状态之后，将不会再改变状态，因此这扇门将永远保持打开状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class CountDownLatchTest implements Runnable &#123;</span><br><span class="line">    public static CountDownLatch count = new CountDownLatch(10);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        int i=1;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                System.out.println(i++);</span><br><span class="line">                count.countDown();</span><br><span class="line">                Thread.sleep(100);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(&quot;任务结束&quot;);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        CountDownLatchTest r = new CountDownLatchTest();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        count.await();</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段测试代码中，让一个线程从1打印到10，创建一个闭锁对象，传递参数为count=10。在t线程中，每打印一个数，就调用一次countDown()方法，闭锁对象内部的count就-1；调用await()方法阻塞主线程，当闭锁内部count为0时，主线程线程被唤醒，中断t线程。</p><h1 id="Semaphore–信号量"><a href="#Semaphore–信号量" class="headerlink" title="Semaphore–信号量"></a>Semaphore–信号量</h1><p>从广义上来说，信号量是对锁的扩展，无论是内置锁还是显式锁，一次都只允许一个线程访问一个资源，而信号量却可以指定多个线程同时访问某个资源</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><font size="5">构造方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Semaphore(int permits)</span><br><span class="line">//第二个参数指定是否公平</span><br><span class="line">public Semaphore(int permits,boolean fair)</span><br></pre></td></tr></table></figure><p>在创建信号量对象时，必须指定信号量准入数，即同时能申请多少个许可。当每个线程每次只申请一个许可时，这就相当于制定了同时可以有多少个线程访问某一资源。</p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a><font size="5">主要方法</font></h2><p>让我们来看一看信号量有哪些主要方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void acquire()</span><br><span class="line">public void acquireUninterruptibly()</span><br><span class="line"></span><br><span class="line">public boolean tryAcquire()</span><br><span class="line">public boolean tryAcquire(long timeout, TimeUnit unit)</span><br><span class="line"></span><br><span class="line">public void release()</span><br></pre></td></tr></table></figure><ul><li><b>acquire()和acquireUninterruptibly()</b><br>获取一个准入许可。每获取一个，信号量内部维护的许可就少一个，当许可数为0时，当前线程无法获取，则线程会等待，知道有线程释放许可或当前线程被中断。当使用acquireUninterruptibly()时不会响应中断，因此线程如果无法获取许可，那么会一直等到由许可为止。</li><li><b>tryAcquire()和tryAcquire(long timeout, TimeUnit unit)</b><br>尝试获取一个许可，获取成功返回true，失败返回false。带参数的重载形式如果获取失败会等待一段时间，如果在超时时间内成功获取返回true，否则返回false。无参方法如果获取失败不会等待直接返回false。</li><li><b>release()</b><br>用于线程在访问资源后释放一个许可，是其他等待许可的线程可以进行资源访问。</li></ul><p>可以发现，该工具类的方法和显式锁的方法有一定的类似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class BoundedHashSet&lt;T&gt; &#123;</span><br><span class="line">    private final Set&lt;T&gt; set;</span><br><span class="line">    private final Semaphore sem;</span><br><span class="line"></span><br><span class="line">    public BoundedHashSet(int bound) &#123;</span><br><span class="line">        this.set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span><br><span class="line">        sem = new Semaphore(bound);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean add(T t) throws InterruptedException &#123;</span><br><span class="line">        sem.acquire();</span><br><span class="line">        boolean wasAdded = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            wasAdded = set.add(t);</span><br><span class="line">            return wasAdded;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (!wasAdded) &#123;</span><br><span class="line">                sem.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean remove(T t) &#123;</span><br><span class="line">        boolean wasremove = set.remove(t);</span><br><span class="line">        if (wasremove) &#123;</span><br><span class="line">            sem.release();</span><br><span class="line">        &#125;</span><br><span class="line">        return wasremove;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单地阻塞有界集合，底层使用synchronizedSet实现。当集合中的元素个数超过bound时，add()方法会被阻塞。</p><h1 id="Condition–显式锁的好搭档"><a href="#Condition–显式锁的好搭档" class="headerlink" title="Condition–显式锁的好搭档"></a>Condition–显式锁的好搭档</h1><p>Condition是与显式锁相关联的，通过Lock接口的new Condition()方法可以生成一个与当前重入锁绑定的Condition实例。</p><h2 id="Condition成员方法"><a href="#Condition成员方法" class="headerlink" title="Condition成员方法"></a><font size="5">Condition成员方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void await() throws InterruptedException</span><br><span class="line">void awaitUninterruptibly()</span><br><span class="line">void signal()</span><br><span class="line">void signalAll()</span><br><span class="line">boolean await(long time, TimeUnit unit) throws InterruptedException</span><br></pre></td></tr></table></figure><p>可以将这些方法类比于和synchronized绑定的wait()、notify()方法。</p><ul><li><b>await()方法和awaitUninterruptibly()</b><br>使得当前线程等待，同时释放锁，当其他线程使用相同的Condition调用signal()方法或者signalAll()方法时，线程会获得锁重新执行，和wait()方法类似，但是该方法可以响应中断,awaitUninterruptibly()方法和awit()方法作用一样但是无法响应中断。</li><li><b>signal()signalAll()</b><br>和notify()方法和notifiAll()方法类似，前者唤醒一个等待在该Condition对象上的线程，后者唤醒所有等待在该Condition对象上的线程。</li></ul><h2 id="测试Demo"><a href="#测试Demo" class="headerlink" title="测试Demo"></a><font size="5">测试Demo</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class ReentrantLockCondition implements Runnable &#123;</span><br><span class="line">    public static ReentrantLock lock = new ReentrantLock();</span><br><span class="line">    public static Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            //调用condition实例的awit()方法阻塞线程</span><br><span class="line">            condition.await();</span><br><span class="line">            System.out.println(&quot;Thread is going on&quot;);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        ReentrantLockCondition r1 = new ReentrantLockCondition();</span><br><span class="line">        Thread t1 = new Thread(r1);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        lock.lock();</span><br><span class="line">        //唤醒在该condition实例上阻塞的一个线程</span><br><span class="line">        condition.signal();</span><br><span class="line">        System.out.println(&quot;main&quot;);</span><br><span class="line"></span><br><span class="line">        lock.unlock();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中创建了一个与ReentrantLock对象绑定的Condition对象，有一点要注意：<font color="red"><b>wait()方法和notify()方法只能在synchronized同步区域由锁对象调用；此处也一样，Condition对象只能在和其绑定的lock锁区域内调用awit()和signa()方法。</b></font>在JDK的内部，显式锁和Condition对象被广泛使用，ArrayBlockingQueue类使用的即使这种方法实现线程安全(后面详细介绍该同步容器)</p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> CountDownLatch </tag>
            
            <tag> Semaphore </tag>
            
            <tag> CyclicBarrier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发工具之显式锁</title>
      <link href="/2019/11/12/Java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8B%E6%98%BE%E5%BC%8F%E9%94%81/"/>
      <url>/2019/11/12/Java%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8B%E6%98%BE%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>在JDK1.5后，增加了一种新的同步机制，那就是ReentrantLock。和synchronized不同，ReentrantLock并不是一种代替内置加锁的方式，而是当内置加锁机制不适用时，作为一种可选择的功能。Lock提供了一种无条件的、可轮询的、定时的以及可中断的锁获取操作。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们知道，由synchronized锁造成的线程阻塞是无法被中断的，并且在内置锁中，死锁是一个很严重的问题，唯一恢复程序的方式就是重新启动程序，而防止死锁的唯一方法就是在构造程序时避免出现不一致的顺序。但是ReentrantLock中的可定时可轮询机制提供了另一种选择：避免死锁的发生。我们将在稍后进行介绍。本文不涉及源码方面的知识，仅介绍ReentrantLock不同枷加锁方法的介绍和演示。</p><h1 id="ReentrantLock的使用"><a href="#ReentrantLock的使用" class="headerlink" title="ReentrantLock的使用"></a>ReentrantLock的使用</h1><p>下面将分别介绍ReentrantLock的一般加锁、可中断锁、定时锁和轮询锁几种不同的用法。</p><h2 id="一般加锁"><a href="#一般加锁" class="headerlink" title="一般加锁"></a><font size="5">一般加锁</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class NormalLock implements Runnable &#123;</span><br><span class="line">    public static ReentrantLock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //加锁，进入同步区域</span><br><span class="line">            lock.lock();</span><br><span class="line">            System.out.println(&quot;同步区域&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //退出同步区域</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        NormalLock r = new NormalLock();</span><br><span class="line">        new Thread(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用lock()方法，相当于进入了同步区，而调用unlock()方法，就相当于退出同步块。通俗的说，这两个方法之间的部分，就是一个synchronized同步块。但是要注意的是，当同步区域发生异常时，<font color="red"><b>ReentrantLock并不会像synchronized一样释放锁，因此对于这种同步方法，解锁操作一定要放在finally语句中，保证线程无论出现什么情况都能够释放锁。</b></font></p><h2 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a><font size="5">可中断锁</font></h2><p>对于synchronized来说，一个线程在等待锁，那么结果只有两种情况，要么获得锁继续执行，要么就保持等待，它是屏蔽中断的。而是用ReentrantLock，则提供另外一种可能，那就是可以响应中断。也就是说在等待锁的过程中，程序可以根据需要取消对锁的请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">public class IntLock implements Runnable &#123;</span><br><span class="line">    public static ReentrantLock lock1 = new ReentrantLock();</span><br><span class="line">    public static ReentrantLock lock2 = new ReentrantLock();</span><br><span class="line">    int lock;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过参数控制加锁顺序</span><br><span class="line">     * @param lock</span><br><span class="line">     */</span><br><span class="line">    public IntLock(int lock) &#123;</span><br><span class="line">        this.lock = lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">        </span><br><span class="line">            if (lock == 1) &#123;</span><br><span class="line">                lock1.lockInterruptibly();</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(500);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(&quot;lock1 Sleep Interrupted!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                lock2.lockInterruptibly();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            else &#123;</span><br><span class="line">                lock2.lockInterruptibly();</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(500);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    System.out.println(&quot;lock2 Sleep Interrupted&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                lock1.lockInterruptibly();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line">        catch (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getId()+&quot;: 响应中断&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //在finally语句中进行锁的释放</span><br><span class="line">        finally &#123;</span><br><span class="line">            //如果线程持有锁，返回true</span><br><span class="line">            if (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getId()+&quot; lock1 锁解锁&quot;);</span><br><span class="line">                lock1.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            if (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getId()+&quot; lock2 锁解锁&quot;);</span><br><span class="line">                lock2.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getId() + &quot;: 线程退出&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        IntLock r1 = new IntLock(1);</span><br><span class="line">        IntLock r2 = new IntLock(2);</span><br><span class="line"></span><br><span class="line">        Thread t1 = new Thread(r1);</span><br><span class="line">        Thread t2 = new Thread(r2);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(1000);</span><br><span class="line">        t2.interrupt();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===============================”</span><br><span class="line">Output：</span><br><span class="line">t2: 响应中断</span><br><span class="line">t2 lock2 锁解锁</span><br><span class="line">t2: 线程退出</span><br><span class="line">t1 lock1 锁解锁</span><br><span class="line">t1 lock2 锁解锁</span><br><span class="line">t1: 线程退出</span><br></pre></td></tr></table></figure><p>我们启动两个线程t1和t2</p><ul><li>t1先占用lock1，再占用lock2</li><li>t2先占用lock2，再占用lock1</li><li>然后统一使用lockInterruptibly()方法进行加锁</li></ul><p>在这种情况下，如果使用synchronized同步代码块，就造成了死锁，并且无法改变。但是在这里，我们使用<font color="red"><b>ReentrantLock的lockInterruptibly()方法，这是一个可以对中断进行响应的锁申请动作，在等待锁的过程中，可以响应中断。即如果收到中断请求，该方法会抛出异常的方式来进行响应。</b></font>在上述程序中，t1获取到了lock1后在等待lock2锁，而t2获得了lock2后在等待lock1，在主线程中调用了t2线程的中断方法，此时t2放弃对lock1锁的获取，中断执行任务，并在finally中释放了lock2锁；因此t1线程成功获取到lock2锁，最终成功执行完毕。因此虽然t1和t2都退出了，但是只有t1完成了任务，t2则放弃其任务直接退出。</p><h2 id="定时锁"><a href="#定时锁" class="headerlink" title="定时锁"></a><font size="5">定时锁</font></h2><p>除了等待外部通知以外，要避免死锁还有另外一种方法，那就是限时等待。通常，我们无法判断为什么一个线程迟迟拿不到锁，也许是因为死锁了，也许是因为产生了饥饿。如果给定一个等待时间，如果超时还无法获取到锁，让线程自动放弃，那么这么做对系统来说是有意义的。tryLock(long timeout,TimeUnit unit)方法可以做到这点。该方法给定一个等待时间，如果在给定时间内获得了锁，那么返回true；否则返回false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class TimeLock implements Runnable &#123;</span><br><span class="line">    public static ReentrantLock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (lock.tryLock(5, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                Thread.sleep(6000);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                System.out.println(&quot;get Lock failed&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TimeLock r1 = new TimeLock();</span><br><span class="line">        TimeLock r2 = new TimeLock();</span><br><span class="line"></span><br><span class="line">        new Thread(r1).start();</span><br><span class="line">        new Thread(r2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===============================”</span><br><span class="line">Output：</span><br><span class="line">get Lock failed</span><br></pre></td></tr></table></figure><p>在上述代码中，线程1先拿到了锁，进入后调用sleep阻塞6s中，而之后线程2尝试获取锁时，在5s内无法获取到锁，因为此时锁正由线程1持有。所以tryLock返回false，线程2放弃获取锁，不执行if语句中内容。</p><h2 id="轮询锁"><a href="#轮询锁" class="headerlink" title="轮询锁"></a><font size="5">轮询锁</font></h2><p>当使用不带参数的tryLock方法时，当前线程会尝试获得锁，如果获取成功则返回true。如果当前锁已经被占用，那么当前线程不会进行等待，而是立即返回false。相当于等待时间为0，和前面定时锁类似，不做赘述。</p><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a><font size="5">公平锁</font></h2><p>在ReentrantLock的构造方法中提供了两种公平性的选择：</p><ul><li>创建一个非公平锁(默认情况下)<br>在这种情况下，允许插队：当一个线程获取非公平锁时，如果在发出请求的同时该锁可用，那么这个线程可能跳过所有等待的线程并获取这把锁。</li><li>创建一个公平锁(传入true参数)<br>线程按照它们发出请求的顺序来获得锁</li></ul><p>在公平锁中，如果有另一个线程持有这个锁或者有其他线程在队列中等待这把锁，那么新发出的请求将被放在队列中，由于队列先进先出的特性，先发出请求的线程自然也就先入队，因而能够先获得锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 公平锁，可以避免饥饿问题</span><br><span class="line"> */</span><br><span class="line">public class FairLock implements Runnable &#123;</span><br><span class="line">    public static ReentrantLock lock = new ReentrantLock(true);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;: 获得锁&quot;);</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">            exec.execute(new FairLock());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===============================”</span><br><span class="line">Output：</span><br><span class="line">pool-1-thread-1: 获得锁</span><br><span class="line">pool-1-thread-2: 获得锁</span><br><span class="line">pool-1-thread-3: 获得锁</span><br><span class="line">pool-1-thread-1: 获得锁</span><br><span class="line">pool-1-thread-2: 获得锁</span><br><span class="line">pool-1-thread-3: 获得锁</span><br><span class="line">pool-1-thread-1: 获得锁</span><br><span class="line">pool-1-thread-2: 获得锁</span><br><span class="line">pool-1-thread-3: 获得锁</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>可以看到，三个线程交替获取锁。公平锁不会产生饥饿现象，但是要实现公平锁必然要求系统维护一个有序队列，因此实现公平锁的成本比较高，性能比较低下，非公平锁是抢占式的，线程不必加入等待队列就可以获得锁，不仅免去了构造节点并加入队列的繁琐操作，也节省了线程阻塞唤醒的开销。因此如果没有特别需求，默认使用非公平锁</p><h1 id="Synchronized和ReentrantLock"><a href="#Synchronized和ReentrantLock" class="headerlink" title="Synchronized和ReentrantLock"></a>Synchronized和ReentrantLock</h1><p>介绍了ReentrantLock之后，我们又多了一种加锁的方式，那我们又该如何选择这两种方式呢？ReentrantLock在加锁和内存上提供的语义和内置锁相同，此外它还提供了一些其他的功能。但是内置锁也有它的优点：使用起来简洁紧凑，并且不用显式的加锁和释放锁，当出现异常后会自动释放锁，而显式锁却每次使用后要在finally语句中释放锁以保证后续线程能够重新获取锁，这对于开发人员来说无疑是个隐形的坑。因此，<font color="red"><b>在一些内置锁无法满足需求的情况下，我们才去使用显式锁。这些需求包括：可定时的、可中断的与可轮询的获取操作、公平锁。否则还是应该优先使用synchronized内置锁。</b></font></p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> ReentrantLock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java多线程中断机制</title>
      <link href="/2019/11/11/%E6%B5%85%E8%B0%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/11/11/%E6%B5%85%E8%B0%88Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>在Java中，线程中断是一种重要的线程协作机制。从表面上理解，终端就是让目标线程停止执行的意思，实际上并非如此。对中断操作的正确理解是：它并不会真正的中断一个正在运行的线程，而只是发出中断请求，然后由线程在下一个合适的时刻中断自己。中断是实现取消的最好方式。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>严格的讲，线程中断并不会使线程立即退出，而是给线程发送一个通知，告知目标线程，有人希望你退出了。至于<font color="red"><b>目标线程接到通知后如何处理，则完全由目标线程自行决定！</b></font>理解这点很重要。</p><h1 id="中断方法"><a href="#中断方法" class="headerlink" title="中断方法"></a>中断方法</h1><p>有三个方法和中断有关，这三个方法看起来很像，很有可能会引起混淆和误用，稍后将会详细介绍这三个方法的作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//实例方法，中断线程</span><br><span class="line">public void Thread.interrupt()</span><br><span class="line">//实例方法，判断线程是否被中断</span><br><span class="line">public boolean Thread.isInterrupted()</span><br><span class="line">//静态方法，判断是否被中断并清除当前中断状态</span><br><span class="line">public static boolean Thread.interrupted()</span><br></pre></td></tr></table></figure><p>该方法是一个实例方法。它通知目标线程中断，也就是设置中断标志位。中断标志位表示当前线程已经被中断了。当发出中断请求时，该线程可通过不同的方式来响应中断</p><h2 id="中断方式一"><a href="#中断方式一" class="headerlink" title="中断方式一"></a><font size="5">中断方式一</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class RunnableImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;Interrupted&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InterruptedTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        RunnableImpl r = new RunnableImpl();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码我们可以发现，线程可以通过判断当前中断状态来决定是否继续循环执行。</p><h2 id="中断方式二"><a href="#中断方式二" class="headerlink" title="中断方式二"></a><font size="5">中断方式二</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class RunnableImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">                System.out.println(&quot;running......&quot;);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().isInterrupted());</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InterruptedTest &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        RunnableImpl r = new RunnableImpl();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(5000);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，当线程调用sleep阻塞时，如果收到了中断请求，就会通过抛出异常的方式来处理中断请求。但是要注意的是，在抛出异常后，现成的中断请求会被复位，也就是说，如果在上述代码的catch语句中没有break语句的话，线程在处理完中断请求(执行catch语句后)将会继续循环下去。实际上break也是处理中断请求的一部分。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><font size="5">小结</font></h2><ol><li>在线程调用wait、sleep、join等方法(显式声明InterruptedException的方法)陷入阻塞时，会以异常的方式来处理外部的中断请求，相应的处理中断请求的逻辑代码在catch语句中编写。但是要注意的是，当抛出异常后，线程的中断请求相当于得到了处理，此时中断状态就会复位。如果想维持中断状态，应该在catch中再次调用interrupt()方法将中断状态复位。</li><li>可以结合isInterrupted()方法和interrupted()方法判断中断标志位来处理中断请求，但是要注意的是使用静态方法interrupted判断中断标志位时，判断过后会将中断标志位复位(类似于异常处理)。</li><li>如果线程没有处理中断请求的逻辑代码，那么中断请求并不能中断请求，只是改变了线程的中断标志位，线程仍将继续运行下去。</li></ol><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><font size="5">测试代码</font></h2><p>下面来写几段测试代码来验证上面的小结</p><ol><li><font color="red"><b>中断请求并不总会中断线程</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class RunnableImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">           Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InterruptedTest &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        RunnableImpl r = new RunnableImpl();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上代码在调用线程的中断方法interrupt()时，由于线程的run方法并没有处理中断的逻辑代码，既没有阻塞方法异常处理，也没有使用isInterrupted()和interrupted()方法处理，所以此时中断请求相当于被线程屏蔽了，线程并不会停止，而是会无限期的执行下去。</p><ol start="2"><li><font color="red"><b>静态方法interrupted自动恢复中断标志位</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class RunnableImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (!Thread.interrupted()) &#123;</span><br><span class="line">           Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;线程使用interrupted()方法响应中断&quot;);</span><br><span class="line">        System.out.println(&quot;此时中断标志位:&quot;+Thread.interrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InterruptedTest &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        RunnableImpl r = new RunnableImpl();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=========================“</span><br><span class="line">Output：</span><br><span class="line">线程使用interrupted()方法响应中断</span><br><span class="line">此时中断标志位:false</span><br></pre></td></tr></table></figure></li></ol><p>我们可以看到，t线程中使用Thread的静态方法interrupted()来响应中断，第一次调用该方法时，返回true，因此退出while循环，但当我们第二次再次调用该方法时，却返回false。这说明Thread.interrupted()在第一次判断中断标志位后将中断标志位恢复了。</p><ol start="3"><li><font color="red"><b>使用异常处理中断后同样会将会将中断标志位恢复</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class RunnableImpl implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(&quot;线程被中断&quot;);</span><br><span class="line">                System.out.println(&quot;此时中断标志位:&quot;+Thread.interrupted());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InterruptedTest &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        RunnableImpl r = new RunnableImpl();</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        t.start();</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=========================“</span><br><span class="line">Output：</span><br><span class="line">线程被中断</span><br><span class="line">此时中断标志位:false</span><br></pre></td></tr></table></figure></li></ol><p>通过输出可以很清楚的看到，在线程阻塞时，通过异常处理中断请求。在进入catch块中的语句后，调用interrupted()方法检查线程的中断状态，返回false。这说明当使用异常处理中断请求时，进入catch语句块后，相当于已经响应了中断请求，重新将线程的中断标志位恢复。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于中断线程，通俗的说就是调用interruptt()方法将线程的中断标志位置为true(可以这么理解)，但是线程是否处理该终端是由线程自己决定，或者说是由编写线程的人决定。所谓的中断仅仅是改变线程的中断标志位而已，线程最终是否停止执行由线程自身的逻辑代码决定。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 中断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解Runnable与Callable</title>
      <link href="/2019/11/11/%E8%AF%A6%E8%A7%A3Runnable%E4%B8%8ECallable/"/>
      <url>/2019/11/11/%E8%AF%A6%E8%A7%A3Runnable%E4%B8%8ECallable/</url>
      
        <content type="html"><![CDATA[<p>在Java中，要想创建一个线程任务，有三种方式，分别是：</p><ol><li>继承Thread类，重写run()方法</li><li>实现Runnable接口</li><li>实现Callable接口(后面详细说到)<hr><a id="more"></a></li></ol><h1 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h1><p>如果我们选择该方法创建一个线程任务，那我们需要实现Runnable接口，重写run()方法。这样做只是创建了一个任务，那要怎样才能启动一个线程呢？具体有两种方法</p><h2 id="构造Thread对象"><a href="#构造Thread对象" class="headerlink" title="构造Thread对象"></a><font size="5">构造Thread对象</font></h2><p>将实现类对象作为参数构造一个Thread对象，并调用Thread对象的start方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//实现Runnable接口</span><br><span class="line">public class RunnableTest implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;run()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建实现类对象</span><br><span class="line">        RunnableTest r=new RunnableTest();</span><br><span class="line">        //作为参数构造Thread对象</span><br><span class="line">        Thread t = new Thread(r);</span><br><span class="line">        //调用start方法开启一个线程</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造FutureTask对象"><a href="#构造FutureTask对象" class="headerlink" title="构造FutureTask对象"></a><font size="5">构造FutureTask对象</font></h2><p>将实现类对象作为参数构造一个TutureTask对象，再将FutureTask对象作为参数构造一个Thread对象，这样我们就能通过FutureTask来管理任务。前面讲过FutureTask实现了Runnable接口，因此可以被当作Runnable对象来使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//实现Runnable接口</span><br><span class="line">public class RunnableTest implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;run()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建实现类对象</span><br><span class="line">        RunnableTest r=new RunnableTest();</span><br><span class="line">        //作为参数构造FutureTask对象</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(r, &quot;hello&quot;);</span><br><span class="line">        //构造Thread对象</span><br><span class="line">        Thread t = new Thread(futureTask);</span><br><span class="line">        //调用start方法开启一个线程</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过前面的学习我们知道，FutureTask只有两个构造方法，一个是接收Callable对象，一个是接收Runnable对象和执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//接收Callable对象</span><br><span class="line">public FutureTask(Callable&lt;V&gt; callable) &#123;</span><br><span class="line">    if (callable == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    this.callable = callable;</span><br><span class="line">    this.state = NEW;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//接收Runnable对象</span><br><span class="line"> public FutureTask(Runnable runnable, V result) &#123;</span><br><span class="line">    this.callable = Executors.callable(runnable, result);</span><br><span class="line">    this.state = NEW;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现，当我们使用Runnable构造方法时，该方法会将Runnable最终包装成一个Callable对象并赋值给成员属性callable，那么Runnable对象是怎样转换成Callable对象的呢？我们继续看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">查看Executors类的callable方法</span><br><span class="line">public static &lt;T&gt; Callable&lt;T&gt; callable(Runnable task, T result) &#123;</span><br><span class="line">    if (task == null)</span><br><span class="line">        throw new NullPointerException();</span><br><span class="line">    return new RunnableAdapter&lt;T&gt;(task, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”====================================“</span><br><span class="line">//Executors的私有嵌套类RunnableAdapter实现了Callable接口</span><br><span class="line">private static final class RunnableAdapter&lt;T&gt; implements Callable&lt;T&gt; &#123;</span><br><span class="line">    private final Runnable task;</span><br><span class="line">    private final T result;</span><br><span class="line">    RunnableAdapter(Runnable task, T result) &#123;</span><br><span class="line">        this.task = task;</span><br><span class="line">        this.result = result;</span><br><span class="line">    &#125;</span><br><span class="line">    //重写call方法</span><br><span class="line">    public T call() &#123;</span><br><span class="line">        task.run();</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return super.toString() + &quot;[Wrapped task = &quot; + task + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上源码我们发现，通过调用Executors的静态方法callable，返回Executors的私有嵌套类对象，该对象是一个适配器，它实现了Callable接口，将run()方法和返回值封装在call()方法里面，从而将Runnable对象转换成Callable对象。</p><h2 id="通过线程池来执行"><a href="#通过线程池来执行" class="headerlink" title="通过线程池来执行"></a><font size="5">通过线程池来执行</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//实现Runnable接口</span><br><span class="line">public class RunnableTest implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;run()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建实现类对象</span><br><span class="line">        RunnableTest r=new RunnableTest();</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        </span><br><span class="line">        exec.execute(r);</span><br><span class="line">      //  Future&lt;?&gt; submit = exec.submit(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过线程池可以使用两种方式，一种是调用execute方法直接执行，另一种是调用submit方法，该方法会返回一个FutureTask对象，可以用来管理任务。</p><h1 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h1><p>当你需要任务执行后的结果时候，可以使用这种方式。因为Thread构造方法不接受Callable对象，因此有两种方式开启线程</p><h2 id="构造FutureTask对象-1"><a href="#构造FutureTask对象-1" class="headerlink" title="构造FutureTask对象"></a><font size="5">构造FutureTask对象</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer call()  &#123;</span><br><span class="line">        System.out.println(&quot;call()&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        CallableTest cal = new CallableTest();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(cal);</span><br><span class="line">        Thread t = new Thread(futureTask);</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(&quot;线程执行后的结果：&quot;+futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将Callable包装成为FutureTask对象，因为该对象实现了Runnable接口，因此可以被用来构造Thread对象，并且FutureTask对象还能够用来管理任务，例如获取执行结果、取消线程等操作。</p><h2 id="通过线程池来执行-1"><a href="#通过线程池来执行-1" class="headerlink" title="通过线程池来执行"></a><font size="5">通过线程池来执行</font></h2><p>和Runnable一样的，该方式也可以通过线程池来执行，不过这时候就不能使用execute方法，因为该方法无法获取管理任务的FutureTask对象，也就无法获取任务执行后的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer call()  &#123;</span><br><span class="line">        System.out.println(&quot;call()&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        CallableTest cal = new CallableTest();</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(cal);</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        Future&lt;Integer&gt; submit = exec.submit(cal);</span><br><span class="line">        //也可以使用execute方法，不过会比较麻烦</span><br><span class="line">        //并且没有任何其他作用</span><br><span class="line">        //exec.execute(futureTask);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到这里Runnable和Callable方法就介绍完了，结合前面FutureTask的源码学习我们不难发现，<font color="red"><b>当我们实现Callable来执行任务的时候，最终执行的仍然是run()方法，只不过FutureTask通过重写run()，在run()方法中调用call()方法，并将call方法的返回值保存起来，当调用get()方法时将结果返回即可。</b></font>你学会了么？</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Runnable </tag>
            
            <tag> Callable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析FutureTask</title>
      <link href="/2019/11/11/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90FutureTask/"/>
      <url>/2019/11/11/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90FutureTask/</url>
      
        <content type="html"><![CDATA[<p>Future模式可以这样来描述：我有一个任务提交给了Future，Future可以替我完成这个任务，期间我自己可以去做任何想做的事情。一段时间后，我可以从Future那取得结果。Future接口提供方法来检测任务是否被执行完，等待任务执行完获得结果，也可以设置任务超时时间。接下来，将依次介绍Runnable接口、Callable接口、Future接口和它的实现类FutureTask。</p><hr><a id="more"></a><h1 id="Runnable接口"><a href="#Runnable接口" class="headerlink" title="Runnable接口"></a>Runnable接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public interface Runnable &#123;</span><br><span class="line">    /**</span><br><span class="line">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span><br><span class="line">     * to create a thread, starting the thread causes the object&apos;s</span><br><span class="line">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span><br><span class="line">     * thread.</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span><br><span class="line">     * take any action whatsoever.</span><br><span class="line">     *</span><br><span class="line">     * @see     java.lang.Thread#run()</span><br><span class="line">     */</span><br><span class="line"> </span><br><span class="line">    public abstract void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口很简单，只有一个抽象方法run()</p><h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface Callable&lt;V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Computes a result, or throws an exception if unable to do so.</span><br><span class="line">     *</span><br><span class="line">     * @return computed result</span><br><span class="line">     * @throws Exception if unable to compute a result</span><br><span class="line">     */</span><br><span class="line">    V call() throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，Callable接口也只有一个抽象方法call()，但是和run()方法不同的是，call()方法有异常声明</p><h1 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface Future&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    boolean cancel(boolean mayInterruptIfRunning);</span><br><span class="line"></span><br><span class="line">    boolean isCancelled();</span><br><span class="line"></span><br><span class="line">    boolean isDone();</span><br><span class="line"></span><br><span class="line">    V get() throws InterruptedException, ExecutionException;</span><br><span class="line"></span><br><span class="line">    V get(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cancel"><a href="#cancel" class="headerlink" title="cancel()"></a><font size="5">cancel()</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean cancel(boolean mayInterruptIfRunning);</span><br></pre></td></tr></table></figure><p>试图取消对此任务的执行。如果任务已完成、或已取消，或者由于某些其他原因而无法取消，则此尝试将失败。当调用 cancel 时，如果调用成功，而此任务尚未启动，则此任务将永不运行。如果任务已经启动，则 mayInterruptIfRunning 参数确定是否应该以试图停止任务的方式来中断执行此任务的线程。 </p><ul><li>参数：<br>mayInterruptIfRunning - 如果应该中断执行此任务的线程，则为 true；否则允许正在运行的任务运行完成。 </li><li>返回：<br>如果无法取消任务，则返回 false，这通常是由于它已经正常完成；否则返回 true。</li></ul><h2 id="isCancelled"><a href="#isCancelled" class="headerlink" title="isCancelled()"></a><font size="5">isCancelled()</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean isCancelled();</span><br></pre></td></tr></table></figure><p>判断任务是否已经取消，如果任务正常完成前将其取消，返回true。</p><h2 id="isDone"><a href="#isDone" class="headerlink" title="isDone()"></a><font size="5">isDone()</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean isDone();</span><br></pre></td></tr></table></figure><p>任务是否已经完成。需要注意的是，如果任务正常终止、异常或者被取消，都将返回true</p><h2 id="get"><a href="#get" class="headerlink" title="get()"></a><font size="5">get()</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V get() throws InterruptedException, ExecutionException;</span><br></pre></td></tr></table></figure><p>等待任务执行结束，获取执行结果。如果如果任务已完成，则get()方法会返回一个结果或抛出异常；如果任务没有完成，那么get()方法将阻塞并直到任务完成。</p><h2 id="get-long-timeout-TimeUnit-unit"><a href="#get-long-timeout-TimeUnit-unit" class="headerlink" title="get(long timeout, TimeUnit unit)"></a><font size="5">get(long timeout, TimeUnit unit)</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">V get(long timeout, TimeUnit unit)</span><br><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span><br></pre></td></tr></table></figure><p>和无参get()不同的是，该方法给定一个最多等待时间，如果在给定时间内任务仍没有完成，则抛出TimeoutException异常。</p><h1 id="RunnableFuture接口"><a href="#RunnableFuture接口" class="headerlink" title="RunnableFuture接口"></a>RunnableFuture接口</h1><p>在介绍FutureTask之前，最后再介绍一个接口，这个接口非常简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Sets this Future to the result of its computation</span><br><span class="line">     * unless it has been cancelled.</span><br><span class="line">     */</span><br><span class="line">    void run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，该接口同时继承了Runnable接口和Future接口，因此也继承了两个接口所有的方法。</p><h1 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h1><p>在做了这么多介绍之后，现在我们就来看一看FutureTask类吧</p><h2 id="实现的接口"><a href="#实现的接口" class="headerlink" title="实现的接口"></a><font size="5">实现的接口</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class FutureTask&lt;V&gt; implements RunnableFuture&lt;V&gt;</span><br></pre></td></tr></table></figure><p>通过源码可以发现，FutureTask并不是直接实现Future接口和Runnable接口，而是通过实现RunnableFuture接口来间接实现它们的方法。对于FutureTask类，在这里只介绍一些字段和常用的方法，并不会对所有的字段和方法进行介绍，有兴趣可以查看源码进行学习。</p><h2 id="类的一些字段"><a href="#类的一些字段" class="headerlink" title="类的一些字段"></a><font size="5">类的一些字段</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//标识当前线程的状态</span><br><span class="line">private volatile int state;</span><br><span class="line"></span><br><span class="line">private static final int NEW       = 0;</span><br><span class="line"></span><br><span class="line">private static final int COMPLETING   = 1;</span><br><span class="line"></span><br><span class="line">private static final int NORMAL       = 2;</span><br><span class="line"></span><br><span class="line">private static final int EXCEPTIONAL  = 3;</span><br><span class="line"></span><br><span class="line">private static final int CANCELLED    = 4;</span><br><span class="line"></span><br><span class="line">private static final int INTERRUPTING = 5;</span><br><span class="line"></span><br><span class="line">private static final int INTERRUPTED  = 6;</span><br><span class="line"></span><br><span class="line">//被提交的任务</span><br><span class="line">private Callable&lt;V&gt; callable;</span><br><span class="line">//任务执行结果或任务异常</span><br><span class="line">private Object outcome;</span><br><span class="line">//执行任务的线程</span><br><span class="line">private volatile Thread runner;</span><br></pre></td></tr></table></figure><ul><li><b>NEW</b><br>表示刚刚创建的线程(调用start方法后)或者还没有执行完的任务</li><li><b>COMPLETING</b><br>任务将要执行完毕(正常完毕或发生异常完毕)，但是还没有将结果存储到outcome中，是一个中间状态</li><li><b>NORMAL</b><br>任务正常执行结束，已经将结果存储到outcome中</li><li><b>EXCEPTIONAL</b><br>任务异常，异常信息已经存储到outcome中</li><li><b>CANCELLED</b><br>任务取消，任务在创建之后，执行结束之前被取消，但是不要求中断正在执行的线程，也就是调用了cancel(false)，任务就是CANCELLED状态</li><li><b>INTERRUPTING</b><br>任务已中断，任务在创建之后，执行结束之前被取消，并要求调用interrupt方法，即调用cancel(true)方法，这是一个中间状态，此时还没有调用线程的中断方法</li><li><b>INTERRUPTED</b><br>已经调用了线程的interrupt方法</li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><font size="5">构造方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public FutureTask(Callable&lt;V&gt; callable) &#123;</span><br><span class="line">if (callable == null)</span><br><span class="line">throw new NullPointerException();</span><br><span class="line">this.callable = callable;</span><br><span class="line">this.state = NEW;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public FutureTask(Runnable runnable, V result) &#123;</span><br><span class="line">//将Runnable对象包装为callable对象，下一篇会详细说</span><br><span class="line">this.callable = Executors.callable(runnable, result);</span><br><span class="line">this.state = NEW;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过构造方法我们可以看到，FutureTask既可以接收Runnable对象，也可以接受Callable对象，不过在接收到Runnable对象时，需要将该对象包装为一个Callable对象。并且最后将任务状态设置为NEW。对于如何将Runnable对象包装成为Callable对象在下一篇博客会详细介绍。</p><h2 id="run-方法"><a href="#run-方法" class="headerlink" title="run()方法"></a><font size="5">run()方法</font></h2><p>在多线程中，run()方法总是任何的核心，是执行业务逻辑的部分，因此我们先介绍run方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">//检查当前任务状态是否为NEW并且runner是否被赋值</span><br><span class="line">//如果没有直接返回，这也就导致了如果在任务开始前(start方法之前)</span><br><span class="line">    //调用了cancel方法，后续调用start时任务将不会再执行</span><br><span class="line">if (state != NEW ||</span><br><span class="line">!RUNNER.compareAndSet(this, null, Thread.currentThread()))</span><br><span class="line">return;</span><br><span class="line">try &#123;</span><br><span class="line">Callable&lt;V&gt; c = callable;</span><br><span class="line">//双重检查</span><br><span class="line">if (c != null &amp;&amp; state == NEW) &#123;</span><br><span class="line">V result;</span><br><span class="line">boolean ran;</span><br><span class="line">try &#123;</span><br><span class="line">//调用call方法获取方法返回值</span><br><span class="line">//将ran标志位设置为true</span><br><span class="line">result = c.call();</span><br><span class="line">ran = true;</span><br><span class="line">&#125; catch (Throwable ex) &#123;</span><br><span class="line">//如果业务逻辑发生异常</span><br><span class="line">//将执行结果置位null，标志位置为false</span><br><span class="line">//调用setException方法(稍后介绍)</span><br><span class="line">result = null;</span><br><span class="line">ran = false;</span><br><span class="line">setException(ex);</span><br><span class="line">&#125;</span><br><span class="line">//如果标志位位true，说明任务正常结束，调用set方法</span><br><span class="line">if (ran)</span><br><span class="line">set(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">//重置runner，一些收尾工作</span><br><span class="line">runner = null;</span><br><span class="line">int s = state;</span><br><span class="line">if (s &gt;= INTERRUPTING)</span><br><span class="line">handlePossibleCancellationInterrupt(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>run()方法的逻辑介绍的在注释中已经介绍的很明白了，这里就不赘述。但我们应该明白，虽然FutureTask构造方法接收Callable对象，但实际上执行的仍是run()方法，在run方法中调用Callable对象的call方法。</p><h2 id="set-V-v-方法"><a href="#set-V-v-方法" class="headerlink" title="set(V v)方法"></a><font size="5">set(V v)方法</font></h2><p>前面我们说过，当run方法正常结束，或者是任务正常执行完毕的时候，会调用set方法，并将call方法的返回值(也是我们想要通过get方法获取的执行结果)传递进去。让我们看一看set方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected void set(V v) &#123;</span><br><span class="line">//状态从NEW-&gt;COMPLETING，在任务执行完毕但是</span><br><span class="line">    //还没有将执行结果赋值给outcome之前，是一个中间状态</span><br><span class="line">if (STATE.compareAndSet(this, NEW, COMPLETING)) &#123;</span><br><span class="line">//将任务执行结果赋值给outcome属性</span><br><span class="line">outcome = v;</span><br><span class="line">//状态从COMPLETING-&gt;NORMAL，即任务正常结束</span><br><span class="line">STATE.setRelease(this, NORMAL); // final state</span><br><span class="line">finishCompletion();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="setException-ex-方法"><a href="#setException-ex-方法" class="headerlink" title="setException(ex)方法"></a><font size="5">setException(ex)方法</font></h2><p>当任务执行异常时，将调用setException方法，并将出现的异常作为参数传递进去，现在我们来看一看setException方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">protected void setException(Throwable t) &#123;</span><br><span class="line">//状态从NEW-&gt;COMPLETING</span><br><span class="line">if (STATE.compareAndSet(this, NEW, COMPLETING)) &#123;</span><br><span class="line">//将任务抛出异常赋值给outcome属性</span><br><span class="line">outcome = t;</span><br><span class="line">//COMPLETING-&gt;EXCEPTIONAL，即任务异常</span><br><span class="line">STATE.setRelease(this, EXCEPTIONAL); // final state</span><br><span class="line">finishCompletion();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此run方法已经全部介绍完了，接下来让我们看看get方法，看看Future是如何通过get方法来获取返回值的吧</p><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a><font size="5">get()方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public V get() throws InterruptedException, ExecutionException &#123;</span><br><span class="line">int s = state;</span><br><span class="line">//如果任务没有结束，调用awaitDone方法等待</span><br><span class="line">//这也是get方法一直阻塞直到回去结果的原因</span><br><span class="line">if (s &lt;= COMPLETING)</span><br><span class="line">s = awaitDone(false, 0L);</span><br><span class="line">//当任务结束后，调用report()方法</span><br><span class="line">return report(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">private V report(int s) throws ExecutionException &#123;</span><br><span class="line">Object x = outcome;</span><br><span class="line">//如果任务正常结束，返回执行结果</span><br><span class="line">if (s == NORMAL)</span><br><span class="line">return (V)x;</span><br><span class="line">//如果任务被取消或者被中断，抛出CancellationException异常</span><br><span class="line">if (s &gt;= CANCELLED)</span><br><span class="line">throw new CancellationException();</span><br><span class="line">//否则说明在任务执行过程中发生异常，抛出任务</span><br><span class="line">//执行过程中产生的异常</span><br><span class="line">throw new ExecutionException((Throwable)x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面的源码，我们可以发现，线程执行run方法，在run方法中调用Callable对象的call方法并保存call方法的返回结果(任务执行结果)到outcome属性中，最后调用get()方法返回该属性，这样就能够获取任务的返回值。</p><h2 id="get-long-timeout-TimeUnit-unit-方法"><a href="#get-long-timeout-TimeUnit-unit-方法" class="headerlink" title="get(long timeout, TimeUnit unit)方法"></a><font size="5">get(long timeout, TimeUnit unit)方法</font></h2><p>接着介绍一下get方法的重载形式，设置等待时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public V get(long timeout, TimeUnit unit)</span><br><span class="line">throws InterruptedException, ExecutionException, TimeoutException &#123;</span><br><span class="line">if (unit == null)</span><br><span class="line">throw new NullPointerException();</span><br><span class="line">int s = state;</span><br><span class="line">//如果在指定时间内任务没有完成，抛出TimeoutException异常</span><br><span class="line">    //如果任务完成但是get指定的等待时间还没到，此时直接返回执行结果</span><br><span class="line">if (s &lt;= COMPLETING &amp;&amp;</span><br><span class="line">(s = awaitDone(true, unit.toNanos(timeout))) &lt;= COMPLETING)</span><br><span class="line">throw new TimeoutException();</span><br><span class="line">return report(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来一段简单地测试代码验证一下设置等待时间的get()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Cal implements Callable&lt;Integer&gt;&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;正在计算&quot;);</span><br><span class="line">//在任务中睡眠2s</span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class GetTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new Cal());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        try &#123;</span><br><span class="line"></span><br><span class="line">//将超时时间设置为3s</span><br><span class="line">            System.out.println(&quot;任务执行结果：&quot;+task.get(3, TimeUnit.SECONDS));</span><br><span class="line">//将超时时间设置为1s</span><br><span class="line">            //System.out.println(&quot;任务执行结果：&quot;+task.get(1, TimeUnit.SECONDS));</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (TimeoutException e) &#123;</span><br><span class="line">            System.out.println(&quot;超时了&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在call方法中睡眠2s，在主线程中使用get()方法获取任务执行结果(可以复制上述代码运行验证)</p><ol><li>当我们将超时时间设置为3s时，能够获取任务执行结果，并在任务结束后立即返回。</li><li>当我们将超时时间设置为1s时，并不能在1s内获取任务结果，因为在任务中我们使其睡眠了2s，因此将会抛出TimeoutException异常。</li></ol><h2 id="cancel-方法"><a href="#cancel-方法" class="headerlink" title="cancel()方法"></a><font size="5">cancel()方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public boolean cancel(boolean mayInterruptIfRunning) &#123;</span><br><span class="line">    //判断当前任务状态是否为NEW，如果不为NEW，说明任务已经结束或被取消，返回false</span><br><span class="line">    //state==NEW时，判断mayInterruptIfRunning，如果为true，说明要中断任务的执行，NEW-&gt;INTERRUPTING</span><br><span class="line">    //如果为false，不需要中断，将状态改为CANCELLED</span><br><span class="line">    if (!(state == NEW &amp;&amp; STATE.compareAndSet</span><br><span class="line">          (this, NEW, mayInterruptIfRunning ? INTERRUPTING : CANCELLED)))</span><br><span class="line">        return false;</span><br><span class="line">    try &#123;    </span><br><span class="line">        //如果参数为true，那么调用当前线程的interrupt()方法</span><br><span class="line">        if (mayInterruptIfRunning) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //获取当前线程对象，调用interrupt方法中断线程</span><br><span class="line">                Thread t = runner;</span><br><span class="line">                if (t != null)</span><br><span class="line">                    t.interrupt();</span><br><span class="line">            &#125; finally &#123; </span><br><span class="line">                /将任务状态改为中断状态</span><br><span class="line">                STATE.setRelease(this, INTERRUPTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来分析以下该方法：</p><ol><li>首先，对于前面介绍的线程状态，如果你忘了，要回头看一遍</li><li>判断state，保证state==NEW才能继续后面的操作，如果state!=NEW，通过前面的状态可以知道，此时线程要么执行完毕(正常完毕或异常完毕)，要么已经被取消，此时返回false。</li><li>如果state==NEW且mayInterruptIfRunning==true，此时任务状态NEW-&gt;INTERRUPTING，然后获取线程对象调用interrupt方法中断线程执行，任务状态INTERRUPTING-&gt;INTERRUPTED。</li><li>如果state==NEW且mayInterruptIfRunning==false，此时将线程状态改变为CANCELLED，但是并不会中断正在执行的线程。</li></ol><p>我们用一个图来说明：<br><img src="/2019/11/11/深入剖析FutureTask/1.jpg" alt>如图我们可以得出</p><ol><li>如果任务没有开始(没有调用start方法)，调用了cancel()方法，无论传递什么参数，该方法返回true，并且后面调用start方法执行任务时该线程不再执行</li><li>如果在任务结束后调用cancel()方法，无论传递什么参数，都返回false</li><li>如果在任务开始之后结束之前调用cancel()方法，cancel()方法返回true，线程是否中断分情况讨论<ol><li>传递参数为true，调用线程的interrupt方法设置线程中断标志位。</li><li>传递参数为false，不会对线程产生影响。</li></ol></li></ol><h2 id="cancel-方法测试代码"><a href="#cancel-方法测试代码" class="headerlink" title="cancel()方法测试代码"></a><font size="5">cancel()方法测试代码</font></h2><p>对于cancel()方法，接下来针对不同的情况进行测试</p><ol><li><font color="red"><b>任务开始前调用cancel()方法</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            System.out.println(&quot;hello&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        Thread.sleep(100);</span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(false));</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=============================&quot;</span><br><span class="line">Output:</span><br><span class="line">cancel()：true</span><br></pre></td></tr></table></figure></li></ol><p>上述代码中，在启动线程之前(调用start方法之前)调用了cancel()方法，并传递false进去。可以看到该方法返回true；在调用cancel()方法后启动线程，可以看到并不会有任何输出，也就是说run()方法并没有执行。(这里传递的是false，传递true是一样的)</p><ol start="2"><li><font color="red"><b>任务结束后调用cancel()方法</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() &#123;</span><br><span class="line">        System.out.println(&quot;执行线程的call()方法&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        Thread.sleep(100);</span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(false));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=============================&quot;</span><br><span class="line">Output:</span><br><span class="line">执行线程的call()方法</span><br><span class="line">cancel()：false</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，在线程结束后调用cancel()方法，这里传递的是false(传递true也是一样的)，cancel方法返回false，线程不受到影响。</p><ol start="3"><li><font color="red"><b>任务执行过程中调用cancel()方法并传递true</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() &#123;</span><br><span class="line">        while (!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">            System.out.println(&quot;执行线程的call()方法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        Thread.sleep(100);</span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(true));</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=============================&quot;</span><br><span class="line">Output:</span><br><span class="line">......</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">cancel()：true</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.CancellationException</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:121)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)</span><br><span class="line">at twentyoneth.runnableAndcallable.CallableTest.main(CallableTest.java:22)</span><br></pre></td></tr></table></figure></li></ol><p>在这段代码中，在线程执行过程中调用cancel()方法并传递true参数，可以看到cancel()方法返回true，任务被中断，并且抛出异常。(但是要注意，在这种情况下cancel()方法并不总能中断线程，后面会说到)</p><ol start="4"><li><font color="red"><b>任务执行过程中调用cancel()方法并传递false</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws InterruptedException &#123;</span><br><span class="line">        while (!Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">            System.out.println(&quot;执行线程的call()方法&quot;);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        Thread.sleep(10);</span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(false));</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=============================&quot;</span><br><span class="line">Output：</span><br><span class="line">执行线程的call()方法</span><br><span class="line">cancel()：true</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.CancellationException</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:121)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)</span><br><span class="line">at twentyoneth.runnableAndcallable.CallableTest.main(CallableTest.java:24)</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，在线程执行过程中调用cancel()方法并传递false参数，任务并不会终止，cancel()方法返回true。但是通过源码可知，此时该方法将任务的状态改变位CANCELED状态，在调用get()获取任务执行结果时只能得到CancellationException异常</p><h2 id="cancel-方法并不总会中断线程"><a href="#cancel-方法并不总会中断线程" class="headerlink" title="cancel()方法并不总会中断线程"></a><font size="5">cancel()方法并不总会中断线程</font></h2><p>通过cancel()方法源码我们发现，cancel()如果能够中断线程(在执行过程中调用cancel()并且传递true参数)，那么实际上调用的是线程的interrupt()方法。该方法只是给调用线程设置一个中断标志位，只有在遇到wait()、sleep()等方法阻塞时才会抛出异常，具体是否中断由线程内部逻辑决定。我们来看下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer call()  &#123;</span><br><span class="line">        while (true)&#123;</span><br><span class="line">            System.out.println(&quot;执行线程的call()方法&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(&quot;Interrupted&quot;);</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        Thread.sleep(10);</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(true));</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”======================================“</span><br><span class="line">Output：</span><br><span class="line">执行线程的call()方法</span><br><span class="line">Interrupted</span><br><span class="line">cancel()：true</span><br><span class="line">Exception in thread &quot;main&quot; java.util.concurrent.CancellationException</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:121)</span><br><span class="line">at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)</span><br><span class="line">at twentyoneth.runnableAndcallable.CallableTest.main(CallableTest.java:28)</span><br></pre></td></tr></table></figure><p>在上述代码中，能够成功的中断线程，任务在sleep阻塞时被cancel()方法中断，因此捕获异常，最后退出线程。你应该注意：虽然最后返回了执行结果1，但是调用get()方法获得到的仍是CancellationException。<br>我们再看看下面一段测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class CallableTest implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Integer call()  &#123;</span><br><span class="line"></span><br><span class="line">        while (true)&#123;</span><br><span class="line">            System.out.println(&quot;执行线程的call()方法&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; task = new FutureTask&lt;&gt;(new CallableTest());</span><br><span class="line">        new Thread(task).start();</span><br><span class="line">        Thread.sleep(10);</span><br><span class="line">        System.out.println(&quot;cancel()：&quot;+task.cancel(true));</span><br><span class="line">        System.out.println(task.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”======================================“</span><br><span class="line">Output：</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">执行线程的call()方法</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>在这段代码中，任务逻辑代码没有任何阻塞，也没有任何相应中断的措施，因此即使调用了cancel()方法，改变了线程的中断标志位，线程仍然不会中断，而是会一直执行下去。(<font color="red"><b>关于中断相关的方法会在后面陆续介绍</b></font>)</p><h2 id="cancel-方法总结"><a href="#cancel-方法总结" class="headerlink" title="cancel()方法总结"></a><font size="5">cancel()方法总结</font></h2><p><b>通过测试可以发现，只有在任务正常结束(最后处于NORMAL状态)时才能够得到任务执行结果，而调用cancel()方法后，如果调用get方法获取任务执行结果只能得到CancellationException异常。当任务执行过程中出现异常(编写的代码出现异常)，调用get方法能够获取到执行过程中出现的异常。并且cancel()并不一定能够中断线程</b></p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两整数之和</title>
      <link href="/2019/11/10/%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2019/11/10/%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百七十一题</b><br>难度：<font color="green">简单</font><br>题目：不使用运算符 + 和 - ​​​​​​​，计算两整数 ​​​​​​​a 、b ​​​​​​​之和。</p><hr><a id="more"></a><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>看到不能使用+、-，我们应该第一时间想到位运算。我们来看一下二进制加减法的规律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1+0=1</span><br><span class="line">0+1=1</span><br><span class="line">0+0=0</span><br><span class="line">1+1=0(进位)</span><br></pre></td></tr></table></figure><p>很明显的，可以看到二进制做加法，其实就是异或操作，只不过1+1时有溢出，那么如何解决溢出呢？通过加法的规律可以知道，当前位相加进位的部分和高一位的部分相加，因此我们将采用a&amp;b&lt;&lt;1操作</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int getSum(int a, int b) &#123;</span><br><span class="line">int res;</span><br><span class="line">//b==0时说明无进位操作</span><br><span class="line">while(b!=0)&#123;</span><br><span class="line">//将当前数字做&amp;运算得到需要进位的部分</span><br><span class="line">//再见进位右移一位</span><br><span class="line">res=(a&amp;b)&lt;&lt;1;</span><br><span class="line">a=a^b;</span><br><span class="line">b=res;</span><br><span class="line">&#125;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，位运算有时候还是相当巧妙的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的完全平方数</title>
      <link href="/2019/11/10/%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>/2019/11/10/%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百六十七题</b><br>难度：<font color="green">简单</font><br>题目：给定一个正整数 num，编写一个函数，如果 num 是一个完全平方数，则返回 True，否则返回 False。(不使用内置方法)</p><hr><a id="more"></a><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>解决这道题，有三种不同的思路。分别使用优化的暴力循环、二分法以及数学公式法</p><ol><li>优化的暴力循环，创建一个变量i从1遍历到num/2</li><li>数学公式有：N^2=1+3+5+…+2*N-1。这样问题就会简单很多</li><li>二分法主要在于细节，思路就不赘述</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//优化的暴力循环</span><br><span class="line">public boolean isPerfectSquare(int num) &#123;</span><br><span class="line">//优化暴力循环</span><br><span class="line">for(int i=1;i&lt;=num/2;i++)&#123;</span><br><span class="line">if(i*i==num)</span><br><span class="line">return true;</span><br><span class="line">if(i*i&gt;num)</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//考虑num=1的特殊情况</span><br><span class="line">return num==1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===========================”</span><br><span class="line">//数学公式法</span><br><span class="line">public boolean isPerfectSquare(int num) &#123;</span><br><span class="line">//数学公式法：1+3+5+...+(2*N-1)=N^2</span><br><span class="line">if(num==1)</span><br><span class="line">return true;</span><br><span class="line">int val=1;</span><br><span class="line">while(num&gt;0)&#123;</span><br><span class="line">num-=val;</span><br><span class="line">val+=2;</span><br><span class="line">&#125;</span><br><span class="line">return num==0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===========================”</span><br><span class="line">//二分法</span><br><span class="line">public boolean isPerfectSquare(int num) &#123;</span><br><span class="line">//二分法</span><br><span class="line">int left=0;</span><br><span class="line">int right=num;</span><br><span class="line">int mid;</span><br><span class="line">while(right&gt;=left)&#123;</span><br><span class="line">mid=left+(right-left)/2;</span><br><span class="line">//要转化为long类型，否则会溢出导致结果为负，进入死循环</span><br><span class="line">if((long)mid*mid==num)</span><br><span class="line">return true;</span><br><span class="line">else if((long)mid*mid&gt;num)&#123;</span><br><span class="line">right=mid-1;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">left=mid+1;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于二分法要注意的一点就是要考虑乘法溢出导致结果为负，最后陷入死循环，因此应该将值显式的转化为long类型。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析ThreadLocal</title>
      <link href="/2019/11/10/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90ThreadLocal/"/>
      <url>/2019/11/10/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90ThreadLocal/</url>
      
        <content type="html"><![CDATA[<p>当访问共享的可变数据时，通常需要使用同步。一种避免同步的方式就是不共享数据，如果仅在线程内访问数据，就不需要同步。这种技术被称为线程封闭。它是实现线程安全性的最简单方式之一。维持线程封闭性的方法不止一种，ThreadLocal就是其中一种。</p><hr><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>ThreadLocal，很容易的就理解成为“本地线程”。其实，ThreadLocal并不是一个Thread，而是一个变量–线程局部变量。当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每个线程都可以独立地改变自己的副本，而不会影响其它线程的副本。</p><h1 id="ThreadLocal整体结构"><a href="#ThreadLocal整体结构" class="headerlink" title="ThreadLocal整体结构"></a>ThreadLocal整体结构</h1><p>在深入分析源码之前，先大体介绍以下ThreadLocal的类结构，方便后续学习。<br><img src="/2019/11/10/深入剖析ThreadLocal/1.png" alt>再来看一下ThreadLocal的嵌套类ThreadLocalMap<br><img src="/2019/11/10/深入剖析ThreadLocal/2.png" alt><br>从图中可以发现，ThreadLocal共有的方法(不包括构造方法)只有四个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get()</span><br><span class="line">set()</span><br><span class="line">remove()</span><br><span class="line">withInitial()</span><br></pre></td></tr></table></figure><h1 id="ThreadLocalMap源码分析"><a href="#ThreadLocalMap源码分析" class="headerlink" title="ThreadLocalMap源码分析"></a>ThreadLocalMap源码分析</h1><p>介绍了ThreadLocal的整体架构，现在来介绍以下它的内部类ThreadLocalMap。ThreadLocalMap也是一个哈希结构，内部维护一个Entry数组，每个Entry对象内存储这一对键值对。不过和HashMap不同的是，HashMap解决哈希冲突的方法是分离链接法，而ThreadLocalMap采用的则是开放定址法。</p><h2 id="ThreadLocalMap的域"><a href="#ThreadLocalMap的域" class="headerlink" title="ThreadLocalMap的域"></a><font size="5">ThreadLocalMap的域</font></h2><p>来看一看ThreadLocalMap有哪些属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static final int INITIAL_CAPACITY = 16;</span><br><span class="line">//底层数组</span><br><span class="line">private Entry[] table;</span><br><span class="line">//Map中元素个数</span><br><span class="line">private int size = 0;</span><br><span class="line">//扩容阈值</span><br><span class="line">private int threshold;</span><br></pre></td></tr></table></figure><p>通过这些域我们发现，ThreadLocalMap和HashMap有一定的相似。接下来我们再看看ThreadLocalMap的嵌套类Entry</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">Object value;</span><br><span class="line">Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">super(k);</span><br><span class="line">value = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们发现，Entry中键值对的键是一个ThreadLocal对象，而值则可以是任何类型。你可能会觉得奇怪，为什么Entry中的键是一个ThreadLocal对象呢？让我们带着疑问继续往下。</p><h2 id="set-方法"><a href="#set-方法" class="headerlink" title="set()方法"></a><font size="5">set()方法</font></h2><p>介绍一下ThreadLocalMap中set()方法的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private void set(ThreadLocal&lt;?&gt; key, Object value) &#123;</span><br><span class="line"></span><br><span class="line">Entry[] tab = table;</span><br><span class="line">int len = tab.length;</span><br><span class="line">//将哈希值映射到数组下标(和HashMap类似)</span><br><span class="line">int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class="line">//使用线性探测法找到合适的数组下标</span><br><span class="line">for (Entry e = tab[i];</span><br><span class="line"> e != null;</span><br><span class="line"> e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">如果下标中已经存在相同的键，那么覆盖原来的值</span><br><span class="line">if (k == key) &#123;</span><br><span class="line">e.value = value;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">//如果为空，说明外部强引用消失，ThreadLocal对象被回收</span><br><span class="line">//那么新的值插入</span><br><span class="line">if (k == null) &#123;</span><br><span class="line">replaceStaleEntry(key, value, i);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//将键值对放入数组中</span><br><span class="line">tab[i] = new Entry(key, value);</span><br><span class="line">int sz = ++size;</span><br><span class="line">//清理掉key为null的节点，使其能够被回收</span><br><span class="line">if (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">rehash();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=====================”</span><br><span class="line">//实际上就是一个取模运算</span><br><span class="line">private static int nextIndex(int i, int len) &#123;</span><br><span class="line">return ((i + 1 &lt; len) ? i + 1 : 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的replaceStaleEntry()方法和cleanSomeSlots()方法我们无需理会，只需要知道set方法是将一个键值对放到数组的合适位置即可。</p><h2 id="getEntry-方法"><a href="#getEntry-方法" class="headerlink" title="getEntry()方法"></a><font size="5">getEntry()方法</font></h2><p>再来介绍一下getEntry()方法的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private Entry getEntry(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class="line">//通过映射找到相应数组下标</span><br><span class="line">int i = key.threadLocalHashCode &amp; (table.length - 1);</span><br><span class="line">//取出数组中元素</span><br><span class="line">Entry e = table[i];</span><br><span class="line">//如果找到就返回</span><br><span class="line">if (e != null &amp;&amp; e.get() == key)</span><br><span class="line">return e;</span><br><span class="line">//没找到说明发生了哈希冲突，当前节点被移动到另外的位置</span><br><span class="line">//或者由于ThreadLocal被回收导致key==null(后面会说到)</span><br><span class="line">//调用getEntryAfterMiss继续找</span><br><span class="line">else</span><br><span class="line">return getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果进入了getEntryAfterMiss方法，有三种可能</p><ol><li>e==null，之前发生了哈希冲突，想要找的节点被移动到其他位置，该位置节点被回收，继续寻找直到找到为止，最后返回相应entry</li><li>e!=null&amp;&amp;e.get()!=key，发生了哈希冲突，继续寻找直到找到为止，最后返回相应entry</li><li>e!=null&amp;&amp;e.get()==null，由于ThreadLocal被回收导致key为null，将key对应的value和entry都置为null使其能够得到回收，最后返回null<h2 id="remove-方法"><a href="#remove-方法" class="headerlink" title="remove()方法"></a><font size="5">remove()方法</font></h2>最后介绍一下remove方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void remove(ThreadLocal&lt;?&gt; key) &#123;</span><br><span class="line">Entry[] tab = table;</span><br><span class="line">int len = tab.length;</span><br><span class="line">//通过hash值映射数组下标</span><br><span class="line">int i = key.threadLocalHashCode &amp; (len-1);</span><br><span class="line">for (Entry e = tab[i];</span><br><span class="line"> e != null;</span><br><span class="line"> e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">//找到相应元素后，将其删除并重新调整Map结构</span><br><span class="line">if (e.get() == key) &#123;</span><br><span class="line">e.clear();</span><br><span class="line">expungeStaleEntry(i);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><font size="5">小结</font></h2><p>对于ThreadLocalMap的分析就到这里，这里只是粗略的介绍了其中一些方法，目的是为了更好的理解后面的内容，对于其他方法，需要对开放定址法有一定的了解后才能学习(对于开放定址法参见我的另一篇博客:数据结构-哈希表)。</p><h1 id="ThreadLocal源码分析"><a href="#ThreadLocal源码分析" class="headerlink" title="ThreadLocal源码分析"></a>ThreadLocal源码分析</h1><p>介绍了ThreadLocalMap的部分源码，相信你对ThreadLocalMap也有了一定的了解，接下来我们学习一下ThreadLocal的部分源码</p><h2 id="Thread中的域和方法"><a href="#Thread中的域和方法" class="headerlink" title="Thread中的域和方法"></a><font size="5">Thread中的域和方法</font></h2><p>为了能够更好的了解ThreadLocal、ThreadLocalMap三者之间的关系，需要对Thread中的部分源码有一定的了解，也不多，这里只介绍一个域和一个方法足够了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//域</span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = null;</span><br><span class="line"></span><br><span class="line">//方法</span><br><span class="line">private void exit() &#123;</span><br><span class="line">if (group != null) &#123;</span><br><span class="line">group.threadTerminated(this);</span><br><span class="line">group = null;</span><br><span class="line">&#125;</span><br><span class="line">/* Aggressively null out all reference fields: see bug 4006245 */</span><br><span class="line">target = null;</span><br><span class="line">/* Speed the release of some of these resources */</span><br><span class="line">threadLocals = null;</span><br><span class="line">inheritableThreadLocals = null;</span><br><span class="line">inheritedAccessControlContext = null;</span><br><span class="line">blocker = null;</span><br><span class="line">uncaughtExceptionHandler = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先介绍ThreadLocal中一些方法，然后再详细说明三者之间的关系</p><h2 id="ThreadLocal的域"><a href="#ThreadLocal的域" class="headerlink" title="ThreadLocal的域"></a><font size="5">ThreadLocal的域</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private final int threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line">private static AtomicInteger nextHashCode =</span><br><span class="line">        new AtomicInteger();</span><br><span class="line"></span><br><span class="line">private static final int HASH_INCREMENT = 0x61c88647;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">private static int nextHashCode() &#123;</span><br><span class="line">return nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面三个域，除了threadLocalHashCode是实例属性，其他两个都是类属性，还有一个类方法，也就是说是所有ThreadLocal对象共享的。前面介绍ThreadLocalMap的方法时，都是通过ThreadLocal对象的threadLocalHashCode属性来映射数组下标。<br>通过上述源码我们可以发现，每个ThreadLocalMap对象的threadLocalHashCode都相差固定的值HASH_INCREMENT。这样做能够减少哈希冲突。</p><h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a><font size="5">get()方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public T get() &#123;</span><br><span class="line">//获取当前线程</span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">//获取当前线程的threadlocals属性</span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line">//如果属性不为空</span><br><span class="line">if (map != null) &#123;</span><br><span class="line"></span><br><span class="line">ThreadLocalMap.Entry e = map.getEntry(this);</span><br><span class="line">if (e != null) &#123;</span><br><span class="line">T result = (T)e.value;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">//该方法返回线程的threadLocals属性</span><br><span class="line">ThreadLocalMap getMap(Thread t) &#123;</span><br><span class="line">return t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">private T setInitialValue() &#123;</span><br><span class="line">T value = initialValue();</span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line">if (map != null)</span><br><span class="line">map.set(this, value);</span><br><span class="line">else</span><br><span class="line">createMap(t, value);</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">//获取初始value值，如果子类没有进行覆盖，默认为null</span><br><span class="line">protected T initialValue() &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">//对线程的threadlocals属性进行初始化</span><br><span class="line">void createMap(Thread t, T firstValue) &#123;</span><br><span class="line">t.threadLocals = new ThreadLocalMap(this, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来解析以下get()方法的逻辑</p><ol><li>获取当前线程，调用ThreadLocal的getMap方法获取当前线程的threadLocals属性，即获取一个ThreadLocalMap对象。</li><li>如果该map对象不为空，转到3；否则转到5。</li><li>调用map的getEntry()方法，并将this(调用get方法的ThreadLocal对象)作为参数传递进去，获取该ThreadLocal对应的的Entry对象e。</li><li>如果e不为空，返回e的值即可</li><li>如果走到这一步，即执行了return setInitialValue();这一段代码，则有2种情况<ol><li>该线程的threadlocals属性没有进行初始化，这时候调用createMap()方法进行初始化。最后返回value</li><li>通过getEntry()方法获取到的e为null，将this作为键，initialValue()方法获取到的初始值作为值的键值对添加到map中。最后返回value</li></ol></li></ol><h2 id="set-方法-1"><a href="#set-方法-1" class="headerlink" title="set()方法"></a><font size="5">set()方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void set(T value) &#123;</span><br><span class="line">//获取当前线程并获取线程的threadlocals属性</span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line">ThreadLocalMap map = getMap(t);</span><br><span class="line">//如果map不为空，调用ThreadLocalMap的set方法将this作为键，value作为值添加进map中</span><br><span class="line">if (map != null)</span><br><span class="line">map.set(this, value);</span><br><span class="line">//如果为空则调用createMap对其进行初始化</span><br><span class="line">else</span><br><span class="line">createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>介绍完get()方法以及相应方法之后，set()方法就很容易理解，这里就不赘述了。</p><h2 id="remove-方法-1"><a href="#remove-方法-1" class="headerlink" title="remove()方法"></a><font size="5">remove()方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void remove() &#123;</span><br><span class="line">ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">if (m != null)</span><br><span class="line">m.remove(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>remove()方法源码也比较简单，直接调用ThreadLocalMap的remove方法，将当前ThreadLocal对象作为键传递进去即可。</p><h1 id="三者的关系"><a href="#三者的关系" class="headerlink" title="三者的关系"></a>三者的关系</h1><p>经过一系列铺垫之后，终于可以正式的介绍他们三者之间的关系了，也许你通过前面的介绍已经了解了三者之间的关系，也许你还不了解，但都没关系，我们接下类将通过几张图来详细的说明。<br><img src="/2019/11/10/深入剖析ThreadLocal/3.jpg" alt>上面这张图很直观很容易理解，通过前面的学习我们发现确实有这样的关系存在<br><img src="/2019/11/10/深入剖析ThreadLocal/2.jpg" alt>这张图表明了三者的关系：<font color="red"><b>即每个线程中都有一个ThreadLocalMap对象，每个ThreadLocalMap对象内维护一个Entry数组，维护者若干个Entry对象；每个Entry存储着一对键值对，键值对的键就是ThreadLocal对象，值就是存储的共享变量的副本。</b></font><br><img src="/2019/11/10/深入剖析ThreadLocal/1.jpg" alt>简单地说，就是一个Thread对象只有一个ThreadLocalMap，而一个ThreadLocalMap中有多个键值对。每个键值对的键都是ThreadLocal对象。</p><h1 id="ThreadLocal的内存回收"><a href="#ThreadLocal的内存回收" class="headerlink" title="ThreadLocal的内存回收"></a>ThreadLocal的内存回收</h1><p>了解了ThreadLocal实现以后，我们发现，这些数据的副本其实是维护在每个线程对象内部的(threadlocals属性内)，这也就意味着如果线程不退出，对象的引用就会一直存在。当一个线程退出时，Thread会进行一些清理工作，具体表现为在线程退出前，由系统回调exit()方法，进行资源清理。通过前面的Thread的exit()源码可以发现，Thread在推出时会将它的threadlocals属性置为null。这样ThreadLocalMap就能够被回收。<br>在介绍threadLocalMap的嵌套类Entry时，我们发现Entry是继承自WeakReference&lt;ThreadLocal&lt;?&gt;&gt;的，WeakReference是一个弱引用，在JVM那篇博客中介绍过，弱引用对于GC没有任何影响，只是会在GC时收到一个通知。在这里，虽然Entry使用ThreadLocal作为Map的key，但实际上，它并不真的持有ThreadLocal的引用。当ThreadLocal的外部强引用被回收时，Entry中的key就会变为null。当系统进行ThreadLocalMap清理时(从ThreadLocalMap方法源码可以发现，每次put、get方法时都会进行清理)，就会将这些垃圾数据回收。<br><img src="/2019/11/10/深入剖析ThreadLocal/3.png" alt></p><h1 id="ThreadLocal导致的内存泄漏"><a href="#ThreadLocal导致的内存泄漏" class="headerlink" title="ThreadLocal导致的内存泄漏"></a>ThreadLocal导致的内存泄漏</h1><p>前面说过，当线程退出时，会将threadlocals属性置为空，这样该线程的所有变量都会被回收。但这样会存在一个问题，当我们使用线程池的时候，当前线程执行的任务结束后，线程并不会退出，而是会归还给线程池执行其他的任务，那这样一来，跟当前任务相关的变量数据并不会被回收，这样就导致了内存泄漏问题。如图所示<br><img src="/2019/11/10/深入剖析ThreadLocal/4.png" alt>此时，<font color="red"><b>如果你希望能够及时的回收对象，最好使用ThreadLocal.remove()方法将这个变量移除。</b></font></p><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>通过学习我们发现，ThreadLocal的嵌套类ThreadLocalMap是作为Thread的成员属性使用，即数据存储在Thread对象中。那么我们不禁要问两个问题(以下内容均为个人理解，如有不对欢迎指正共同学习，感谢)</p><ol><li><font color="red"><b>为什么ThreadLocalMap不直接定义在Thread中，而要定义在ThreadLocal中呢？</b></font><br>看起来将ThreadLocalMap定义在Thread的内部更符合逻辑，但是ThreadLocalMap并不需要Thread的对象来操作，所以定义在Thread类中只会增加不必要的开销。定义在ThreadLocal类中的原因是ThreadLocal来负责ThreadLocalMap的创建，仅当线程中设置第一个ThreadLocal时，才为线程创建ThreadLocalMap对象。总的来说，ThreadLocalMap并不是Thread的必需属性，定义在ThreadLocal内会增加不必要的开销，而定义在ThreadLocal中可以按需创建。</li><li><font color="red"><b>ThreadLocalMap中的键值对为什么要使用ThreadLocal对象作为键，而不使用Thread对象作为键？</b></font><br>可能一个线程需要的共享对象并不止一个，如果使用Thread作为键，由于哈希结构的特性，那么一个线程就只能持有一个共享变量的副本，这显然是不合理的。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过学习，我们发现：ThreadLocal使得每个线程都持有共享资源的副本，从而可以独立的修改属于自己的副本而不会互相影响。</p><ol><li>ThreadLocal并不存储任何数据，它只是用来操作当前线程的ThreadLocalMap和作为key而存在</li><li>ThreadLocalMap是线程内部属性，不同的线程拥有不同的ThreadLocalMap对象，这也是线程隔离的根本原因</li><li>线程中ThreadLocalMap变量的值是在ThreadLocal对象进行put或者get操作时添加的</li><li>线程中ThreadLocalMap是在第一次get或者set时创建的</li><li>一个ThreadLocal对象只能对应一个共享变量，如果一个线程需要多个共享变量，那么需要创建多个ThreadLocal对象</li><li>ThreadLocal模式实现了两个隔离：<ol><li>纵向隔离：线程与线程之间ThreadLocalMap不同</li><li>横向隔离：不同的ThreadLocal对象对应不同的变量</li></ol></li><li>线程退出时，线程局部变量会自动回收</li><li>当线程超过容量的2/3时，会涉及到ThreadLocalMap中Entry的回收</li></ol><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>应用场景有很多，一个典型的应用场景就是在多线程下产生随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public class RndTask &#123;</span><br><span class="line">    public static final int GET_COUNT=10000000;</span><br><span class="line">    public static final int THREAD_COUNT=4;</span><br><span class="line">    static ExecutorService exec = Executors.newFixedThreadPool(THREAD_COUNT);</span><br><span class="line">    public static Random rand = new Random(123);</span><br><span class="line"></span><br><span class="line">    public static ThreadLocal&lt;Random&gt; tRand=new ThreadLocal&lt;&gt;()&#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected Random initialValue() &#123;</span><br><span class="line">            return new Random(123);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    static class Task implements Callable&lt;Long&gt; &#123;</span><br><span class="line">        private int mode;</span><br><span class="line">        public Task(int mode) &#123;</span><br><span class="line">            this.mode = mode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Random getRandom() &#123;</span><br><span class="line">            if (mode == 0) &#123;</span><br><span class="line">                return rand;</span><br><span class="line">            &#125; else if (mode == 1) &#123;</span><br><span class="line">                return tRand.get();</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Long call() throws Exception &#123;</span><br><span class="line">            long b = System.currentTimeMillis();</span><br><span class="line">            for (int i = 0; i &lt; GET_COUNT; i++) &#123;</span><br><span class="line">                getRandom().nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            long e = System.currentTimeMillis();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; spend &quot; + (e - b) + &quot; ms&quot;);</span><br><span class="line">            return e - b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        Future&lt;Long&gt;[] futs = new Future[THREAD_COUNT];</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            futs[i] = exec.submit(new Task(0));</span><br><span class="line">        &#125;</span><br><span class="line">        long totalTime = 0;</span><br><span class="line">        for (int i = 0; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            totalTime += futs[i].get();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;多线程访问同一个Random实例：&quot; + totalTime + &quot; ms&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            futs[i] = exec.submit(new Task(1));</span><br><span class="line">        &#125;</span><br><span class="line">        totalTime=0;</span><br><span class="line">        for (int i = 0; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            totalTime += futs[i].get();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;使用ThreadLocal包装Random实例：&quot; + totalTime + &quot; ms&quot;);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”========================“</span><br><span class="line">Output：</span><br><span class="line">pool-1-thread-2 spend 2723 ms</span><br><span class="line">pool-1-thread-4 spend 2860 ms</span><br><span class="line">pool-1-thread-1 spend 2883 ms</span><br><span class="line">pool-1-thread-3 spend 2885 ms</span><br><span class="line">多线程访问同一个Random实例：11351 ms</span><br><span class="line">pool-1-thread-2 spend 136 ms</span><br><span class="line">pool-1-thread-1 spend 136 ms</span><br><span class="line">pool-1-thread-4 spend 136 ms</span><br><span class="line">pool-1-thread-3 spend 138 ms</span><br><span class="line">使用ThreadLocal包装Random实例：546 ms</span><br></pre></td></tr></table></figure><p>在多个线程共享一个Random实例的情况下，总耗时达到11s多，而使用ThreadLocal产生随机数，仅仅耗时0.5s</p><p>ThreadLocal的学习就到这里，如有错误欢迎指正，本文基于JDK1.8版本。部分参考<a href="https://blog.csdn.net/xlgen157387/article/details/78297568" target="_blank" rel="noopener">csdn</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet源码解析</title>
      <link href="/2019/11/09/HashSet%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/09/HashSet%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>对于Hash结构，我们还有最后一个没有介绍，那就是HashSet集合，HashSet是在Map的基础上组装起来的类，这里主要介绍Set是如何利用Map现有的功能进行创新从而实现新的功能。同样的，本文基于JDK1.8版本。</p><hr><a id="more"></a><h1 id="HashSet基础架构"><a href="#HashSet基础架构" class="headerlink" title="HashSet基础架构"></a>HashSet基础架构</h1><p>在开始学习之前，为了便于我们更好的理解，让我们先看一下HashSet的类注释</p><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><ol><li>底层实现基于HashMap，所以迭代时不能保证插入顺序，获取其他顺序进行迭代</li><li>add、remove、contains、size等方法的耗时性能，是不会随着数据量增加为增加的，这个主要跟HashMap底层数据结构有关，不管数据量多大，在不考虑哈希冲突情况下，时间复杂度都是O(1)</li><li>线程不安全，如果需要线程安全自行加锁或者使用Collections.synchronizedSet</li><li>迭代过程中，使用的是快速失败策略。</li></ol><p>联系之前学过了List和Map结构，发现它们也有2、3、4点信息。这是三者的共同点。</p><h2 id="HashSet域"><a href="#HashSet域" class="headerlink" title="HashSet域"></a><font size="5">HashSet域</font></h2><p>前面介绍过，HashSet的实现基于HashMap的，在Java中，要基于基础类进行创新，有两种方法：</p><ol><li>使用继承，复写基础类的方法</li><li>使用组合，通过调用基础类的方法，来复合基础类的能力</li></ol><p>HashSet使用的就是组合，这样做有以下优点：</p><ol><li>继承表示父子类是同一个事物，而Set和Map本来就是要表达两种事务，所以使用继承不妥当，而且Java中子类只能继承一个父类，后续难以扩展</li><li>组合更加灵活，可以任意组合现有的基础类，并且可以在基础类方法的基础上进行扩展、编排等，并且方法命名可以任意命名，不用和基础类方法名保持一致。</li></ol><p>下面来看一下HashSet中的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//底层通过HashMap存储数据</span><br><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br><span class="line">//每个Node节点的value值都用PRESENT填充</span><br><span class="line">private static final Object PRESENT = new Object();</span><br></pre></td></tr></table></figure><p>从上面源码可以看出：</p><ol><li>在使用HashSet时，比如add()方法。只有一个入参，但HashMap的put()方法却需要key和value两个参数。他的解决方法非常巧妙，在每次调用HashMap的put()方法时，都将PRESENT作为value填充进去来代替value。</li><li>如果HashMap是被共享的，当多个线程访问的时候，就会有线程安全问题，因为在后续的所有操作中，并没有加锁。</li></ol><p>HashSet在以HashMap为基础进行实现时，首先选择组合方式，接着使用默认值来代替Map中的value值，设计非常巧妙。</p><h1 id="HashSet源码方法"><a href="#HashSet源码方法" class="headerlink" title="HashSet源码方法"></a>HashSet源码方法</h1><p>介绍了关于HashSet的基础内容，现在来正式介绍一下HashSet方法的源码，其实都比较简单，因为HashSet的方法实际上调用的仍是HashMap的方法。</p><h2 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a><font size="5">初始化方法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public HashSet(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16));</span><br><span class="line">addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的其他构造方法都是直接在里面调用相应的HashMap构造方法创建HashMap对象，只有这个方法做了特殊处理。<br>Math.max((int) (c.size()/.75f) + 1, 16)，就是对HashMap的容量进行了计算，这段代码的意思是：取括号两个数的最大值(期望的值/0.75+1，默认值16)。</p><ol><li>和16比较大小的意思是说，如果给定HashMap初始容量小于16，就按照默认的16初始化，如果大于16，就按照给定值初始化</li><li>HashMap扩容的阈值的计算公式为Map容量*0.75f，一旦达到阈值就会扩容，此处采用(int) (c.size()/.75f) + 1来表示初始化的值，这样我们的期望值正好比扩容的阈值大1，就不会扩容，设计的还是很巧妙的。</li></ol><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a><font size="5">其他方法</font></h2><p>对于HashSet的其他方法，就比较简单了，只是简单地调用HashMap的方法而已</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">return map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从添加和删除方法来看，确实如此，那么HashSet的又是怎么迭代的呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">return map.keySet().iterator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的迭代方法也非常简单，直接调用父类内部类keySet的迭代器进行迭代即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过HashSet的源码我们能够学习不少，下面来总结几点</p><ol><li>对组合还是继承的选择。</li><li>对复杂逻辑进行一些包装，使得吐出去的接口尽量简单好用</li><li>组合其他API时，尽量多对组合的API多一些了解，这样才能更好的使用API</li></ol><p>对于HashSet的介绍就到这里</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> HashSet集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map源码常见面试题</title>
      <link href="/2019/11/08/Map%E6%BA%90%E7%A0%81%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/11/08/Map%E6%BA%90%E7%A0%81%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>前面相继介绍了HashMap和LinkedHashMap集合，对于TreeMap集合，由于它的底层实现红黑树我不熟悉所以没有深入了解。现在就总结一下Map集合的一些常见面试题。</p><hr><a id="more"></a><h1 id="Map整体数据结构类"><a href="#Map整体数据结构类" class="headerlink" title="Map整体数据结构类"></a>Map整体数据结构类</h1><ol><li><font color="red"><b>说一说HashMap底层数据结构</b></font><br>HashMap底层是数组+链表+红黑树的数据结构，数组的主要作用是方便快速查找，时间复杂度为O(1)，默认大小为16，每次扩容保持为2的幂次方(通常以2倍扩容)。数组的下标索引是通过key的hashcode计算出来的，数组元素叫做Node，当多个key的hashcode一致，但是key值不同时(哈希冲突)，单个Node就会转化成为链表，链表的查询复杂度为O(n)，当链表的长度大于等于8并且数组大小超过64时，链表就会转化为红黑树，红黑树的查询复杂度是O(logN)。</li><li><font color="red"><b>HashMap、TreeMap、LinkedHashMap三者有什么相同点，有什么不同点</b></font></li></ol><ul><li>相同点：<ol><li>三者在特定情况下都会使用红黑树</li><li>底层的Hash算法相同</li><li>在迭代过程中，如果Map的数据结构被改动，都会抛出ConcurrentModificationException异常。即快速失败策略</li></ol></li><li>不同点：<ol><li>HashMap数据结构以数组为主，查询很快，TreeMap数据结构以红黑树为主，利用了红黑树左小右大的特点，可以实现key排序，LinkedHashMap在HashMap的基础上增加了链表的结构，实现了插入顺序访问和最少访问删除两种策略。</li><li>由于三种集合底层数据结构的差别，导致三者使用场景的不同。TreeMap适合需要根据key进行排序的场景，LinkedHashMap适合按照插入顺序访问或需要最少访问元素删除的场景，剩下的场景使用HashMap即可。HashMap是我们最常用的集合。</li><li>由于三种map的底层数据结构的不同，导致上层包装的API略有差别。</li></ol></li></ul><ol start="3"><li><font color="red"><b>说一下HashMap的哈希算法</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 求键值对中键的哈希码</span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">int h;</span><br><span class="line">return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上就是HashMap的哈希算法，这其实是一个数学问题，源码中首先通过key的hashCode()方法得到key的hashcode，在将该值的低16位和高16位做异或运算得到哈希值。这样做的好处是在大多数场景下，算出来的hash值比较分散。<br>一般来说，hash值算出来之后，要计算当前key在数组索引下标位置时，可以采用取模的方式，就是索引下标位置=hash%数组大小。这样做的好处就是可以保证计算出来的索引下标值可以均匀的分布在数组的各个索引位置上，但由于取模操作计算比较慢，数学上有个公式：当b是2的幂次方时候，a%b=a&amp;(b-1)，因此可以用该公式计算key的下标位置。</p><ol start="4"><li><p><font color="red"><b>为什么不用key值和数组大小做取模运算而要计算key的哈希值并与数组大小做取模运算</b></font><br>如果key是数字，直接使用key%数组大小是完全没有问题的，但我们的key还有可能是字符串，是复杂对象，这时候用字符串或对象%数组大小是不行的，所以需要计算key的hash值</p></li><li><p><font color="red"><b>在计算hash值时，为什么要右移16位</b></font><br>这样做是为了使计算出的hash值更加分散，减少碰撞的可能性(具体见HashMap源码解析博客)</p></li><li><p><font color="red"><b>为什么提倡数组大小是2的幂次方</b></font><br>这样做有两个目的</p><ol><li><p>当我们使用&amp;运算映射数组下标时，要保证(数组下标-1)用二进制表示时必须是全1，这样才能很好的利用hash值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">假设数组大小为10，那么9的二进制表示为1001；</span><br><span class="line">现假设有三个hash值，分别为</span><br><span class="line">...... 0010 1110 1010 0110</span><br><span class="line">...... 0110 0101 1010 0100</span><br><span class="line">...... 0011 0111 1111 0010</span><br><span class="line">使用这三个完全不同hash值和1001做&amp;运算时，就会发现结果都是0，</span><br><span class="line">这是因为和1001做&amp;运算时，不论中间两位是什么，&amp;出来都是0</span><br><span class="line">这样就无法很好的利用hash值</span><br></pre></td></tr></table></figure><p>当数组大小为2的幂次方时，数组下标-1后二进制表示为全1，这样就能很好的利用hash值</p></li><li><p>只用数组大小是2的幂次方时，hash&amp;(length-1)==hash%length才成立。</p></li></ol></li><li><p><font color="red"><b>为了解决哈希冲突，大概有哪些方法</b></font></p><ol><li>好的hash算法</li><li>自动扩容，当数组大小快慢的时候，采取自动扩容，可以减少哈希冲突</li><li>当哈希冲突发生时，使用拉链法来解决(链表)</li><li>哈希冲突严重时，链表会自动转换为红黑树，提高遍历速度</li></ol></li></ol><h1 id="HashMap源码细节类问题"><a href="#HashMap源码细节类问题" class="headerlink" title="HashMap源码细节类问题"></a>HashMap源码细节类问题</h1><ol><li><font color="red"><b>HashMap是如何扩容的</b></font></li></ol><ul><li>扩容的时机：<ol><li>put时，发现数组为空，进行初始化扩容，默认扩容大小为16</li><li>put成功后，发现元素个数大于扩容阈值后，进行扩容，扩容为老数组的2倍</li></ol></li><li>扩容的阈值是threshold，每次扩容时threshold都会被重新计算，阈值=数组大小*影响影子(0.75)</li><li>新数组初始化后，需要将老数组的值拷贝到新数组上。</li></ul><ol start="2"><li><p><font color="red"><b>Hash冲突时怎么办</b></font><br>哈希冲突是指key值得hashcode计算相同，但是key值不同的情况。如果数组中元素已经有一个或已经是链表了，新增元素直接追加到链表尾部。如果数组中元素已经是链表，并且链表个数大于等于8时</p><ol><li>如果此时数组大小小于64，数组再次扩容，链表不会转化为红黑树</li><li>如果此时数组大小大于等于64，链表转化为红黑树<br>这样做主要是因为红黑树占用空间比链表大很多，转化也比较损耗时间，所以数组容量小的情况下冲突比较严重，可以先尝试扩容，看看能否通过扩容解决冲突的问题。</li></ol></li><li><p><font color="red"><b>为什么链表个数大于等于8时，链表要转化为红黑树</b></font><br>当链表个数太多了，遍历可能比较耗时，转化为红黑树可以使遍历的空间复杂度降低，但转化成红黑树有空间损耗和转化时成本，我们通过泊松分布得出，正常情况下链表个数出现8的概念不到千万分之一，因此正常情况下，链表都不会转化为红黑树。这样设计的目的是为了防止非正常情况下，比如hash算法出了问题，导致链表很轻易大于等于8时仍然能够快速遍历。</p></li><li><p><font color="red"><b>HashMap在put时，如果数组中已经有了这个key，我不想把value值覆盖怎么办？取值时如果得到的value是空，想返回默认值怎么办</b></font><br>如果数组中有了key但是不想覆盖value，可以选择putIfAbsent()方法，这个方法会再调用putVal时将onlyIfAbsent置为true，这样就不会覆盖了；而我们使用的put方法，将onlyIfAbsent设置为false。<br>取值时，若为空但是想返回默认值，可以使用getDefault方法，方法参数有两个：第一个是key，第二个为想要返回的默认值。</p></li><li><p><font color="red"><b>描述一下HashMap get、put的过程</b></font><br>在前面源码解析中介绍过，可以详细描述源码的实现路径，最好画图说明。</p></li></ol><h1 id="其他面试题"><a href="#其他面试题" class="headerlink" title="其他面试题"></a>其他面试题</h1><ol><li><font color="red"><b>LinkedHashMap中的LRU是什么意思，是如何实现的</b></font><br>LRU，全称是Least recently used，即最近最少访问，在LinkedHashMap中，也叫做最少访问策略，我们可以通过removeEldestEntry()方法设定一定的策略，使最少访问的元素在适当的时候被删除，原理是在put方法执行的最后，LinkedHashMap会检查这种策略，如果满足策略，就删除头节点。</li><li><font color="red"><b>为什么推荐TreeMap的元素最好都实现Comparable接口？key是String的时候我们却没有额外的工作呢</b></font><br>因为TreeMap的底层就是通过排序来比较两个key的大小的，所以推荐key实现Comparable接口，是为了往你所希望的排序上发展，而String本身已经实现了Comparable接口，所以在使用时不需要做额外的动作。不仅仅是String，其他包装类型也都实现了Comparable接口。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Map的面试题主要以HashMap为主，会问很多源码方面的东西，TreeMap和LinkedHashMap主要以功能和场景为主，作为加分项。只要弄懂了Map的源码，不管问题怎么变，问题都不大，所以说源码才是重点。<br>本文摘自<a href="https://www.imooc.com/read/47" target="_blank" rel="noopener">慕课网文贺老师专栏</a>。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4的幂</title>
      <link href="/2019/11/08/4%E7%9A%84%E5%B9%82/"/>
      <url>/2019/11/08/4%E7%9A%84%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百四十二题</b><br>难度：<font color="green">简单</font><br>题目：给定一个整数 (32 位有符号整数)，请编写一个函数来判断它是否是 4 的幂次方。(不使用递归和迭代)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 16</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 5</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题和前面判断2的幂很相似，因为4也是2的幂，即4的幂一定是2的幂。通过观察4的幂次方数的二进制我们可以发现以下规律</p><ol><li>4的幂次方数和2的幂次方数一样，二进制中只有一个1</li><li>4的幂次方数和0x55555555做&amp;运算还是他本身，和0xaaaaaaaa做&amp;运算为0。</li></ol><p>有了这两条规律，那么解法就显而易见了</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><pre><code>//解法一：和0xaaaaaaaa做&amp;运算，借助库方法实现public boolean isPowerOfFour(int num) {    return ((num&amp;0xaaaaaaaa)==0)&amp;&amp;Integer.bitCount(num)==1; }//解法二：不借助库方法，和0x55555555做&amp;运算。//该方法需先确保num是2的幂次方，即保证转换为二进制只有一个1public boolean isPowerOfFour(int num) {    if(num&lt;=0)        return false;    if((num&amp;num-1)!=0)        return false;    if((num&amp;0x55555555)==num)        return true;    return false;}</code></pre><p>目前为止已经遇到了2、3、4次幂的问题，可以拿来对比以下它们的共同点和不同点。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜数字游戏</title>
      <link href="/2019/11/08/%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/11/08/%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百九十九题</b><br>难度：<font color="green">简单</font><br>题目：你正在和你的朋友玩 猜数字（Bulls and Cows）游戏：你写下一个数字让你的朋友猜。每次他猜测后，你给他一个提示，告诉他有多少位数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位数字猜对了但是位置不对（称为“Cows”, 奶牛）。你的朋友将会根据提示继续猜，直到猜出秘密数字。请写出一个根据秘密数字和朋友的猜测数返回提示的函数，用 A 表示公牛，用 B 表示奶牛。请注意秘密数字和朋友的猜测数都可能含有重复数字。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: secret = &quot;1807&quot;, guess = &quot;7810&quot;</span><br><span class="line">输出: &quot;1A3B&quot;</span><br><span class="line">解释: 1 公牛和 3 奶牛。公牛是 8，奶牛是 0, 1 和 7。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: secret = &quot;1123&quot;, guess = &quot;0111&quot;</span><br><span class="line">输出: &quot;1A1B&quot;</span><br><span class="line">解释: 朋友猜测数中的第一个 1 是公牛，第二个或第三个 1 可被视为奶牛。</span><br><span class="line">说明: 你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题可以使用由于题目确定了仅包括数字，那么可以用一个长度为10的数组来模拟哈希表。</p><ol><li>同时遍历两字符串</li><li>如果相同位置字符相同，则公牛+1</li><li>如果不同，则secret中字符对应位置值+1，guess字符对应位置值-1。</li><li>最后统计哈希数组中大于0的个数sum</li><li>用secret字符串长度减去sum和公牛数就是母牛数</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//在实现的过程中最好将字符串转换为字符数字，对字符数组进行操作</span><br><span class="line">//避免频繁使用charAt()方法</span><br><span class="line">public String getHint(String secret, String guess) &#123;</span><br><span class="line">int[] bucket = new int[10];</span><br><span class="line">int bull = 0;</span><br><span class="line">int cow = 0;</span><br><span class="line">int len=secret.length();</span><br><span class="line">char[] ss=secret.toCharArray();</span><br><span class="line">char[] gg=guess.toCharArray();</span><br><span class="line">for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">//如果相等，说明是公牛</span><br><span class="line">if(ss[i]== gg[i])&#123;</span><br><span class="line">bull++;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bucket[ss[i] - &apos;0&apos;] += 1;</span><br><span class="line">bucket[gg[i] - &apos;0&apos;] -= 1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//计算bucket中正值的个数</span><br><span class="line">for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">if(bucket[i] &gt; 0)</span><br><span class="line">cow+= bucket[i];</span><br><span class="line">&#125;</span><br><span class="line">cow = len - cow - bull;</span><br><span class="line">return bull + &quot;A&quot; + cow + &quot;B&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3的幂</title>
      <link href="/2019/11/08/3%E7%9A%84%E5%B9%82/"/>
      <url>/2019/11/08/3%E7%9A%84%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三百二十六题</b><br>难度：<font color="green">简单</font><br>题目：给定一个整数，写一个函数来判断它是否是 3 的幂次方。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: 27</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 0</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 9</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>和前面2的幂次方不同，3的幂次方在二进制位上没有明显的规律，仅有一点是二进制位中最后一位总是1。所以我们只能使用普通的取模加除法来解决问题。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public boolean isPowerOfThree(int n) &#123;</span><br><span class="line">if(n&lt;1)</span><br><span class="line">return false;</span><br><span class="line">while(n%3==0)&#123;</span><br><span class="line">n/=3;</span><br><span class="line">&#125;</span><br><span class="line">return n==1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nim游戏</title>
      <link href="/2019/11/08/Nim%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/11/08/Nim%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百九十二题</b><br>难度：<font color="green">简单</font><br>题目：你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 1 - 3 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 4</span><br><span class="line">输出: false </span><br><span class="line">解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛；</span><br><span class="line">     因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题和小时候玩儿过的游戏很类似，如果石头的数目大于4，那么谁先拿谁就赢，因为谁先拿谁就能使得剩下的石头数为4的倍数，这样以来无论对面怎么拿，自己都能使得石头数保持为4的倍数。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public boolean canWinNim(int n) &#123;</span><br><span class="line">//(n-1)&amp;3和n%3的效果类似，但是比取模运算速度快</span><br><span class="line">//仅当n为2的幂次方成立</span><br><span class="line">return (n&amp;3)!=0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 脑筋急转弯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动零</title>
      <link href="/2019/11/08/%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2019/11/08/%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百八十三题</b><br>难度：<font color="green">简单</font><br>题目：给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">必须在原数组上操作，不能拷贝额外的数组。</span><br><span class="line">尽量减少操作次数。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>题目额外要求了必须在原数组上操作并且减少操作次数，我们可以使用一下方法解决</p><ol><li>新建一个int型变量count，记录0的个数</li><li>从前往后遍历数组，如果当前元素为0，那么count++</li><li>如果当前元素不为0，那么将当前元素向前移动count个单位(和i-count下标元素交换位置即可)</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public void moveZeroes(int[] nums) &#123;</span><br><span class="line">int count=0;</span><br><span class="line">for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">if(count&gt;0&amp;&amp;nums[i]!=0)&#123;</span><br><span class="line">nums[i-count]=nums[i];</span><br><span class="line">nums[i]=0;</span><br><span class="line">&#125;</span><br><span class="line">else if(nums[i]==0)</span><br><span class="line">count++;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于数组这种数据结构，要能够熟练地掌握其各种操作。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺失数字</title>
      <link href="/2019/11/08/%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/"/>
      <url>/2019/11/08/%E7%BC%BA%E5%A4%B1%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百六十八题</b><br>难度：<font color="green">简单</font><br>题目：给定一个包含 0, 1, 2, …, n 中 n 个数的序列，找出 0 .. n 中没有出现在序列中的那个数。(线性时间复杂度和常数空间复杂度)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [3,0,1]</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [9,6,4,2,3,5,7,0,1]</span><br><span class="line">输出: 8</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>提供两种解法</p><ol><li>创建一个和参数数组一样大的新数组，对于参数数组中出现的每一个元素，新数组的相应下表设为true。最后遍历新数组，为false的元素下标即为缺失的数字，如果都为true，那么缺失的数字为n。</li><li>使用高斯公式计算n个数字之和，减去数组中的每一个元素，最后的值即为缺失数字。</li><li>使用异或运算解决问题，我们直到对一个数字亦或2次后得到的仍然是原数字，那么我们在遍历的过程中对每一个数组下标和数组元素进行异或运算</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//使用额外数组实现</span><br><span class="line">public int missingNumber(int[] nums) &#123;</span><br><span class="line">int len=nums.length;</span><br><span class="line">boolean[] temp=new boolean[len];</span><br><span class="line">for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">if(nums[i]!=len)</span><br><span class="line">temp[nums[i]]=true;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;len;i++)</span><br><span class="line">if(!temp[i])</span><br><span class="line">return i;</span><br><span class="line">return len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=======================”</span><br><span class="line">//使用高斯公式实现</span><br><span class="line">public int missingNumber(int[] nums) &#123;</span><br><span class="line">int len=nums.length;</span><br><span class="line">//计算和</span><br><span class="line">int res=len*(len+1)/2;</span><br><span class="line">for(int i=0;i&lt;len;i++)</span><br><span class="line">res-=nums[i];</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=======================”</span><br><span class="line">//位运算</span><br><span class="line">public int missingNumber(int[] nums) &#123;</span><br><span class="line">int missing = nums.length;</span><br><span class="line">for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">missing ^= i ^ nums[i];</span><br><span class="line">&#125;</span><br><span class="line">return missing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一道类似于脑筋急转弯的题目，很有意思。第二种和第三种方法比较巧妙，尤其是第三种。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各位相加</title>
      <link href="/2019/11/08/%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/"/>
      <url>/2019/11/08/%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百五十八题</b><br>难度：<font color="green">简单</font><br>题目：给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。(不使用递归和循环，O(1)时间复杂度完成)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 38</span><br><span class="line">输出: 2 </span><br><span class="line">解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>对于这个题目，如果没有后面的时间复杂度要求，是非常简单的。但是由于题目的要求，我们只能另想办法解决问题。</p><ol><li>对于一个数字n=875；我们可以写成875=8<em>10</em>10+7*10+5的形式。那么8的权重为100，7的权重为10，5的权重为1</li><li>现在我们要将个位相加，也就是将各个位的权重都看作1。</li><li>因此875=8<em>10<em>10+7</em>10+5=8</em>(10<em>10-1)+7</em>(10-1)+5(1-1)=8<em>99+7</em>99</li><li>由上我们可以得到：875-8<em>99-7</em>9=8+7+5</li><li>同样的对于8+7+5=20也有：20-2*9=2</li><li>即875%9=2</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public int addDigits(int num) &#123;</span><br><span class="line">//如果num是9的倍数，那么最后和为9</span><br><span class="line">if(num&gt;0&amp;&amp;num%9==0)</span><br><span class="line">return 9;</span><br><span class="line">return num%9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这类数字问题，了解了思路之后往往会很简单。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的所有路径</title>
      <link href="/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/11/08/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百五十七题</b><br>难度：<font color="green">简单</font><br>题目：给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入:</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br><span class="line"></span><br><span class="line">输出: [&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br><span class="line">解释: 所有根节点到叶子节点的路径为: 1-&gt;2-&gt;5, 1-&gt;3</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题的示例代码中，输出已经给了我们提示，可以使用一个集合来存储所有的路径。我们递归遍历链表</p><ol><li>如果当前节点为空，什么都不做</li><li>将当前节点添加到当前路径中，如果当前节点为叶子节点，那么将当前路径添加到集合中</li><li>否则，递归遍历当前节点的左右子树</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;String&gt; binaryTreePaths(TreeNode root) &#123;</span><br><span class="line">List&lt;String&gt; res=new ArrayList&lt;&gt;(30);</span><br><span class="line">getPaths(root,&quot;&quot;,res);</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void getPaths(TreeNode root,String path,List&lt;String&gt; res)&#123;</span><br><span class="line">if(root!=null)&#123;</span><br><span class="line">path+=root.val;</span><br><span class="line">if(root.left==null&amp;&amp;root.right==null)</span><br><span class="line">res.add(path);</span><br><span class="line">else&#123;</span><br><span class="line">path+=&quot;-&gt;&quot;;</span><br><span class="line">getPaths(root.left,path,res);</span><br><span class="line">getPaths(root.right,path,res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的字母异位词</title>
      <link href="/2019/11/08/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>/2019/11/08/%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百四十二题</b><br>难度：<font color="green">简单</font><br>题目：给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。(假设只包含小写字符)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>这道题可以使用两种方法来解决</p><ol><li>排序思想，通过题意可知，排完序之后两字符串如果相等，那么返回true；否则返回true</li><li>哈希表思想，使用一个数组模拟哈希表，如果对于s上的字符，数组相应位置+1，对于t上的字符，数组相应位置-1；最后如果数组元素都为0，那么返回true</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">由于排序可以使用类库方法，这里就不做演示</span><br><span class="line"></span><br><span class="line">//哈希表思想</span><br><span class="line">public boolean isAnagram(String s, String t) &#123;</span><br><span class="line">if(s.length()!=t.length())</span><br><span class="line">return false;</span><br><span class="line">int[] complate=new int[26];</span><br><span class="line">char[] ss=s.toCharArray();</span><br><span class="line">char[] tt=t.toCharArray();</span><br><span class="line">int len=ss.length;</span><br><span class="line">for(int i=0;i&lt;len;i++)&#123;</span><br><span class="line">complate[ss[i]-&apos;a&apos;]++;</span><br><span class="line">complate[tt[i]-&apos;a&apos;]--;</span><br><span class="line">&#125;</span><br><span class="line">for(int c:complate)</span><br><span class="line">if(c!=0)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除当前节点</title>
      <link href="/2019/11/08/%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9/"/>
      <url>/2019/11/08/%E5%88%A0%E9%99%A4%E5%BD%93%E5%89%8D%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百三十七题</b><br>难度：<font color="green">简单</font><br>题目：请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: head = [4,5,1,9], node = 5</span><br><span class="line">输出: [4,1,9]</span><br><span class="line">解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: head = [4,5,1,9], node = 1</span><br><span class="line">输出: [4,5,9]</span><br><span class="line">解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>要删除一个单链表的节点，我们一般的思路就是找到要删除的节点的前一个节点，利用前一个节点对当前节点进行删除。但是在这道题中，给出当前节点，要求删除当前节点。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void deleteNode(ListNode node) &#123;</span><br><span class="line">//将后一个节点的值赋值给当前节点</span><br><span class="line">node.val=node.next.val;</span><br><span class="line">//删除后一个节点</span><br><span class="line">node.next=node.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法比较巧妙，但是通过代码可以发小，该实现无法删除最后一个节点。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL树的公共祖先</title>
      <link href="/2019/11/08/AVL%E6%A0%91%E7%9A%84%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>/2019/11/08/AVL%E6%A0%91%E7%9A%84%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百三十五题</b><br>难度：<font color="green">简单</font><br>题目：给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8</span><br><span class="line">输出: 6 </span><br><span class="line">解释: 节点 2 和节点 8 的最近公共祖先是 6。</span><br><span class="line">示例 2:</span><br><span class="line">输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4</span><br><span class="line">输出: 2</span><br><span class="line">解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p><img src="/2019/11/08/AVL树的公共祖先/1.png" alt></p><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>又是一道递归题目，我们来分析一下流程</p><ol><li>对于当前节点，判断p、q和当前节点值的大小</li><li>如果p和q都大于当前节点值，那么递归进入当前节点右子树</li><li>如果p和q都小于当前节点值，那么递归进入当前节点左子树</li><li>否则，当前节点就是p和q的公共祖先</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;</span><br><span class="line">int pval=p.val;</span><br><span class="line">int qval=q.val;</span><br><span class="line">int rval=root.val;</span><br><span class="line">if(pval&gt;rval&amp;&amp;qval&gt;rval)</span><br><span class="line">return lowestCommonAncestor(root.right,p,q);</span><br><span class="line">if(pval&lt;rval&amp;&amp;qval&lt;rval)</span><br><span class="line">return lowestCommonAncestor(root.left,p,q);</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> AVL树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文链表</title>
      <link href="/2019/11/08/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/11/08/%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百三十四题</b><br>难度：<font color="green">简单</font><br>题目：请判断一个链表是否为回文链表。(O(n)时间复杂度和O(1)空间复杂度)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 1-&gt;2</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 1-&gt;2-&gt;2-&gt;1</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>判断一个链表是否为回文链表很简单，但是要实现复杂度要求并且以较好的方式来实现，就要用到快慢指针法</p><ol><li>利用快慢指针，找到链表的中间节点</li><li>反转链表的前半部分</li><li>从链表头和链表中间节点开始往后遍历链表</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public boolean isPalindrome(ListNode head) &#123;</span><br><span class="line">if(head==null||head.next==null)</span><br><span class="line">return true;</span><br><span class="line">//快慢指针法使slow指向链表的(n+1)/2位置的节点</span><br><span class="line">ListNode slow=head;</span><br><span class="line">ListNode fast=head;</span><br><span class="line">while(fast!=null&amp;&amp;fast.next!=null)&#123;</span><br><span class="line">slow=slow.next;</span><br><span class="line">fast=fast.next.next;</span><br><span class="line">&#125;</span><br><span class="line">//反转前半部分链表</span><br><span class="line">ListNode Pre=head;</span><br><span class="line">ListNode Next=head.next;</span><br><span class="line">while(Next!=slow)&#123;</span><br><span class="line">head.next=Next.next;</span><br><span class="line">Next.next=Pre;</span><br><span class="line">Pre=Next;</span><br><span class="line">Next=head.next;</span><br><span class="line">&#125;</span><br><span class="line">//如果链表个数为奇数，去掉中间节点</span><br><span class="line">if(fast!=null)</span><br><span class="line">slow=slow.next;</span><br><span class="line">//比较</span><br><span class="line">while(slow!=null)&#123;</span><br><span class="line">if(Pre.val!=slow.val)</span><br><span class="line">return false;</span><br><span class="line">Pre=Pre.next;</span><br><span class="line">slow=slow.next;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，在解决链表问题时，快慢指针往往能够出其不意。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
            <tag> 快慢指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2的幂</title>
      <link href="/2019/11/08/2%E7%9A%84%E5%B9%82/"/>
      <url>/2019/11/08/2%E7%9A%84%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百三十一题</b><br>难度：<font color="green">简单</font><br>题目：给定一个整数，编写一个函数来判断它是否是 2 的幂次方</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 1</span><br><span class="line">输出: true</span><br><span class="line">解释: 20 = 1</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 16</span><br><span class="line">输出: true</span><br><span class="line">解释: 24 = 16</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: 218</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题，如果一上来就用普通的暴力遍历那就太简单了，我们可以通过2幂次方数的特点结合位运算来解决。首先，2的幂次方的数用二进制表示时只有一个1，其余都是0。并且有n&amp;(n-1)==0恒存在。知道了这点，这道题就更简单了</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public boolean isPowerOfTwo(int n) &#123;</span><br><span class="line">if(n&lt;=0)</span><br><span class="line">return false;</span><br><span class="line">if((n&amp;(n-1))==0)</span><br><span class="line">return true;</span><br><span class="line">return false;</span><br><span class="line">//一行代码解决</span><br><span class="line">//return n&gt;0&amp;&amp;(n&amp;(n-1))==0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深入理解二进制补码存储方式是很重要的，很多问题能够通过位运算得以大大简化。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转二叉树</title>
      <link href="/2019/11/08/%E5%8F%8D%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/11/08/%E5%8F%8D%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百二十六题</b><br>难度：<font color="green">简单</font><br>题目：翻转一棵二叉树</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>又是一道典型的递归解决的二叉树问题，而对于能使用递归解决的二叉树问题，通常也能够使用迭代来解决。<br>递归思路：</p><ol><li>递归出口：当前节点为null，返回null</li><li>遍历二叉树(我将使用先序遍历的方式)</li><li>遍历到二叉树的每一个节点，交换该节点的左右子树</li><li>递归遍历当前节点的左右子树</li><li>返回当前节点</li></ol><p>迭代思路：</p><ol><li>创建一个队列，将头节点入栈</li><li>如果队列不为空，取出队头节点，交换该节点的左右子树</li><li>如果该节点有左右子树，将其左右子树分别入栈</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//递归代码(先序遍历)</span><br><span class="line">public TreeNode invertTree(TreeNode root) &#123;</span><br><span class="line">//递归出口</span><br><span class="line">   if (root == null) &#123;</span><br><span class="line">  return null;</span><br><span class="line">   &#125;</span><br><span class="line">   //交换节点左右子树</span><br><span class="line">   TreeNode temp=root.left;</span><br><span class="line">   root.left=root.right;</span><br><span class="line">   root.right=temp;</span><br><span class="line">   //递归遍历当前节点左右子树</span><br><span class="line">   invertTree(root.right);</span><br><span class="line">   invertTree(root.left);</span><br><span class="line">   //返回当前节点</span><br><span class="line">   return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“====================================”</span><br><span class="line">//迭代代码：</span><br><span class="line">public TreeNode invertTree(TreeNode root) &#123;</span><br><span class="line">    if (root == null) return null;</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;TreeNode&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    while (!queue.isEmpty()) &#123;</span><br><span class="line">        TreeNode current = queue.poll();</span><br><span class="line">        TreeNode temp = current.left;</span><br><span class="line">        current.left = current.right;</span><br><span class="line">        current.right = temp;</span><br><span class="line">        if (current.left != null) queue.add(current.left);</span><br><span class="line">        if (current.right != null) queue.add(current.right);</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 迭代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedHashMap源码解析</title>
      <link href="/2019/11/06/LinkedHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/06/LinkedHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>了解了HashMap之后，我们就会发现，插入HashMap中的元素是不保证顺序的，因为元素在数组中是通过映射找到具体位置的，所以不保证取出元素的顺序和插入时的相等。那如果有这方面的要求，就要用到LinkedHashMap集合了。接下来就介绍一下JDK1.8下的LinkedHashMap集合。</p><hr><a id="more"></a><h1 id="节点继承关系"><a href="#节点继承关系" class="headerlink" title="节点继承关系"></a>节点继承关系</h1><p>在介绍LinkedHashMap之前，我们先看一下节点的继承关系：<br><img src="/2019/11/06/LinkedHashMap源码解析/1.jpg" alt> 从图中可以看到，HashMap中的树节点TreeNode是继承自LinkedHashMap的Entry节点。至于TreeNode不继承自身的Node而去继承Entry，这是有原因的，我们后面说。</p><p>LinkedHashMap内部类Entry继承自HashMap内部类Node，并新增了两个引用，分别是before和after。这两个引用的用途不难理解，也就是用于维护双向链表。同时，TreeNode继承LinkedHashMap 的内部类Entry后，就具备了和其他Entry一起组成链表的能力。但是这里需要大家考虑一个问题。当我们使用HashMap时，TreeNode并不需要具备组成链表能力。如果继承LinkedHashMap内部类Entry ，TreeNode就多了两个用不到的引用，这样做不是会浪费空间吗？</p><p>TreeNode对象的大小约是普通Node对象的2倍，我们仅在桶（bin）中包含足够多的节点时再使用。当桶中的节点数量变少时（取决于删除和扩容），TreeNode 会被转成 Node。当用户实现的 hashCode 方法具有良好分布性时，树类型的桶将会很少被使用。</p><p>一般情况下，只要 hashCode 的实现不糟糕，Node 组成的链表很少会被转成由 TreeNode 组成的红黑树。也就是说 TreeNode 使用的并不多，浪费那点空间是可接受的。<font color="red"><b>假如 TreeNode 机制继承自 Node 类，那么它要想具备组成链表的能力，就需要 Node 去继承 LinkedHashMap 的内部类 Entry。</b></font>这个时候就得不偿失了，浪费很多空间去获取不一定用得到的能力。</p><p></p><h1 id="LinkedHashMap新增属性"><a href="#LinkedHashMap新增属性" class="headerlink" title="LinkedHashMap新增属性"></a>LinkedHashMap新增属性</h1><p>LinkedHashMap集合能够维护插入顺序，继承自HashMap，所以它拥有HashMap的所有特性。在此基础上，还增加了两大特性</p><ol><li>按照插入顺序进行访问；</li><li>实现了访问量最少最先删除的功能，其目的是把很久没有访问的key自动删除</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//链表头</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line">//链表尾</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line">//控制两种访问模式，默认false</span><br><span class="line">//true：按照访问顺序，把经常访问的key放到队尾</span><br><span class="line">//false：按照插入顺序提供访问</span><br><span class="line">final boolean accessOrder;</span><br><span class="line"></span><br><span class="line">//继承HashMap的内部类Node，为每个节点增加了before和after属性</span><br><span class="line">static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        super(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="按照顺序访问"><a href="#按照顺序访问" class="headerlink" title="按照顺序访问"></a>按照顺序访问</h1><p>LinkedHashMap通过新节点的head和tail指针，将各个节点都连接起来，形成一个链表，从而达到保证顺序的目的</p><h2 id="按照插入顺序新增"><a href="#按照插入顺序新增" class="headerlink" title="按照插入顺序新增"></a><font size="5">按照插入顺序新增</font></h2><p>HashMap初始化时，默认accessOrder为false，就是会按照插入顺序提供访问，插入方法是使用父类的put方法，但是重写了父类put方法中的newNode/newTreeNode方法和afterNodeAccess方法。</p><ol><li>newNode/newTreeNode方法。控制新增节点追加到链表尾部，这样每次新节点都追加到尾部，就可以保证插入顺序了，我们以newNode源码为例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; e) &#123;</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">new LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">linkNodeLast(p);</span><br><span class="line">return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”================================“</span><br><span class="line">private void linkNodeLast(LinkedHashMap.Entry&lt;K,V&gt; p) &#123;</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class="line">tail = p;</span><br><span class="line">if (last == null)</span><br><span class="line">head = p;</span><br><span class="line">else &#123;</span><br><span class="line">p.before = last;</span><br><span class="line">last.after = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>从源码可以发现，LinkedHashMap通过新增头节点、尾节点，给每个节点增加before、after属性，在每次新增时，就已经维护了按照插入顺序的链表。</p><h2 id="按照插入顺序访问"><a href="#按照插入顺序访问" class="headerlink" title="按照插入顺序访问"></a><font size="5">按照插入顺序访问</font></h2><p>LinkedHashMap只提供了单向访问，即按照插入顺序从头到尾进行访问，无法像LinkedList一样进行双向访问。我们主要通过迭代器进行访问，迭代器在初始化时默认从头节点开始，在迭代的过程中不断访问当前节点的after节点即可。<br>Map对key、value和entry节点都提供了迭代的方法，假设我们现在对entry进行迭代，就可以使用LinkedHashMap.entrySet().iterator()来返回迭代器LinkedHashIterator，通过调用迭代器的nextNode方法就可以得到下一个节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//获取entrySet</span><br><span class="line">public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">return (es = entrySet) == null ? (entrySet = new LinkedEntrySet()) : es;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=====================================“</span><br><span class="line">//通过entrySet的iterator方法获取迭代器</span><br><span class="line">public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">return new LinkedEntryIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=====================================“</span><br><span class="line">//LinkedEntryIterator迭代器类，继承自LinkedHashIterator  </span><br><span class="line">final class LinkedEntryIterator extends LinkedHashIterator</span><br><span class="line">implements Iterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">public final Map.Entry&lt;K,V&gt; next() &#123; return nextNode(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=====================================“</span><br><span class="line">//最终逻辑方法nextNode()返回节点</span><br><span class="line">final LinkedHashMap.Entry&lt;K,V&gt; nextNode() &#123;</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; e = next;</span><br><span class="line">//判断版本号，快速失败策略</span><br><span class="line">if (modCount != expectedModCount)</span><br><span class="line">throw new ConcurrentModificationException();</span><br><span class="line">if (e == null)</span><br><span class="line">throw new NoSuchElementException();</span><br><span class="line">//返回当前接待你，next执行下一个节点</span><br><span class="line">current = e;</span><br><span class="line">next = e.after;</span><br><span class="line">return e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然迭代器next方法调用过程比较复杂，但是我们可以发现其逻辑代码却很简单，只是通过节点的after指针不断的访问下一个节点而已。</p><h1 id="访问最少删除策略"><a href="#访问最少删除策略" class="headerlink" title="访问最少删除策略"></a>访问最少删除策略</h1><p>这种策略也叫做LRU(Least recently used)，大概意思就是经常访问的元素会被追加到队尾，这样不经常访问的数据自然就靠近队头，然后我们可以通过设置删除策略，比如当Map元素个数大于多少时把头节点删除。</p><h2 id="元素被转移到队尾"><a href="#元素被转移到队尾" class="headerlink" title="元素被转移到队尾"></a><font size="5">元素被转移到队尾</font></h2><p>我们来看一下LinkedHashMap的get()方法源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public V get(Object key) &#123;</span><br><span class="line">Node&lt;K,V&gt; e;</span><br><span class="line">if ((e = getNode(hash(key), key)) == null)</span><br><span class="line">return null;</span><br><span class="line">if (accessOrder)</span><br><span class="line">afterNodeAccess(e);</span><br><span class="line">return e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”========================“</span><br><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; // move node to last</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line"></span><br><span class="line">if (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">(LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">p.after = null;</span><br><span class="line">        //如果当前节点为头节点</span><br><span class="line">if (b == null)</span><br><span class="line">head = a;</span><br><span class="line">else</span><br><span class="line">b.after = a;</span><br><span class="line">        //如果当前节点不是尾节点</span><br><span class="line">if (a != null)</span><br><span class="line">a.before = b;</span><br><span class="line">        //如果当前节点是尾节点</span><br><span class="line">else</span><br><span class="line">last = b;</span><br><span class="line">//如果当前链表只有一个节点</span><br><span class="line">if (last == null)</span><br><span class="line">head = p;</span><br><span class="line">else &#123;</span><br><span class="line">p.before = last;</span><br><span class="line">last.after = p;</span><br><span class="line">&#125;</span><br><span class="line">        //将当前节点移到链表尾部</span><br><span class="line">tail = p;</span><br><span class="line">++modCount;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码可以发现，LinkedHashMap重写了父类HashMap的get()方法，通过afterNodeAccess()方法将当前访问节点移到队尾。</p><h2 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a><font size="5">删除策略</font></h2><p>前面说过，LinkedHashMap可以设置在当插入元素超过一定数量时候删除队头元素。这是怎么实现的呢？首先LinkedHashMap并没有实现自己的put方法，调用的是HashMap的put方法。重写了HashMap的put方法中的afterNodeInsertion(evict)方法在每次添加元素后如果元素个数超过设置的阈值则会调用该方法删除链表头元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除策略方法</span><br><span class="line"> * @param evict：HashMap的put方法中传递true值</span><br><span class="line"> */</span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; </span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">K key = first.key;</span><br><span class="line">//调用HashMap的removeNode方法删除节点</span><br><span class="line">removeNode(hash(key), key, null, false, true);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=======================================&quot;</span><br><span class="line">//该方法用于设置阈值，当元素超过阈值时删除链表头元素</span><br><span class="line">//可通过继承LinkedHashMap类重写该方法修改阈值</span><br><span class="line">protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中最终的删除方法调用的仍然是HashMap的删除方法，LinkedHashMap并没有重写该方法。但是重写了removeNode()方法中的afterNodeRemoval方法，使得在删除节点后调整链表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//删除节点后调整链表</span><br><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; e) &#123; // unlink</span><br><span class="line">LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">(LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">p.before = p.after = null;</span><br><span class="line">if (b == null)</span><br><span class="line">head = a;</span><br><span class="line">else</span><br><span class="line">b.after = a;</span><br><span class="line">if (a == null)</span><br><span class="line">tail = b;</span><br><span class="line">else</span><br><span class="line">a.before = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过查看源码不难发现，LinkedHashMap继承自HashMap，主要重写了HashMap的Node类，实现了自己的Entry内部类(其实就是为每个节点增加了一个before和after指针)。LinkedHashMap的大多方法调用的仍是父类的方法。主要重写了四个方法，分别是</p><ol><li>newNode/newTreeNode方法：用于在添加元素时维护一个链表</li><li>afterNodeRemoval方法，用于在删除节点时维护链表</li><li>afterNodeInsertion方法，在LRU模式下，设置元素阈值，当元素个数超过阈值时删除链表头元素</li><li>afterNodeAccess方法，设置LRU模式，将最少访问的节点放在链表头部</li></ol><p>LinkedHashMap通过在HashMap的基础上增加一个双向链表来实现相应的功能，不得不说还是比较巧妙的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> LinkedHashMap集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用队列实现栈</title>
      <link href="/2019/11/05/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>/2019/11/05/%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百二十五题</b><br>难度：<font color="green">简单</font><br>题目：使用队列实现栈的下列操作：</p><ol><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空<hr><a id="more"></a></li></ol><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>我们知道队列具有FIFO，即先进先出的特点；而栈具有FILO-先进后出的特点。要想用队列实现栈的功能，有两种不同的思路。</p><ol><li>使用两个队列，其中一个队列作为转换。</li><li>使用一个队列，再插入时做一些特殊操作。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>前面介绍的比较简单，下面演示一下一个队列的实现，逻辑比较简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class MyStack &#123;</span><br><span class="line">    private Queue&lt;Integer&gt; q=new LinkedList&lt;&gt;();</span><br><span class="line">    public MyStack() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void push(int x) &#123;</span><br><span class="line">        q.add(x);</span><br><span class="line">       for(int i=0;i&lt;q.size()-1;i++)</span><br><span class="line">//这个是插入的核心逻辑</span><br><span class="line">           q.add(q.poll());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public int pop() &#123;</span><br><span class="line">        return q.poll();</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    public int top() &#123;</span><br><span class="line">        return q.peek();</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    public boolean empty() &#123;</span><br><span class="line">        return q.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看出，我们在每次插入时花费O(n)的时间复杂度，将队列中元素变成栈的顺序，而在其他操作时可以直接当作栈来处理，因此时间复杂度为O(1)。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 队列 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反转链表</title>
      <link href="/2019/11/05/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/11/05/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百零六题</b><br>难度：<font color="green">简单</font><br>题目：反转一个单链表。(递归和迭代反转链表)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>迭代实现</p><ol><li>判断临界情况，如果链表为空或只有一个元素，直接返回链表</li><li>需要创建两个临时指针next和pre。next初始化为head.next，pre初始化为null</li><li>next指针指向需要反转的节点，pre指向反转后的第一个节点。</li><li>反转过程如图所示<br><img src="/2019/11/05/反转链表/1.png" alt></li></ol><p>递归实现<br>代码比较简单，建议创建2个节点的链表，手动画一下递归过程中节点的变化。会更容易理解一些</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//迭代法</span><br><span class="line">public ListNode reverseList(ListNode head) &#123;</span><br><span class="line">//判断临界情况</span><br><span class="line">if(head==null||head.next==null)</span><br><span class="line">return head;</span><br><span class="line">//初始化临时指针</span><br><span class="line">ListNode Next=head.next;</span><br><span class="line">ListNode Pre=head;</span><br><span class="line">//遍历链表</span><br><span class="line">while(Next!=null)&#123;</span><br><span class="line">head.next=Next.next;</span><br><span class="line">Next.next=Pre;</span><br><span class="line">Pre=Next;</span><br><span class="line">Next=head.next;</span><br><span class="line">&#125;</span><br><span class="line">//返回新头指针</span><br><span class="line">return Pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;=================================&quot;</span><br><span class="line">//递归法</span><br><span class="line">public ListNode reverseList(ListNode head) &#123;</span><br><span class="line">//递归出口</span><br><span class="line">    if (head == null || head.next == null) return head;</span><br><span class="line">    ListNode p = reverseList(head.next);</span><br><span class="line">//反转代码</span><br><span class="line">    head.next.next = head;</span><br><span class="line">//这个不能少，否则可能会产生循环链表</span><br><span class="line">//当链表长度为2时</span><br><span class="line">    head.next = null;</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的迭代都能转化为递归，这里迭代的思路比较简单，递归解法就比较考验递归的思路是否清晰了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同构字符串</title>
      <link href="/2019/11/05/%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/11/05/%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百零五题</b><br>难度：<font color="green">简单</font><br>题目：给定两个字符串 s 和 t，判断它们是否是同构的。如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: s = &quot;egg&quot;, t = &quot;add&quot;</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: s = &quot;foo&quot;, t = &quot;bar&quot;</span><br><span class="line">输出: false</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: s = &quot;paper&quot;, t = &quot;title&quot;</span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">说明:</span><br><span class="line">你可以假设 s 和 t 具有相同的长度。</span><br></pre></td></tr></table></figure><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><ol><li>通用的解决方法是使用哈希表来解决这种映射问题，同时遍历两字符串，将两串对应位置的字符以键值对的形式存储进去。如果后面遇到值相同键不相同或者键相同值不相同的键值对，则说明这两个字符串不是同构的。</li><li>还有一种巧妙地方法，如果两字符串是同构字符串，那么两字符串中相同映射的字符第一次出现的位置相等。例如”add”和”egg”,对于”d-g”键值对，第一次出现的位置索引都是1。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//HashMap解决</span><br><span class="line">public boolean isIsomorphic(String s, String t) &#123;</span><br><span class="line">Map&lt;Character,Character&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">//方便遍历，将字符串转换为数组</span><br><span class="line">char[] ss=s.toCharArray();</span><br><span class="line">char[] tt=t.toCharArray();</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;ss.length;i++)&#123;</span><br><span class="line">if(map.containsKey(ss[i]))&#123;</span><br><span class="line">if(map.get(ss[i])!=tt[i])</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else if(map.containsValue(tt[i]))</span><br><span class="line">return false;</span><br><span class="line">else&#123;</span><br><span class="line">map.put(ss[i],tt[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;======================================&quot;</span><br><span class="line">//巧妙解法</span><br><span class="line">public boolean isIsomorphic(String s, String t) &#123;</span><br><span class="line"></span><br><span class="line">char[] ss=s.toCharArray();</span><br><span class="line">char[] tt=t.toCharArray();</span><br><span class="line">for(int i=0;i&lt;ss.length;i++)&#123;</span><br><span class="line">if(s.indexOf(ss[i])!=t.indexOf(tt[i]))</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码解析</title>
      <link href="/2019/11/04/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/04/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>介绍完了List集合，接下来就介绍一下Map集合中最常用的的HashMap集合，本文还是基于JDK1.8来介绍HashMap集合，由于HashMap集合比较复杂，这里只介绍一部分内容，对于红黑树部分跳过，本文基于JDK1.8版本。</p><hr><a id="more"></a><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>在JDK1.8中，对HashMap进行了调整，1.8及其以后的数据结构主要是数组+链表+红黑树。其中当链表长度大于等于8并且数组长度大于等于64时，链表会转化为红黑树；当红黑树大小小于等于6时，红黑树会转化成链表，整体的数据结构如下图：<br><img src="/2019/11/04/HashMap源码解析/1.png" alt>左边竖着的就是HashMap的数组结构，数组的元素有三种情况</p><ol><li>单个Node节点(存放键值对数据)</li><li>一个链表</li><li>一个红黑树</li></ol><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><p>从HashMap的类注释中，我们可以得知：</p><ol><li>HashMap允许存储null值</li><li>loadfactor(负载因子)默认为0.75，这时均衡了时间和空间损耗算出来的值。如果较高虽然节省了空间，但是增加了查找成本(hash冲突增加，链表长度边长)</li><li>扩容条件：当<font color="red"><b>HashMap中元素的个数(size)&gt;=数组大小(Capacity)*负载因子(loadfactor)时，就要进行扩容。</b></font></li><li>如果有很多数据需要存储到HashMap中，建议HashMap一开始就设置成足够的大小，这样可以防止在使用过程中不断扩容。影响性能。</li><li>HashMap是非线程安全的，我们可以自己在外部加锁，或者使用Collections.synchronizedMap。该类和前面List集合一样，通过在每个方法上加锁来达到线程安全的目的。</li><li>HashMap是快速失败的，即在迭代过程中如果结构发生了变化，就会抛出异常。</li></ol><h2 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a><font size="5">类属性</font></h2><p>在介绍HashMap的方法之前，先了解一下HashMap的一些成员属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">数组初始容量为16</span><br><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line"></span><br><span class="line">//数组能扩容的最大容量</span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line">//默认负载因子为0.75</span><br><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line"></span><br><span class="line">//当链表长度大于等于时，链表转化为红黑树</span><br><span class="line">static final int TREEIFY_THRESHOLD = 8;</span><br><span class="line"></span><br><span class="line">//当红黑树大小小于等于6时，红黑树转换为链表</span><br><span class="line">static final int UNTREEIFY_THRESHOLD = 6;</span><br><span class="line"></span><br><span class="line">//当数组大小大于64时，链表才会转换为红黑树</span><br><span class="line">static final int MIN_TREEIFY_CAPACITY = 64;</span><br><span class="line"></span><br><span class="line">//存放数据的数组</span><br><span class="line">transient Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">//HashMap元素的个数</span><br><span class="line">transient int size;</span><br><span class="line"></span><br><span class="line">//记录HashMap版本，用于快速失败</span><br><span class="line">transient int modCount;</span><br><span class="line"></span><br><span class="line">//扩容的门槛</span><br><span class="line">//如果初始化时给定数组大小，那么通过tableSizeFor计算，</span><br><span class="line">//数组大小永远接近于2的幂次方，如果给定19，那么实际上初始化大小为32。</span><br><span class="line">//如果是通过resize()方法进行扩容，那么threshold=数组大小*0.75</span><br><span class="line">int threshold;</span><br><span class="line"></span><br><span class="line">//负载因子</span><br><span class="line">final float loadFactor;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><font size="5">构造方法</font></h2><p>后面讲到的扩容和初始化方式有关，因此这里先介绍一下构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 指定数组大小和负载因子构造方法</span><br><span class="line"> * @param 指定数组大小</span><br><span class="line"> * @param 指定负载因子</span><br><span class="line"> */</span><br><span class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    //如果参数小于0，抛出异常</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    //如果指定容量大于HashMap能扩容的最大值，就令其为最大值</span><br><span class="line">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    //如果负载因子为空或小于0，抛出异常</span><br><span class="line">    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    //前面讲过，使用tableSizeFor方法使得数组大小一直是一个接近2的幂次方的数</span><br><span class="line">    //关于tableSizeFor()方法一会儿介绍</span><br><span class="line">    this.loadFactor = loadFactor;</span><br><span class="line">    this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">/**</span><br><span class="line"> * 空参构造方法</span><br><span class="line"> * 则负载因子为0.75</span><br><span class="line"> * 初始容量为0</span><br><span class="line"> */</span><br><span class="line">public HashMap() &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">/**</span><br><span class="line"> * 一个参数构造方法</span><br><span class="line"> * 负载因子默认0.75</span><br><span class="line"> * @param 指定数组初始容量</span><br><span class="line"> */</span><br><span class="line">public HashMap(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="初始化方法源码"><a href="#初始化方法源码" class="headerlink" title="初始化方法源码"></a>初始化方法源码</h1><p>下面我们首先来介绍一些HashMap中一些和初始化相关的方法源码。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash()"></a><font sze="5">hash()</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 求键值对中键的哈希码</span><br><span class="line"> * @param key</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该hash()方法将Key的哈希值高16位和低16位做异或运算。后面介绍这样做的好处</p><h2 id="tableSizeFor-int-cap"><a href="#tableSizeFor-int-cap" class="headerlink" title="tableSizeFor(int cap)"></a><font sze="5">tableSizeFor(int cap)</font></h2><p>前面介绍过，HashMap会使数组大小尽量维持在2的幂次方，那么当使用指定大小初始化时，如果指定的初始大小不是2的幂次方，就会调用此方法，将数组大小变为接近指定参数的2的幂次方。例如指定大小为19，那么数组实际大小为32。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static final int tableSizeFor(int cap) &#123;</span><br><span class="line">int n = cap - 1;</span><br><span class="line">n |= n &gt;&gt;&gt; 1;</span><br><span class="line">n |= n &gt;&gt;&gt; 2;</span><br><span class="line">n |= n &gt;&gt;&gt; 4;</span><br><span class="line">n |= n &gt;&gt;&gt; 8;</span><br><span class="line">n |= n &gt;&gt;&gt; 16;</span><br><span class="line">return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法的思路很厉害，我们来分析一下：<br>首先，这个方法是在指定大小初始化方法中被调用的。通过查看这两个构造方法可以保证传递进来的参数0&lt;=cap&lt;=MAXIMUM_CAPACITY。</p><ol><li>当cap=0时，n=-1，那么经过5行移位和或运算之后n的仍为-1。我们再看最后一行返回代码，当n&lt;0时返回1(2的0次方)</li><li>当cap=1时，n=0，那么经过一系列操作之后n仍为0。同样的我们看最后一行返回语句，此时返回n+1=1(2的0次方)</li><li>当cap=2的幂次方(二进制表示就是只有一个1其余全是0，如1000)，那么最后运算得到的返回值仍为cap。</li><li>如果cap是其他值，那么经过移位运算和或运算之后得到的值一定是…1111(2的n次幂-1)，最后如果没有超出范围则返回2的n次幂。并且返回值是比cap大的最近的2的幂次方。</li></ol><p>那么int n=cap-1有什么用呢？<br>当cap=2的幂次方时，如果不采取这一步操作，最后得到的值就是2*cap，而不是cap。</p><hr><font color="red" size="5"><b>hash()方法能够得到键值对的hash值，而tableSizeFor()方法在使用指定大小构造方法时能够将数组的大小指定为2的幂次方。</b></font><hr><h1 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h1><p>前面说过，当哈希表中元素个数大于扩容门槛时，会对数组进行扩容。下面就来具体介绍一下扩容方法。</p><h2 id="扩容源码分析"><a href="#扩容源码分析" class="headerlink" title="扩容源码分析"></a><font size="5">扩容源码分析</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    //记录扩容前数组</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    //记录扩容前数组长度</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;</span><br><span class="line">    //记录扩容前数组的扩容门槛threshold</span><br><span class="line">    int oldThr = threshold;</span><br><span class="line">    //初始化新数组的大小和扩容门槛</span><br><span class="line">    int newCap, newThr = 0;</span><br><span class="line"></span><br><span class="line">    //如果扩容前数组不为空</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">    </span><br><span class="line">        //如果上一次已经将数组扩容为最大长度</span><br><span class="line">        //那么就将扩容门槛threshold调整为最大值</span><br><span class="line">        //此时并不进行扩容</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        //先将新数组容量设置为老数组的二倍</span><br><span class="line">        //如果没有超过最大容量并且老数组大小大于初始容量</span><br><span class="line">        //则将新的扩容门槛也变为老数组扩容门槛的二倍</span><br><span class="line">        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; 1; // double threshold</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果扩容前数组为空，但是扩容前数组的扩容门槛大于0，即创建对象时使用的带参构造方法</span><br><span class="line">    else if (oldThr &gt; 0)</span><br><span class="line">        //将前面tableSizeFor()方法得到的数赋值给新数组大小</span><br><span class="line">        newCap = oldThr;</span><br><span class="line"></span><br><span class="line">        //扩容前数组为空并且扩容门槛为0，即创建对象时使用的无参数初始化</span><br><span class="line">    else &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //进入次if语句有两种可能</span><br><span class="line">    //1. 进入if(oldCap&gt;0)分支但是不满足里面两个if条件</span><br><span class="line">    //2. 进入了else if (oldThr &gt; 0)分支</span><br><span class="line"></span><br><span class="line">    //第一种情况说明此时是扩容，并且创建对象时使用的带参构造方法并且指定数组的大小小于16</span><br><span class="line">    //第二种情况说明此时是初始化，并且创建对象时使用的带参构造方法</span><br><span class="line">    if (newThr == 0) &#123;</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //创建新数组，修改扩容门槛threshold</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line"></span><br><span class="line">    //将数据拷贝到新数组中</span><br><span class="line">    if (oldTab != null) &#123;</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                oldTab[j] = null;</span><br><span class="line">                //如果槽内是一个节点，直接重新映射</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                //如果槽内是红黑树，那么调用红黑树的方法进行映射</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                //槽内是一个链表</span><br><span class="line">                else &#123; // preserve order</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        //将链表分为两部分，一部分仍在原来位置(lo)</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        //另外一部分重新映射(hi)</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; while ((e = next) != null);</span><br><span class="line">                    </span><br><span class="line">                    if (loTail != null) &#123;</span><br><span class="line">                        loTail.next = null;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    if (hiTail != null) &#123;</span><br><span class="line">                        hiTail.next = null;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩容总结"><a href="#扩容总结" class="headerlink" title="扩容总结"></a><font size="5">扩容总结</font></h2><p>根据源码，我们来对HashMap的扩容方法进行总结</p><ol><li><p>首先判断本次操作是<font color="red"><b>初始化还是扩容</b></font>操作</p></li><li><p>如果是<b>初始化</b>，那么分三种情况</p><ol><li>使用<font color="red"><b>无参构造方法</b></font>时：第一次扩容大小为16，扩容门槛为12</li><li>使用<font color="red"><b>指定大小(cap)构造方法</b></font>时，又分两种情况<ol><li>cap&lt;最大容量(2的30次方)。此时数组大小为cap，扩容门槛为cap*0.75。</li><li>cap&gt;=最大容量，此时扩容门槛直接设为Integer.MAX_VALUE</li></ol></li></ol></li><li><p>如果是<b>扩容</b>操作，那么继续进行判断</p><ol><li>如果此时数组大小已经大于等于最大容量，那么将扩容门槛设置为Integer.MAX_VALUE，并不进行扩容</li><li>否则新数组大小和新扩容门槛都是原来的2倍</li><li>如果上一步计算扩容门槛时溢出归零(当指定的扩容因子为2的幂次方时)，那么将扩容门槛设置为Integer.MAX_VALUE</li></ol></li><li><p>最后得到新的数组和新的扩容门槛，然后将原来的数据重新映射到新数组上</p></li><li><p>遍历老数组，针对节点、链表和红黑树分别进行不同的操作</p><ol><li>如果当前位置是节点，那么直接通过[hash&amp;(newcap-1)]将节点映射到新的位置</li><li>如果当前位置是链表，那么会将链表分成两部分，一部分在原位置不动，另一部分重新映射</li><li>如果当前位置是红黑树，那么同样的将红黑树分成两部分，一部分在原位置，一部分映射到新位置。并且对两部分的大小进行判断:如果小于等于6，则将该部分链化；反之，将该部分树化。</li></ol></li></ol><hr><h1 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h1><p>向哈希表中新增一个键值对，大概步骤如下</p><ol><li>数组有无初始化，如果没有则先初始化</li><li>通过hash()方法计算得到的key的hash能够直接找到值，跳转到6，否则跳转到3</li><li>如果哈希冲突，有两种解决方案：链表或红黑树</li><li>如果是链表，递归循环，将新元素添加到队尾</li><li>如果是红黑树，调用红黑树的新增方法</li><li>通过2、4、5将新元素追加成功，再根据onlyAbsent()方法判断是否需要覆盖</li><li>判断是否需要扩容，结束</li></ol><p>我们来看一下源码实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”===================================“</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Implements Map.put and related methods.</span><br><span class="line"> *</span><br><span class="line"> * @param 键的哈希值</span><br><span class="line"> * @param 键值对中键的值</span><br><span class="line"> * @param 键值对中值的值</span><br><span class="line"> * @param 如果是true，那么如果key有重复，不进行覆盖。默认为false</span><br><span class="line"> * @param evict if false, the table is in creation mode.</span><br><span class="line"> * @return previous value, or null if none</span><br><span class="line"> */</span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span><br><span class="line">               boolean evict) &#123;</span><br><span class="line">    //哈希表的底层结构之一：数组</span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    //下标为i位置的Node值</span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    //数组长度</span><br><span class="line">    int n,i;</span><br><span class="line">    </span><br><span class="line">    //如果数组为空，那么先初始化数组</span><br><span class="line">    if ((tab = table) == null || (n = tab.length) == 0)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        </span><br><span class="line">    //如果数组中要插入的位置为空，那么直接插入</span><br><span class="line">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">        </span><br><span class="line">    //如果要插入的位置有值，即出现哈希冲突。</span><br><span class="line">    else &#123;</span><br><span class="line">        //当前节点的临时变量</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        K k;</span><br><span class="line">        //如果要插入的节点的key和要插入位置的节点的key他们</span><br><span class="line">        //的hash和值都相等，直接将当前下标位置的Node赋值给e</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">            </span><br><span class="line">        //否则，判断如果是红黑树结构，使用红黑树的方式新增</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        //如果是链表，将新节点放到链表尾端</span><br><span class="line">        else &#123;</span><br><span class="line">            //自旋</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                //表示从头开始，遍历链表。p.next==null表明p是链表的尾节点</span><br><span class="line">                if ((e = p.next) == null) &#123;</span><br><span class="line">                    //把新节点放到链表的尾部</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    //如果链表的长度大于8，链表转为红黑树</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                //链表遍历的过程中，发现有元素和新增元素相等，结束循环</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    break;</span><br><span class="line">                //将p向后移</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //找到了哈希冲突的点</span><br><span class="line">        if (e != null) &#123; // existing mapping for key</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            //如果允许覆盖则覆盖原来的值</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果没有哈希冲突，就要向hashmap中添加新节点</span><br><span class="line">    //这样以来map的结构就发生了变化</span><br><span class="line">    ++modCount;</span><br><span class="line">    //如果size超过扩容门槛，则进行扩容</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将hash值映射到数组"><a href="#将hash值映射到数组" class="headerlink" title="将hash值映射到数组"></a><font size="5">将hash值映射到数组</font></h2><p>介绍完了添加方法，就可以说明hash()方法以及如何将hash值映射到相应数组下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//求哈希值</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将哈希值映射到数组下标</span><br><span class="line">int n=tab.length;</span><br><span class="line">p = tab[(n - 1) &amp; hash]</span><br></pre></td></tr></table></figure><p>从代码中可以发现映射函数为f(hash)=(length-1)&amp;hash。首先在前面说过，哈希表数组的长度都为2的幂次方，因此，length-1就能够得到一个一串连续二进制1组成的数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16-1=15=1111</span><br><span class="line">32-1=31=11111</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>因此可以发现，上面的移位方式和取模达到的效果是一样的，但是比取模运算高效很多。</p><h2 id="hash值的原理"><a href="#hash值的原理" class="headerlink" title="hash值的原理"></a><font size="5">hash值的原理</font></h2><p>介绍了如何将hash值映射到数组中，现在就介绍一下为什么要这样求hash值，它的道理在哪里？我们先看一组示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">直接使用hashCode作为hash值</span><br><span class="line"></span><br><span class="line">对于下面两组明显不同的HashCode</span><br><span class="line">0101 0011 0010 1010 1101 1011 0101 1010</span><br><span class="line">0101 1010 0000 1110 0001 0111 0010 1010</span><br><span class="line"></span><br><span class="line">此时数组容量为16</span><br><span class="line">如果直接使用hashCode作为hash值</span><br><span class="line"></span><br><span class="line">0101 0011 0010 1010 1101 1011 0101 1010</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1010==&gt;数组下标:1010  </span><br><span class="line">            </span><br><span class="line">0101 1010 0000 1110 0001 0111 0010 1010</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1010==&gt;数组下标:1010</span><br></pre></td></tr></table></figure><p>通过运算我们发现，这两个完全不同的hashCode被映射到了同一个数组下标1010。不仅如此，只要后四位相同的hashCode都会被映射到同一数组下标，这样的hash算法相当于只看hashCode的低位，高位完全不能产生影响，这是完全不合理的。因此，HashMap采用的hash算法将高位和低位取异或运算，使得高位也能够产生影响，从而使得分布更加均匀。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">使用hash算法求hash值</span><br><span class="line"></span><br><span class="line">对于下面两组明显不同的HashCode</span><br><span class="line">0101 0011 0010 1010 1101 1011 0101 1010</span><br><span class="line">0101 1010 0000 1110 0001 0111 0010 1010</span><br><span class="line"></span><br><span class="line">求hash值</span><br><span class="line">0101 0011 0010 1010 1101 1011 0101 1010</span><br><span class="line">0000 0000 0000 0000 0101 0011 0010 1010</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0101 0011 0010 1010 1000 1000 0111 0000</span><br><span class="line"></span><br><span class="line">0101 1010 0000 1110 0001 0111 0010 1010</span><br><span class="line">0000 0000 0000 0000 0101 0011 0010 1011</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0101 1010 0000 1110 0100 0100 0000 0001</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此时数组容量为16</span><br><span class="line">如果直接使用hashCode作为hash值</span><br><span class="line"></span><br><span class="line">0101 0011 0010 1010 1000 1000 0111 0000</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0000==&gt;数组下标：0</span><br><span class="line">            </span><br><span class="line">0101 1010 0000 1110 0100 0100 0000 0001</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 1111</span><br><span class="line">——————————————————————————————————————</span><br><span class="line">0000 0000 0000 0000 0000 0000 0000 0000==&gt;数组下标：1</span><br></pre></td></tr></table></figure><p>具体的添加细节，向链表中添加比较简单，直接添加到链表末尾即可。由于对红黑树不太了解，因此向红黑树中添加就不赘述。</p><hr><h1 id="链表树化、红黑树链化和拆分"><a href="#链表树化、红黑树链化和拆分" class="headerlink" title="链表树化、红黑树链化和拆分"></a>链表树化、红黑树链化和拆分</h1><h2 id="链表树化"><a href="#链表树化" class="headerlink" title="链表树化"></a><font size="5">链表树化</font></h2><p>我们知道，链表转化成红黑树需要连个条件</p><ol><li><b>链表长度≥8</b></li><li><b>数组长度≥64</b></li></ol><p>满足这两个条件，链表将会转化为红黑树。通过添加方法可以知道，在添加方法中，链表树化的方法是treeifyBin，我们来看一看这个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将链表节点转化为红黑树节点</span><br><span class="line"> * @param tab 数组</span><br><span class="line"> * @param hash 转化红黑树的链表的哈希值</span><br><span class="line"> */</span><br><span class="line">final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) &#123;</span><br><span class="line">    int n, index; Node&lt;K,V&gt; e;</span><br><span class="line"></span><br><span class="line">    //如果此时桶长度小于64，那么进行扩容</span><br><span class="line">    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">        resize();</span><br><span class="line"></span><br><span class="line">    //如果当前位置不为空</span><br><span class="line">    else if ((e = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        //头节点和尾节点</span><br><span class="line">        TreeNode&lt;K,V&gt; hd = null, tl = null;</span><br><span class="line"></span><br><span class="line">        //do-while循环将链表节点转换为树节点的同时</span><br><span class="line">        //也形成了一个双向链表</span><br><span class="line">        do &#123;</span><br><span class="line">            //TreeNode有五个属性</span><br><span class="line">            //parent、color、left、right、prev、next</span><br><span class="line">            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null);</span><br><span class="line"></span><br><span class="line">            if (tl == null)</span><br><span class="line">                hd = p;</span><br><span class="line">            else &#123;</span><br><span class="line">                p.prev = tl;</span><br><span class="line">                tl.next = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tl = p;</span><br><span class="line">        &#125; while ((e = e.next) != null);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //hd节点作为红黑树的根节点</span><br><span class="line">        if ((tab[index] = hd) != null)</span><br><span class="line">            hd.treeify(tab);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过链表节点得到红黑树节点</span><br><span class="line"> * @param p</span><br><span class="line"> * @param next</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">TreeNode&lt;K,V&gt; replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">    return new TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到treeifyBin方法实际上是<font color="red"><b>将链表节点转换成红黑树节点，并将这些红黑树节点组成双向链表(这些节点的顺序和之前一样)</b></font>，然后调用treeify方法，将这些红黑树节点组成红黑树。但是，组成红黑树后，prev和next节点仍然存在，也就是说，此时即是双向链表又是红黑树</p><p>至于生成红黑树的方法这里不作赘述。只提一点，我们知道，红黑树在进行插入操作时，需要比较插入节点和红黑树上节点的大小从而将节点插入正确的位置，但是由于红黑树是JDK1.8才实现的，HashMap在此之前并没有实现Comparable接口，因此无法直接使用compareTo()方法来比较大小，它是这么做的：</p><ol><li>比较节点的哈希值</li><li>如果哈希值相同，检测键类是否实现了Comparable接口，如果实现了则调用其compareTo()方法</li><li>如果还不行，那么就需要进行仲裁了，仲裁方法为 tieBreakOrde()</li></ol><h2 id="红黑树拆分"><a href="#红黑树拆分" class="headerlink" title="红黑树拆分"></a><font size="5">红黑树拆分</font></h2><p>扩容后，普通节点需要重新映射，红黑树节点也不例外。按照一般的思路，我们可以先把红黑树转成链表，之后再重新映射链表即可。这种处理方式是大家比较容易想到的，但这样做会损失一定的效率。不同于上面的处理方式，HashMap 实现的思路很是巧妙。如上节所说，在将普通链表转成红黑树时，HashMap 通过两个额外的引用next和prev保留了原链表的节点顺序。这样再对红黑树进行重新映射时，完全可以按照映射链表的方式进行。这样就避免了将红黑树转成链表后再进行映射，无形中提高了效率。在扩容方法中我们发现红黑树拆分的方法是split()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Splits nodes in a tree bin into lower and upper tree bins,</span><br><span class="line"> * or untreeifies if now too small. Called only from resize;</span><br><span class="line"> * see above discussion about split bits and indices.</span><br><span class="line"> *</span><br><span class="line"> * @param 当前map集合</span><br><span class="line"> * @param 新数组</span><br><span class="line"> * @param 需要拆分的红黑树</span><br><span class="line"> * @param 原来数组的大小</span><br><span class="line"> */</span><br><span class="line">final void split(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int index, int bit) &#123;</span><br><span class="line">    //当前红黑树的根节点</span><br><span class="line">    TreeNode&lt;K,V&gt; b = this;</span><br><span class="line">    // 将红黑树拆分成两个双向链表lo和hi(但是红黑树结构不变，知识改变了prev和next)</span><br><span class="line">    //分别定义其首尾节点</span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line"></span><br><span class="line">    int lc = 0, hc = 0;</span><br><span class="line">    for (TreeNode&lt;K,V&gt; e = b, next; e != null; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = null;</span><br><span class="line"></span><br><span class="line">        //第一部分，位于原位置不变</span><br><span class="line">        if ((e.hash &amp; bit) == 0) &#123;</span><br><span class="line">            if ((e.prev = loTail) == null)</span><br><span class="line">                loHead = e;</span><br><span class="line">            else</span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;</span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //第二部分，重新映射到距离当前位置bit的位置</span><br><span class="line">        else &#123;</span><br><span class="line">            if ((e.prev = hiTail) == null)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            else</span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //如果位于当前位置的部分红黑树不为空</span><br><span class="line">    if (loHead != null) &#123;</span><br><span class="line">        //并且节点数目小于等于6，说明该部分红黑树</span><br><span class="line">        //应该转换为链表存储</span><br><span class="line">        if (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            //红黑树链化</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        //如果该部分红黑树节点数目大于6，说明该部分</span><br><span class="line">        //仍需要以红黑树的方式存储</span><br><span class="line">        else &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            //将该部分重新组成红黑树</span><br><span class="line">            if (hiHead != null)</span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果位于index+bit位置的部分不为空</span><br><span class="line">    //和前面一部分进行相同的操作</span><br><span class="line">    if (hiHead != null) &#123;</span><br><span class="line">        if (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        else &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            if (loHead != null)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="红黑树拆分与链表重映射细节"><a href="#红黑树拆分与链表重映射细节" class="headerlink" title="红黑树拆分与链表重映射细节"></a><font size="5">红黑树拆分与链表重映射细节</font></h2><p>前面说过，我们再进行扩容时，对于链表和红黑树，都是将其分成两部分，一部分仍在原位置，另一部分重新映射，那么这是怎么做到的呢？</p><p>如果你认真看了resize()方法和split()方法的源码，会发现它们有相同之处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//resize()中将链表分成两部分的判断依据</span><br><span class="line">(e.hash &amp; oldCap) == 0)</span><br><span class="line"></span><br><span class="line">//split()中将红黑树分成两部分的判断依据</span><br><span class="line">(e.hash &amp; bit) == 0</span><br><span class="line"></span><br><span class="line">=====================</span><br><span class="line">不仅如此:</span><br><span class="line">链表的一部分仍在原位置index，另一部分在[index+oldCap]</span><br><span class="line">红黑树的一部分同样的原位置index，另一部分在[index+bit]</span><br></pre></td></tr></table></figure><p>通过上面的比较你是不是觉得很相似？那我你查看resize()方法中调用split()方法传递进去的参数，你会发现实际上<font color="red"><b>bit==oldCap</b></font>。这样一来你会发现它们分割的依据都是一样的，那么这是什么原因呢？我们先回顾一下映射的过程<br><img src="/2019/11/04/HashMap源码解析/1.jpg" alt> 上图中，桶数组大小 n = 16，hash1 与 hash2 不相等。但因为只有后4位参与求余，所以结果相等。当桶数组扩容后，n 由16变成了32，对上面的 hash 值重新进行映射：<br><img src="/2019/11/04/HashMap源码解析/2.jpg" alt> 扩容后，参与模运算的位数由4位变为了5位。由于两个 hash 第5位的值是不一样，所以两个 hash 算出的结果也不一样。上面的计算过程并不难理解，继续往下分析。<br><img src="/2019/11/04/HashMap源码解析/3.jpg" alt> 假设我们上图的桶数组进行扩容，扩容后容量 n = 16，重新映射过程如下:依次遍历链表，并计算节点 hash &amp; oldCap 的值。如下图所示<br><img src="/2019/11/04/HashMap源码解析/4.jpg" alt> 如果值为0，将 loHead 和 loTail 指向这个节点。如果后面还有节点 hash &amp; oldCap 为0的话，则将节点链入 loHead 指向的链表中，并将 loTail 指向该节点。如果值为非0的话，则让 hiHead 和 hiTail 指向该节点。完成遍历后，可能会得到两条链表，此时就完成了链表分组：<br><img src="/2019/11/04/HashMap源码解析/5.jpg" alt> 最后再将这两条链接存放到相应的桶中，完成扩容。如下图：<br><img src="/2019/11/04/HashMap源码解析/6.jpg" alt> 从上图可以发现，重新映射后，两条链表中的节点顺序并未发生变化，还是保持了扩容前的顺序。</p><h2 id="红黑树链化"><a href="#红黑树链化" class="headerlink" title="红黑树链化"></a><font size="5">红黑树链化</font></h2><p>前面说过，<font color="red"><b>即使链表转化成了红黑树，红黑树节点的prev和next指针仍然保留了原链表节点顺序。</b></font>那么红黑树的链化就非常简单了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 红黑树链化</span><br><span class="line"> * @param map</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">final Node&lt;K,V&gt; untreeify(HashMap&lt;K,V&gt; map) &#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = null, tl = null;</span><br><span class="line">    //通过next指针遍历红黑树</span><br><span class="line">    for (Node&lt;K,V&gt; q = this; q != null; q = q.next) &#123;</span><br><span class="line"></span><br><span class="line">        //将每个树节点转化成红黑树节点，并重新进行连接</span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, null);</span><br><span class="line">        if (tl == null)</span><br><span class="line">            hd = p;</span><br><span class="line">        else</span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;</span><br><span class="line">    &#125;</span><br><span class="line">    return hd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========================</span><br><span class="line">/**</span><br><span class="line"> * 通过红黑树节点生成链表节点</span><br><span class="line"> * @param p</span><br><span class="line"> * @param next</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">Node&lt;K,V&gt; replacementNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">    return new Node&lt;&gt;(p.hash, p.key, p.value, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h1><p>HashMap的查找主要分为三步</p><ol><li>根据hash算法求出hash值，然后映射到数组的索引位置。equals()判断当前节点是否是需要查找的key。是就返回true，否则执行2</li><li>判断当前节点有无next节点，如果有判断是链表类型还是红黑树类型，并执行3；没有返回false</li><li>分别走链表和红黑树不同类型的查找方式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public boolean containsKey(Object key) &#123;</span><br><span class="line">    return getNode(hash(key), key) != null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</span><br><span class="line">    //如果数组不为空并且长度大于0并且要hash值映射的数组位置不为空</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        </span><br><span class="line">        //如果当前节点的hash值和要查找的key的hash值相等</span><br><span class="line">        //并且两者也相等，直接返回当前节点</span><br><span class="line">        if (first.hash == hash &amp;&amp; </span><br><span class="line">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            return first;</span><br><span class="line">        //判断当前节点是否有下一个节点</span><br><span class="line">        if ((e = first.next) != null) &#123;</span><br><span class="line">            //如果是红黑树，调用红黑树查找方法</span><br><span class="line">            if (first instanceof TreeNode)</span><br><span class="line">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            //如果是链表则遍历链表查找</span><br><span class="line">            do &#123;</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">                    return e;</span><br><span class="line">            &#125; while ((e = e.next) != null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于红黑树的查找，可以大致介绍思路(类似AVL树)</p><ol><li>从根节点开始查找</li><li>比较当前节点和要查找key的hash值，根据红黑树左小右大的特性</li><li>判断查找节点在第2步有没有找到节点，如果找到直接返回，没有重复2、3步</li><li>一直循环直到定位到节点位置为止。</li></ol><hr><h1 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h1><p>最后再介绍一下删除方法的逻辑代码，和查找比较类似。remove方法有两种重载形式，下面分别介绍。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">//根据键删除节点</span><br><span class="line">public V remove(Object key) &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    return (e = removeNode(hash(key), key, null, false, true)) == null ?</span><br><span class="line">        null : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据键和值删除节点</span><br><span class="line">public boolean remove(Object key, Object value) &#123;</span><br><span class="line">    return removeNode(hash(key), key, value, true, true) != null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=======================================“</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Implements Map.remove and related methods.</span><br><span class="line"> *</span><br><span class="line"> * @param 删除节点的hash值</span><br><span class="line"> * @param 要删除元素的键</span><br><span class="line"> * @param 如果只根据键删除，那么value传递null</span><br><span class="line"> * @param 布尔值，如果为true那么说明要同时匹配键和值才能删除，否则只需要匹配键即可删除</span><br><span class="line"> * @param movable if false do not move other nodes while removing</span><br><span class="line"> * @return 返回要删除的节点</span><br><span class="line"> */</span><br><span class="line">final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value,</span><br><span class="line">                           boolean matchValue, boolean movable) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index;</span><br><span class="line">    </span><br><span class="line">    //如果当前表中有数据并且通过哈希值映射的地方有数据</span><br><span class="line">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - 1) &amp; hash]) != null) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = null, e; K k; V v;</span><br><span class="line">        </span><br><span class="line">        //如果槽的第一个节点为删除节点</span><br><span class="line">        if (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">            </span><br><span class="line">        //如果槽内是一个链表或者红黑树</span><br><span class="line">        else if ((e = p.next) != null) &#123;</span><br><span class="line">        </span><br><span class="line">            //如果是红黑树，则通过红黑树的方法获取待删除节点</span><br><span class="line">            if (p instanceof TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                </span><br><span class="line">            //如果是链表，则遍历找到待删除的节点</span><br><span class="line">            else &#123;</span><br><span class="line">                do &#123;</span><br><span class="line">                    if (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; while ((e = e.next) != null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //如果找到键相同的待删除的节点，判断值是否相等</span><br><span class="line">        if (node != null &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != null &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                             </span><br><span class="line">            //如果属于RBTree节点，则执行树的删除方法</span><br><span class="line">            if (node instanceof TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable);</span><br><span class="line">           </span><br><span class="line">           //说明要删除的节点为链表的第一个节点</span><br><span class="line">            else if (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            </span><br><span class="line">            //说明不是第一个节点，待删除节点的前一个节点为p</span><br><span class="line">            else</span><br><span class="line">                p.next = node.next;</span><br><span class="line">                </span><br><span class="line">            //修改版本号和元素个数</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            </span><br><span class="line">            //LinkedHashMap方法，这里不使用</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HashMap的内容比较多，这里仍还有很多部分没有涉及到，比如红黑树的增删操作等。但是对于我们来说没必要了解这么详细，毕竟我们只是使用它。HashMap的API大多都是对数组+链表+红黑树这种数据结构进行封装。<br>参考文章：<br><a href="https://www.imooc.com/read/47" target="_blank" rel="noopener">慕课网文贺老师专栏</a>。<br><a href="http://www.tianxiaobo.com/2018/01/18/HashMap-%E6%BA%90%E7%A0%81%E8%AF%A6%E7%BB%86%E5%88%86%E6%9E%90-JDK1-8/#32-%E6%9F%A5%E6%89%BE" target="_blank" rel="noopener">HashMap 源码详细分析(JDK1.8)</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> HashMap集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List源码常见面试题</title>
      <link href="/2019/11/04/List%E6%BA%90%E7%A0%81%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/11/04/List%E6%BA%90%E7%A0%81%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>List集合在Java中用的非常多，在大多数情况下都可以使用List集合来代替数组。因此在面试中也是考察的重点，前面介绍了两种List集合的核心源码，现在就来介绍一下常见的面试题。同样的也是基于JDK1.8版本下。</p><hr><a id="more"></a><h1 id="对ArrayList的理解"><a href="#对ArrayList的理解" class="headerlink" title="对ArrayList的理解"></a>对ArrayList的理解</h1><p>很多面试官喜欢这样开头，主要考察应聘者对ArrayList有没有总结经验，因为ArrayList内容很多，因此可以<font color="red">先回答总体架构</font>。比如：ArrayList底层数据结构是一个数组，它的API都做了一层对数组底层访问的封装，就像add()方法的过程……。这样一来，如果回答得比较又没有漏洞，面试官就不会深究。对于LinkedList集合同样的道理。</p><h1 id="扩容类问题"><a href="#扩容类问题" class="headerlink" title="扩容类问题"></a>扩容类问题</h1><p>对于ArrayList的扩容也是考察的重点，下面介绍几个常见的扩容类问题</p><ol><li><font color="red"><b>ArrayList无参构造器构造，现在add一个值进去，此时集合中有多少元素，下次扩容前最大可用大小是多少？</b></font><br>此时集合中有1个元素，下次扩容前最大可用大小是10。因为当使用无参初始化方法时，会在第一次添加元素时将数组扩容为10</li><li><font color="red"><b>如果我连续往list里面新增加值，增加到第11个时，数组的大小是多少？</b></font><br>这里考察的就是扩容公式，当增加到11时，我们期望数组的大小为11，但是数组大小为10，因此需要进行扩容。<b>集合每次以1.5倍进行扩容</b>，因此此时数组大小被扩容到15</li><li><font color="red"><b>数组初始化，被加入一个值后，如果使用addAll方法，一下加入15个值，那么最终数组大小是多少</b></font><br>当使用无参构造方法时，加入第一个值后数组的大小是10，如果还要一下加入15个值，我么们期望的的大小为16，因此需要对数组进行扩容。数组经过扩容后大小为15，此时我们发现数组大小仍不能满足要求。此时会直接将数组扩容为期望值16，而不是再次扩容。<b>要记住，当需要扩容时，只会扩容一次，如果扩容一次仍不能满足要求，那么直接将数组扩容至期望值大小。</b></li><li><font color="red"><b>现在我有一个很大的数组需要拷贝，原数组大小是5k，如何能够快速拷贝</b></font><br>因为原数组比较大，如果新建数组的时候不指定大小的话，就会频繁扩容，频繁扩容会造成性能低下，所以创建集合时应该指定大小为5000</li><li><font color="red"><b>为什么说扩容会消耗性能？</b></font><br>扩容底层使用的是System.arraycopy方法，会把原数组的数据全部拷贝到新数组上，所以会有性能损耗</li><li><font color="red"><b>源码扩容有什么值得学习的地方</b></font><ol><li>扩容的思想值得学习，通过自动扩容的方式，让使用者不用关心底层数据结构的变化，封装的很好，1.5倍的扩容速度，可以让扩容速度在前期缓慢上升，在后期增速比较快，大部分工作中要求数组的值并不多，因此在后期增速较快时也可快速扩容。</li><li>扩容的过程中，有数组大小溢出的意识，比如要求扩容后的数组大小不能小于0，不能超过Integer的最大值</li></ol></li></ol><h1 id="删除类问题"><a href="#删除类问题" class="headerlink" title="删除类问题"></a>删除类问题</h1><ol><li><font color="red"><b>对于ArrayList数组，能否通过增强for循环进行删除元素？</b></font><br>不能，会抛出异常。因为增强for循环实际上就是通过迭代器实现的。当直接使用list.remove()方法进行删除时，ArrayList的版本modCount会发生变化，导致和迭代器期望的版本号不一致，就会抛出异常。</li><li><font color="red"><b>还是上面的题，能否使用Iterator.remove()方法进行删除？</b></font><br>可以，因为Iterator.remove()方法在执行过程中会自动更新期望版本号expectedModCount，使得它和modCount一致</li><li><font color="red"><b>以上三个操作对于LinkedList也是同样的结果么？</b></font><br>是的，虽然它们得底层实现不同，但是对于这两个问题，结果是一样的。</li></ol><h1 id="对比类问题"><a href="#对比类问题" class="headerlink" title="对比类问题"></a>对比类问题</h1><ol><li><font color="red"><b>ArrayList和LinkedList有什么不同？</b></font><br>可以<b>先从底层数据结构开始说起，然后以某个方法为突破口深入。</b>比如，最大的不同就是两者底层数据结构不同，ArrayList底层是数组，而LinkedList底层是双向链表，两者的不同也导致了一些差异。就拿新增操作来说，ArrayList会先计算并决定是否扩容，然后在进行赋值；而LinkedList仅仅需要改变插入节点何其前后节点的指向位置关系即可。</li><li><font color="red"><b>ArrayList和LinkedList应用场景有何不同？</b></font><br>ArrayList更适合快速的匹配查找，不适合频繁的增删操作，而LinkedList更适合增删操作多，查询反而很少的情况。但如果是顺序插入的话(即调用add()方法插入)，ArrayList仅会为可能有的扩容操作花费时间，而LinkedList插入操作会繁琐一些。但如果是指定插入(add(int index))，ArrayList会比LinkedList慢。因此比较常用的还是ArrayList。</li><li><font color="red"><b>ArrayList和LinkedList两者有没有最大容量？</b></font><br>ArrayList是有最大容量的，为Integer能表示的最大值；LinkedList理论上来说可以无限大，但是源码中使用int类型的size来表示LinkedList得大小，所以LinkedList也不能超过Integer得最大值。</li><li><font color="red"><b>ArrayList和LinkedList对于null值如何处理？</b></font><br>从源码中可以发现在添加元素的时候并没有额外判断是否为null，因此ArrayList是允许存储null值的，如果要删除null值，那么从头开始遍历数组，删除第一个null值元素。LinkedList同样允许增删null值。</li><li><font color="red"><b>ArrayList和LinkedList是线程安全的么？</b></font><br>当两者作为局部变量时，是线程安全的，当两者是共享变量时，会出现线程安全问题。主要原因在于多线程环境下，所有线程任何时刻都可以对数组和链表进行操作，这会导致一系列问题。如果有线程安全问题，在迭代过程中会频繁抛出ConcurrentModificationException异常。</li><li><font color="red"><b>如何解决线程安全问题？</b></font><br>Java源码中推荐使用Collections.synchronizedList进行解决，该集合对List中每个方法都加了锁，保证同一时刻只有一个线程修改集合；或者采用CopyOnWriteArrayList来解决。</li></ol><p>List集合用的比较多，熟悉了源码之后使用起来才能更加得心应手。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList源码解析</title>
      <link href="/2019/11/03/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/03/LinkedList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>上一节介绍了ArrayList集合，这次就接着介绍一下LinkedList集合。和ArrayList集合一样，该集合同样实现了List接口，和ArrayList集合不同的是，它们实现的抽象类不同。LinkedList集合适用于添加多查询少的场合。(本文基于JDK1.8版本)</p><hr><a id="more"></a><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>LinkedList集合底层数据结构是一个双向链表，如下图所示<br><img src="/2019/11/03/LinkedList源码解析/1.png" alt>如图所示，链表中的每一个节点都可以向前或者向后追溯</p><ol><li><p><b>链表的每个节点叫做Node，是集合的私有嵌套类对象</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">    //存储数据</span><br><span class="line">    E item;</span><br><span class="line">    //指向下一个节点</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    //指向前一个节点</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">    </span><br><span class="line">    //构造方法</span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>集合的四个域</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//记录链表中元素个数</span><br><span class="line">transient int size = 0;</span><br><span class="line">//指向链表头节点，它的prev为null</span><br><span class="line">transient Node&lt;E&gt; first;</span><br><span class="line">//指向链表为节点，它的next为null</span><br><span class="line">transient Node&lt;E&gt; last;</span><br><span class="line">(继承自abstractList抽象类)protected transient int modCount = 0;</span><br></pre></td></tr></table></figure></li><li><p><b>由于是一个双向链表，因此只要内存足够，是没有大小限制的</b></p></li></ol><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>同样的，通过对一些核心源码的分析来对LinkedList集合进行学习。</p><h2 id="尾部添加元素-add"><a href="#尾部添加元素-add" class="headerlink" title="尾部添加元素(add())"></a><font size="5">尾部添加元素(add())</font></h2><p>在添加节点时，我们可以选择将元素追加到链表头部或者链表尾部，<font color="red">add()方法默认是从尾部添加。</font>addFirst()方法是从头部开始追加。下面我们分别介绍两种不同的追加方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">void linkLast(E e) &#123;</span><br><span class="line">    //将尾节点数据保存在临时指针中</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    //创建新的节点</span><br><span class="line">    //数据域保存要插入的值</span><br><span class="line">    //prev指向当前链表的尾节点，next置null</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);</span><br><span class="line">    //将尾节点指针指向新的节点</span><br><span class="line">    last = newNode;</span><br><span class="line">    //如果链表为空，那么将头部节点指向新建节点</span><br><span class="line">    if (l == null)</span><br><span class="line">        first = newNode;</span><br><span class="line">    //如果不为空，把之前尾节点的next域指向当前尾节点</span><br><span class="line">    else</span><br><span class="line">        l.next = newNode;</span><br><span class="line">    //更新大小和版本</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="头部添加元素-addFirst"><a href="#头部添加元素-addFirst" class="headerlink" title="头部添加元素(addFirst())"></a><font size="5">头部添加元素(addFirst())</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public void addFirst(E e) &#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">private void linkFirst(E e) &#123;</span><br><span class="line">    //保存头节点数据到临时指针中</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    //新建节点</span><br><span class="line">    //数据域存储要插入的值</span><br><span class="line">    //prev置null，next指向原头节点</span><br><span class="line">    final Node&lt;E&gt; newNode = new Node&lt;&gt;(null, e, f);</span><br><span class="line">    //头指针指向新节点</span><br><span class="line">    first = newNode;</span><br><span class="line">    //如果当前链表为空，那么将尾节点指向新建节点</span><br><span class="line">    if (f == null)</span><br><span class="line">        last = newNode;</span><br><span class="line">    //将原头节点的prev指向新头节点</span><br><span class="line">    else</span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    //更新大小和版本</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看源码不难发现，LinkedList的插入操作就是双向链表的插入操作，较为简单</p><h2 id="尾部删除节点"><a href="#尾部删除节点" class="headerlink" title="尾部删除节点"></a><font size="5">尾部删除节点</font></h2><p>同样的，删除节点也有两种选择方式，从头部删除或从尾部删除，删除操作会把节点的值、前后指针都置为null，以便GC操作能够顺利完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public E removeLast() &#123;</span><br><span class="line">    final Node&lt;E&gt; l = last;</span><br><span class="line">    //如果当前链表为空抛出异常</span><br><span class="line">    if (l == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">private E unlinkLast(Node&lt;E&gt; l) &#123;</span><br><span class="line">    //保存要删除节点的数据</span><br><span class="line">    final E element = l.item;</span><br><span class="line">    //保存要尾节点的前一个节点</span><br><span class="line">    final Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    //将尾节点的数据域和指针域都置null，方便GC</span><br><span class="line">    l.item = null;</span><br><span class="line">    l.prev = null; </span><br><span class="line">    //设置新的尾指针</span><br><span class="line">    last = prev;</span><br><span class="line">    //如果删除后链表为空，那么first也置为空</span><br><span class="line">    if (prev == null)</span><br><span class="line">        first = null;</span><br><span class="line">    //将新尾节点的next置null</span><br><span class="line">    else</span><br><span class="line">        prev.next = null;</span><br><span class="line">    //更新大小和版本以及返回被删除的节点</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下步骤</p><ol><li>保存尾节点的数据和prev指针到临时变量中</li><li>将要删除的尾节点置空，便于GC</li><li>将链表尾指针last==prev</li><li><font color="red">判断删除后链表是否为空，如果为空那么将first也置null，否则将新尾节点的next置null。</font></li></ol><h2 id="头部删除节点"><a href="#头部删除节点" class="headerlink" title="头部删除节点"></a><font size="5">头部删除节点</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public E removeFirst() &#123;</span><br><span class="line">    final Node&lt;E&gt; f = first;</span><br><span class="line">    if (f == null)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    return unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================&quot;</span><br><span class="line">private E unlinkFirst(Node&lt;E&gt; f) &#123;</span><br><span class="line">    final E element = f.item;</span><br><span class="line">    final Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = null;</span><br><span class="line">    f.next = null; // help GC</span><br><span class="line">    first = next;</span><br><span class="line">    if (next == null)</span><br><span class="line">        last = null;</span><br><span class="line">    else</span><br><span class="line">        next.prev = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤和尾部删除节点镜像，就不赘述</p><h2 id="普通删除节点"><a href="#普通删除节点" class="headerlink" title="普通删除节点"></a><font size="5">普通删除节点</font></h2><p>前面两种是比较特殊的情况，下面介绍删除任意节点的方法<br>无论是remove(int index)还是remove(T ele)都是通过下面方法实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">    //保存要删除节点的所有域</span><br><span class="line">    final E element = x.item;</span><br><span class="line">    final Node&lt;E&gt; next = x.next;</span><br><span class="line">    final Node&lt;E&gt; prev = x.prev;</span><br><span class="line">    </span><br><span class="line">    //如果prev==null，说明要删除头节点</span><br><span class="line">    //直接将first指向下一个节点</span><br><span class="line">    if (prev == null) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; </span><br><span class="line">    //否则，将要删除节点的前一个节点的prev指向</span><br><span class="line">    //要删除节点的next域，并将要删除节点的prev置null</span><br><span class="line">    else &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = null;</span><br><span class="line">    &#125;</span><br><span class="line">    //同理，如果是尾节点，直接将尾指针指向前一个节点</span><br><span class="line">    if (next == null) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125;</span><br><span class="line">    //将要删除节点的下一个节点的prev之前要删除节点的prev</span><br><span class="line">    //将要删除节点的next置null</span><br><span class="line">    else &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //到了这里节点已经从链表中删除，并且节点的指针域都为空</span><br><span class="line">    //执行收尾动作</span><br><span class="line">    x.item = null;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    return element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下步骤</p><ol><li>保存要删除节点所有的域</li><li>如果节点的prev指针为空，说明是头节点。令first=next</li><li>如果prev不为空，那么将它前面节点的next指向它后一个节点，令该节点的prev=null</li><li>如果节点的next为空。说明是尾节点。令last=prev</li><li>如果next不为空，和第三步镜像操作。</li></ol><h2 id="节点查询"><a href="#节点查询" class="headerlink" title="节点查询"></a><font size="5">节点查询</font></h2><p>链表的查询是比较慢的。需要挨个循环查找才行，我们来看看LinkedList有没有比较好的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//查找给定索引的节点</span><br><span class="line">//这是一个内部方法，其他成员方法调用该方法之前已经检查过index</span><br><span class="line">//能够确保index满足条件</span><br><span class="line">Node&lt;E&gt; node(int index) &#123;</span><br><span class="line">    //如果inde处于队列的前半部分，从头开始找</span><br><span class="line">    if (index &lt; (size &gt;&gt; 1)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (int i = 0; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; </span><br><span class="line">    //如果处于后半部分，从后往前查找</span><br><span class="line">    else &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (int i = size - 1; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们发现，LinkedList并没有采用从头循环到尾的做法，而是采用了简单地二分法</p><ol><li>首先判断index在链表的前半部分还是后半部分</li><li>利用双向链表的特性进行查找。使循环次数至少降低了一半。</li></ol><p>可能这也是LinkedList使用双向链表实现的原因吧。</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><font size="5">迭代器</font></h2><p>因为LinkedList要实现双向的迭代访问，所以Iterator不能满足要求(但是由于继承了abstractList抽象类，仍可以使用Iterator迭代器)，因为Iterator只支持从头到尾单向遍历。Iterator有一个子接口叫ListIterator，这个接口支持双向迭代，这里介绍一下双向迭代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">从头到尾迭代</span><br><span class="line">hasNext、next、nextIndex</span><br><span class="line">从尾到头迭代</span><br><span class="line">hasPervious、previous、previousIndex</span><br></pre></td></tr></table></figure><p>LinkedList中一个私有内部类LisyItr实现了ListIterator接口，我们看一下该私有类的域和构造方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//上次之星next()或previous()方法时的节点位置</span><br><span class="line">private Node&lt;E&gt; lastReturned;</span><br><span class="line">//下一个节点</span><br><span class="line">private Node&lt;E&gt; next;</span><br><span class="line">//下一个节点的位置</span><br><span class="line">private int nextIndex;</span><br><span class="line">//期望版本号</span><br><span class="line">private int expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">“===============================”</span><br><span class="line">构造方法(如果不传递参数默认调用父类的无参构造方法，index=0)</span><br><span class="line">ListItr(int index) &#123;</span><br><span class="line">    next = (index == size) ? null : node(index);</span><br><span class="line">    nextIndex = index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从头到尾迭代"><a href="#从头到尾迭代" class="headerlink" title="从头到尾迭代"></a><font size="5">从头到尾迭代</font></h3><p>我们先看一下从头到尾迭代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public boolean hasNext() &#123;</span><br><span class="line">    return nextIndex &lt; size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E next() &#123;</span><br><span class="line">    //首先判断版本号</span><br><span class="line">    checkForComodification();</span><br><span class="line">    </span><br><span class="line">    if (!hasNext())</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    </span><br><span class="line">    //next是当前节点，在上一次执行next方法或构造方法中时被赋值的</span><br><span class="line">    lastReturned = next;</span><br><span class="line">    //next指向下一个节点，为下一次迭代做准备</span><br><span class="line">    next = next.next;</span><br><span class="line">    //next指向节点的索引位置</span><br><span class="line">    nextIndex++;</span><br><span class="line">    return lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，从头到尾迭代比较简单，直接取出当前节点的值，并将next指向下一个节点即可。</p><h3 id="从尾到头迭代"><a href="#从尾到头迭代" class="headerlink" title="从尾到头迭代"></a><font size="5">从尾到头迭代</font></h3><p>接着来看一下从尾到头迭代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public boolean hasPrevious() &#123;</span><br><span class="line">    return nextIndex &gt; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E previous() &#123;</span><br><span class="line">    //首先判断版本号</span><br><span class="line">    checkForComodification();</span><br><span class="line">    </span><br><span class="line">    if (!hasPrevious())</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    lastReturned = next = (next == null) ? last : next.prev;</span><br><span class="line">    nextIndex--;</span><br><span class="line">    return lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在求lastReturned时候，需要判断next为空和不为空两种情况<br>next不为空时说明已经发生过迭代了，直接取前一个节点即可<br>next为空有两种情况：</p><ol><li>第一次迭代并且传递参数index==size</li><li>上次操作将尾节点删除了</li></ol><h3 id="迭代器删除"><a href="#迭代器删除" class="headerlink" title="迭代器删除"></a><font size="5">迭代器删除</font></h3><p>LinkedList在删除元素时，也推荐使用迭代器进行删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public void remove() &#123;</span><br><span class="line">    //判断版本号</span><br><span class="line">    checkForComodification();</span><br><span class="line">    //lastRuturned是本次迭代需要删除的值</span><br><span class="line">    //如果为空，说明调用者没有主动执行过next()或previous()方法，抛出异常</span><br><span class="line">    //如果不为空，是在上次执行next()或previous()赋的值</span><br><span class="line">    if (lastReturned == null)</span><br><span class="line">        throw new IllegalStateException();</span><br><span class="line">    //将要删除的节点保存</span><br><span class="line">    Node&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">    //删除当前节点</span><br><span class="line">    unlink(lastReturned);</span><br><span class="line">    </span><br><span class="line">    //上一次迭代是从尾向头迭代(因为每次从尾向头迭代后next和lastReturned相等)</span><br><span class="line">    if (next == lastReturned)</span><br><span class="line">        //将next回到上一次迭代时位置</span><br><span class="line">        next = lastNext;</span><br><span class="line">    //上一次是从头向尾迭代，此时只需改变nextIndex</span><br><span class="line">    //使得nextIndex值总和next指向的节点索引相同</span><br><span class="line">    else</span><br><span class="line">        nextIndex--;</span><br><span class="line">    //避免重复删除，更新版本号</span><br><span class="line">    lastReturned = null;</span><br><span class="line">    expectedModCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LinkedList源码设计大量对于链表的操作，所以需要一定的数据结构基础才行，否则会比较难以理解。文章多数内容来自于<a href="https://www.imooc.com/read/47" target="_blank" rel="noopener">慕课网文贺</a>。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> LinkedList集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iterator与Iteratable</title>
      <link href="/2019/11/03/Iterator%E4%B8%8EIteratable/"/>
      <url>/2019/11/03/Iterator%E4%B8%8EIteratable/</url>
      
        <content type="html"><![CDATA[<p>在Java中，迭代器的使用是很常见的，比如我们使用的for-each循环，底层使用的就是迭代器。那到底什么是迭代器呢？今天就来介绍一下Java中的迭代器。</p><hr><a id="more"></a><h1 id="为什么要用迭代器"><a href="#为什么要用迭代器" class="headerlink" title="为什么要用迭代器"></a>为什么要用迭代器</h1><p>你可能会想，为什么要使用迭代器呢？直接遍历集合不可以么？可以从多态这一方面回答这个问题，下面以List集合为例。<br>对于List集合，无论是数组实现的ArrayList还是链表实现的LinkedList，我们常常将它们向上转型为List使用。当我们要遍历集合的时候，如果不使用迭代器，因为两种不同实现方式的集合遍历方式是不同的，我们如果不知道List的实际类型，那么就无法进行遍历。这样就造成了我们如果要遍历集合的时候必须要知道集合的内部结构，这样会使的遍历的代码和集合本身的耦合度很高！！在编程中我们应该尽量降低代码的耦合度，使代码方便日后管理，和适应需求变化。在JAVA中为了解决这个问题引入了Iterator，Iterator在遍历不同的集合的时候方式总是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">为不同的List集合编写不同的代码</span><br><span class="line">//ArrayList实现</span><br><span class="line">for（int i=0;i&lt;array.size();i++）&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//LinkedList实现</span><br><span class="line">while （（linkedList =linkedList.next()）!=null）&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Iterator与Iteratable的关系"><a href="#Iterator与Iteratable的关系" class="headerlink" title="Iterator与Iteratable的关系"></a>Iterator与Iteratable的关系</h1><p>下面分别查看两接口的部分源码来进行说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//Iteratable接口中的一个抽象方法</span><br><span class="line">/**</span><br><span class="line"> * Returns an iterator over elements of type &#123;@code T&#125;.</span><br><span class="line"> * @return an Iterator.</span><br><span class="line"> */</span><br><span class="line">Iterator&lt;T&gt; iterator();</span><br><span class="line"></span><br><span class="line">”====================================“</span><br><span class="line">//Iterator接口中的三个方法</span><br><span class="line">boolean hasNext();</span><br><span class="line">E next();</span><br><span class="line">default void remove() &#123;</span><br><span class="line">    throw new UnsupportedOperationException(&quot;remove&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过观察源码不难发现，<font color="red">实现了Iteratable接口的类可以通过iterator()方法来获取一个Iterator接口的实现类对象，真正的迭代方法是在Iterator接口中实现的。</font></p><h1 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h1><p>我们知道，Java中的集合都实现了Collection接口，除了map。而Collection接口有实现了Iteratable接口，<font color="blue">那为什么不直接实现Iterator接口而要实现Iteratable接口通过该接口的iterator()方法来获取迭代器对象呢？</font><br>如果Collection直接实现Iterator这个接口的时候，则当我们new一个新的对象的时候，这个对象中就包含了当前迭代位置的数据（指针），当这个对象在不同的方法或者类中传递的时候，当前传递的对象的迭代的位置是不可预知的，那么我们在调用next()方法的时候也就不知道是指到那一个元素。如果其中加上了一个reset()方法呢？用来重置当前迭代的位置这样Collection也只能同时存在一个当前迭代位置的对象。所有不能直接选择实现Iterator。实现Iteratable，里面的方法Iterator()可以在同一个对象每次调用的时候都产生一个新的Iterator对象。这样多个迭代器就不会互相干扰了。</p><p>参考文章<br><a href="https://blog.csdn.net/sydMobile/article/details/51916969" target="_blank" rel="noopener">sydMobile</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码解析</title>
      <link href="/2019/11/03/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/11/03/ArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在Java中，ArrayList集合我们用的非常多，但是对于ArrayList的底层实现，我一直不太了解。最近学习多线程的时候看到了线程安全集合，所以准备先回头把普通集合弄弄清除，再去看线程安全集合的底层实现会比较好一些。(本文基于JDK1.8源码进行分析)</p><hr><a id="more"></a><h1 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h1><p>ArrayList集合整体架构比较简单，底层就是一个数组结构，如图所示<br><img src="/2019/11/03/ArrayList源码解析/1.png" alt>图中是一个长度为10的数组，展示了ArrayList底层存储数据的原理</p><h2 id="源码中一些字段"><a href="#源码中一些字段" class="headerlink" title="源码中一些字段"></a><font size="5">源码中一些字段</font></h2><p>在学习ArrayList底层实现之前，我们先来认识一下源码中的一些字段，这在之后的方法中会用到</p><ol><li><font color="red">private static final int DEFAULT_CAPACITY = 10;</font><br>默认初始容量为10，如果使用无参构造方法创建集合对象，那么第一次扩容时数组大小扩容为10</li><li><font color="red">private static final Object[] EMPTY_ELEMENTDATA = {};</font><br>默认空实例赋值，后面再扩容时会详细介绍</li><li><font color="red">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};</font><br>含有默认值的空实例赋值，同样的，在扩容时介绍</li><li><font color="red">transient Object[] elementData;</font><br>实际存放数据的数组</li><li><font color="red">private int size;</font><br>集合中元素的个数</li><li><font color="red">private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</font><br>集合扩容的最大容量</li><li><font color="red">protected transient int modCount = 0;</font><br>从abstractList继承得到，集合的版本号，后面迭代时会详细介绍</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//从源码中Copy的代码，注释为自己添加</span><br><span class="line">private static final long serialVersionUID = 8683452581122892189L;</span><br><span class="line"></span><br><span class="line">//默认初始容量</span><br><span class="line">private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line"></span><br><span class="line">//默认空实例赋值</span><br><span class="line">private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">//含有默认值的空实例</span><br><span class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">//存放实际元素的Object数组</span><br><span class="line">transient Object[] elementData; // non-private to simplify nested class access</span><br><span class="line"></span><br><span class="line">//集合中元素的个数</span><br><span class="line">private int size;</span><br><span class="line"></span><br><span class="line">//最大容量</span><br><span class="line">private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br></pre></td></tr></table></figure><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a><font size="5">类注释</font></h2><p>我们来看一下类注释都说了些什么</p><ul><li>允许put null值，会自动扩容</li><li>size、isEmpty、get、set、add等方法时间复杂度都是O(1)</li><li>是非线程安全的，多线程情况下，推荐使用线程安全类：Collections#synchronizedList</li><li>增强for循环，或者使用迭代器迭代过程中，如果数组大小被改变，会快速失败抛出异常</li></ul><h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p>介绍了一些基础内容，下面就从源码开始，分别对初始化、扩容、迭代器等进行解析</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="5">初始化</font></h2><p>ArrayList提供了三种初始化方法</p><ol><li>无参直接初始化</li><li>指定大小初始化</li><li>指定初始数据初始化</li></ol><p>源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 指定大小初始化</span><br><span class="line"> * @param  指定数组大小</span><br><span class="line"> * @throws IllegalArgumentException if the specified initial capacity</span><br><span class="line"> *         is negative</span><br><span class="line"> */</span><br><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    //如果参数&gt;0，那么new一个指定大小的Object数组</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        this.elementData = new Object[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line">    //如果参数等于0，那么elementData数组等于前面的默认空实例数组EMPTY_ELEMENTDATA</span><br><span class="line">    else if (initialCapacity == 0) &#123;</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果小于0则抛出异常</span><br><span class="line">    else &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">/**</span><br><span class="line"> * 无参数直接初始化</span><br><span class="line"> */</span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==============================”</span><br><span class="line">/**</span><br><span class="line"> * 指定初始数据初始化</span><br><span class="line"> * @param c the collection whose elements are to be placed into this list</span><br><span class="line"> * @throws NullPointerException if the specified collection is null</span><br><span class="line"> */</span><br><span class="line">public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    //如果给定的集合(c)数据有值</span><br><span class="line">    if ((size = elementData.length) != 0) &#123;</span><br><span class="line">        //如果集合元素类型不是Object类型，我们会转换成Object类型</span><br><span class="line">        if (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //如果给定集合(c)无值，默认空数组</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面三个构造方法，补充两点</p><ol><li><p>集合存储数据的数组elementData指向有四种种情况(后面扩容和这个相关)</p><ul><li>使用无参初始化，将数组elementData指向DEFAULTCAPACITY_EMPTY_ELEMENTDATA空数组</li><li>使用指定大小初始化并且指定大小为0，将数组elementData指向EMPTY_ELEMENTDATA空数组</li><li>使用指定大小初始化但参数不为0或者是使用指定数据初始化，将数组elementData指向一个新的数组</li></ul></li><li><p>ArrayList使用无参初始化时，默认大小是空数组，并不是10，10是在第一次扩容时的数组大小 </p></li></ol><h2 id="添加和扩容实现"><a href="#添加和扩容实现" class="headerlink" title="添加和扩容实现"></a><font size="5">添加和扩容实现</font></h2><p>在向集合中添加元素时，主要分成两步</p><ol><li>判断是否需要扩容，如果需要就执行扩容操作</li><li>直接赋值</li></ol><p>我们来看一下添加方法代码和扩容代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">//添加方法add()</span><br><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    //确保数组大小是否足够，不够进行扩容，size为当前数组中元素的个数</span><br><span class="line">    ensureCapacityInternal(size + 1); </span><br><span class="line">    //直接赋值，线程不安全</span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”====================================“</span><br><span class="line">计算期望值</span><br><span class="line"></span><br><span class="line">//add()方法中调用此方法</span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;</span><br><span class="line">    //如果elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA，</span><br><span class="line">    //说明使用的是无参初始化，那么第一次初始化直接扩容为10</span><br><span class="line">    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        return Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    //如果使用的是指定大小初始化或指定数值初始化，那么普通扩容</span><br><span class="line">    return minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    //后面迭代器会说到</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    //如果需要的大小超过了当前数组的长度，那么就进行扩容</span><br><span class="line">    //如果没超过说明就不进行扩容</span><br><span class="line">    if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”====================================“</span><br><span class="line">扩容逻辑代码，将计算后的期望容量传递到grow方法中</span><br><span class="line"></span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    // 记录当前数组长度</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    //进行1.5倍扩容</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    //如果扩容后还是小于期望值(使用addAll方法时有可能扩容一次后的容量仍不满足要求)</span><br><span class="line">    那么就令新的值等于期望值</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    //如果扩容后的值&gt;JVM所能分配的数组最大值</span><br><span class="line">    //那么就用int能表示的最大值或者JVM所能分配的数组最大值进行扩容</span><br><span class="line">    //具体采用那个值视期望值而定</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    //通过复制进行扩容</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int hugeCapacity(int minCapacity) &#123;</span><br><span class="line">    if (minCapacity &lt; 0) // overflow</span><br><span class="line">        throw new OutOfMemoryError();</span><br><span class="line">    return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于扩容方法，进行以下总结</p><ol><li>当添加元素时，我们需要<font color="blue">首先确保数组的大小能够容纳新的元素</font>，因此我们期望值是minCapacity=size+1</li><li><font color="red">计算期望值的时候，我们需要根据当初构造对象使用的初始化方法来决定</font><ol><li>如果当初使用的是无参初始化方法，那么我们直接令期望值为max(10,minCapacity)，这也就意味着我们在第一次添加元素的时候直接将集合扩容为10。</li><li>如果使用的其他的初始化方法，那么期望值为minCapacity，这也就意味着，我们第一次添加元素时仅仅将集合扩容为1；</li></ol></li><li>当计算完期望值minCapacity后，我们需要根据期望值和当前数组大小来判断是否需要扩容<ol><li>如果minCapacity&lt;elementData.length，说明数组还够用。因此不需要扩容</li><li>如果minCapacity&gt;elementData.length，说明数组不够用了，需要对数组进行扩容</li></ol></li><li>扩容时，<font color="blue">采用的扩容规则并不是翻倍，而是1.5倍速增长</font>，即扩容后的大小newCapacity是原来大小的1.5倍。当得到扩容后大小newCapacity后，我们还不能直接对其进行扩容，因为这时候仍然存在一些问题<ol><li>如果扩容后的大小newCapacity&lt;期望值minCapacity。这是完全有可能的：例如当前集合容量为10，集合中元素个数为10，这时候如果使用addAll()方法向集合中添加10个元素，那么就需要进行扩容。扩容后的newCapacity为15，但是我们期望值minCapacity=size+10=20，此时扩容一次后的大小仍然不够。<br>此时采取的策略是不再进行下一次扩容(因为下一次扩容可能仍不够，反复扩容影响性能)，直接令扩容后的大小newCapacity==期望值minCapacity</li><li>如果扩容后的大小newCapacity超过了JVM能分配的最大值MAX_ARRAY_SIZE(Integer.MAX_VALUE-8)，此时就不能进行扩容要对newCapacity进行调整。调整的策略就是通过期望值minCapacity<ul><li>minCapacity &gt; MAX_ARRAY_SIZE，令newCapacity=Integer.MAX_VALUE</li><li>minCapacity &lt; MAX_ARRAY_SIZE，令newCapacity=MAX_ARRAY_SIZE</li></ul></li></ol></li></ol><p>这样添加和扩容的方法就介绍完毕了。通过分析，我们可以发现，<b><font color="red">源码在扩容的时候，有数组大小溢出的意识，即无论如何数组大小不能小于0，不能大于Integer.MAX_VALUE。</font></b>这点值得我们学习！</p><h2 id="扩容的本质"><a href="#扩容的本质" class="headerlink" title="扩容的本质"></a><font size="5">扩容的本质</font></h2><p>扩容是通过Arrays.copyOf(elementData, newCapacity);这一行代码实现的。这一行代码的<font color="red"><b>本质是数组之间的拷贝，扩容会新建一个容量为newCapacity的新数组，然后将老数组的数据拷贝过去，我们通过System.arraycopy方法进行拷贝</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">System.arraycopy源码</span><br><span class="line">    /**</span><br><span class="line">    * @param src      被拷贝的数组.</span><br><span class="line">    * @param srcPos   从数组哪里开始.</span><br><span class="line">    * @param dest     目标数组.</span><br><span class="line">    * @param destPos  从目标数组那个索引开始拷贝.</span><br><span class="line">    * @param length   拷贝的长度.</span><br><span class="line">    */</span><br><span class="line">  public static native void arraycopy(</span><br><span class="line">                            Object src,  int  srcPos,</span><br><span class="line">                            Object dest, int destPos,</span><br><span class="line">                            int length);</span><br><span class="line">这是一个本地方法</span><br><span class="line"></span><br><span class="line">“=====================”</span><br><span class="line">System.arraycopy(</span><br><span class="line">            elementData, 0, </span><br><span class="line">            newelementData, 0,</span><br><span class="line">            Math.min(elementData.length, newCapacity));</span><br><span class="line">最终调用这行代码返回newelementData数组</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a><font size="5">删除</font></h2><p>ArrayList删除元素有很多种方式，根据索引删除、根据值删除、批量删除等，原理都比较类似，我们这里以根据值删除为例进行说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 根据值删除元素</span><br><span class="line"> * @param 要删除的值</span><br><span class="line"> * @return 删除成功返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">public boolean remove(Object o) &#123;</span><br><span class="line">    //如果要删除的值是null，找到第一个值是null的删除并返回true</span><br><span class="line">    if (o == null) &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (elementData[index] == null) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    //如果要删除的值不为null，使用equals比较，</span><br><span class="line">    //找到第一个和要删除的值相等的删除</span><br><span class="line">    else &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index++)</span><br><span class="line">            if (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除逻辑代码</span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    //表示删除index位置元素后，需要从index后移动多少个元素到前面去</span><br><span class="line">    //-1是因为size是从1开始算起，而index是从0开始算起</span><br><span class="line">    int numMoved = size - index - 1;</span><br><span class="line">    if (numMoved &gt; 0)</span><br><span class="line">        //从index+1位置开始拷贝，拷贝的起始位置为index，长度为numMoved</span><br><span class="line">        System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，删除方法中也使用的是System.arraycopy的方法进行实现，某一个元素删除后，会将后面的元素往前移动。如图所示<br><img src="/2019/11/03/ArrayList源码解析/2.gif" alt></p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a><font size="5">迭代器</font></h2><p>如果要自己实现迭代器，实现java.util.Iterator接口就可，ArrayList中用一个私有内部类实现了Iterator接口。关于Iterator接口和Iterable接口会在下一篇博客中介绍<br>在ArrayList的私有内部类中，有以下几个重要的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//迭代过程中，下一个元素的位置，初始值为0</span><br><span class="line">int cursor;    </span><br><span class="line">//添加元素时：表示上一次迭代过程中索引的位置；</span><br><span class="line">//删除元素时：为-1</span><br><span class="line">int lastRet = -1; </span><br><span class="line">//表示迭代过程中，期望的版本号，modCount表示实际的版本号</span><br><span class="line">int expectedModCount = modCount;</span><br></pre></td></tr></table></figure><p>迭代器一般来说有三个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashNext()：判断是否有值进行迭代</span><br><span class="line">next()：如果有，那么获取迭代的值</span><br><span class="line">remove()：删除当前迭代的值</span><br></pre></td></tr></table></figure><p>下面来看以下ArrayList中三个方法的源码</p><ol><li><p><b>hashNext()</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public boolean hasNext() &#123;</span><br><span class="line">    //cursor表示下一个元素的位置</span><br><span class="line">    return cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>next()</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public E next() &#123;</span><br><span class="line">    //迭代过程中，判断版本号是否被修改，</span><br><span class="line">    //如果修改抛出ConcurrentModificationException异常</span><br><span class="line">    checkForComodification();</span><br><span class="line">    //本次迭代过程中元素的索引位置</span><br><span class="line">    int i = cursor;</span><br><span class="line">    if (i &gt;= size)</span><br><span class="line">        throw new NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">    if (i &gt;= elementData.length)</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    //下一次迭代时元素的位置</span><br><span class="line">    cursor = i + 1;</span><br><span class="line">    //返回当前元素</span><br><span class="line">    return (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">检查版本号方法</span><br><span class="line">final void checkForComodification() &#123;</span><br><span class="line">    if (modCount != expectedModCount)</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>remove()</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void remove() &#123;</span><br><span class="line">    //不能重复删除</span><br><span class="line">    if (lastRet &lt; 0)</span><br><span class="line">        throw new IllegalStateException();</span><br><span class="line">    //检查版本号</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        ArrayList.this.remove(lastRet);</span><br><span class="line">        //将cursor后移到上次迭代的位置</span><br><span class="line">        cursor = lastRet;</span><br><span class="line">        //-1表示元素已经删除，防止重复删除同一个元素</span><br><span class="line">        lastRet = -1;</span><br><span class="line">        //由于删除元素时modCount已经发生了变化</span><br><span class="line">        //所以要重新赋值给expectedModCount使得两者版本号一致</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><b>在next()方法的源码中的这一行代码，为什么不直接操作外部类的elementData而要重新创建一个引用呢？</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] elementData = ArrayList.this.elementData;</span><br></pre></td></tr></table></figure><ul><li>这部分操作和String源码中replace()方法的很类似，一个是类变量，一个是局部变量，当操作类变量时每一次操作都会有一次getField操作，如果使用局部变量，那么仅仅在赋值的时候有一次getField操作，这样性能会好一些。</li></ul><h2 id="Fail-Fast策略"><a href="#Fail-Fast策略" class="headerlink" title="Fail-Fast策略"></a><font size="5">Fail-Fast策略</font></h2><p>ArrayList不是线程安全的，因此<font color="blue">如果在使用迭代器的过程中如果有其他线程对集合进行了修改，那么就抛出ConcurrentModificationException异常，这就是Fail-Fast策略。</font><br>这一策略在源码中就是通过版本号modCount实现的。每一次对ArrayList结构的修改(长度的变化、增加删除元素)都会增加这个值，在迭代器初始化过程中都会将这个值赋值给expectedModCount。在迭代过程中，如果expectedModCount和modCount不相等，说明ArrayList结构发生了变化，就抛出异常。</p><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a><font size="5">线程安全</font></h2><p>只有当ArrayList作为共享变量时，才会有线程安全问题，如果只是作为局部变量，那么就不存在线程安全问题。ArrayList线程安全问题的本质，是因为ArrayList自身的elementData、size、modCount在进行各种操作时没有加锁而且都不是volatile的。类注释中推荐我们使用Collections.synchronizedList来保证线程安全，该类是通过在每个方法上加锁来实现，性能较低。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这篇文章主要介绍了初始化，添加删除，迭代器等源码的实现，不难发现ArrayList的底层是一个数组，所谓子自动扩容是通过数组的拷贝来实现，ArrayList的各个API都是对数组操作进行封装。<br>很大一部分参考<a href="https://www.imooc.com/read/47" target="_blank" rel="noopener">慕课网文贺老师专栏</a>。十分感谢</p><hr>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> ArrayList集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解synchronized关键字</title>
      <link href="/2019/11/02/%E8%AF%A6%E8%A7%A3synchronized%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/11/02/%E8%AF%A6%E8%A7%A3synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>这次来介绍另外一个关键字-synchronized关键字，接下来将对synchronized关键字的底层实现原理进行深度的介绍。</p><hr><a id="more"></a><h1 id="synchronized三种使用方式"><a href="#synchronized三种使用方式" class="headerlink" title="synchronized三种使用方式"></a>synchronized三种使用方式</h1><ol><li><b>修饰实例方法</b><br>此时锁对象就是调用方法的实例对象</li><li><b>修饰静态方法</b><br>此时锁对象就是该静态方法所属类的class对象</li><li><b>修饰代码块</b><br>此时锁对象是自己指定的。</li></ol><h2 id="作用于实例方法"><a href="#作用于实例方法" class="headerlink" title="作用于实例方法"></a><font size="5">作用于实例方法</font></h2><p>来看一下下面这一段测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用两个线程，进行计数，每个线程加10000次</span><br><span class="line"> * 如果正确运行，结果应该是20000</span><br><span class="line"> */</span><br><span class="line">public class FunctionWithSyn implements Runnable &#123;</span><br><span class="line">    int count;</span><br><span class="line"></span><br><span class="line">//先把synchronized注释掉，观察运行结果</span><br><span class="line">    public /*synchronized*/ void increase() &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        FunctionWithSyn f = new FunctionWithSyn();</span><br><span class="line">        Thread t1 = new Thread(f);</span><br><span class="line">        Thread t2 = new Thread(f);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(f.count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">=========================</span><br><span class="line">Output:</span><br><span class="line">10000多，(每次运行结果不确定，但是都达不到2w)</span><br></pre></td></tr></table></figure><ul><li><font color="bllue"><b>分析原因</b></font><br>为了方便描述，我们假设两个线程分别为A线程和B线程，A和B两个线程分别执行自己的run方法。<br>假设在某一时刻(假设此时count=100)A和B线程分别执行到了increase()方法里面的count++语句，那么会发生什么呢？<br>通过查看反汇编指令，我们发现count分为四个指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2: getfield      #2                  // Field count:I</span><br><span class="line">5: iconst_1</span><br><span class="line">6: iadd</span><br><span class="line">7: putfield      #2                  // Field count:I</span><br><span class="line"></span><br><span class="line">=========================</span><br><span class="line">1. 取出字段count</span><br><span class="line">2. 从操作数栈中取出一个1</span><br><span class="line">3. 执行count+1</span><br><span class="line">4. 将操作后的count放回局部变量表</span><br></pre></td></tr></table></figure></li></ul><ol><li>A线程取出count(此时count=100)进行操作，但是<font color="blue">在A线程执行第四步回写操作之前，B线程也取出count(此时count还是100)。</font></li><li><font color="red">A线程操作完后将101写回去，但是B线程最后也写回了101。</font></li><li>不难发现，虽然两个线程都进行了一个count++操作，按照预想count应该增加2，但是最后count却只增加了1。这就是最后得到的count远远小于20000的原因了。</li></ol><ul><li><p><font color="bllue"><b>解决方法</b></font><br>解决的方法不止一种，但是既然讲的是synchronized，那就用synchronized来解决吧。<br>用synchronized修饰increase()方法，就能够解决这个问题，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//其他不变，只在这个方法上加上synchronized关键字即可</span><br><span class="line">public synchronized void increase() &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">================</span><br><span class="line">Output:</span><br><span class="line">20000</span><br></pre></td></tr></table></figure></li><li><p><font color="bllue"><b>分析原因</b></font><br>在这里，synchronized修饰的就是实例方法，此时的锁对象就是调用方法的实例对象，即代码中的f。当加了synchronized关键字后，如果当前线程在访问该方法，那么其他线程就不能访问，因为锁只有一把，被当前线程拿到了，其他线程就不能拿了。<br>这样以来，<font color="blue">每次只有一个线程对count进行操作，只有该线程操作完了，将改变后的count写回去之后，另外的线程才有可能对count进行操作。</font>保证了安全性。</p></li></ul><p>但是要注意的是，如果是下面这种实现方式，仍然得不到正确的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">FunctionWithSyn f = new FunctionWithSyn();</span><br><span class="line">FunctionWithSyn f1 = new FunctionWithSyn();</span><br><span class="line">Thread t1 = new Thread(f);</span><br><span class="line">Thread t2 = new Thread(f1);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">t1.join();</span><br><span class="line">t2.join();</span><br><span class="line"></span><br><span class="line">System.out.println(f.count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===================</span><br><span class="line">Output:</span><br><span class="line">10000</span><br></pre></td></tr></table></figure><p>这是因为，两个线程的拿到的对象锁不是同一把锁，起不到同步的作用。两个线程仍然会同时对count进行操作，并且count的值始终是10000。<br>这是因为，相当于两个线程分别对count加了10000次，最后将count=10000写回主内存。</p><h2 id="作用于静态方法"><a href="#作用于静态方法" class="headerlink" title="作用于静态方法"></a><font size="5">作用于静态方法</font></h2><p><font color="blue">当synchronized作用于实例方法时，多个线程的锁对象必须是同一个才能起到同步作用</font>。然而当synchronized修饰静态方法时，由于静态方法不属于对象而属于类，此时锁对象就是该静态方法所属类的class对象。<font color="blue">此时无论实例多少个对象，锁都是唯一的，因为class对象只有一个。</font><br>我们将increase变为静态方法，测试一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class FunctionWithSyn implements Runnable &#123;</span><br><span class="line">    static int count;</span><br><span class="line"></span><br><span class="line">将方法改为静态方法</span><br><span class="line">    public synchronized static void increase() &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">            increase();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        FunctionWithSyn f = new FunctionWithSyn();</span><br><span class="line">        FunctionWithSyn f1 = new FunctionWithSyn();</span><br><span class="line">//传递进去的是两个对象</span><br><span class="line">        Thread t1 = new Thread(f);</span><br><span class="line">        Thread t2 = new Thread(f1);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        System.out.println(f.count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">Output:</span><br><span class="line">20000</span><br></pre></td></tr></table></figure><p>上述代码中，我们将传递进去的是两个不同的FunctionWithSyn对象，最终仍然得到正确的结果。</p><h2 id="作用于代码块"><a href="#作用于代码块" class="headerlink" title="作用于代码块"></a><font size="5">作用于代码块</font></h2><p>有时候，我们并不需要对整个方法进行加锁，而是只需要对方法中的某些语句进行加锁也能达到线程安全的效果。这样的话性能会得到提高。<br>我们来写一段测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class BlockWithSyn implements Runnable&#123;</span><br><span class="line">    final Object o = new Object();</span><br><span class="line">    int count=0;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        //.........</span><br><span class="line">        //一些不需要加锁的其他逻辑代码</span><br><span class="line">        synchronized (o) &#123;</span><br><span class="line">            for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        BlockWithSyn b = new BlockWithSyn();</span><br><span class="line">        Thread t1 = new Thread(b);</span><br><span class="line">        Thread t2 = new Thread(b);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(b.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">Output:</span><br><span class="line">20000</span><br></pre></td></tr></table></figure><p>从上面代码不难发现，<font color="blue">synchronized修饰代码块时，锁对象是需要自己指定的，你可以指定任意对象，但是关键要保证不同线程的锁对象是同一个。</font></p><h1 id="synchronized底层原理"><a href="#synchronized底层原理" class="headerlink" title="synchronized底层原理"></a>synchronized底层原理</h1><p>前面说了synchronized的三种使用方式，下面说一下该关键字的底层原理。<br>Java虚拟机中的同步是基于<font color="blue">进入和退出管程(Monitor)对象实现</font>。无论是显式同步(有明确的 monitorenter 和 monitorexit 指令,即同步代码块)还是隐式同步都是如此。在 Java 语言中，同步用的最多的地方可能是被synchronized修饰的同步方法。<font color="blue">同步方法并不是由monitorenter和monitorexit指令来实现同步的，而是由方法调用指令读取运行时常量池中方法的 ACC_SYNCHRONIZED标志来隐式实现的。</font></p><ul><li><font color="bllue"><b>对象头</b></font><br>关于对象的组成部分在深入理解JVM虚拟机一已经介绍过，这里就不赘述。主要说一下对象头的组成，因为它是和synchronized息息相关的部分<br><img src="/2019/11/02/详解synchronized关键字/1.png" alt> 轻量级锁和偏向锁是Java6对synchronized锁进行优化后新增加的，一会儿会说到。这里我们主要分析一下重量级锁也就是通常说synchronized的对象锁<ul><li><font color="blue">锁标识位为10，其中指针指向的是monitor对象（也称为管程或监视器锁）的起始地址。</font><br>每个对象都存在着一个 monitor 与之关联，对象与其 monitor 之间的关系有存在多种实现方式，如monitor可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 monitor 被某个线程持有后，它便处于锁定状态。在Java虚拟机(HotSpot)中，monitor是由ObjectMonitor实现的，其主要数据结构如下（位于HotSpot虚拟机源码ObjectMonitor.hpp文件，C++实现的）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor() &#123;</span><br><span class="line">    _header       = NULL;</span><br><span class="line">    _count        = 0; //记录个数</span><br><span class="line">    _waiters      = 0,</span><br><span class="line">    _recursions   = 0;</span><br><span class="line">    _object       = NULL;</span><br><span class="line">    _owner        = NULL;</span><br><span class="line">    _WaitSet      = NULL; //处于wait状态的线程，会被加入到_WaitSet</span><br><span class="line">    _WaitSetLock  = 0 ;</span><br><span class="line">    _Responsible  = NULL ;</span><br><span class="line">    _succ         = NULL ;</span><br><span class="line">    _cxq          = NULL ;</span><br><span class="line">    FreeNext      = NULL ;</span><br><span class="line">    _EntryList    = NULL ; //处于等待锁block状态的线程，会被加入到该列表</span><br><span class="line">    _SpinFreq     = 0 ;</span><br><span class="line">    _SpinClock    = 0 ;</span><br><span class="line">    OwnerIsThread = 0 ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>ObjectMonitor中有两个队列，分别是<font color="blue">_WaitSet和_EntryList。用来保存ObjectWaiter对象列表(每个等待锁的线程都会被封装成ObjectWaiter对象)</font><br><font color="red">_owner指向持有ObjectMonitor对象的线程</font></p><ol><li>当多个线程同时访问一段同步代码时，<b>首先会进入_EntryList集合</b></li><li>当线程<font color="blue">获取到对象的monitor后进入_Owner区域</font><ol><li>把monitor中的<b>_owner变量设置为当前线程</b></li><li>monitor中的<b>计数器count加1</b></li></ol></li><li>若线程<font color="blue">调用wait()方法，将释放当前持有的monitor</font><ol><li>owner变量恢复为null，count自减1</li><li>同时该线程进入WaitSet集合中等待被唤醒。</li></ol></li><li>若当前线程执行完毕也将释放monitor(锁)并复位变量的值，以便其他线程进入获取monitor(锁)。</li></ol><p>通过上述分析不难发现，<font color="blue">monitor对象存在于每个Java对象的对象头中(存储的指针的指向)，synchronized锁便是通过这种方式获取锁的，也是为什么Java中任意对象可以作为锁的原因。</font></p><h1 id="synchronized代码块原理"><a href="#synchronized代码块原理" class="headerlink" title="synchronized代码块原理"></a>synchronized代码块原理</h1><p>下面定义一个同步代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class SynTest &#123;</span><br><span class="line">    int count=0;</span><br><span class="line">//该同步代码块只有一行代码</span><br><span class="line">    public  void SynFunction() &#123;</span><br><span class="line">        synchronized (this) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过javap -verbose命令反汇编一下，主要查看SynFunction方法的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void SynFunction();</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: (0x0001) ACC_PUBLIC</span><br><span class="line">Code:</span><br><span class="line">  stack=3, locals=3, args_size=1</span><br><span class="line"> 0: aload_0</span><br><span class="line"> 1: dup</span><br><span class="line"> 2: astore_1</span><br><span class="line"> 3: monitorenter//进入同步</span><br><span class="line"> 4: aload_0</span><br><span class="line"> 5: dup</span><br><span class="line"> 6: getfield      #2                  // Field count:I</span><br><span class="line"> 9: iconst_1</span><br><span class="line">10: iadd</span><br><span class="line">11: putfield      #2                  // Field count:I</span><br><span class="line">14: aload_1</span><br><span class="line">15: monitorexit//退出同步</span><br><span class="line">16: goto          24</span><br><span class="line">19: astore_2</span><br><span class="line">20: aload_1</span><br><span class="line">21: monitorexit//出现异常后退出同步，释放锁</span><br><span class="line">22: aload_2</span><br><span class="line">23: athrow</span><br><span class="line">24: return</span><br><span class="line">  Exception table:</span><br><span class="line"> from    to  target type</span><br><span class="line"> 4    16    19   any</span><br><span class="line">19    22    19   any</span><br><span class="line">//省略一些其他属性</span><br></pre></td></tr></table></figure><p>由此可知，<font color="blue">同步语句块的实现使用的是monitorenter和monitorexit指令</font></p><ul><li><b>其中monitorenter指令指向同步代码块的开始位置</b></li><li><b>monitorexit指令则指明同步代码块的结束位置</b></li></ul><ol><li>当执行monitorenter指令时，当前线程将试图获取 objectref(即对象锁) 所对应的 monitor 的持有权</li><li>当 objectref 的 monitor 的进入计数器为 0，那线程可以成功取得 monitor，并将计数器值设置为 1，取锁成功。</li><li>如果当前线程已经拥有 objectref 的 monitor 的持有权，那它可以重入这个 monitor (关于重入性稍后会分析)，重入时计数器的值也会加 1。</li><li>倘若其他线程已经拥有 objectref 的 monitor 的所有权，那当前线程将被阻塞，直到正在执行线程执行完毕，即monitorexit指令被执行，执行线程将释放 monitor(锁)并设置计数器值为0 ，其他线程将有机会持有 monitor 。</li></ol><p>值得注意的是<font color="bllue">编译器将会确保无论方法通过何种方式完成，方法中调用过的每条 monitorenter 指令都有执行其对应 monitorexit 指令，而无论这个方法是正常结束还是异常结束。</font>为了保证在方法异常完成时 monitorenter 和 monitorexit 指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 monitorexit 指令。从字节码中也可以看出多了一个monitorexit指令，它就是异常结束时被执行的释放monitor 的指令。</p><h1 id="synchronized方法原理"><a href="#synchronized方法原理" class="headerlink" title="synchronized方法原理"></a>synchronized方法原理</h1><p>方法的同步是隐式的，和同步块不同，它<font color="blue">不需要通过字节码指令来完成，实现在方法调用和返回操作中。</font>方法的访问标志有一个ACC_SYNCHRONIZED标志用于判断方法是否是同步方法。</p><ul><li><b>当方法调用时，调用指令会检查方法的这个标志，如果该方法是同步方法</b></li><li><b>执行线程将先持有monitor，然后再执行方法。最后在方法退出(正常或非正常)时释放monitor</b></li></ul><p>在方法执行期间，执行线程持有了monitor。其他任何线程都无法再获得，<font color="red">如果方法在执行期间抛出了异常，并且在方法内部无法处理，那同步方法的monitor将在异常抛出到同步方法之外时自动释放。</font><br>对于下面这个同步方法，我们来查看一下它的字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class SynTest &#123;</span><br><span class="line">    int count=0;</span><br><span class="line">    public synchronized void SynFunction() &#123;</span><br><span class="line">            count++;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>javap -verbose得到字节码指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void SynFunction();</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: (0x0021) ACC_PUBLIC, ACC_SYNCHRONIZED//同步方法的标志位</span><br><span class="line">Code:</span><br><span class="line">  stack=3, locals=1, args_size=1</span><br><span class="line"> 0: aload_0</span><br><span class="line"> 1: dup</span><br><span class="line"> 2: getfield      #2                  // Field count:I</span><br><span class="line"> 5: iconst_1</span><br><span class="line"> 6: iadd</span><br><span class="line"> 7: putfield      #2                  // Field count:I</span><br><span class="line">10: return</span><br><span class="line">  LineNumberTable:</span><br><span class="line">line 6: 0</span><br><span class="line">line 7: 10</span><br><span class="line">  LocalVariableTable:</span><br><span class="line">Start  Length  Slot  Name   Signature</span><br><span class="line">0      11     0  this   LblogTest/SynTest;</span><br></pre></td></tr></table></figure><p>通过字节码指令可以发现，同步方法中是没有monitor指令的，但是方法的标志位出现了ACC_SYNCHRONIZED</p><h1 id="JVM对synchronized的优化"><a href="#JVM对synchronized的优化" class="headerlink" title="JVM对synchronized的优化"></a>JVM对synchronized的优化</h1><p>HotSpot在1.6版本对synchronized实现了各种优化技术，如适应性自旋、锁消除、锁粗化、偏向锁和轻量级锁。接下来讲逐个进行介绍。</p><h2 id="适应性自旋"><a href="#适应性自旋" class="headerlink" title="适应性自旋"></a><font size="5">适应性自旋</font></h2><p>使用synchronized锁的时候，对性能最大的影响就是阻塞的实现，挂起和恢复线程的操作都需要转入内核态中完成，这给操作系统的并发性能带来了很大的压力。并且，在许多情境下，共享数据的锁定状态只会持续很短一段时间，为了这一段时间去挂起和恢复线程并不值得。这时候，我们可以<font color="blue">让后面请求锁的那么线程“稍等一下”，但不放弃处理器执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需要让线程执行一个忙循环，这就是所谓的自旋锁。</font></p><h3 id="自旋等待的时间"><a href="#自旋等待的时间" class="headerlink" title="自旋等待的时间"></a><font size="5">自旋等待的时间</font></h3><p>自旋等待本身虽然避免了线程切换的开销，但它也是要占用处理器时间的。因此，如果锁被占用的时间很短，自选等待的效果就会非常好，反之，如果锁被占用的时间很长，那么自选等待的线程只会白白浪费处理器资源。因此，自旋等待的时间必须要有一定的限度。在JDK1.6引入了自旋锁，自旋的时间由前一次在同一个锁上的自旋时以及锁的拥有者的状态决定</p><ol><li>如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程赈灾运行中，那么虚拟机就会认为这一次自旋也很有可能再次成功，进而允许自旋等待的时间更长一点，如100个循环。</li><li>如果对于某个锁，自旋很少成功获得过，那么以后要获取这个锁时可能省略掉自旋过程。</li></ol><p>这就是自适应自旋。</p><h2 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a><font size="5">锁消除</font></h2><p>锁消除是指虚拟机在即时编译器运行时，对代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。<br>也许你会问，我们为什么要在明知道不会产生数据竞争的情况下还是用同步呢，如果我们不使用同步那么这项技术不就没用了么？这是因为，许多同步措施并不是我们在代码上自己加入的，同步的代码在Java程序中普遍程度较高，我们来看下面的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">return s1 + s2 + s3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，String是一个不可变的类，对字符串的连接操作总是通过生成新的String对象来进行的，因此Javac编译器会对String连接做优化。</p><ul><li>在JDK1.5之前，会转化为StringBuffer对象的连续append()操作</li><li>在JDK1.5之后，会转化为StringBuilder对象的连续append()操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//JDK1.5之前</span><br><span class="line">public static String concatString(String s1, String s2, String s3) &#123;</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">sb.append(s1);</span><br><span class="line">sb.append(s2);</span><br><span class="line">sb.append(s3);</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们知道StringBuffer是线程安全的，里面存在锁，现在你还认为这段代码没有锁么？当虚拟机执行这段代码时，发现sb对象的作用域被限制在方法内部，其他线程无法访问它，因此在即时编译时候，这段代码就会忽略掉所有的同步而直接执行。</p><h2 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a><font size="5">锁粗化</font></h2><p>原则上，当我们在编写代码时，总是推荐讲同步块的作用范围限制的尽量小，只在共享数据的实际作用域中才进行同步，这样能够使得需要同步的操作数量尽可能变小，如果存在锁竞争，那么等待锁的线程也能尽快获得锁。<br>大部分情况下，这样做是对的，但是如果一系列连续操作都对同一个对象反复加锁解锁，甚至加锁操作是出现在循环体中的，那即使没有锁竞争，频繁的互斥同步操作也会导致不必要的性能损耗。前面的连续的append()就属于这类情况。<br><font color="blue">如果虚拟机发现有这样一串零碎的操作都是对同一个对象加锁，将会把加锁同步的范围扩大到整个操作序列外部。</font>就拿上面来说，虚拟机会将加锁操作扩展到第一个append()之前和最后一个append()之后，这样只需要加锁一次即可。</p><h2 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a><font size="5">偏向锁</font></h2><p>JDK1.6引入的一项锁优化，它的<font color="red">目的是消除数据在无竞争情况下的同步，进一步提高程序性能。</font>它的核心思想是：<font color="blue">如果一个线程获得了锁，那么锁就进入偏向模式。当这个线程再次请求锁时，无需任何同步操作，可以直接进入。</font>对于没有锁竞争的场合，偏向锁有比较好的优化效果，因为连续多次极有可能是同一个线程请求相同的锁。对于锁竞争比较激烈的场合下，偏向模式就会失效，这时进入锁就升级为轻量级锁。</p><h2 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a><font size="5">轻量级锁</font></h2><p>轻量级锁的操作也比较方便，它只是简单地讲对象头部作为指针指向持有锁的线程堆栈的内部，来判断一个线程是否持有对象锁。如果线程获得轻量级锁成功，就顺利进入临界区。如果轻量级加锁失败，则表示其他线程抢先争夺到了锁，那么当前线程的锁请求就会膨胀为重量级锁。轻量级锁提升性能的依据是“对于绝大部分的锁，整个同步周期都是不存在竞争的”。如果没有竞争，轻量级锁使用CAS操作避免的使用互斥量的开销。</p><h2 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a><font size="5">重量级锁</font></h2><p>当轻量级锁失败后，JVM会做最后一次努力，线程并不会被真正挂起，而是采用前面介绍的适应性自旋的方式，看看能否再次获得锁。经过若干次循环后如果获得了锁，那么就进入同步区；否则，当前线程就会被真正挂起，变成重量级锁。</p><hr><p>参考资料<br>《深入理解JVM虚拟机》<br>《Java并发编程实战》<br>《Java编程思想》<br>《实战Java高并发程序设计》<br><a href="https://blog.csdn.net/javazejian/article/details/72828483" target="_blank" rel="noopener">大神博客</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数质数</title>
      <link href="/2019/11/02/%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/"/>
      <url>/2019/11/02/%E8%AE%A1%E6%95%B0%E8%B4%A8%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百零四题</b><br>难度：<font color="green">简单</font><br>题目：统计所有小于非负整数 n 的质数的数量。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 10</span><br><span class="line">输出: 4</span><br><span class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>首先，对于质数，我们首先想到的应该是大于1的数，最小的指数为2。对于这个题，我一开始想到的是优化的暴力解法，最后虽然通过了测试，但是速度感人，因此翻了评论区才发现有更好的思路，那就是厄拉多塞筛法。<br>当我们遍历到一个数i(1&lt;i&lt;n)时，有这样一个隐藏条件，所有n以内的i的倍数都不是质数！！例如i=2，那么4、6、8、10……都不是指数，都可以排除。很巧妙吧，这就是厄拉多塞筛法的原理了。如图所示<br><img src="/2019/11/02/计数质数/%E5%9F%83%E5%BC%8F%E7%AD%9B%E6%B3%95.gif" alt>(图源LeetCode题解区)</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//优化的暴力解法</span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    if(n&lt;=2)</span><br><span class="line">        return 0;</span><br><span class="line">    int res=1;</span><br><span class="line">    //从奇数3开始遍历，偶数肯定不是质数，因此每次+2</span><br><span class="line">    for(int i=3;i&lt;n;i+=2)&#123;</span><br><span class="line">        if(isPrime(i))</span><br><span class="line">            res++;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean isPrime(int n)&#123;</span><br><span class="line">    if(n==3)</span><br><span class="line">        return true;</span><br><span class="line">//同样的道理，并且只遍历到sqrt(n)为止</span><br><span class="line">    for(int i=3;i*i&lt;=n;i+=2)&#123;</span><br><span class="line">        if(n%i==0)</span><br><span class="line">            return false;</span><br><span class="line">&#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=====================================“</span><br><span class="line">//厄拉多塞筛法</span><br><span class="line">public int countPrimes(int n) &#123;</span><br><span class="line">    boolean[] res=new boolean[n];</span><br><span class="line">    int count=0;</span><br><span class="line">    for(int i=2;i&lt;n;i++)&#123;</span><br><span class="line">        if(!res[i])&#123;</span><br><span class="line">            count++;</span><br><span class="line">            for(int j=i+i;j&lt;n;j+=i)&#123;</span><br><span class="line">                res[j]=true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>厄拉多塞筛法是求质数个数很实用高效的算法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 质数 </tag>
            
            <tag> 厄拉多塞筛法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除链表元素</title>
      <link href="/2019/11/02/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>/2019/11/02/%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百零三题</b><br>难度：<font color="green">简单</font><br>题目：删除链表中等于给定值 val 的所有节点。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题看上去很简单，但是做起来却并不是那么简单。其中有一些细节是处理链表问题经常容易犯错的，因此才把这个题记录下来。</p><ol><li>首先，对于链表问题，要保证不能有空指针异常</li><li>对于本题，要保证移动指针p始终在遍历的节点的前一个位置</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public ListNode removeElements(ListNode head, int val) &#123;</span><br><span class="line">    //要使用while循环来保证head节点指向第一个值不为val的节点</span><br><span class="line">    //不能使用if！！！</span><br><span class="line">    while(head!=null&amp;&amp;head.val==val)</span><br><span class="line">    head=head.next;</span><br><span class="line">    ListNode p=head;</span><br><span class="line">    //先判断p!=null再判断p.next!=null</span><br><span class="line">    while(p!=null&amp;&amp;p.next!=null)&#123;</span><br><span class="line">    if(p.next.val==val)&#123;</span><br><span class="line">    p.next=p.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">    p=p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于链表的题，如果思路比较简单，那么一定要注意细节问题不能出错。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐数</title>
      <link href="/2019/11/01/%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
      <url>/2019/11/01/%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第二百零二题</b><br>难度：<font color="green">简单</font><br>题目：编写一个算法来判断一个数是不是“快乐数”。一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">示例: </span><br><span class="line">输入: 19</span><br><span class="line">输出: true</span><br><span class="line">解释: </span><br><span class="line">1*1 + 9*9 = 82</span><br><span class="line">8*8 + 2*2 = 68</span><br><span class="line">6*6 + 8*8 = 100</span><br><span class="line">1*1 + 0*0 + 0*0 = 1</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>通过题意可以发现</p><ol><li>如果一个数是快乐数，那么经过若干次计算后最终会收敛为1。</li><li>如果一个数不是快乐数，那么经过若干次计算后会变回最开始的数</li></ol><h2 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a><font size="5">快慢指针法</font></h2><p>通过分析，可以发现这个题和判断链表是否有环较为类似，可以使用</p><ol><li>设置一个fast变量和一个slow变量，初始值相等</li><li>fast每次循环计算两次，slow每次循环计算一次</li><li>当fast==slow时退出循环</li><li>如果fast==1，那么是快乐数，否则不是快乐数。</li></ol><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a><font size="5">递归实现</font></h2><p>对于递归，我们首先要判断递归出口，对于10以内的数字，只有1和7是快乐数，其它的都不是快乐数，因此我们可以得到递归出口</p><ol><li>如果n==1||n==7，返回true</li><li>否则如果n&lt;10，返回false</li><li>否则继续递归</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面将介绍两种实现思路</p><h2 id="快慢指针法-1"><a href="#快慢指针法-1" class="headerlink" title="快慢指针法"></a><font size="5">快慢指针法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean isHappy(int n) &#123;</span><br><span class="line">    int slow=n;</span><br><span class="line">    int fast=n;</span><br><span class="line">    do&#123;</span><br><span class="line">        slow=cal(slow);</span><br><span class="line">        fast=cal(fast);</span><br><span class="line">        fast=cal(fast);</span><br><span class="line">        </span><br><span class="line">    &#125;while(slow!=fast);</span><br><span class="line">    return slow==1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int cal(int n)&#123;</span><br><span class="line">    int res=0;</span><br><span class="line">    while(n&gt;0)&#123;</span><br><span class="line">        int temp=n%10;</span><br><span class="line">        res+=temp*temp;</span><br><span class="line">        n/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归实现-1"><a href="#递归实现-1" class="headerlink" title="递归实现"></a><font size="5">递归实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public boolean isHappy(int n) &#123;</span><br><span class="line">    if(n==1||n==7)</span><br><span class="line">    return true;</span><br><span class="line">    if(n&lt;10)</span><br><span class="line">    return false;</span><br><span class="line">    int res=0;</span><br><span class="line">    while(n&gt;0)&#123;</span><br><span class="line">    int temp=n%10;</span><br><span class="line">    res+=temp*temp;</span><br><span class="line">    n/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    return isHappy(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>了解了规律，遇到这样的题就会迎刃而解。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 快慢指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发之先行发生原则</title>
      <link href="/2019/11/01/Java%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%85%88%E8%A1%8C%E5%8F%91%E7%94%9F%E5%8E%9F%E5%88%99/"/>
      <url>/2019/11/01/Java%E5%B9%B6%E5%8F%91%E4%B9%8B%E5%85%88%E8%A1%8C%E5%8F%91%E7%94%9F%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>Java语言中有一个”先行发生“(heppens-before)原则，这个原则非常重要，它是判断数据是否存在竞争，线程是否安全的主要依据。依靠这个原则，我们可以通过几条规则一揽子的解决并发环境下两个操作是否可能存在冲突的所有问题。</p><hr><a id="more"></a><p>下面就介绍Java内存模型下一些天然的先行发生关系，这些先行发生关系无需任何同步协助就已经存在，可以在编码中直接使用。如果两个操作的关系不在此列，并且无法从下列规则推导出来的话，他们就没有顺序性保障，虚拟机可以对它们随意的进行重排序。</p><ol><li><b>程序次序规则</b><br>在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确的说，应该是控制流顺序而不是程序代码顺序，因为要考虑循环、分支等结构。</li><li><b>管程锁定规则</b><br>一个unlock操作先行发生于后面对同一个锁的lock操作。必须是同一个锁，并且这里的“先后”指的是时间上的顺序</li><li><b>volatile变量规则</b><br>对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的”后面“也是时间上的顺序</li><li><b>线程启动规则</b><br>Thread对象的start()方法先行发生于此线程的每一个动作</li><li><b>线程终止规则</b><br>线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程是否已经终止执行</li><li><b>线程中断规则</b><br>对线程的interrupt()方法先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生</li><li><b>对象终结规则</b><br>一个对象初始化完成(构造方法执行结束)先行发生于它的finalized()方法的开始</li><li><b>传递性</b><br>如果操作A先行发生于操作B，操作B先行发生于操作C，那么A先行与C。</li></ol><p>下面就举例演示一下如何使用这些规则去判断线程是否安全</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private int value=0;</span><br><span class="line">public void setValue(int value)&#123;</span><br><span class="line">this.value=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void getValue()&#123;</span><br><span class="line">return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们假设线程A先(时间上)调用了set方法，然后B调用了同一个对象的get方法。那么B收到的返回值是什么？我们依次分析一下先行发生规则里的各条规则</p><ul><li>首先，A和B不再一个线程，因此不满足规则1</li><li>由于没有同步块，也就不会有lock和unlock操作，管程锁定规则不适用</li><li>value不是valotile变量，不满足第三条</li><li>同样的后面都不满足</li></ul><p>因此，我们可以判定尽管A在时间上先于线程B，但是无法确定B中get方法的返回结果，即这里面的操作不是线程安全的。<br><font color="red">时间先后顺序于先行发生原则之间基本没有太大的关系。我们在衡量并发问题时不要受时间顺序的干扰，必须以先行发生原则为准</font></p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解volatile关键字</title>
      <link href="/2019/11/01/%E8%AF%A6%E8%A7%A3volatile%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/11/01/%E8%AF%A6%E8%A7%A3volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>最近在学习Java并发方面的知识，对Java并发的基础知识有了初步的认识，会在接下来的几篇博客中就自己学到的部分进行介绍，这里就先介绍一下volatile关键字。</p><hr><a id="more"></a>要想对volatile关键字有一个较为深入的了解，首先必须对JMM有一定的概念，如果你还不了解，翻看我前面的博客。这里只强调一点，每条线程都有自己的工作内存，线程的工作内存中保存了被该线程使用到的变量(实例字段、静态字段、构成数组对象的元素等)的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，<font color="red">包括volatile修饰的关键字</font>。而不能直接读写主内存中的变量。<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>在介绍volatile之前，我们先了解三个基础的概念</p><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a><font size="5">原子性</font></h2><p><font color="blue">如果一个操作不能被线程调度机制中断，一旦操作开始，那么它一定可以在可能发生的“上下文切换之前”(切换到其他线程执行)执行完毕，那么该操作是一个原子性操作。一个原子性操作是不可分割的。</font>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们可以大致认为基本数据类型的访问读写是具备原子性的。<br>我们经常会需要一个更大范围的原子性保证，JMM还提供了lock和unlock操作来满足这种需求。虚拟机没有把这两个操作直接开放给用户，它提供了更高层次的字节码指令monitorenter和monitorexit来隐式的使用这两个操作，这两个字节码指令反映到Java代码中就是同步块synchronized关键字(下一篇会介绍该关键字)</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a><font size="5">可见性</font></h2><p>可见性是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的，稍后会讲到，volatile修饰的变量是如何保证可见性的。</p><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a><font size="5">有序性</font></h2><p>对于单个线程的执行代码而言，我们总是习惯的认为代码是从前往后依次执行的。这样理解在单线程中不会出现错误，但是在多线程中，程序执行可能就会出现乱序，这给我们的直观感觉就是，写在前面的代码，会在后面执行。有序性问题的原因是程序在执行时，可能会进行指令重排序，重排后的指令与原指令的顺序未必一致。<br>下面一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class OrderExample&#123;</span><br><span class="line">int a=0;</span><br><span class="line">boolean flag=false;</span><br><span class="line">public void writer()&#123;</span><br><span class="line">a=1;</span><br><span class="line">flag=true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void reader()&#123;</span><br><span class="line">if(flag)&#123;</span><br><span class="line">int i=a+1;</span><br><span class="line">.....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设线程A首先执行writer()方法，接着线程B执行reader()方法。如果发生指令重排，那么”flag=true;”可能会在”a=1;”之前执行。那么线程B执行”int i=a+1”时a还没有被赋值为1。</p><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a><font size="5">内存屏障</font></h2><p>内存屏障(Memory Barrier)是一种CPU指令，它使CPU或编译器对屏障指令之前和之后发出的内存操作执行一个排序约束。这就<font color="blue">意味着在屏障之前发布的操作被保证在屏障之后发布的操作之前执行。</font><br>内存屏障共分为四种类型</p><ol><li><b>LoadLoad屏障</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Load1;</span><br><span class="line">LoadLoad;</span><br><span class="line">Load2;</span><br></pre></td></tr></table></figure></li></ol><p>Load1和Load2代表两条读取指令。在Load2要读取的数据被访问前，保证Load1要读取的数据被读取完毕</p><ol start="2"><li><b>StoreStore屏障</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Store1;</span><br><span class="line">StoreStore;</span><br><span class="line">Store2;</span><br></pre></td></tr></table></figure></li></ol><p>Store1和Store2代表两条写入指令。在Store2写入执行之前，保证Store1的写入操作对其他处理器可见</p><ol start="3"><li><b>LoadStore屏障</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Load;</span><br><span class="line">LoadStore;</span><br><span class="line">Store;</span><br></pre></td></tr></table></figure></li></ol><p>Load代表读取指令，Store代表写入指令，在Store写入执行之前，保证Load要读取的数据被读取完毕</p><ol start="4"><li><b>StoreLoad屏障</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Store;</span><br><span class="line">StoreLoad;</span><br><span class="line">Load;</span><br></pre></td></tr></table></figure></li></ol><p>Load代表读取指令，Store代表写入指令，在Load读取执行之前，保证Store写入对其他处理器可见。</p><h1 id="volatile关键字作用"><a href="#volatile关键字作用" class="headerlink" title="volatile关键字作用"></a>volatile关键字作用</h1><p>volatile关键字是JVM提供的最轻量级的同步机制。当一个变量定义为volatile关键字后，它将具备两种特性</p><ol><li><b>保证此变量对所有线程的可见性</b></li><li><b>禁止指令重排序优化</b></li><li><font color="red">无法保证原子性</font></li></ol><p>我们来看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">    public static volatile int race = 0;</span><br><span class="line"></span><br><span class="line">    public static void increase() &#123;</span><br><span class="line">        race++;</span><br><span class="line">    &#125;</span><br><span class="line">    private static final int THREADS_COUNT = 20;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">//利用线程池开启20个线程，对volatile修饰的race进行增加操作</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(THREADS_COUNT);</span><br><span class="line">        for (int i = 0; i &lt; THREADS_COUNT; i++) &#123;</span><br><span class="line">            exec.execute(()-&gt;&#123;</span><br><span class="line">                for (int i1 = 0; i1 &lt; 10000; i1++) &#123;</span><br><span class="line">                    increase();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">//等所有线程都开始后调用shutdown方法，</span><br><span class="line">//该方法会使线程池完成已开启任务后关闭</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(100);</span><br><span class="line">        exec.shutdown();</span><br><span class="line">        System.out.println(race);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“==================”</span><br><span class="line">Output：130405</span><br></pre></td></tr></table></figure><p>如果上述代码能够正确并发，那么最后的输出结果应该是200000，可以当我们运行时，每次运行的结果都不一样，但是都小于200000。这是什么原因呢？<br>问题就处在race++中。我们使用Javap反编译后得到这行代码的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">  stack=2, locals=0, args_size=0</span><br><span class="line"> 0: getstatic     #2                  // Field race:I</span><br><span class="line"> 3: iconst_1</span><br><span class="line"> 4: iadd</span><br><span class="line"> 5: putstatic     #2                  // Field race:I</span><br><span class="line"> 8: return</span><br><span class="line">  LineNumberTable:</span><br><span class="line">line 9: 0</span><br><span class="line">line 10: 8</span><br></pre></td></tr></table></figure><p>可以发现，这一行代码由四条字节码指令构成，那么我们很容易就能够分析出并发失败的原因：<b>当getstatic指令将race的值取到操作数栈顶时，volatile关键字保证了race的值在此时是正确的，但是在执行了iconst_1，iadd这些指令的时候，其他线程可能已经将race的值加大了，而操作数栈顶的值就变成了过期数据。所以putstatic指令可能把较小的race值同步回主内存中。</b></p><h2 id="使用volatile场景"><a href="#使用volatile场景" class="headerlink" title="使用volatile场景"></a><font size="5">使用volatile场景</font></h2><p>由于volatile关键字并不保证可见性，因此volatile关键字的使用需要格外小心，在以下两种情况下，我们可以使用volatile关键字</p><ol><li><b>运算结果不依赖变量的当前值，或者能够确保只有单一线程修改变量的值。</b><br>这一点很好理解，就向前面的race++一样，依赖于race当前的值，但是别的线程可能对当前值进行修改，那么该线程依赖的值就变成了无效值</li><li><b>变量不需要与其他的状态变量共同参与不变约束。</b><br>我们来举例说明这一点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">检查start&lt;end是否成立，在给start赋值之前不变式是有效的</span><br><span class="line">if(start&lt;end)&#123;</span><br><span class="line">start=newStart;</span><br><span class="line">...//在给start赋值之后给end赋值之前，该不变式是有效的</span><br><span class="line">end=newEnd; //给start和end赋值之后不变式重新变为有效</span><br><span class="line">&#125;</span><br><span class="line">这样一来，其他的线程在判断if条件的时候，就有可能得到不同的判断结果，导致并发的错误。</span><br></pre></td></tr></table></figure></li></ol><p>如果我们有更多的需求，那就要通过加锁来实现，而不能仅仅通过volatile来满足需求<br>下面的场景就很适合volatile来控制并发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">volatile boolean shutdownReq;</span><br><span class="line">public void shutdown() &#123;</span><br><span class="line">shutdownReq = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void doWork() &#123;</span><br><span class="line">while (!shutdownReq) &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//当shutdown方法被调用，shutdownReq被设置为true时</span><br><span class="line">//所有线程中执行的doWork()方法都立即停下来</span><br></pre></td></tr></table></figure><h2 id="禁止指令重排序优化"><a href="#禁止指令重排序优化" class="headerlink" title="禁止指令重排序优化"></a><font size="5">禁止指令重排序优化</font></h2><p>普通的变量<font color="red">仅仅保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序和程序代码中的执行顺序一致</font>。我们来举例说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">volatile boolean initialized=false</span><br><span class="line"></span><br><span class="line">//假设以下代码在线程A中执行</span><br><span class="line">//模拟读取配置信息，读取完成后将initialized设置为true以通知其他线程配置可用</span><br><span class="line">dosomething()</span><br><span class="line">initialized=true;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">//假设以下代码在线程B中执行</span><br><span class="line">//等待initialized为true，代表A已经把配置信息初始化完成</span><br><span class="line">while(!initialized)&#123;</span><br><span class="line">sleep();</span><br><span class="line">&#125;</span><br><span class="line">//使用A线程初始化好的配置信息</span><br><span class="line">useThreadA();</span><br></pre></td></tr></table></figure><p>以上是一段伪代码，如果我们在定义initialized关键字时没有使用volatile修饰，就可能由于指令重排序优化，导致位于线程A中最后一句代码“initialized=true;”被提前执行，这样在B线程中使用配置信息就会出现错误(因为实际上A线程还没有执行完配置操作)，而volatile关键字可以避免这一点。<br>为什么说volatile能够禁止指令重排序呢？<br><font color="blue">从硬件结构上讲，指令重排序是指CPU采用了允许讲多条指令不按程序规定的顺序分开发送给各相应的电路单元处理。</font>但这并不是说指令任意重排，是在保证结果正确的情况下进行重排。<br>在一个变量被volatile修饰之后，JVM会做两件事</p><ol><li>在每个volatile写操作之前插入StoreStore屏障，写操作之后插入StoreLoad屏障</li><li>在每个volatile读操作之前插入LoadLoad屏障，读操作之后插入LoadStore屏障</li></ol><p>这样就达到了禁止重排序的目的。</p><h1 id="volatile变量的特殊规则"><a href="#volatile变量的特殊规则" class="headerlink" title="volatile变量的特殊规则"></a>volatile变量的特殊规则</h1><p>我们假设T代表一个线程，V和W分别表示两个volatile型变量，那么在进行read、load、use、assign、store和write操作时需要满足一下规则</p><ol><li>只有当线程T对V执行的前一个动作时load的时候，线程T才能对变量V执行use动作；同样的，只有当线程T对变量V执行的后一个动作是use的时侯，线程T才能对变量V执行load操作。简单地说就是<font color="red">线程T对变量V的read、load、use三个操作必须连续依次出现</font>。这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改后的值。</li><li>只有当线程T对V执行的前一个动作时assign的时候，线程T才能对变量V执行store动作；同样的，只有当线程T对变量V执行的后一个动作是store的时侯，线程T才能对变量V执行assign操作。简单地说就是<font color="red">assign、store、write三个操作必须连续依次出现</font>。这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程能看见自己对变量V所做的修改。</li><li>我们假定一下几个前提<ol><li>假定动作A是线程T对变量V实施的use或assign操作，假定动作F是和动作A相关联的load和store操作，假定动作P是和动作F对应的对变量V的read和write操作；</li><li>类似的，假定动作B是线程T对变量W实施的use或assign操作，假定动作G是和动作B相关联的load和store操作，假定动作Q是和动作G对应的对变量W的read和write操作。</li><li><font color="red">那么如果A先于B，那么P先于Q。这条规则要求volatile修饰的变量不会被指令重排序优化，保证代码执行顺序与程序的顺序相同。</font></li></ol></li></ol><p>前两条规则保证了volatile的可见性，第三条则保证了volatile变量不会被指令重排序优化<br><img src="/2019/11/01/详解volatile关键字/volatile.jpg" alt></p><p>对volatile关键字的介绍就到这里，参考资料<br>《Java并发编程实战》<br>《实战Java高并发程序设计》<br>和一些网络上查阅的资料。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> volatile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打家劫舍</title>
      <link href="/2019/10/31/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>/2019/10/31/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百九十八题</b><br>难度：<font color="green">简单</font><br>题目：你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [1,2,3,1]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [2,7,9,3,1]</span><br><span class="line">输出: 12</span><br><span class="line">解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>考虑所有可能的抢劫方案过于困难。一个自然而然的想法是首先从最简单的情况开始。记：</p><p>f(k) = 从前 k 个房屋中能抢劫到的最大数额，Ai=第 i 个房屋的钱数。</p><ol><li>首先看 n = 1 的情况，显然 f(1) = A1。</li><li>再看 n = 2，f(2) = max(A1+A2)。</li><li>对于 n = 3，有两个选项:<ol><li>抢第三个房子，将数额与第一个房子相加。</li><li>不抢第三个房子，保持现有最大数额。</li></ol></li></ol><p>显然，你想选择数额更大的选项。于是，可以总结出公式：f(k)=max(f(k–2)+A,f(k–1))<br>使f(–1)=f(0)=0为初始情况，这将极大地简化代码。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public int rob(int[] nums) &#123;</span><br><span class="line">//f(k-2)</span><br><span class="line">int prevMax = 0;</span><br><span class="line">//f(k-1)</span><br><span class="line">int currMax = 0;</span><br><span class="line">for (int x : nums) &#123;</span><br><span class="line">//保存当前最大值</span><br><span class="line">int temp = currMax;</span><br><span class="line">//更新f(k-1)选择是否抢劫当前房子</span><br><span class="line">currMax = Math.max(prevMax + x, currMax);</span><br><span class="line">//更新f(k-2)</span><br><span class="line">prevMax = temp;</span><br><span class="line">&#125;</span><br><span class="line">return currMax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心在于找到状态转换方程。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位1的个数</title>
      <link href="/2019/10/31/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>/2019/10/31/%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百九十一题</b><br>难度：<font color="green">简单</font><br>题目：编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &apos;1&apos;。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &apos;1&apos;。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题有两种方法来解决</p><ol><li>使用lowbit()公式:x&amp;-x，返回x的最后一个1</li><li>使用一个标记mark=1，通过对mark进行移位，并判断mark&amp;x是否为0。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//lowbit公式</span><br><span class="line">public int hammingWeight(int n) &#123;</span><br><span class="line">    int res=0;</span><br><span class="line">    while(n!=0)&#123;</span><br><span class="line">    res++;</span><br><span class="line">    n-=(n&amp;-n);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=========================“</span><br><span class="line">移位</span><br><span class="line">public int hammingWeight(int n) &#123;</span><br><span class="line">    int res=0;</span><br><span class="line">    int mark=1;</span><br><span class="line">    for(int i=0;i&lt;32;i++)&#123;</span><br><span class="line">    if((n&amp;mark)!=0)&#123;</span><br><span class="line">    res++;</span><br><span class="line">    &#125;</span><br><span class="line">    mark&lt;&lt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组</title>
      <link href="/2019/10/29/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
      <url>/2019/10/29/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百八十九题</b><br>难度：<font color="green">简单</font><br>题目：给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [1,2,3,4,5,6,7] 和 k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右旋转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右旋转 3 步: [5,6,7,1,2,3,4]</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [-1,-100,3,99] 和 k = 2</span><br><span class="line">输出: [3,99,-1,-100]</span><br><span class="line">解释: </span><br><span class="line">向右旋转 1 步: [99,-1,-100,3]</span><br><span class="line">向右旋转 2 步: [3,99,-1,-100]</span><br></pre></td></tr></table></figure><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>解决方法有很多，这里提供三种</p><ol><li>暴力法</li><li>我们可以用一个额外的数组来将每个元素放到正确的位置上，也就是原本数组里下标为 ii 的我们把它放到 (i+k)%数组长度(i+k)%数组长度 的位置。然后把新的数组拷贝到原数组中。</li><li>当我们旋转数组 k 次， k%nk%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-kn−k 个元素，就能得到想要的结果。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//暴力法</span><br><span class="line">public void rotate(int[] nums, int k) &#123;</span><br><span class="line">for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">int temp=nums[nums.length-1];</span><br><span class="line">for(int j=nums.length-1;j&gt;0;j--)&#123;</span><br><span class="line">nums[j]=nums[j-1];</span><br><span class="line">&#125;</span><br><span class="line">nums[0]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度：O(n*k)，每个元素被移动1步，k次</span><br><span class="line">空间复杂度：O(1)</span><br><span class="line">“=================================”</span><br><span class="line"></span><br><span class="line">//额外数组</span><br><span class="line">public void rotate(int[] nums, int k) &#123;</span><br><span class="line">int[] temp=new int[nums.length];</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">temp[i]=nums[(nums.length-k+i)%nums.length];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;nums.length;i++)&#123;</span><br><span class="line">nums[i]=temp[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度：O(n)，每个元素被移动1步，k次</span><br><span class="line">空间复杂度：O(n)</span><br><span class="line"></span><br><span class="line">“=================================”</span><br><span class="line">//反转</span><br><span class="line">public void rotate(int[] nums, int k) &#123;</span><br><span class="line">k%=nums.length;</span><br><span class="line">reverse(nums,0,nums.length-1);</span><br><span class="line">reverse(nums,0,k-1);</span><br><span class="line">reverse(nums,k,nums.length-1);</span><br><span class="line">&#125;</span><br><span class="line">public static void reverse(int[] nums,int start,int end)&#123;</span><br><span class="line">while(start&lt;end)&#123;</span><br><span class="line">nums[start]+=nums[end];</span><br><span class="line">nums[end]=nums[start]-nums[end];</span><br><span class="line">nums[start]=nums[start]-nums[end];</span><br><span class="line">start++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度：O(n)</span><br><span class="line">空间复杂度：O(1)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阶乘后的零</title>
      <link href="/2019/10/29/%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/"/>
      <url>/2019/10/29/%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百七十二题</b><br>难度：<font color="green">简单</font><br>题目：给定一个整数 n，返回 n! 结果尾数中零的数量。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 3</span><br><span class="line">输出: 0</span><br><span class="line">解释: 3! = 6, 尾数中没有零。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 5</span><br><span class="line">输出: 1</span><br><span class="line">解释: 5! = 120, 尾数中有 1 个零.</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这个题涉及到了数学数论方面的知识，具体的原理没弄明白。但是可以记录一种简单思路。</p><ol><li>首先，只有因数中有2 *5，最后相乘的结果末尾才有0。</li><li>其次，在1* 2* 3<em>…</em>n的阶乘中，2的个数肯定比5多。</li><li>因此，我们只需要找到1~n中有多少个因子5即可。</li><li>重点就在于求1~n中所有的数有多少个因子5。<ol><li>假设n=10，那么1~ 10中有10/5=2个因子5</li><li>假设n=25，那么1~25中有25/5=5，5/5=1；即有6个</li><li>假设n=37，那么1~37中有37/5=7，7/5=1，即有8个</li><li>假设n=125，那么1~125中有125/5=25，25/5=5，5/5=1，一共31个</li><li>……以此类推，N!中5的个数count=N/5+N/25+N/125……</li></ol></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public int trailingZeroes(int n) &#123;</span><br><span class="line">int count=0;</span><br><span class="line">while(n&gt;0)&#123;</span><br><span class="line">count+=n/5;</span><br><span class="line">n/=5;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数学数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求众数</title>
      <link href="/2019/10/29/%E6%B1%82%E4%BC%97%E6%95%B0/"/>
      <url>/2019/10/29/%E6%B1%82%E4%BC%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百六十九题</b><br>难度：<font color="green">简单</font><br>题目：给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊n/2⌋的元素(假设数组是非空的，并且给定的数组总是存在众数)。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [3,2,3]</span><br><span class="line">输出: 3</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [2,2,1,1,1,2,2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>有三种思路</p><ol><li>结合哈希表来实现，以元素的值为键，以元素出现的次数为值。</li><li>先将数组排序，由于众数的定义，排序过后nums[nums.length-1]即为众数</li><li><b>使用Boyer-Moore投票算法</b>。该算法是这样的：将众数设置为1，非众数设置为-1。因为众数的性质，可以得到将数组所有元素相加最后得到的值一定是大于0的。<ol><li>我们维护两个变量，count(计数器)和res(众数)</li><li>遍历数组，当count为0时，将当前元素设置为众数</li><li>如果出现众数，那么计数器+1，如果出现非众数，计数器-1</li><li>如果计数器值小于0，那么将计数器清零，将下一个元素重新设置为众数。</li><li>当遍历完数组后，最后的res一定是众数。</li></ol></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//使用Boyer-Moore投票算法来实现</span><br><span class="line">public int majorityElement(int[] nums) &#123;</span><br><span class="line">int res=0;</span><br><span class="line">int count=0;</span><br><span class="line">for(int num:nums)&#123;</span><br><span class="line">if(count==0)</span><br><span class="line">res=num;</span><br><span class="line">count+=(res==num?1:-1);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法比较巧妙，需要好好体会。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 数组 </tag>
            
            <tag> Boyer-Moore投票算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相交链表</title>
      <link href="/2019/10/27/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/10/27/%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百六十题</b><br>难度：<font color="green">简单</font><br>题目：编写一个程序，找到两个单链表相交的起始节点。</p><hr><a id="more"></a><p>如下面的两个链表：<br><img src="/2019/10/27/相交链表/1.png" alt><br>在节点 c1 开始相交。</p><p>示例 1：<br><img src="/2019/10/27/相交链表/2.png" alt><br>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p><p>示例 2：<br><img src="/2019/10/27/相交链表/3.png" alt><br>输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br>输出：Reference of the node with value = 2<br>输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</p><p>示例 3：<br><img src="/2019/10/27/相交链表/4.png" alt><br>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br>输出：null<br>输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。<br>解释：这两个链表不相交，因此返回 null。</p><p><b>注意：</b><br>如果两个链表没有交点，返回 null.<br>在返回结果后，两个链表仍须保持原有的结构。<br>可假定整个链表结构中没有循环。<br>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</p><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>看到题第一时间，想到了哈希表来实现，利用哈希表存储一个链表的所有节点，然后遍历另一个链表，看是否有节点在哈希表中即可，但是空间复杂度较高，为O(m+n)。<br>其实有一种更为简单巧妙地方法</p><ol><li>设置两个指针pA和pB分别遍历A和B两链表，</li><li>如果pA遍历完了A链表，那就将pA指向B链表的头部继续遍历</li><li>同样的，pB遍历完B链表后，指向A链表的头部继续遍历</li><li>最后当pA和pB相等时，如果pA和pB为空，那么说明两链表不相交；反之，两链表相交。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">if(headA==null||headB==null)</span><br><span class="line">return null;</span><br><span class="line">ListNode pA=headA;</span><br><span class="line">ListNode pB=headB;</span><br><span class="line">while(pA!=pB)&#123;</span><br><span class="line">pA=(pA==null?headB:pA.next);</span><br><span class="line">pB=(pB==null?headA:pB.next);</span><br><span class="line">&#125;</span><br><span class="line">return pA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不得不说，这个方法很是巧妙。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Java I/O系统</title>
      <link href="/2019/10/27/%E6%B5%85%E8%B0%88Java-I-O%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/10/27/%E6%B5%85%E8%B0%88Java-I-O%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>Java的I/O系统涉及了大量的类，本文只是简单的了解其中一些类的用法和分类，不涉及深层次的分析。</p><hr><a id="more"></a><h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><p>Java的I/O库系统也使用流这个概念，它代表任何有能力产出数据源对象或是有能力接收数据的接收端对象。“流”屏蔽了实际I/O设备中处理数据的细节。<br>Java类库中的I/O类分为输入和输出两部分，通过JDK可以查阅到，任何InputStream或Reader派生的子类都有read()方法，用于读取单个字节或者字节数组。同样的任何OutputStream或Writer派生的子类都有Write()方法，用于写单个字节或字节数组。</p><h2 id="InputStream类型"><a href="#InputStream类型" class="headerlink" title="InputStream类型"></a><font size="5">InputStream类型</font></h2><p>InputStream的作用是用来表示那些从不同数据源产生输入的类，这些数据源包括：</p><ul><li>字节数组</li><li>文件</li><li>“管道”，工作方式与实际管道类似，即从一端输入，从另一端输出</li><li>一个由其他流组成的序列，以便我们可以将它们收集合并到一个流内</li><li>其他数据源，如网络等</li></ul><p>每一种数据源都有相应的InputStream子类。另外FilterInputStreamu也属于一种InputStream，为“装饰器”类提供基类。</p><h3 id="ByteArrayInputStream"><a href="#ByteArrayInputStream" class="headerlink" title="ByteArrayInputStream"></a><font size="5">ByteArrayInputStream</font></h3><ul><li><b>构造方法</b><br>传递一个字节数组作为其缓冲区<br>ByteArrayInputStream(byte[] buf)<br>ByteArrayInputStream(byte[] buf, int offset, int length) </li><li><b>作用</b><br>将其缓冲区(构造参数的字节数组)作为数据源，从中读取数据进输入流。</li><li><b>常用方法</b><ul><li>int available()<br>在没有阻塞的情况下所能读取的字节数。对于文件来说，就是整个文件</li><li>void mark(int readAheadLimit)<br>设置流中的当前标记位置。 </li><li>void reset()<br>将缓冲区的位置重置为标记位置。和mark()搭配使用。</li><li>boolean markSupported()<br>测试此 InputStream 是否支持 mark/reset。 </li><li>long skip(long n)<br>从此输入流中跳过 n 个输入字节。 </li></ul></li></ul><p><b>测试代码</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">byte[] res = &quot;Hello ByteArrayInputStream&quot;.getBytes();</span><br><span class="line">//使用字节数组作为缓冲区</span><br><span class="line">ByteArrayInputStream bin = new ByteArrayInputStream(res);</span><br><span class="line">int count=0;</span><br><span class="line">//利用available()方法判断是否到数据源末尾</span><br><span class="line">while (bin.available() != 0) &#123;</span><br><span class="line">char ch = (char) bin.read();</span><br><span class="line">count++;</span><br><span class="line">//在空格字符后面做标记</span><br><span class="line">if(ch==&apos; &apos;)</span><br><span class="line">bin.mark(count+1);</span><br><span class="line">System.out.print(ch);</span><br><span class="line">//当第一次读到数据源末尾时将缓冲区位置重置到标记位置</span><br><span class="line">if (bin.available() == 0&amp;&amp;count&lt;res.length+1) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">bin.reset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===========================”</span><br><span class="line">Output：</span><br><span class="line">Hello ByteArrayInputStream</span><br><span class="line">ByteArrayInputStream</span><br></pre></td></tr></table></figure><h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a><font size="5">FileInputStream</font></h3><p>将文件作为其数据源，通过构造方法绑定一个文件。<br>方法和ByteArrayInputStream类似，比较常用也比较简单</p><h3 id="PipedInputStream"><a href="#PipedInputStream" class="headerlink" title="PipedInputStream"></a><font size="5">PipedInputStream</font></h3><p>产生用于写入相关PipedOutputStream的数据，实现管道化概念</p><ul><li><b>构造方法</b><ul><li>PipedInputStream()<br>创建尚未连接的 PipedInputStream。 </li><li>PipedInputStream(PipedOutputStream src)<br>创建 PipedInputStream，以使其连接到传送输出流 src。 </li></ul></li><li><b>作用</b><br>多用于多线程环境。数据由某个线程从 PipedInputStream 对象读取，并由其他线程将其写入到相应的 PipedOutputStream。不建议对这两个对象尝试使用单个线程，因为这样可能会死锁该线程。传送输入流包含一个缓冲区，可在缓冲区限定的范围内将读操作和写操作分离开。 </li><li><b>常用方法</b><ul><li>void connect(PipedOutputStream src)<br>使此传送输入流连接到传送输出流 src。如果使用无参构造方法创建了一个尚未连接的流，那么要先调用该方法和一个输出流连接</li><li>int available()<br>返回可以不受阻塞地从此输入流中读取的字节数量。 </li></ul></li></ul><p><b>测试代码</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">//创建一个接收线程</span><br><span class="line">public class Receiver implements Runnable &#123;</span><br><span class="line">    public PipedInputStream in = new PipedInputStream();</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">将管道中的数据读取出来</span><br><span class="line">            System.out.println(&quot;开始使用管道流&quot;);</span><br><span class="line">            System.out.println(new String(in.readAllBytes()));</span><br><span class="line">            System.out.println(&quot;数据接收完毕&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建一个发送线程</span><br><span class="line">public class Sender implements Runnable &#123;</span><br><span class="line">    public PipedOutputStream out = new PipedOutputStream();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        String msg = &quot;Hello Receiver&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">//将数据写入到输出流中</span><br><span class="line">            out.write(msg.getBytes());</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//主线程</span><br><span class="line">public class Piped &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, InterruptedException &#123;</span><br><span class="line">        Sender send=new Sender();</span><br><span class="line">        Receiver rece = new Receiver();</span><br><span class="line">        //连接管道</span><br><span class="line">        send.out.connect(rece.in);</span><br><span class="line">        //rece.in.connect(send);    两种方式效果都一样</span><br><span class="line">        //先启动发送线程</span><br><span class="line">        new Thread(send).start();</span><br><span class="line">        Thread.sleep(100);</span><br><span class="line">        new Thread(rece).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=====================”</span><br><span class="line">Output：</span><br><span class="line">开始使用管道流</span><br><span class="line">Hello Receiver</span><br><span class="line">数据接收完毕</span><br></pre></td></tr></table></figure><p>在本例中，是由一个线程使用管道输出流将数据写入到流中，另一个线程使用管道输入流将数据从流中读取到内存。</p><h3 id="SequenceInputStream"><a href="#SequenceInputStream" class="headerlink" title="SequenceInputStream"></a><font size="5">SequenceInputStream</font></h3><p>序列化流，将两个或多个InputStream对象传换成单一InputStream</p><ul><li><b>构造方法</b><br>SequenceInputStream(Enumeration&lt;? extends InputStream&gt; e)<br>将多个输入流转换为单一输入流<br>SequenceInputStream(InputStream s1, InputStream s2)<br>将两个输入流转换为单一输入流</li><li><b>作用</b><br>表示其他输入流的逻辑串联。它从输入流的有序集合开始，并从第一个输入流开始读取，直到到达文件末尾，接着从第二个输入流读取，依次类推，直到到达包含的最后一个输入流的文件末尾为止。</li><li><b>常用方法</b><ul><li>int available()<br>返回当前流中可用的字节数。 </li></ul></li></ul><p><b>测试代码</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayInputStream bin1 = new ByteArrayInputStream(&quot;hello&quot;.getBytes());</span><br><span class="line">ByteArrayInputStream bin2 = new ByteArrayInputStream(&quot;SequenceInputStream&quot;.getBytes());</span><br><span class="line">//创建序列化流，将两个输入流转换成单一输入流</span><br><span class="line">SequenceInputStream in = new SequenceInputStream(bin1, bin2);</span><br><span class="line">int ch=0;</span><br><span class="line">//不能使用available()方法，否则只能读取第一个流的数据</span><br><span class="line">while ((ch = in.read()) != -1) &#123;</span><br><span class="line">System.out.print((char)ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=======================”</span><br><span class="line">Output：</span><br><span class="line">helloSequenceInputStream</span><br></pre></td></tr></table></figure><h2 id="OutputStream类型"><a href="#OutputStream类型" class="headerlink" title="OutputStream类型"></a><font size="5">OutputStream类型</font></h2><p>和InputStream类型对应的，也有几种输出流类型</p><h3 id="ByteArrayOutputStream"><a href="#ByteArrayOutputStream" class="headerlink" title="ByteArrayOutputStream"></a><font size="5">ByteArrayOutputStream</font></h3><ul><li><b>构造方法</b><br>ByteArrayOutputStream()<br>创建一个新的字节数组输出流。<br>ByteArrayOutputStream(int size)<br>创建一个新的字节数组输出流，它具有指定大小的缓冲区容量（以字节为单位）。 </li><li><b>作用</b><br>将数据写入到内部缓冲区中</li><li><b>常用方法</b><ul><li>String toString(String enc)<br>将缓冲区的内容转换为字符串，根据指定的字符编码将字节转换成字符 </li><li>byte[] toByteArray()<br>创建一个新分配的字节数组。 </li><li>String toString()<br>将缓冲区的内容转换为字符串，根据平台的默认字符编码将字节转换成字符。 </li></ul></li></ul><p><b>示例代码</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ByteArrayOutputStream bou = new ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">int read;</span><br><span class="line">//从将控制台输入的数据写入到缓冲区中</span><br><span class="line">while ((read=System.in.read())!=10)&#123;</span><br><span class="line">bou.write(read);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将缓冲区数据转换为字符串输出</span><br><span class="line">System.out.println(bou.toString());</span><br><span class="line"></span><br><span class="line">“=================”</span><br><span class="line">Input：</span><br><span class="line">qwertyu</span><br><span class="line"></span><br><span class="line">Output：</span><br><span class="line">qwertyu</span><br></pre></td></tr></table></figure><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a><font size="5">FileOutputStream</font></h3><p>比较常用，和FileInputStream对应使用。</p><h3 id="PipedOutputStream"><a href="#PipedOutputStream" class="headerlink" title="PipedOutputStream"></a><font size="5">PipedOutputStream</font></h3><p>和管道输入流搭配使用，示例代码见前面PipedInputStream流</p><h1 id="添加属性和有用的接口"><a href="#添加属性和有用的接口" class="headerlink" title="添加属性和有用的接口"></a>添加属性和有用的接口</h1><p>Jaav的I/O库需要多种不同功能的组合，这正是装饰器模式的理由所在。FilterInputStream和FilterOutputStream用于装饰InputStream和OutputStream字节流。它们分别继承自基类InputStream和OutputStream。</p><h2 id="通过FilterInputStream从InputStream读取数据"><a href="#通过FilterInputStream从InputStream读取数据" class="headerlink" title="通过FilterInputStream从InputStream读取数据"></a><font size="5">通过FilterInputStream从InputStream读取数据</font></h2><p>FilterInputStream有不同的子类，能够提供不同的功能</p><h3 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a><font size="5">DataInputStream</font></h3><ul><li><b>构造方法</b><br>传递一个InputStream实现类对象</li><li><b>作用</b><br>和DataOutputStream搭配使用，允许应用程序以与机器无关方式从基础输入流中读取基本Java数据类型和String类型。与机器无关的方式也就是说在不同的机器上使用该流传递数据都是正确的。</li><li><b>常用方法</b><ul><li><b>readxxx()</b><br>readByte、readShort…一系列的read方法以相应的方式从流中读取数据。读取的方法要和写入的方法对应(如果使用writeBoolean()写入，那么就要用readBoolean()读取)</li><li><b>readUTF</b><br>读取字符串数据</li></ul></li></ul><p><font color="blue">当使用readByte()读取数据时，每一个字节都是有效的，不能使用返回值是否为-1来判断是否读取到文件末尾，可以使用处理异常的方法或者是available()方法</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DataInputStream din = new DataInputStream(new ByteArrayInputStream(</span><br><span class="line">//这是自己写的一个类，read方法返回一个字符串，通过getBytes()得到byte数据传递给ByteArrayInputStream对象</span><br><span class="line">BufferedInputFile.read(&quot;.\\src\\eighteenth\\formattedmemoryinput\\FormattedMemoryInput.java&quot;).getBytes()));</span><br><span class="line">//当使用readByte()方法一次一个字节的读取字符，那么任何字节的值都是合法效果</span><br><span class="line">//此时方法的返回值不能用来检测输入是否结束。这是我们有两种方法</span><br><span class="line">//这是第一种，使用捕获异常的方式来进行流控制(不是很推荐)</span><br><span class="line">//        try &#123;</span><br><span class="line">//            while (true) &#123;</span><br><span class="line">//                System.out.println((char) din.readByte());</span><br><span class="line">//            &#125;</span><br><span class="line">//        &#125; catch (EOFException e) &#123;</span><br><span class="line">//            System.out.println(&quot;End of Stream&quot;);</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line">//第二种方法，使用available()方法，该方法的字面意思就是</span><br><span class="line">//“在没有阻塞情况下所能读取的字节数</span><br><span class="line">while (din.available() != 0) &#123;</span><br><span class="line">System.out.println((char) din.readByte());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedInputStream"><a href="#BufferedInputStream" class="headerlink" title="BufferedInputStream"></a><font size="5">BufferedInputStream</font></h3><ul><li><b>构造方法</b><br>传递一个InputStream子类对象。</li><li><b>作用</b><br>对字节输入流进行缓冲，防止每次读写时都得进行实际操作，能够很好的加快读写速度。</li><li><b>常用方法</b><br>基本上和InputStream提供的方法一样</li></ul><h2 id="通过FilterOutputStream从OutputStream读取数据"><a href="#通过FilterOutputStream从OutputStream读取数据" class="headerlink" title="通过FilterOutputStream从OutputStream读取数据"></a><font size="5">通过FilterOutputStream从OutputStream读取数据</font></h2><p>和FilterInputStream对应的，FilterOutputStream也有一些子类，用于提供不同的功能</p><h3 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a><font size="5">DataOutputStream</font></h3><ul><li><b>构造方法</b><br>传递一个OutputStream实现类对象</li><li><b>作用</b><br>和DataInputStream一起使用，将各种基本数据类型以及String类型格式化输出到流中，这样一来，任何机器上的任何DataInputStream都能够读取它们。</li><li><b>常用方法</b><ul><li><b>writexxx()</b><br>以不同的方式将数据格式化写入到流中，当使用DataInputStream读取这些数据时，要使用和写入对应的读取方法。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//创建DataOutputStream对象，传递缓冲字节流</span><br><span class="line">DataOutputStream out = new DataOutputStream(</span><br><span class="line">new BufferedOutputStream(</span><br><span class="line">new FileOutputStream(&quot;.\\src\\eighteenth\\storingandrecoveringdata\\Data.txt&quot;)));</span><br><span class="line">out.writeDouble(3.1415926535);</span><br><span class="line">out.writeUTF(&quot;That was Pi&quot;);</span><br><span class="line">out.writeDouble(1.41413);</span><br><span class="line">out.writeUTF(&quot;Square root of 2&quot;);</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">//创建DataInputStream对象，传递缓冲字节流</span><br><span class="line">DataInputStream in = new DataInputStream(</span><br><span class="line">new BufferedInputStream(</span><br><span class="line">new FileInputStream(&quot;.\\src\\eighteenth\\storingandrecoveringdata\\Data.txt&quot;)));</span><br><span class="line"></span><br><span class="line">System.out.println(in.readDouble());</span><br><span class="line">System.out.println(in.readUTF());</span><br><span class="line">System.out.println(in.readDouble());</span><br><span class="line">System.out.println(in.readUTF());</span><br><span class="line"></span><br><span class="line">“===============”</span><br><span class="line">Output：</span><br><span class="line">3.1415926535</span><br><span class="line">That was Pi</span><br><span class="line">1.41413</span><br><span class="line">Square root of 2</span><br></pre></td></tr></table></figure><h3 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a><font size="5">PrintStream</font></h3><ul><li><b>构造方法</b><br>传递OutputStream子类对象或者直接传递文件对象或文件名</li><li><b>作用</b><br>用于产生格式化输出，PrintStream会捕获所有的IOException(因此必须使用checkError()自行测试错误状态，如果出现错误返回true)，PrintStream不能以平台无关的方式处理换行动作(PrintWriter可以)</li><li><b>常用方法</b><ul><li><b>println()</b><br>将数据输出到流中并换行</li><li><b>append()</b><br>向流中追加数据并返回该流</li></ul></li></ul><p>更多方法见API手册</p><h3 id="BufferedOutputStream"><a href="#BufferedOutputStream" class="headerlink" title="BufferedOutputStream"></a><font size="5">BufferedOutputStream</font></h3><ul><li><b>构造方法</b><br>传递一个OutputStream对象</li><li><b>作用</b><br>对OutputStream进行了修改，对数据流使用了缓冲技术，因此每次向流写入时，不必每次都进行实际的物理写动作，因此它的速度更快。一般在进行输出时，使用该流更多一些。</li></ul><h1 id="Reader和Writer"><a href="#Reader和Writer" class="headerlink" title="Reader和Writer"></a>Reader和Writer</h1><p>设计Reader和Writer继承层次结构主要是为了国际化，In/OutputStream只能处理8位字节流，并且不能很好的处理16位的Unicode字符。因此设计了Reader和Writer字符流<br>与InputStream以及OutputStream对应的，Reader和Writer也有相应的子类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&quot;========================================&quot;</span><br><span class="line">基类</span><br><span class="line">InputStreamReader</span><br><span class="line">OutputStreamWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">文件流</span><br><span class="line">FileInputStreamFileReader</span><br><span class="line">FileOutputStreamFileWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">数组流</span><br><span class="line">ByteArrayInputStreamCharArrayReader</span><br><span class="line">ByteArrayOutputStreamCharArrayWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">管道流</span><br><span class="line">PipedInputStreamPipedReader</span><br><span class="line">PipedOutputStreamPipedWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">转换流：字节流通向字符流的桥梁</span><br><span class="line">InputStreamReader</span><br><span class="line">OutputStreamWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">字符串流(字节流的已经废弃)</span><br><span class="line">StringReader</span><br><span class="line">StringWriter</span><br></pre></td></tr></table></figure><h1 id="更改流的行为"><a href="#更改流的行为" class="headerlink" title="更改流的行为"></a>更改流的行为</h1><p>对于InputStream和OutputStream来说，我们会使用FilterInputStream和FilterOutputStream装饰器的子类来对流添加一些功能。对于Reader和Writer，也会使用一些装饰器来改变流的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;========================================&quot;</span><br><span class="line">过滤器</span><br><span class="line">FilterInputStreamFilterReader</span><br><span class="line">FilterOutputStreamFilterWriter(抽象类，无子类)</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">缓冲流直接继承自Reader和Writer</span><br><span class="line">BufferedInputStreamBufferedReader</span><br><span class="line">BufferedOutputStreamBufferedWriter</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">打印流直接继承自Reader和Writer</span><br><span class="line">PrintStreamPrintWriter(构造参数技能接收Writer对象也能接收OutputStream对象)</span><br><span class="line"></span><br><span class="line">&quot;========================================&quot;</span><br><span class="line">数据流</span><br><span class="line">DataInputStreamDataInputStream(当需要使用readLine()方法时应该使用BufferedReader)</span><br></pre></td></tr></table></figure><p>可以看出字符流装饰器的继承体系和字节流的有所不同(具体参考API类库)<br><font color="blue">有一点要注意：当我们需要使用readLine()方法时，一定不能使用DataInputStream，而应该使用BufferedReader。除了这一点，DataInputStream仍是首选。</font></p><h1 id="RandomAccessFle"><a href="#RandomAccessFle" class="headerlink" title="RandomAccessFle"></a>RandomAccessFle</h1><p>该流适用于由大小已知的记录组成的文件，我们可以使用seek()方法将记录从一处转移到另一处，然后读取和修改记录。<font color="blue">RandomAccessFile不是InputStream或者OutputStream继承层次体系结构中的一部分</font>。除了实现DataInput和DataOutput(DataInput/OutputStreamStream实现了这两个接口)之外，它和这两个继承层次结构没有任何关系。</p><ul><li><b>构造方法</b><br>RandomAccessFile(File file, String mode)<br>RandomAccessFile(String name, String mode)<br>传递文件对象或者文件路径名并指定模式(“r”随机读，”rw”既读由写)</li><li><b>作用</b><br>支持对随机存取文件的读取和写入</li><li><b>常用方法</b><ul><li><b>readxxx</b><br>以各种形式读取数据(类似于DataInputStream)</li><li><b>writexxx</b><br>以各种形式写入数据(类似于DataOutputStream)</li><li><b>read/writeUTF()</b><br>对字符串进行读写操作</li><li><b>seek()</b><br>将指针移到距离文件开头一定字节的偏移量，从此处开始读取数据<br>(更多方法参见API)</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 使用RandomAccessFile对象，该对象类似于组合了DataInputStream和DataOutputStream</span><br><span class="line"> * (因为它实现了DataOut和DataInput接口)</span><br><span class="line"> * 该对象的seek()方法能够移动到文件的某个字节处。</span><br><span class="line"> *</span><br><span class="line"> * 如下，因为double是8字节，因此使用seek方法，将指针移动到第5个double值并修改它</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class UsingRandomAccessFile &#123;</span><br><span class="line">    static String file = &quot;.\\src\\eighteenth\\usingrandomaccessfile\\UsingRandomAccessFile.dat&quot;;</span><br><span class="line">    static void display() throws IOException &#123;</span><br><span class="line">        RandomAccessFile rf = new RandomAccessFile(file, &quot;r&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 7; i++) &#123;</span><br><span class="line">            System.out.println(&quot;Value &quot; + i + &quot;: &quot; + rf.readDouble());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(rf.readUTF());</span><br><span class="line">        rf.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        RandomAccessFile rf = new RandomAccessFile(file, &quot;rw&quot;);</span><br><span class="line">        for (int i = 0; i &lt; 7; i++) &#123;</span><br><span class="line">            rf.writeDouble(i * 1.414);</span><br><span class="line">        &#125;</span><br><span class="line">        rf.writeUTF(&quot;The end of the file&quot;);</span><br><span class="line">        rf.close();</span><br><span class="line">        display();</span><br><span class="line">        System.out.println(&quot;=================&quot;);</span><br><span class="line"></span><br><span class="line">        rf = new RandomAccessFile(file, &quot;rw&quot;);</span><br><span class="line">//调用seek()方法</span><br><span class="line">        rf.seek(5 * 8);</span><br><span class="line">        rf.writeDouble(47.0001);</span><br><span class="line">        rf.close();</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">”=====================“</span><br><span class="line">Output：</span><br><span class="line">Value 0: 0.0</span><br><span class="line">Value 1: 1.414</span><br><span class="line">Value 2: 2.828</span><br><span class="line">Value 3: 4.242</span><br><span class="line">Value 4: 5.656</span><br><span class="line">Value 5: 7.069999999999999</span><br><span class="line">Value 6: 8.484</span><br><span class="line">The end of the file</span><br><span class="line">=================</span><br><span class="line">Value 0: 0.0</span><br><span class="line">Value 1: 1.414</span><br><span class="line">Value 2: 2.828</span><br><span class="line">Value 3: 4.242</span><br><span class="line">Value 4: 5.656</span><br><span class="line">//使用seek()方法后指针移动到这里</span><br><span class="line">Value 5: 47.0001</span><br><span class="line">Value 6: 8.484</span><br><span class="line">The end of the file</span><br></pre></td></tr></table></figure><h1 id="I-O的典型使用方式"><a href="#I-O的典型使用方式" class="headerlink" title="I/O的典型使用方式"></a>I/O的典型使用方式</h1><p>我们可以通过不同的方式组合I/O流，但是我们可能用到的组合不多，介绍几种典型的组合</p><h2 id="缓冲输入文件"><a href="#缓冲输入文件" class="headerlink" title="缓冲输入文件"></a><font size="5">缓冲输入文件</font></h2><p>如果要打开一个文件用于<b>字符输入</b></p><ol><li>可以使用String或者File对象作为文件名的FileReader。</li><li>为了提高速度，我们可以使用缓冲，因此可以将FileReader对象作为参数传递给BufferedReader构造器，得到一个BufferedReader对象。</li><li>并且该对象提供一个readLine()方法，当读取到文件末尾时，返回null。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//该read()方法传递一个文件名，返回文件的字符串表示</span><br><span class="line">public static String read(String filename) throws IOException &#123;</span><br><span class="line">//创建缓冲字符输入流对象</span><br><span class="line">BufferedReader br = new BufferedReader(new FileReader(filename));</span><br><span class="line">String s;</span><br><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">//readLine()方法一次读取一行，但是不读取换行符，因此要自己加上&quot;\n&quot;</span><br><span class="line">while ((s = br.readLine()) != null) &#123;</span><br><span class="line">sb.append(s + &quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从内存输入"><a href="#从内存输入" class="headerlink" title="从内存输入"></a><font size="5">从内存输入</font></h2><p>下面的示例中，从上面说的read方法中读入文件返回的String结果被用来创建一个StringReader，然后调用read()每次读取一个字符，并将它发送到控制台。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从内存中读取数据，使用StringReader，构造参数传递一个字符串</span><br><span class="line"> * 使用StringReader对象的read方法从字符串中读取内容</span><br><span class="line"> */</span><br><span class="line">public class MemoryInput &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">//BufferedInputFile.read()即为上面介绍的从文件读取数据返回String对象</span><br><span class="line">//利用String构造StringReader对象，从String中读取数据</span><br><span class="line">        StringReader sr = new StringReader(BufferedInputFile.read(&quot;.\\src\\eighteenth\\memoryinput\\MemoryInput.java&quot;));</span><br><span class="line">        int c;</span><br><span class="line">        while ((c = sr.read()) != -1) &#123;</span><br><span class="line">            System.out.println((char) c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="格式化内存输入"><a href="#格式化内存输入" class="headerlink" title="格式化内存输入"></a><font size="5">格式化内存输入</font></h2><p>要读取格式化数据，可以使用DataInputStream，这是一个面向字节的I/O类。因此我们要使用InputStream对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 格式化内存输入</span><br><span class="line"> * 要读取格式化数据，可以使用DataInputStream，它是一个字节流。</span><br><span class="line"> * 构造方法传递一个InputStream子类对象</span><br><span class="line"> * 这里传递的是ByteArrayInputStream对象</span><br><span class="line"> * 构造BytrArrayInputStream对象时传递一个字节数组，</span><br><span class="line"> * 该对象从字节数组中读取数据</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class FormattedMemoryInput &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">//同样的，BufferedInputFile.read()方法返回一个字符串</span><br><span class="line">        DataInputStream din = new DataInputStream(new ByteArrayInputStream(</span><br><span class="line">                BufferedInputFile.read(&quot;.\\src\\eighteenth\\formattedmemoryinput\\FormattedMemoryInput.java&quot;).getBytes()));</span><br><span class="line">//前面说过，DataInputStream的readByte()方法读取的每一个字节都是有效的</span><br><span class="line">//因此无法根据返回值来判断是否到达文件末尾，应该使用available()方法</span><br><span class="line">        while (din.available() != 0) &#123;</span><br><span class="line">            System.out.println((char) din.readByte());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本的文件输出"><a href="#基本的文件输出" class="headerlink" title="基本的文件输出"></a><font size="5">基本的文件输出</font></h2><p>FileWriter对象可以向文件写入数据。</p><ol><li>创建一个与指定文件绑定的FileWriter对象</li><li>为了将快速度，我们一般使用缓存，因此将该对象传递给BufferedWriter构造器，创建一个缓冲字符流对象</li><li>有时候为了提供格式化机制，还可以包装成PrintWriter。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static String filename = &quot;.\\src\\eighteenth\\basefileoutput\\BasicFileOutput.out&quot;;</span><br><span class="line">//创建缓冲字符流，传递一个Reader流对象，这里传递的是StringReader对象</span><br><span class="line">//创建StringReader对象时构造参数传递一个String，流从String中读取数据</span><br><span class="line">BufferedReader bin = new BufferedReader(new StringReader(</span><br><span class="line">BufferedInputFile.read(&quot;.\\src\\eighteenth\\basefileoutput\\BasicFileOutput.java&quot;)));</span><br><span class="line"></span><br><span class="line">//创建FilterWriter流对象，传递一个Writer流对象，向文件中写入数据</span><br><span class="line">PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(filename)));</span><br><span class="line">int linecount = 1;</span><br><span class="line">String s;</span><br><span class="line">//使用该方法像文件中写入数据时，每写入一行数据会自动写入一个换行符</span><br><span class="line">while ((s = bin.readLine()) != null) &#123;</span><br><span class="line">pw.println(linecount++ + &quot;: &quot; + s);</span><br><span class="line">&#125;</span><br><span class="line">pw.close();</span><br><span class="line">bin.close();</span><br></pre></td></tr></table></figure><h2 id="文件输出快捷方式"><a href="#文件输出快捷方式" class="headerlink" title="文件输出快捷方式"></a><font size="5">文件输出快捷方式</font></h2><p>在前面的示例中，为了使用带缓冲的PrintWriter，需要创建三各类来进行装饰，还有一种简单方法，直接给PrintWriter传递文件名或File对象，PrintWriter利用该构造器自己实现缓冲。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader bin = new BufferedReader(</span><br><span class="line">new StringReader(BufferedInputFile.read(srcfilename))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//直接传递文件名，船舰带缓存的打印流对象</span><br><span class="line">PrintWriter pou = new PrintWriter(desfilename);</span><br><span class="line">int linecount = 1;</span><br><span class="line">String res;</span><br><span class="line">while ((res = bin.readLine()) != null) &#123;</span><br><span class="line">pou.println(linecount++ + &quot;: &quot; + res);</span><br><span class="line">&#125;</span><br><span class="line">//使用完后关闭流</span><br><span class="line">pou.close();</span><br><span class="line">bin.close();</span><br><span class="line">System.out.println(BufferedInputFile.read(desfilename));</span><br></pre></td></tr></table></figure><h2 id="存储和恢复数据"><a href="#存储和恢复数据" class="headerlink" title="存储和恢复数据"></a><font size="5">存储和恢复数据</font></h2><p>PrintWriter可以对数据进行格式化，以便我们阅读。但是为了输出可供另一个流恢复的数据，我们需要使用DataOutputStream写入数据，并用DataInputStream恢复数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//创建DataOutputStream对象，传递缓冲字节流</span><br><span class="line">DataOutputStream out = new DataOutputStream(</span><br><span class="line">new BufferedOutputStream(</span><br><span class="line">new FileOutputStream(&quot;.\\src\\eighteenth\\storingandrecoveringdata\\Data.txt&quot;)));</span><br><span class="line">out.writeDouble(3.1415926535);</span><br><span class="line">out.writeUTF(&quot;That was Pi&quot;);</span><br><span class="line">out.writeDouble(1.41413);</span><br><span class="line">out.writeUTF(&quot;Square root of 2&quot;);</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">//创建DataInputStream对象，传递缓冲字节流</span><br><span class="line">DataInputStream in = new DataInputStream(</span><br><span class="line">new BufferedInputStream(</span><br><span class="line">new FileInputStream(&quot;.\\src\\eighteenth\\storingandrecoveringdata\\Data.txt&quot;)));</span><br><span class="line"></span><br><span class="line">System.out.println(in.readDouble());</span><br><span class="line">System.out.println(in.readUTF());</span><br><span class="line">System.out.println(in.readDouble());</span><br><span class="line">System.out.println(in.readUTF());</span><br></pre></td></tr></table></figure><p>使用这一对流，在一台机器上写入，无论在哪一台机器上读取写入的结果，都是准确的，因为它们以和机器无关的方式读写数据。</p><h1 id="标准I-O"><a href="#标准I-O" class="headerlink" title="标准I/O"></a>标准I/O</h1><p>按照标准I/O模型，Java提供了Syatem.in、System.out、System.err。</p><ol><li>System.out已经被事先包装成了PrintStream对象，可以进行格式化输出，将数据打印到控制台。</li><li>Systeam.err也是PrintStream对象</li><li>Syatem.in是一个未被包装过的未经加工的InputStream对象。</li></ol><p>这意味着我们可以直接使用前两个输出流，但是在使用System.in时必须对其进行包装。</p><h2 id="从标准输入中读取"><a href="#从标准输入中读取" class="headerlink" title="从标准输入中读取"></a><font size="5">从标准输入中读取</font></h2><p>一般我们使用readLine()进行一行一行的读取，因此，我们将System.in包装成BufferedReader。由字节流转换为字符流，我们需要使用InputStreamReader。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//利用System.in创建字符缓冲输入流对象</span><br><span class="line">BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">String s;</span><br><span class="line">//读取控制台输入的字符，并通过System.out回显到控制台中</span><br><span class="line">while ((s = stdin.readLine()) != null &amp;&amp; s.length() != 0) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=======================”</span><br><span class="line">Output：</span><br><span class="line">qwert</span><br><span class="line">qwert</span><br></pre></td></tr></table></figure><h2 id="将System-out转换为PrintWriter"><a href="#将System-out转换为PrintWriter" class="headerlink" title="将System.out转换为PrintWriter"></a><font size="5">将System.out转换为PrintWriter</font></h2><p>System.out是一个PrintStream，而PrintStream是一个OutputStream。PrintWriter有一个接收OutputStream对象的构造器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用两个参数的构造器，并将第二个设置为true，一边开启自动刷新功能，否则会看不到输出</span><br><span class="line">PrintWriter pw = new PrintWriter(System.out, true);</span><br><span class="line">pw.println(&quot;hello,world&quot;);</span><br><span class="line">//如果采用一个参数的构造器，那么在之后要关闭流，才能将pw中的数据刷新到控制台</span><br><span class="line">//pw.close()</span><br></pre></td></tr></table></figure><h2 id="标准I-O重定向"><a href="#标准I-O重定向" class="headerlink" title="标准I/O重定向"></a><font size="5">标准I/O重定向</font></h2><p>Java的System类提供了一些简单地静态方法，以支持我们对标准输入的、输出、错误I/O流进行重定向</p><ol><li>setIn(InputStream)</li><li>setOut(PrintStream)</li><li>setErr(PrintStream)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//保存控制台标准输出流的引用</span><br><span class="line">PrintStream console = System.out;</span><br><span class="line"></span><br><span class="line">//创建缓冲字节输入流</span><br><span class="line">BufferedInputStream in = new BufferedInputStream(new FileInputStream(&quot;.\\src\\eighteenth\\redirecting\\Redirceting.java&quot;));</span><br><span class="line">//创建格式化流</span><br><span class="line">PrintStream out = new PrintStream(</span><br><span class="line">new BufferedOutputStream(</span><br><span class="line">new FileOutputStream(&quot;.\\src\\eighteenth\\redirecting\\test.out&quot;)));</span><br><span class="line"></span><br><span class="line">//经标准输入流重定向到Redirceting.java</span><br><span class="line">//将标准输出流重定向到test.out</span><br><span class="line">// 将错误流也重定向到test.out</span><br><span class="line">System.setIn(in);</span><br><span class="line">System.setOut(out);</span><br><span class="line">System.setErr(out);</span><br><span class="line"></span><br><span class="line">//利用标准IO将一个文件的数据拷贝到另一个文件中</span><br><span class="line">BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">String s;</span><br><span class="line">while ((s = br.readLine()) != null) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">//关闭重定向的输出流</span><br><span class="line">out.close();</span><br><span class="line">//将标准输出流恢复到控制台</span><br><span class="line">System.setOut(console);</span><br></pre></td></tr></table></figure><p>I/O重定向操纵的是字节流，而不是字符流。</p><h1 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h1><p>见Java编程思想和API类库</p><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> I/O </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>买股票的最佳时机</title>
      <link href="/2019/10/26/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>/2019/10/26/%E4%B9%B0%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百二十一、二十二题</b><br>难度：<font color="green">简单</font></p><hr><a id="more"></a><h1 id="第一百二十一题"><a href="#第一百二十一题" class="headerlink" title="第一百二十一题"></a>第一百二十一题</h1><p>题目：给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。注意你不能在买入股票前卖出股票。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 5</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [7,6,4,3,1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><h2 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>这道题用到了动态规划的思想，维护两个变量</p><ol><li>当前元素前的最小元素值minprice</li><li>当前利润res</li></ol><p>当遍历到当前节点时，判断当前元素值和minprice的差值是否大于当前利润，如果大于，更新利润。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> public int maxProfit(int[] prices) &#123;</span><br><span class="line">     //首先考虑边界情况，当数组长度为0时</span><br><span class="line">     if(prices.length==0)&#123;</span><br><span class="line">         return 0;</span><br><span class="line">     &#125;</span><br><span class="line">     //假设初始最小值是prices[0]</span><br><span class="line">     int minprice=prices[0];</span><br><span class="line">     //初始利润为0</span><br><span class="line">     int res=0;</span><br><span class="line">     for(int i=1;i&lt;prices.length;i++)&#123;</span><br><span class="line">//如果当前元素值小于最小值，更新最小值</span><br><span class="line">         if(minprice&gt;prices[i])</span><br><span class="line">             minprice=prices[i];</span><br><span class="line">//更新利润</span><br><span class="line">         else if(res&lt;prices[i]-minprice)</span><br><span class="line">             res=prices[i]-minprice;</span><br><span class="line">     &#125;</span><br><span class="line">     return res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="第一百二十一题-1"><a href="#第一百二十一题-1" class="headerlink" title="第一百二十一题"></a>第一百二十一题</h1><p>题目：给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [7,1,5,3,6,4]</span><br><span class="line">输出: 7</span><br><span class="line">解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [1,2,3,4,5]</span><br><span class="line">输出: 4</span><br><span class="line">解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</span><br><span class="line">     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。</span><br><span class="line">     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</span><br></pre></td></tr></table></figure><h2 id="思想分析-1"><a href="#思想分析-1" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>这道题和前一道题不同，它可以多次买卖一只股票，要求所得利润的总和最大。这时候，我们应该想到使用贪心算法。<br>对于这道题，今天买，不管之后是否会赚的更多，只要明天能赚我就卖，这就是贪心。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public int maxProfit(int[] prices) &#123;</span><br><span class="line">int res = 0;</span><br><span class="line">//记录差值</span><br><span class="line">int Dvalue = 0;</span><br><span class="line">for(int i = 0; i &lt; prices.length - 1; i++)&#123;</span><br><span class="line">Dvalue = prices[i+1] - prices[i];</span><br><span class="line">if (Dvalue &gt; 0)&#123;</span><br><span class="line">res += Dvalue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨辉三角问题</title>
      <link href="/2019/10/26/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/26/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百一十八、一十九题</b><br>难度：<font color="green">简单</font></p><hr><a id="more"></a><p><img src="/2019/10/26/杨辉三角问题/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.gif" alt>如图所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 5</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="第一百一十八题"><a href="#第一百一十八题" class="headerlink" title="第一百一十八题"></a>第一百一十八题</h1><p>题目(第一百一十八)：给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p><h2 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>对于杨辉三角</p><ol><li>每一行的第一个元素和最后一个元素为1</li><li>剩下的每一个元素都是它上一行正对元素及其前一个元素之和，即有(i,j)=(i-1,j-1)+(i-1,j)。</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) &#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;&gt;(numRows);</span><br><span class="line"></span><br><span class="line">//先将数组里的空引用初始化</span><br><span class="line">for(int i=0;i&lt;numRows;i++)&#123;</span><br><span class="line">res.add(new ArrayList&lt;Integer&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i=0;i&lt;numRows;i++)&#123;</span><br><span class="line"></span><br><span class="line">for(int j=0;j&lt;=i;j++)&#123;</span><br><span class="line"></span><br><span class="line">if(j==0||j==i)</span><br><span class="line">res.get(i).add(1);</span><br><span class="line">//(i,j)=(i-1,j-1)+(i-1,j);</span><br><span class="line">else</span><br><span class="line">res.get(i).add(res.get(i-1).get(j-1)+res.get(i-1).get(j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第一百一十九题"><a href="#第一百一十九题" class="headerlink" title="第一百一十九题"></a>第一百一十九题</h1><p>题目：给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行(行数从0开始)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">输入: 3</span><br><span class="line">输出: [1,3,3,1]</span><br></pre></td></tr></table></figure><h2 id="思想分析-1"><a href="#思想分析-1" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>将每一行元素保存到集合中，求下一行元素时，利用集合中已有的元素求得当前行元素值，并存入集合中，覆盖上一行的元素。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Integer&gt; getRow(int rowIndex) &#123;</span><br><span class="line">List&lt;Integer&gt; cur = new ArrayList&lt;&gt;();</span><br><span class="line">cur.add(1);</span><br><span class="line">for (int i = 0; i &lt; rowIndex; i++) &#123;</span><br><span class="line">for (int j = i; j &gt; 0; j--) &#123;</span><br><span class="line">cur.set(j, cur.get(j - 1) + cur.get(j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cur.add(1);</span><br><span class="line">&#125;</span><br><span class="line">return cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 迭代 </tag>
            
            <tag> 杨辉三角 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路径总和</title>
      <link href="/2019/10/25/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/"/>
      <url>/2019/10/25/%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百一十二题</b><br>难度：<font color="green">简单</font><br>题目：给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例: </span><br><span class="line">给定如下二叉树，以及目标和 sum = 22，</span><br><span class="line"></span><br><span class="line">              5</span><br><span class="line">             / \</span><br><span class="line">            4   8</span><br><span class="line">           /   / \</span><br><span class="line">          11  13  4</span><br><span class="line">         /  \      \</span><br><span class="line">        7    2      1</span><br><span class="line">返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这道题思想比较简单，但是有两个点容易出错</p><ol><li>目标和是<font color="red">根节点到叶子节点的路径和</font>，一定是叶子节点。在递归的过程中如果到当前节点时路径和为sum，一定要判断当前节点是不是叶子节点</li><li>不能提前截断，如果遍历到当前节点时，路径和等于目标和，但是当前节点不是叶子节点，不要急着返回false，继续往下遍历。举个例子<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">对于这样一颗二叉树，目标和为-1</span><br><span class="line">      1</span><br><span class="line">             / \</span><br><span class="line">            -2  8</span><br><span class="line">           /   / \</span><br><span class="line">          1   13  4</span><br><span class="line">         / \       \</span><br><span class="line">        -1  2       1</span><br><span class="line"></span><br><span class="line">当遍历到-2节点时，当前路径和为1-2=-1=sum，但是很明显，-2节点不是叶子节点，因此不能直接返回true</span><br><span class="line">但是也不能为了节省时间，直接返回false，因为从上面可以看到，继续往下遍历时，最终的路径和为1-2+1-1=-1=sum，仍然等于sum，因此返回true</span><br></pre></td></tr></table></figure></li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public boolean hasPathSum(TreeNode root, int sum) &#123;</span><br><span class="line">if(root==null)</span><br><span class="line">return false;</span><br><span class="line">sum-=root.val;</span><br><span class="line">if(sum==0&amp;&amp;root.left==null&amp;&amp;root.right==null)</span><br><span class="line">return true;</span><br><span class="line">//这里一定不能为了节省时间直接返回false</span><br><span class="line">// if(sum==0)</span><br><span class="line">//     return false;</span><br><span class="line">return hasPathSum(root.left,sum)||hasPathSum(root.right,sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的最小深度</title>
      <link href="/2019/10/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
      <url>/2019/10/25/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百一十一题</b><br>难度：<font color="green">简单</font><br>题目：给定一个二叉树，找出其最小深度。最小深度是从根节点到最近叶子节点的最短路径上的节点数量。(叶子节点是指没有子节点的节点)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回它的最小深度  2.</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>前面做过了二叉树的最大深度题，这个会稍微难一点，对于当前节点，有三种情况</p><ol><li>当前节点为空<br>此时返回0</li><li>当前节点左右子树都不为空<br>此时说明当前节点是叶子节点，返回1</li><li><b>当前节点左子树或右子树有一个为空</b><br>此时，<font color="blue">当前节点的最小深度就是它不为空的子树的最小深度！！这点很重要</font></li><li>当前节点左右子树都不为空<br>当前节点的最小深度为它左右子树中较小的深度</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>有两种解法，一种是递归，一种类似于队列</p><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a><font size="5">递归解法</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public int minDepth(TreeNode root) &#123;</span><br><span class="line">//如果为空，返回0</span><br><span class="line">if(root == null) return 0;</span><br><span class="line">//1.左孩子和有孩子都为空的情况，说明到达了叶子节点，直接返回1即可</span><br><span class="line">if(root.left == null &amp;&amp; root.right == null) return 1;</span><br><span class="line"></span><br><span class="line">//2.如果左孩子和由孩子其中一个为空，那么需要返回比较大的那个孩子的深度        </span><br><span class="line">int m1 = minDepth(root.left);</span><br><span class="line">int m2 = minDepth(root.right);</span><br><span class="line"></span><br><span class="line">//这里其中一个节点为空，说明m1和m2有一个必然为0，所以可以返回m1 + m2 + 1;</span><br><span class="line">if(root.left == null || root.right == null) return m1 + m2 + 1;</span><br><span class="line"></span><br><span class="line">//3.最后一种情况，也就是左右孩子都不为空，返回最小深度+1即可</span><br><span class="line">return Math.min(m1,m2) + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归的程序比较容易理解，最后测试时间1ms，内存消耗不太理想，为37.7M</p><h2 id="队列解法"><a href="#队列解法" class="headerlink" title="队列解法"></a><font size="5">队列解法</font></h2><p>将树节点和它的深度封装成一个类，当遇到叶子节点时，直接返回深度即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//将树节点和它的深度封装成一个类</span><br><span class="line">class Node&#123;</span><br><span class="line">    TreeNode t;</span><br><span class="line">    int deepth;</span><br><span class="line">    Node(TreeNode t,int deepth)&#123;</span><br><span class="line">        this.t=t;</span><br><span class="line">        this.deepth=deepth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int minDepth(TreeNode root) &#123;</span><br><span class="line"> if(root == null) </span><br><span class="line"> return 0;</span><br><span class="line"> </span><br><span class="line">int deepth=1;</span><br><span class="line">//使用List集合模仿队列</span><br><span class="line">List&lt;Node&gt; list=new ArrayList();</span><br><span class="line">list.add(new Node(root,1));</span><br><span class="line"></span><br><span class="line">while(!list.isEmpty())&#123;</span><br><span class="line">Node DeepthNode=list.remove(0);</span><br><span class="line">TreeNode temp=DeepthNode.t;</span><br><span class="line">//如果当前节点为树节点，直接返回深度即可</span><br><span class="line">if(temp.left==null&amp;&amp;temp.right==null)&#123;</span><br><span class="line">return DeepthNode.deepth;</span><br><span class="line">&#125;</span><br><span class="line">//如果当前节点含有子节点，将子节点和当前节点深度+1封装后加入集合中。</span><br><span class="line">if(temp.left!=null)&#123;</span><br><span class="line">list.add(new Node(temp.left,DeepthNode.deepth+1));</span><br><span class="line">&#125;</span><br><span class="line">if(temp.right!=null)&#123;</span><br><span class="line">list.add(new Node(temp.right,DeepthNode.deepth+1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">throw new RuntimeException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法算是宽度优先算法，按照层次遍历的方式，遍历每个节点并记录节点的深度，直到找到叶子节点为止。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断平衡二叉树</title>
      <link href="/2019/10/24/%E5%88%A4%E6%96%AD%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2019/10/24/%E5%88%A4%E6%96%AD%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百一十题</b><br>难度：<font color="green">简单</font><br>题目：给定一个二叉树，判断它是否是高度平衡的二叉树。本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回 true 。</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">给定二叉树 [1,2,2,3,3,null,null,4,4]</span><br><span class="line"></span><br><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   2</span><br><span class="line">    / \</span><br><span class="line">   3   3</span><br><span class="line">  / \</span><br><span class="line"> 4   4</span><br><span class="line">返回 false 。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这个题，和前面求二叉树最大深度有些相似，求出节点的左右子树高度，判断相差是否超过1，如果超过1，将标记设置为false。否则计算当前节点的深度，继续递归。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class BalancedBinaryTree &#123;</span><br><span class="line">    boolean res = true;</span><br><span class="line"></span><br><span class="line">    public boolean isBalanced(TreeNode root) &#123;</span><br><span class="line"></span><br><span class="line">        helper(root);</span><br><span class="line">        return res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int helper(TreeNode root) &#123;</span><br><span class="line">        if (root == null) return 0;</span><br><span class="line">//左子树的高度</span><br><span class="line">        int left = helper(root.left) + 1;</span><br><span class="line">//右子树的高度</span><br><span class="line">        int right = helper(root.right) + 1;</span><br><span class="line">//在这里将res设置为false</span><br><span class="line">        if (Math.abs(right - left) &gt; 1) res = false;</span><br><span class="line">//当前节点的高度</span><br><span class="line">        return Math.max(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种实现方法较为巧妙，也贴一下吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean isBalanced(TreeNode root) &#123;</span><br><span class="line">return downToTop(root)!=-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int downToTop(TreeNode t)&#123;</span><br><span class="line">if(t==null)</span><br><span class="line">return 0;</span><br><span class="line">//求左子树的高度</span><br><span class="line">int left=downToTop(t.left);</span><br><span class="line">//如果高度为-1，直接截断返回-1</span><br><span class="line">if(left==-1)</span><br><span class="line">return -1;</span><br><span class="line">//求右子树的高度</span><br><span class="line">int right=downToTop(t.right);</span><br><span class="line">//如果高度为-1，直接截断返回-1</span><br><span class="line">if(right==-1)</span><br><span class="line">return -1;</span><br><span class="line">//这里很是巧妙，如果左右子树高度相差超过2，说明该树已经不平衡了</span><br><span class="line">//将当前节点高度设为-1，否则说明当前节点仍然是平衡的，那就将当前节点</span><br><span class="line">//高度设为正常高度。</span><br><span class="line">return Math.abs(left-right)&lt;2?Math.max(left,right)+1:-1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个解法仔细想了想感觉很巧妙，很让人佩服。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> AVL树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序数组转AVL树</title>
      <link href="/2019/10/23/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%ACAVL%E6%A0%91/"/>
      <url>/2019/10/23/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%ACAVL%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百零八题</b><br>难度：<font color="green">简单</font><br>题目：将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树，本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例:</span><br><span class="line">给定有序数组: [-10,-3,0,5,9],</span><br><span class="line">一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>一开始看到这个题的时候，第一时间想到的是前面实现的一个AVL树，发现太麻烦了，每次插入一个数据要对节点进行平衡，而平衡又分为4种不同的情况….我的天，当时搞不懂为什么一个简单难度的题目会这么难。就想到可能是自己哪里思路有问题，一看解析才发现自己还是太年轻，居然完全没有利用(或者是忽略)有序数组这个性质。<br><font color="blue">对于一个查找树，它的中序遍历就是有序的，更近一步，对于一个AVL树，它的根节点总是位于两边子树节点的中间。</font>这就很明显了吧，对就是结合二分来实现就会变得异常简单。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>在代码的开始部分，老规矩，总是要检查参数的边界条件，这是最起码的保证。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public TreeNode sortedArrayToBST(int[] nums) &#123;</span><br><span class="line">if(nums==null||nums.length==0)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">return toAVL(nums,0,nums.length-1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public TreeNode toAVL(int[] nums,int left,int right)&#123;</span><br><span class="line">if(left&gt;right)&#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">int mid=(left+right)&gt;&gt;1;</span><br><span class="line">//将中间元素插入到根节点中。</span><br><span class="line">TreeNode t=new TreeNode(nums[mid]);</span><br><span class="line">t.left=toAVL(nums,left,mid-1);</span><br><span class="line">t.right=toAVL(nums,mid+1,right);</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有序数组转AVL树的实现到这里就结束了，发现自己还是需要多练习，太年轻了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> AVL树 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树最大深度和层次遍历</title>
      <link href="/2019/10/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%E5%92%8C%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
      <url>/2019/10/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6%E5%92%8C%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百零四题/一百零七题</b><br>难度：<font color="green">简单</font><br>题目(一百零四)：给定一个二叉树，找出其最大深度，二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><hr><a id="more"></a><h1 id="二叉树最大深度"><a href="#二叉树最大深度" class="headerlink" title="二叉树最大深度"></a>二叉树最大深度</h1><h2 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>对于一个二叉树中任意一个节点，它的最大深度等于它子树的最大深度+1。并且空节点的深度为0。也就是说，通过递归实现时，递归出口就是当节点为空时。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int maxDepth(TreeNode root) &#123;</span><br><span class="line">return root==null?0:Math.max(maxDepth(root.left),maxDepth(root.right))+1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="二叉树层次遍历"><a href="#二叉树层次遍历" class="headerlink" title="二叉树层次遍历"></a>二叉树层次遍历</h1><p><b>题目(一百零七)：给定一个二叉树，返回其节点值自底向上的层次遍历。（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例如：</span><br><span class="line">给定二叉树 [3,9,20,null,null,15,7],</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line">返回其自底向上的层次遍历为：</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="思想分析-1"><a href="#思想分析-1" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>可以使用List&lt; List&lt; Integer&gt;&gt;来实现，将相同层次的节点放到一个List集合中即可。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;&gt;();</span><br><span class="line">int deepth=0;</span><br><span class="line">//得到的结果是自定向下的层次遍历</span><br><span class="line">levelOrderTree(root,res,deepth);</span><br><span class="line">//使用Collections工具类的reverse()方法</span><br><span class="line">//将List反转即得到自下而上的层次遍历</span><br><span class="line">Collections.reverse(res);</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void levelOrderTree(TreeNode t,List&lt;List&lt;Integer&gt;&gt; list,int deepth)&#123;</span><br><span class="line">if(t!=null)&#123;</span><br><span class="line">if(deepth&gt;=list.size())&#123;</span><br><span class="line">list.add(deepth,new LinkedList&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line">list.get(deepth).add(t.val);</span><br><span class="line">levelOrderTree(t.left,list,deepth+1);</span><br><span class="line">levelOrderTree(t.right,list,deepth+1);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相同的树和镜像树</title>
      <link href="/2019/10/23/%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%E5%92%8C%E9%95%9C%E5%83%8F%E6%A0%91/"/>
      <url>/2019/10/23/%E7%9B%B8%E5%90%8C%E7%9A%84%E6%A0%91%E5%92%8C%E9%95%9C%E5%83%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第一百题/一百零一题</b><br>难度：<font color="green">简单</font><br>题目(一百)：给定两个二叉树，编写一个函数来检验它们是否相同，如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><hr><a id="more"></a><h1 id="相同的树"><a href="#相同的树" class="headerlink" title="相同的树"></a>相同的树</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入:      1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br><span class="line"></span><br><span class="line">输出: true</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入:     1          1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br><span class="line"></span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>对于树的问题，尤其是二叉树，几乎都可以用递归进行解决(换个角度也是锻炼了我们的递归能力)。对于递归，很重要的一方面就是要找到递归出口，否则容易栈溢出。<br>本题中，对于两个树的节点，有以下几种情况</p><ol><li>都为空，说明当前分支遍历结束并且相等，返回true</li><li>只有一个为空，那说明两棵树必定不相等，返回false</li><li>都不为空但是值不相等，同上，返回false</li><li>都不为空且值相等，说明到当前为止两树相等，继续往下遍历比较。<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">if(p==null&amp;&amp;q==null)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else if(p==null||q==null)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else if(p.val!=q.val)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return isSameTree(p.right,q.right)&amp;&amp;isSameTree(p.left,q.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><hr><h1 id="镜像树"><a href="#镜像树" class="headerlink" title="镜像树"></a>镜像树</h1><p><b>题目(一百零一)：给定一个二叉树，检查它是否是镜像对称的</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</span><br><span class="line"></span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \ / \</span><br><span class="line">3  4 4  3</span><br><span class="line"></span><br><span class="line">但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</span><br><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line">   \   \</span><br><span class="line">   3    3</span><br></pre></td></tr></table></figure><h2 id="思想分析-1"><a href="#思想分析-1" class="headerlink" title="思想分析"></a><font size="5">思想分析</font></h2><p>可以使用递归和迭代两种方法，如果使用递归，那么和上面的思路一摸一样，只不过细节稍微有改动。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public boolean isSymmetric(TreeNode root) &#123;</span><br><span class="line">//边界条件</span><br><span class="line">if(root==null)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return Judge(root.left,root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public boolean Judge(TreeNode p,TreeNode q)&#123;</span><br><span class="line">if(p==null&amp;&amp;q==null)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else if(p==null||q==null)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else if(p.val!=q.val)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">return Judge(p.left,q.right)&amp;&amp;Judge(p.right,q.left);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于递归问题，尤其是树的递归，可以将通过个例来推导(例如将两层二叉树带入方法进行测试)，由于递归的性质，如果层数比较小的各种个例能够满足，那么递归应该没有问题。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 镜像树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬楼梯</title>
      <link href="/2019/10/23/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2019/10/23/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCoode第七十题</b><br>难度：<font color="green">简单</font><br>题目：假设你正在爬楼梯。需要 n (n为正整数)阶你才能到达楼顶。每次你可以爬1或2个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>对于这道题，理解了思想之后其实非常简单。假设现在你站在第x阶(1&lt;=x&lt;=n)台阶上，那么你用了多少种方法爬到这里呢？因为爬上第x阶台阶只有两种方法</p><ul><li>从第x-1阶台阶爬1个台阶上去</li><li>从第x-2个台阶爬2个台阶上去</li></ul><p>如果我们假设爬上x阶台阶用了f(x)种方法，那么f(x)=f(x-1)+f(x-2)。很明显了，这就是一个斐波那契数列。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public int climbStairs(int n) &#123;</span><br><span class="line">if(n==1)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">int f1=1;</span><br><span class="line">int f2=1;</span><br><span class="line">int sum=0;</span><br><span class="line">while(n--&gt;1)&#123;</span><br><span class="line">sum=f1+f2;</span><br><span class="line">f1=f2;</span><br><span class="line">f2=sum;</span><br><span class="line">&#125;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这种题目，理解了以后就会很简单，否则很有可能会将问题复杂化。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X的平方根</title>
      <link href="/2019/10/23/X%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2019/10/23/X%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第六十九题</b><br>难度：<font color="green">简单</font><br>题目：实现 int sqrt(int x) 函数，计算并返回 x 的平方根，其中 x 是非负整数。由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: 4</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: 8</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">说明: 8 的平方根是 2.82842..., </span><br><span class="line">     由于返回类型是整数，小数部分将被舍去。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>又是一道二分算法的题，对于递归实现的二分算法，总是容易陷入死循环最后导致栈溢出。今天做了这个题，有一点二分算法的心得。<br>二分算法，不管是左边二分还是右边二分，每一次二分后都要向递归出口逼近。根据题意，确定递归出口返回的值。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int mySqrt(int x) &#123;</span><br><span class="line">if(x==0||x==1)</span><br><span class="line">return x;</span><br><span class="line">return getRes(1,x,x);</span><br><span class="line">&#125;</span><br><span class="line">public int getRes(int left,int right,int n)&#123;</span><br><span class="line">if(left&gt;right)&#123;</span><br><span class="line">return left-1;</span><br><span class="line">&#125;</span><br><span class="line">int mid=(right+left)/2;</span><br><span class="line">//左递归</span><br><span class="line">if(mid&gt;n/mid)</span><br><span class="line">return getRes(left,mid-1,n);</span><br><span class="line">//右递归</span><br><span class="line">else</span><br><span class="line">return getRes(mid+1,right,n);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题不用递归也可以实现，但是为了熟悉，还是用了递归。主要的难点在于递归出口为什么是left&gt;right以及返回值为什么是left-1。<br>当递归过程中left==right时，只有三种情况。</p><ul><li>left* left==right*right==x<br>向右递归，递归后，left&gt;right。并且left=left+1。因此最后返回left-1</li><li>left* left==right*right&lt;x<br>向右递归，递归后，left&gt;right。并且left=left+1。因此最后返回left-1</li><li>left* left==right*right&gt;x<br>向左递归，递归后，left&gt;right。并且right=right-1。因此最后返回left-1<br>从两段向左向右递归的代码中可以发现，left最后的值一定是sqrt(x)+1。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报数</title>
      <link href="/2019/10/22/%E6%8A%A5%E6%95%B0/"/>
      <url>/2019/10/22/%E6%8A%A5%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三十八题</b><br>难度：<font color="green">简单</font><br>题目：报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line"></span><br><span class="line">1 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。</span><br><span class="line">11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。</span><br><span class="line">21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</span><br><span class="line">给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。</span><br><span class="line">注意：整数顺序将表示为一个字符串。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>题目说的很清楚，根据前一个字符串的读法的到下一个字符串，利用递归实现，但要注意递归的次数。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public String countAndSay(int n) &#123;</span><br><span class="line">//如果n为1，直接返回”1“</span><br><span class="line">if(n==1)&#123;</span><br><span class="line">return &quot;1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//将”1“作为初始串，进行递归</span><br><span class="line">//这里要传递n-1而不是n，因为”1“也算进去了</span><br><span class="line">return getSeq(&quot;1&quot;,n-1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getSeq(String s,int n)&#123;</span><br><span class="line">//递归出口</span><br><span class="line">if(n==0)&#123;</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">//用于拼接字符串</span><br><span class="line">StringBuilder sb=new StringBuilder();</span><br><span class="line">int i=0;</span><br><span class="line">//遍历当前字符串</span><br><span class="line">while(i&lt;s.length())&#123;</span><br><span class="line">//用于记录相同字符的个数</span><br><span class="line">int count=1;</span><br><span class="line">char ch=s.charAt(i++);</span><br><span class="line">while(i&lt;s.length()&amp;&amp;s.charAt(i)==ch)&#123;</span><br><span class="line">i++;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">//前一个字符串各个字符的个数+字符就是下一个字符串</span><br><span class="line">sb.append(count);</span><br><span class="line">sb.append(ch);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">return getSeq(sb.toString(),n-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索插入位置</title>
      <link href="/2019/10/22/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
      <url>/2019/10/22/%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第35题</b><br>难度：<font color="green">简单</font><br>题目：给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。(你可以假设数组中无重复元素)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">示例 3:</span><br><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br><span class="line"></span><br><span class="line">示例 4:</span><br><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>很明显，这是一道二分查找的题目，对于二分查找，思想比较简单，但是实现起来却并不是那么容易，要特别注意边界条件。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public int searchInsert(int[] nums, int target) &#123;</span><br><span class="line">return BinarySearch(nums,0,nums.length-1,target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int BinarySearch(int[] nums,int left,int right,int target)&#123;</span><br><span class="line">if(left&gt;right)&#123;</span><br><span class="line">return left;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">int mid=(right+left)/2;</span><br><span class="line">if(nums[mid]&lt;target)&#123;</span><br><span class="line">return BinarySearch(nums,mid+1,right,target);</span><br><span class="line">&#125;</span><br><span class="line">else if(nums[mid]&gt;target)&#123;</span><br><span class="line">return BinarySearch(nums,left,mid-1,target);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">return mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>递归出口<br>当left&gt;right时说明数组已经遍历完，没有找到目标值，此时应该将目标值插入合适的位置。通过代码可以发现，<font color="red">left指向的元素是第一个大于目标值的元素，因此目标值应该插入到left下标位置。</font></li><li>递归过程<br>在递归过程中，需要不断地逼近递归出口。这样mid+1和mid-1就很好理解了。<hr></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀</title>
      <link href="/2019/10/21/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/2019/10/21/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第十四题</b><br>难度：<font color="green">简单</font><br>题目：编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 “”。(只包含小写字母)</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br><span class="line"></span><br><span class="line">示例 2:</span><br><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>首先判断边界条件，根据题意，当数组长度为0时，返回空串””。如果数组中存在一个””，那么也返回空串。<br>解决了边界问题后，来看着这个题。解决方法有很多，介绍一种简单地，使用indexOf()方法来解决。</p><ol><li>先选定数组的一个元素作为基准(这里选的是arr[0])，</li><li>依次遍历数组剩下的元素，判断该基准是否是其他元素的前缀</li><li>如果不是，基准长度-1，继续判断，直到基准为空(返回”“)或是当前元素前缀为止。</li><li>重复2，3步，遍历数组所有元素。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public String longestCommonPrefix(String[] strs) &#123;</span><br><span class="line">//注意边界条件，如果数组长度为0，直接返回</span><br><span class="line">if(strs.length==0)&#123;</span><br><span class="line">return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">String prefix=strs[0];</span><br><span class="line">for(int i=1;i&lt;strs.length;i++)&#123;</span><br><span class="line">//如果有任意元素为”“，直接返回</span><br><span class="line">if(strs[i].equals(&quot;&quot;))&#123;</span><br><span class="line">return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while(strs[i].indexOf(prefix)!=0)&#123;</span><br><span class="line">prefix=prefix.substring(0,prefix.length()-1);</span><br><span class="line">if(prefix.equals(&quot;&quot;))&#123;</span><br><span class="line">return &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return prefix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="/2019/10/21/%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2019/10/21/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第九题</b><br>难度：<font color="green">简单</font><br>题目：判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><hr><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例一：</span><br><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br><span class="line"></span><br><span class="line">示例二：</span><br><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><h1 id="思想分析"><a href="#思想分析" class="headerlink" title="思想分析"></a>思想分析</h1><p>这题思想很简单，一般的做法就是简单地将数字逆着算一遍然后比较是否相等。但这不是最优的解法，否则就没必要记录这一题了。其实，我们在将数字逆置到一半的时候就可以得到结论，并不需要完全逆置。<br>另外，示例已经提示的很清楚，对于负数和10的倍数可以直接返回false，但是0要返回true。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public boolean isPalindrome(int x) &#123;</span><br><span class="line">if(x&lt;0||x!=0&amp;&amp;x%10==0)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">int res=0;</span><br><span class="line">while(x&gt;res)&#123;</span><br><span class="line">res=(res*10+x%10);</span><br><span class="line">x/=10;</span><br><span class="line">&#125;</span><br><span class="line">return x==res/10||x==res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>好的思想总是让人眼前一亮，忍不住要记录下来。]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串</title>
      <link href="/2019/10/21/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2019/10/21/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><b>LeetCode第三题</b><br>难度：<font color="yellow">中等</font><br>题目：给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。</p><hr><a id="more"></a><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例一：</span><br><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br><span class="line"></span><br><span class="line">示例二：</span><br><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><ol><li>定义一个HashMap&lt;K,V&gt;，其中key为字符，Value为字符的位置i+1；</li><li>定义不重复子串的开始位置为start，结束位置为end，长度为ans，并且都初始化为0</li><li>遍历字符串(end++)，随着end往后移动的过程中<ul><li>如果[start,end]区间内出现重复字符，更新start，将start移动到重复字符的后一个位置</li></ul></li><li>更新ans，将字符加入到HashMap中。</li><li>在整个过程中以[start,end]为边界的窗口在向后移动，最大子串的长度即为移动过程中窗口的最大长度</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">//记录子串的最大长度</span><br><span class="line">int ans=0;</span><br><span class="line">int length=s.length();</span><br><span class="line">Map&lt;Character,Integer&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">for(int start=0,end=0;end&lt;length;end++)&#123;</span><br><span class="line">char ch=s.charAt(end);</span><br><span class="line">//当[start,end]区间出现重复字符，</span><br><span class="line">//将start移到重复字符后一个位置</span><br><span class="line">if(map.containsKey(ch))&#123;</span><br><span class="line">start=Math.max(map.get(ch),start);</span><br><span class="line">&#125;</span><br><span class="line">ans=Math.max(ans,end-start+1);</span><br><span class="line">map.put(ch,end+1);</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-哈希表</title>
      <link href="/2019/10/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2019/10/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>哈希表又称为散列表。散列表的实现常常叫做散列，散列是一种以常数平均时间执行插入、删除和查找的技术。但是对于散列，不支持那些需要元素间任何排序信息的操作。</p><hr><a id="more"></a>对于散列的基础知识不做过多的介绍，主要介绍散列函数的选择以及解决冲突的方法，会以三个写的散列表作为演示。<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>如果输入的关键字是整数，则散列函数一般为<font color="red">f(Key)=Key mod TableSize</font>。其中Key为关键字(整数)，TableSize为表的大小。f(Key)为该关键字应该在表中的下标。如果表的大小为10而关键字都以0为个位，那么上面的散列函数就不是一个好的选择，因为会将很多关键字映射到一个位置。比较好的办法就是<font color="red">保证表的大小为素数，这样当输入关键字是随机整数时，散列函数不仅计算起来简单而且分配也很均匀。</font><br>在通常情况下，关键字是字符串，这时候散列函数就需要仔细地选择，这里提供两种方法</p><ol><li>将字符串中字符的ASCII码值加起来<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static int hash(String key, int TableSize) &#123;</span><br><span class="line">int hashVal = 0;</span><br><span class="line">for (int i = 0; i &lt; key.length(); i++) &#123;</span><br><span class="line">hashVal += key.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line">return hashVal % TableSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>这种方法实现起来简单并且能够很快的计算出答案。不过缺点在于如果表很大，函数不会很好的分配关键字。例如设TableSize=10007(素数)，并假设所有关键字至多8个字符长，由于ASCII字符最大值为127，因此散列函数只能将关键字映射到127*8=1016以内，这显然不是一个好选择。</p><ol start="2"><li>下面给出第二种尝试方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static int hash(String key, int TableSize) &#123;</span><br><span class="line">int hashVal = 0;</span><br><span class="line">for (int i = 0; i &lt; key.length(); i++) &#123;</span><br><span class="line">hashVal += 37 * hashVal + key.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line">hashVal %= TableSize;</span><br><span class="line">//溢出时进行补偿</span><br><span class="line">if (hashVal &lt; 0) &#123;</span><br><span class="line">hashVal += TableSize;</span><br><span class="line">&#125;</span><br><span class="line">return hashVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>该散列函数能够使得关键字分布的较好。并且允许溢出。当溢出时hashVal %= TableSize得到一个绝对值小于TableSize的负数，因此后面进行补偿。这种散列函数就表的分布而言不一定是最好的，但确实具有极其简单的优点而且速度也很快(书上原话)。</p><h1 id="解决哈希冲突"><a href="#解决哈希冲突" class="headerlink" title="解决哈希冲突"></a>解决哈希冲突</h1><p>解决的散列函数的选择，剩下的问题就是如何解决哈希冲突，即当一个元素被插入时，与另一个已经插入的元素散列到相同的值，就会产生冲突，这个冲突需要消除。解决冲突的方法有很多种，这里介绍两种：分离链接法和开放定址法。</p><h2 id="分离链接法"><a href="#分离链接法" class="headerlink" title="分离链接法"></a><font size="5">分离链接法</font></h2><p>解决冲突的第一种方法通常叫做分离链接法(也是HashMap和Set使用的方法)，其做法是将散列到同一个值的所有元素保留到一个表中。如图所示<br><img src="/2019/10/20/数据结构-哈希表/1.png" alt></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 使用分离链接法构造哈希表</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class SeparateChainingHashTable&lt;T&gt; &#123;</span><br><span class="line">    //默认数组的长度</span><br><span class="line">    private static final int DEFAULT_TABLE_SIZE = 101;</span><br><span class="line">//记录元素个数</span><br><span class="line">    private int currentSize;</span><br><span class="line">//用于存储数据</span><br><span class="line">    private List&lt;T&gt;[] theList;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认构造方法</span><br><span class="line">     */</span><br><span class="line">    public SeparateChainingHashTable() &#123;</span><br><span class="line">        this(DEFAULT_TABLE_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 指定初始大小</span><br><span class="line">     * @param size 初始值</span><br><span class="line">     */</span><br><span class="line">    public SeparateChainingHashTable(int size) &#123;</span><br><span class="line">        theList = new LinkedList[nextPrime(size)];</span><br><span class="line">        for (int i = 0; i &lt; theList.length; i++) &#123;</span><br><span class="line">            theList[i] = new LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清空表</span><br><span class="line">     */</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        for (int i = 0; i &lt; theList.length; i++) &#123;</span><br><span class="line">            theList[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        currentSize = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断表中是否包含指定值</span><br><span class="line">     * @param ele 元素的值</span><br><span class="line">     * @return 包含返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(T ele) &#123;</span><br><span class="line">        List&lt;T&gt; whichList = theList[myhash(ele)];</span><br><span class="line">        return whichList.contains(ele);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 插入方法</span><br><span class="line">     * @param ele 要插入的元素</span><br><span class="line">     */</span><br><span class="line">    public void insert(T ele) &#123;</span><br><span class="line">        List&lt;T&gt; whichList = theList[myhash(ele)];</span><br><span class="line"></span><br><span class="line">        //如果链表中不包含要插入元素，则将元素插入，否则不做任何操作</span><br><span class="line">        if (!whichList.contains(ele))</span><br><span class="line">            whichList.add(ele);</span><br><span class="line">        /**</span><br><span class="line">         * 定义散列表的装填因子Lambda为散列表中元素个数比该表的大小</span><br><span class="line">         * 在这里，如果Lambda超过1，那么就调用rehash方法扩大散列表的大小</span><br><span class="line">         */</span><br><span class="line">        if (++currentSize &gt; theList.length)</span><br><span class="line">            rehash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除方法</span><br><span class="line">     * @param ele 要删除的节点</span><br><span class="line">     */</span><br><span class="line">    public void remove(T ele) &#123;</span><br><span class="line">        List&lt;T&gt; whichList = theList[myhash(ele)];</span><br><span class="line">        if (whichList.contains(ele)) &#123;</span><br><span class="line">            whichList.remove(ele);</span><br><span class="line">            currentSize--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重新散列方法</span><br><span class="line">     */</span><br><span class="line">    private void rehash() &#123;</span><br><span class="line">        List&lt;T&gt;[] oldlist = theList;</span><br><span class="line">        theList = new List[nextPrime(2 * theList.length)];</span><br><span class="line">        for (int i = 0; i &lt; theList.length; i++) &#123;</span><br><span class="line">            theList[i] = new LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentSize = 0;</span><br><span class="line">        for (int i = 0; i &lt; oldlist.length; i++) &#123;</span><br><span class="line">            for (T t : oldlist[i]) &#123;</span><br><span class="line">                insert(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * hash函数，将元素映射到指定链表上</span><br><span class="line">     * @param x 传入参数</span><br><span class="line">     * @return 参数应该映射的下标</span><br><span class="line">     */</span><br><span class="line">    private int myhash(T x) &#123;</span><br><span class="line">        int hashVal = x.hashCode();</span><br><span class="line">        hashVal %= theList.length;</span><br><span class="line">        if (hashVal &lt; 0)</span><br><span class="line">            hashVal += theList.length;</span><br><span class="line">        return hashVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取当前值的下一个素数</span><br><span class="line">     * @param n 当前值</span><br><span class="line">     * @return 当前值的下一个参数</span><br><span class="line">     */</span><br><span class="line">    private int nextPrime(int n) &#123;</span><br><span class="line">        if (n % 2 == 0) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        for (; !isPrime(n); n += 2);</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断由nextPrime()方法传递的参数是否为素数</span><br><span class="line">     * @param n 由nextPrime()方法传递的参数</span><br><span class="line">     * @return 是素数返回true，不是返回false</span><br><span class="line">     */</span><br><span class="line">    private boolean isPrime(int n) &#123;</span><br><span class="line">        if (n == 2 || n == 3)</span><br><span class="line">            return true;</span><br><span class="line"></span><br><span class="line">        if (n == 1 || n % 2 == 0)</span><br><span class="line">            return false;</span><br><span class="line"></span><br><span class="line">        for (int i = 3; i * i &lt;= n; i += 2)</span><br><span class="line">            if (n % i == 0)</span><br><span class="line">                return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分离链接法思想不是很难，主要说一下insert()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 插入方法</span><br><span class="line"> * @param ele 要插入的元素</span><br><span class="line"> */</span><br><span class="line">public void insert(T ele) &#123;</span><br><span class="line">List&lt;T&gt; whichList = theList[myhash(ele)];</span><br><span class="line"></span><br><span class="line">//如果链表中不包含要插入元素，则将元素插入，否则不做任何操作</span><br><span class="line">if (!whichList.contains(ele))</span><br><span class="line">whichList.add(ele);</span><br><span class="line">/**</span><br><span class="line"> * 定义散列表的装填因子Lambda为散列表中元素个数比该表的大小</span><br><span class="line"> * 在这里，如果Lambda超过1，那么就调用rehash方法扩大散列表的大小</span><br><span class="line"> */</span><br><span class="line">if (++currentSize &gt; theList.length)</span><br><span class="line">rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义<font color="red"><b>散列表的装填因子Lambda为散列表中元素个数于该表大小的比值</b></font>。在上面的代码中，Lambda=1。当Lambda=1时，如果链表的长度为Lambda，执行查找工作大概需要1+(Lambda)/2个节点的查找代价。<br><font color="red">散列表的大小实际上并不重要，装填因子才是最重要的。分离链接法的一般法则是使得表的大小与预料元素的个数大致相等(即让Lambda=1)。</font>如果Lambda &gt; 1，那么用rehash()方法扩大散列表的大小。</p><h2 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a><font size="5">线性探测法</font></h2><p>分离链接法的缺点是使用一些链表，由于给新单元分配地址需要时间，因此这就导致算法的速度有些缓慢，同时算法实际上还要求对第二种数据结构的实现。下面介绍探测散列表，它的装填因子约为0.5。<br>对于线性探测法，解决冲突的方法一般为f(i)=i。如图所示，将关键字{89，18，49，58，69}一次插入到一个散列表中，此时解决冲突的方法就是f(i)=i。<br><img src="/2019/10/20/数据结构-哈希表/2.png" alt><br>第一个冲突在插入关键字49时产生，它被放到下一个空闲地址，即0地址。关键字58先与18冲突，再与89冲突，然后又和49冲突，试选三次后才找到空闲单元。69同样也是这样解决冲突。<br>这样一来，<font color="blue">只要表足够大，总能找到一个自由单元，但是花费的事件也是相当多的。更不幸的是，即使表相对较空，这样占据的单元也会形成一些区块，其结果称为一次聚集，也就是说，散列到区块的任何关键字都需要多次试选单元才能够解决冲突。</font><br>线性探测法代码就不上了，下面介绍一种能够解决线性探测法中一次聚集问题的探测方法–平方探测法</p><h2 id="平方探测法"><a href="#平方探测法" class="headerlink" title="平方探测法"></a><font size="5">平方探测法</font></h2><p>平方探测法，就是冲突函数为二次的探测方法，流行的选择是f(i)=i*i。如图，同样使用关键字{89，18，49，58，69}插入链表中<br><img src="/2019/10/20/数据结构-哈希表/3.png" alt>当插入49时发生冲突，f(i)=f(1)=1；并且下一个位置是空的，因此49就放到0位置。<font color="red">插入58是第一次和18发生冲突，f(i)=f(1)=1，但是下一个位置不为空，因此进行第二次探测，f(2)=4，下一个单元在距位置8为4的地方也就是2。因此58就放在2处。</font><br>对于线性探测，让当散列表几乎填满元素时性能会降低。对于<font color="blue">平方探测更为严重，一旦表被填充超过一半，当表的大小不是素数时甚至在表被填充一半之前就不能保证一次找到空的单元了。</font>可以证明，<font color="red"><b>如果表有一半是空的，并且表的大小是素数，那么就能保证总能插入一个新的元素。</b></font>即使表被填充的位置仅比一半多一个，那么插入都有可能失败。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line">package 哈希表结构;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 平方探测法</span><br><span class="line"> * 冲突解决方法：f(i)=i*i</span><br><span class="line"> * 即 f(i)=f(i-1)+2*i-1=f(i-1)+2*(i-1)+1</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class QuadraticProbingHashTable&lt;T&gt; &#123;</span><br><span class="line">    private static final int DEFAULT_TABLE_SIZE = 101;</span><br><span class="line">    private int currentSize;</span><br><span class="line">    private HashEntry&lt;T&gt;[] array;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public QuadraticProbingHashTable1() &#123;</span><br><span class="line">        this(DEFAULT_TABLE_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私有嵌套类作为节点存储数据和记录存活状态</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     */</span><br><span class="line">    private static class HashEntry&lt;T&gt;&#123;</span><br><span class="line">        private T ele;</span><br><span class="line">        private boolean isAlive;</span><br><span class="line"></span><br><span class="line">        public HashEntry(T ele) &#123;</span><br><span class="line">            this(ele, true);</span><br><span class="line">        &#125;</span><br><span class="line">        public HashEntry(T ele, boolean isAlive) &#123;</span><br><span class="line">            this.ele = ele;</span><br><span class="line">            this.isAlive = isAlive;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除表中所有数据项</span><br><span class="line">     */</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        currentSize = 0;</span><br><span class="line">        for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">            array[i] = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public QuadraticProbingHashTable1(int size) &#123;</span><br><span class="line">        allocateArray(size);</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在表中查找指定元素</span><br><span class="line">     * @param ele 要查找的元素</span><br><span class="line">     * @return 找到返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(T ele) &#123;</span><br><span class="line">        int currentPos = findPos(ele);</span><br><span class="line">        return isAlive(currentPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 插入方法</span><br><span class="line">     * @param ele</span><br><span class="line">     */</span><br><span class="line">    public boolean insert(T ele) &#123;</span><br><span class="line">        int currentPos = findPos(ele);</span><br><span class="line">        //说明当前表中已有该元素并且并没有被删除，不做操作</span><br><span class="line">        if (isAlive(currentPos)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //将元素插入</span><br><span class="line">        array[currentPos] = new HashEntry&lt;&gt;(ele, true);</span><br><span class="line">        //表中元素数+1并判断是否超过数组长度一半</span><br><span class="line">        if (++currentSize &gt; array.length / 2) &#123;</span><br><span class="line">            rehash();</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除方法</span><br><span class="line">     * @param ele</span><br><span class="line">     */</span><br><span class="line">    public boolean remove(T ele) &#123;</span><br><span class="line">        int currentPose = findPos(ele);</span><br><span class="line">        if (isAlive(currentPose)) &#123;</span><br><span class="line">            array[currentPose].isAlive = false;</span><br><span class="line">            currentSize--;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return currentSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 再散列方法</span><br><span class="line">     * </span><br><span class="line">     */</span><br><span class="line">    private void rehash() &#123;</span><br><span class="line">        HashEntry&lt;T&gt;[] oldarray = array;</span><br><span class="line">        //创建一个新数组</span><br><span class="line">        allocateArray(2 * array.length);</span><br><span class="line">        //将占有数和存活数都初始化0值</span><br><span class="line">        currentSize = 0;</span><br><span class="line">        //将原数组元素拷贝到新数组上</span><br><span class="line">        for (HashEntry&lt;T&gt; hashEntry : oldarray) &#123;</span><br><span class="line">            //只拷贝存活的元素</span><br><span class="line">            if (hashEntry != null &amp;&amp; hashEntry.isAlive) &#123;</span><br><span class="line">                insert(hashEntry.ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断给定数组下标中是否存在元素，如果存在是否被删除</span><br><span class="line">     * @param currentPos</span><br><span class="line">     * @return 如果存在且未被删除，返回true</span><br><span class="line">     */</span><br><span class="line">    private boolean isAlive(int currentPos) &#123;</span><br><span class="line">        return array[currentPos] != null &amp;&amp; array[currentPos].isAlive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 找到一个合适的位置</span><br><span class="line">     * @param ele 传入参数</span><br><span class="line">     * @return 返回数组下标元素要么值等于ele，要么为空</span><br><span class="line">     */</span><br><span class="line">    private int findPos(T ele) &#123;</span><br><span class="line">        int offest = 1;</span><br><span class="line">        int currentPos = myhash(ele);</span><br><span class="line">        while (array[currentPos] != null &amp;&amp; !array[currentPos].ele.equals(ele)) &#123;</span><br><span class="line">            currentPos += offest;</span><br><span class="line">            offest += 2;</span><br><span class="line">            if (currentPos &gt;= array.length) &#123;</span><br><span class="line">                currentPos -= array.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return currentPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 散列函数，将元素映射到指定数组下标中</span><br><span class="line">     * @param ele</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private int myhash(T ele) &#123;</span><br><span class="line">        int hashVal = ele.hashCode();</span><br><span class="line">        hashVal %= array.length;</span><br><span class="line">        if (hashVal &lt; 0) &#123;</span><br><span class="line">            hashVal += array.length;</span><br><span class="line">        &#125;</span><br><span class="line">        return hashVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建一个指定大小的数组用来存储数据</span><br><span class="line">     * @param arraySize</span><br><span class="line">     */</span><br><span class="line">    private void allocateArray(int arraySize) &#123;</span><br><span class="line">        array = new HashEntry[nextPrime(arraySize)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 找到n后面的素数</span><br><span class="line">     * @param n</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private int nextPrime(int n) &#123;</span><br><span class="line">        if (n % 2 == 0) &#123;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        for (; !isPrime(n); n += 2) ;</span><br><span class="line">        return n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断素数</span><br><span class="line">     * @param n</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private boolean isPrime(int n) &#123;</span><br><span class="line">        if (n == 1 || n % 2 == 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (n == 2 || n == 3) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 3; i * i &lt; n; i += 2) &#123;</span><br><span class="line">            if (n % i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在探测散列表中不能使用真正的删除操作，因为相应的单元可能已经引起过冲突，元素绕过它存在了别处。例如，如果我们删89，那么实际上剩下的contains操作都将失败。所以我们使用惰性删除，即将要删除的元素做一个标记而不是真的删除它。<br>在本例中，没有使用链表数组，而是使用散列表项单元的数组，定义了一个HashEntry类用于存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 私有嵌套类作为节点存储数据和记录存活状态</span><br><span class="line"> * @param &lt;T&gt;</span><br><span class="line"> */</span><br><span class="line">private static class HashEntry&lt;T&gt;&#123;</span><br><span class="line">//保存数据</span><br><span class="line">private T ele;</span><br><span class="line">//记录元素状态，如果已被删除该boolean值为false</span><br><span class="line">private boolean isAlive;</span><br><span class="line"></span><br><span class="line">public HashEntry(T ele) &#123;</span><br><span class="line">this(ele, true);</span><br><span class="line">&#125;</span><br><span class="line">public HashEntry(T ele, boolean isAlive) &#123;</span><br><span class="line">this.ele = ele;</span><br><span class="line">this.isAlive = isAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用了上面的类作为节点，那么一个HashEntry引用数组的每一项是下面三种情况之一</p><ol><li><b>null，说明当前单元为空，可以直接插入</b></li><li><b>非null，并且isAlive为true，当前单元存在数据且未被删除，不能直接插入，需要使用冲突函数绕过该节点</b></li><li><b>非null，但是isAlive为false，当前单元存在数据但是已经被删除(懒惰删除)，可以直接插入覆盖</b></li></ol><h1 id="再散列"><a href="#再散列" class="headerlink" title="再散列"></a>再散列</h1><p>前面无论是线性探测法还是平方探测法都是用到了rehash()方法，即再散列。下面就来介绍一下再散列<br>前面说过，对于平方探测法，如果元素散列表太满，那么操作的运行时间会变长，并且插入操作可能失败。为了解决这种问题，我们建立一个另外约大两倍的表(且使用一个新的散列函数)，扫描整个原始散列表，计算每个(未删除)元素的新散列值并将其插入到新散列表中。这就是再散列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 平方探测法的</span><br><span class="line"> * 再散列方法</span><br><span class="line"> */</span><br><span class="line">private void rehash() &#123;</span><br><span class="line">HashEntry&lt;T&gt;[] oldarray = array;</span><br><span class="line">//创建一个新数组</span><br><span class="line">allocateArray(2 * array.length);</span><br><span class="line">//将占有数和存活数都初始化0值</span><br><span class="line">currentSize = 0;</span><br><span class="line">//将原数组元素拷贝到新数组上</span><br><span class="line">for (HashEntry&lt;T&gt; hashEntry : oldarray) &#123;</span><br><span class="line">//只拷贝存活的元素</span><br><span class="line">if (hashEntry != null &amp;&amp; hashEntry.isAlive) &#123;</span><br><span class="line">insert(hashEntry.ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“====================================================================================”</span><br><span class="line">对于前面说的使用一个新的散列表并且使用新的散列函数，这里使用的是hashVal mod array.length。</span><br><span class="line">因此当新的表建立时，array.length也会改变，自动得就会使用新的散列函数</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 散列函数，将元素映射到指定数组下标中</span><br><span class="line"> * @param ele</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private int myhash(T ele) &#123;</span><br><span class="line">int hashVal = ele.hashCode();</span><br><span class="line">hashVal %= array.length;</span><br><span class="line">if (hashVal &lt; 0) &#123;</span><br><span class="line">hashVal += array.length;</span><br><span class="line">&#125;</span><br><span class="line">return hashVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>关于散列表的部分就介绍到这里，可以看到散列表主要解决的就是散列函数和冲突解决方法两大问题。]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 分离链接法 </tag>
            
            <tag> 开放定址法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想之浅谈反射机制</title>
      <link href="/2019/10/20/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E6%B5%85%E8%B0%88%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/10/20/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E6%B5%85%E8%B0%88%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>运行时类型信息使得你可以在程序运行时发现和使用类型信息。在Java中，有两种方式让我们在运行时识别对象和类的信息。</p><ol><li>传统的“RTTI”(运行时，识别一个对象的类型)<br>它假定我们在编译时已经知道了所有的类型</li><li>反射机制<br>它允许我们在运行时发现和使用类的信息<hr><a id="more"></a></li></ol><h1 id="RTTI"><a href="#RTTI" class="headerlink" title="RTTI"></a>RTTI</h1><p>运行时类型信息使得我们可以在程序运行时发现和使用类型信息。RTTI的含义：在运行时，识别一个对象的类型。</p><h2 id="关于Class类对象"><a href="#关于Class类对象" class="headerlink" title="关于Class类对象"></a><font size="5">关于Class类对象</font></h2><p>Java中有一个特殊的对象–Class对象，该对象包含了与类有关的信息。事实上，Class对象就是用来创建类的所有“常规”对象的。Java中使用Class对象来执行RTTI。每当编写并且编译了一个新类，就会产生一个Class对象(被保存在同名的.class文件中)。<br>主要有三种RTTI形式</p><ol><li><b>传统的类型转换，由RTTI来确保类型转换的正确性，如果执行了一个错误的类型转换，就会抛出一个ClassCastException异常</b></li><li><b>代表对象类型的Class对象，通过查询Class对象可以获取运行时所需的信息</b></li><li><b>关键字instanceof，告诉我们对象是不是某个特定类型的实例</b></li></ol><p>但是无论是三种方法中的哪一种，<font color="red">在使用RTTI时都要求这个类型在编译时必须已知。也就是说，在编译时，编译器必须知道所有要通过RTTI来处理的类(类名)。</font><br>但是现在，假设运行期间你获取了一个不在你程序空间中的对象的引用，通过RTTI是没有办法知道这个对象到底是属于哪个类，因为编译器根本就不知道这个类的名字。<br>假设你从磁盘或者网络中获取了一串字节，并且被告知这是一个类(假设该类名为A)。那你要怎样使用这个类呢？正常情况下是没办法使用的，就比如你要产生这个类的对象，是做不到的。因为你的代码中根本就没有A a=new A()这样的代码，<br>那你说我提前在写一个A a=new A()，这样也不行，代码是通不过编译的，因为编译器检查这段代码发现程序空间中根本就没有A这个类，因为这个类是你运行时候从别的地方加载进来的，编译器根本就不知道会有A这个类，同样的你要调用类的字段方法统统都做不到。对于这种类似的情况，就要用到反射。</p><h2 id="四种获取Class对象的方法"><a href="#四种获取Class对象的方法" class="headerlink" title="四种获取Class对象的方法"></a><font size="5">四种获取Class对象的方法</font></h2><p>既然说到Class类对象，就来谈一谈如何获取该对象吧</p><ol><li>Class.forName(String name)<br>通过Class类的静态方法获取，传递参数为<font color="blue"><b>类的全限定名(包名.类名)</b></font>。</li><li>通过类字面常量.class获取<br>使用<font color="blue"><b>类名.class</b></font>来获取Class类对象，当使用这种方法时，<font color="red">不会引发类的初始化(通俗的说，类的静态代码块不会被执行)。</font></li><li>通过类对象来获取<br>如果你已经有了一个对象，那么可以使用<font color="blue"><b>对象名.getClass()</b></font>来获取该对象的Class对象</li><li>通过类加载器获取<br>如果有了一个类加载器对象classLoader，那么可以使用classLoader.loadclass(String name)方法获取指定名称的Class对象，参数类的全限定名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//通过一个Class对象获取类加载器</span><br><span class="line">ClassLoader classLoader = son2Class.getClassLoader();</span><br><span class="line">//通过类加载器获取另一个类的Class对象</span><br><span class="line">Class&lt;?&gt; cl = classLoader.loadClass(&quot;想要获取哪个类的Class对象，就传递该类的全限定名&quot;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p><font color="blue">Class类和java.lang.reflect类库一起对反射机制进行了支持</font>，该类库包含Field、Method以及Constructor(这些类都实现了Member接口)。这些类型的对象是由JVM在运行时创建的，用来表示未知类里对应的成员。<br>这样你就可以用Constructor创建对象(而不必使用对象名)，用get()和set()方法读写与Field对象相关联的字段，使用invoke()方法调用与Method对象相关联的方法……这样以来，未知对象的类信息就完全确定了，即使在编译时根本不知道这个类。<br>或者在运行期间从网路中获取了一个类，可以使用反射来创建该类的对象，调用对象的方法，即使根本不知道类的名字，没有也不可能在代码中使用new，来创建对象。</p><p>当<font color="red">通过反射与一个未知类型的对象打交道时，JVM只是简单地检查这个对象，看他属于哪一个特定的类(就像传统的RTTI那样)。在用它做其他事情之前必须先加载那个类的Class对象(加载类的.class文件)，因此这个类的.class文件对于JVM来说必须是可以获得的(要么在本地机器，要么从网络中获取)。</font><br>所以RTTI与反射之间真正的区别只在于</p><ul><li><b>对于RTTI，编译器在编译时打开和检查.class文件。(我们知道类的名字，在代码中使用普通的方式创建对象，调用对象的方法)</b></li><li><b>对于反射机制，.class文件在编译时是不可获取的，是在运行期间(程序运行到代码的某个部分)获取到的。所以在运行时打开和检查.class文件。</b></li></ul><p>总结一下Java反射机制<br><font color="red">在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它任意的方法。这种动态获取类的内容以及动态调用对象的方法称为反射机制。</font></p><h1 id="Java反射API"><a href="#Java反射API" class="headerlink" title="Java反射API"></a>Java反射API</h1><h2 id="Class对象相关方法"><a href="#Class对象相关方法" class="headerlink" title="Class对象相关方法"></a><font size="5">Class对象相关方法</font></h2><p>Class对象的方法有很多，这里只介绍获取类的字段、方法、构造器三类</p><h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a><font size="5">获取字段</font></h3><ul><li><p><font color="blue"><b>getField(String name)</b></font><br>获取指定名称的字段，只能是public的字段，该字段可以来自父类和接口</p></li><li><p><font color="blue"><b>getFields()</b></font><br>获取所有的public修饰的字段，包括从父类继承得到的public字段和接口定义的常量。前面说过字段是不存在多态的，让我们来测试一下下面这种情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//子类中有字段value，父类中也有字段value，并且接口中也有字段value，那么子类的Class对象到底能获取几个字段呢？</span><br><span class="line"></span><br><span class="line">class Father&#123;</span><br><span class="line">    public int value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Son extends Father implements Inter &#123;</span><br><span class="line">    public int value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Inter&#123;</span><br><span class="line">    int value = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class getFieldTest &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        Class&lt;?&gt; cl = Class.forName(&quot;fourteen.reflectTest.Son&quot;);</span><br><span class="line">        Field[] fields = cl.getFields();</span><br><span class="line">        for (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“============================”</span><br><span class="line">Output：</span><br><span class="line">public int Son.value</span><br><span class="line">public static final int Inter.value</span><br><span class="line">public int Father.value</span><br><span class="line"></span><br><span class="line">通过测试我们发现，子类中包含了从接口和父类继承的同名字段，</span><br><span class="line">并且接口中字段默认为常量，并不会发生多态行为</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>getDeclaredField(String name)</b></font><br>获取指定字段，该字段可以是任意权限但只能是本类定义的字段</p></li><li><p><font color="blue"><b>getDeclaredFields()</b></font><br>获取类自身定义的所有权限的字段，但是不会获取父类或者接口的任何字段。</p></li></ul><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a><font size="5">获取方法</font></h3><ul><li><p><font color="blue"><b>getMethod(String name,Class<t>…args)</t></b></font><br>获取指定名称方法的指定重载形式，只能获取本类的public方法<br>参数</p><ul><li>String name：方法名称</li><li>Class<t>…args：方法参数的Class对象(因为方法的重载，所以仅凭方法名无法确定一个方法)</t></li></ul></li><li><p><font color="blue"><b>getMethods()</b></font><br>获取所有public修饰的方法，包括从父类继承的方法。如果发生重写，那么只获取子类的方法。如果发生重载那么父类和子类的方法都会被获取</p></li><li><p><font color="blue"><b>getDeclaredMethod(String name,Class<t>…args)</t></b></font><br>获取指定名称方法的指定重载形式，能获取本类定义的任何权限的方法，无法获取任何父类或接口的方法</p></li><li><p><font color="blue"><b>getDeclaredMethods()</b></font><br>获取本类定义的所有方法，无法获取父类继承的方法。</p></li></ul><h3 id="获取构造器"><a href="#获取构造器" class="headerlink" title="获取构造器"></a><font size="5">获取构造器</font></h3><ul><li><p><font color="blue"><b>getConstructor(Class<t>…args)</t></b></font><br>获取指定重载形式的public修饰的构造器，因为构造器和类同名因此无需name参数<br>参数</p><ul><li>Class<t>…args方法参数的Class对象(因为方法的重载，所以仅凭方法名无法确定一个方法)</t></li></ul></li><li><p><font color="blue"><b>getConstructors()</b></font><br>获取所有public修饰的构造器。不会获取父类构造器</p></li><li><p><font color="blue"><b>getDeclaredConstructor(Class<t>…args)</t></b></font><br>获取指定重载形式的构造器，能够类任何权限的构造器。</p></li><li><p><font color="blue"><b>getDeclaredConstructor()</b></font><br>获取类所有权限的构造器</p></li></ul><h2 id="reflect类库对象方法"><a href="#reflect类库对象方法" class="headerlink" title="reflect类库对象方法"></a><font size="5">reflect类库对象方法</font></h2><p>前面的Class对象的三类方法主要是获取reflect类库的三个类对象，分别是Field对象，Method对象以及Constructor类对象</p><h3 id="Field对象方法"><a href="#Field对象方法" class="headerlink" title="Field对象方法"></a><font size="5">Field对象方法</font></h3><ul><li><font color="blue"><b>get(Object obj)</b></font><br>参数：obj–字段所属对象<br>获取字段的值</li><li><font color="blue"><b>set(Object obj1,Object obj2)</b></font><br>参数：<br>  obj1：字段所属对象<br>  obj2：想要给字段设置的新值<br>设置字段的值</li></ul><h3 id="Method对象方法"><a href="#Method对象方法" class="headerlink" title="Method对象方法"></a><font size="5">Method对象方法</font></h3><ul><li><font color="blue"><b>Object invoke(Object obj，Object…args)</b></font><br>参数：<ul><li>Object obj:方法所属的类对象</li><li>Object…args:方法所需要的参数<br>返回值：方法如果不为void，那么返回方法执行的结果<br>传入指定参数，执行获取的方法。</li></ul></li></ul><h3 id="Constructor对象方法"><a href="#Constructor对象方法" class="headerlink" title="Constructor对象方法"></a><font size="5">Constructor对象方法</font></h3><ul><li><font color="blue"><b>T newInstance(Object…args)</b></font><br>参数：<ul><li>构造方法需要的参数<br>返回值：执行构造方法创建出来的对象</li></ul></li></ul><hr>对于一些getName()类似的方法没有介绍，但是查看API文档可以很轻易地学习到。另外，如果想要对获取到的私有的(或者是本来权限不够无法操作的)字段、方法或者构造器进行操作，要先调用setAccessible(true)方法。]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-树</title>
      <link href="/2019/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
      <url>/2019/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>前面说过，数组查询快而增删满，链表增删快而查询慢，那么有没有一种查询和增删修改都比较快的数据结构呢？这里主要介绍两种树，即二叉查找树和AVL树。值得一提的是，二叉查找树对于大部分操作的运行时间平均为O(logN)。</p><hr><a id="more"></a><p>对于树的基本知识就不做赘述，这里主要通过手写一个二叉查找树和AVL树并实现其一些必要功能来学习这两种数据结构。</p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>先上代码，然后再对每一个方法的实现进行介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">public class BinarySearchTree&lt;T extends Comparable&lt;? super T&gt;&gt;&#123;</span><br><span class="line">    //私有嵌套类表示树节点</span><br><span class="line">    private static class BinaryNode&lt;T&gt; &#123;</span><br><span class="line">        T ele;</span><br><span class="line">        BinaryNode&lt;T&gt; left;</span><br><span class="line">        BinaryNode&lt;T&gt; right;</span><br><span class="line">        BinaryNode(T ele) &#123;</span><br><span class="line">            this(ele, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        BinaryNode(T ele, BinaryNode&lt;T&gt; left, BinaryNode&lt;T&gt; right) &#123;</span><br><span class="line">            this.ele = ele;</span><br><span class="line">            this.left = left;</span><br><span class="line">            this.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //BinarySearchTree成员属性，表示树的根节点</span><br><span class="line">    private BinaryNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    //无参构造方法</span><br><span class="line">    public BinarySearchTree() &#123;</span><br><span class="line">        root = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断树空</span><br><span class="line">     * @return 为空返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return root == null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断树中是否含有指定元素</span><br><span class="line">     * @param ele 指定元素</span><br><span class="line">     * @return 包含返回true，否则返回false</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(T ele) &#123;</span><br><span class="line">        return contains(ele, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取树中节点的最小值</span><br><span class="line">     * @return 最小节点值</span><br><span class="line">     */</span><br><span class="line">    public T findMin() &#123;</span><br><span class="line">        if (isEmpty()) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        return findMin(root).ele;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取树中最大节点的值</span><br><span class="line">     * @return 最大节点值</span><br><span class="line">     */</span><br><span class="line">    public T findMax() &#123;</span><br><span class="line">        if (isEmpty()) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        return findMax(root).ele;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向树种插入节点</span><br><span class="line">     * @param ele 插入元素的值</span><br><span class="line">     */</span><br><span class="line">    public void insert(T ele) &#123;</span><br><span class="line">        root = insert(ele, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除指定节点</span><br><span class="line">     * @param ele 删除节点值</span><br><span class="line">     */</span><br><span class="line">    public void remove(T ele) &#123;</span><br><span class="line">        root = remove(ele, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 先序遍历树并打印</span><br><span class="line">     */</span><br><span class="line">    public void infixPrintTree() &#123;</span><br><span class="line">        infixPrintTree(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 中序遍历树并打印</span><br><span class="line">     */</span><br><span class="line">    public void InOrderPrintTree() &#123;</span><br><span class="line">        InOrderPrintTree(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 后序遍历树并打印</span><br><span class="line">     */</span><br><span class="line">    public void SufixPrintTree() &#123;</span><br><span class="line">        SufixPrintTree(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void SufixPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            SufixPrintTree(t.left);</span><br><span class="line">            SufixPrintTree(t.right);</span><br><span class="line">            System.out.println(t.ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void InOrderPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            System.out.println(t.ele);</span><br><span class="line">            InOrderPrintTree(t.left);</span><br><span class="line">            InOrderPrintTree(t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void infixPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            infixPrintTree(t.left);</span><br><span class="line">            System.out.println(t.ele);</span><br><span class="line">            infixPrintTree(t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BinaryNode&lt;T&gt; remove(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t == null) &#123;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line">        int res = ele.compareTo(t.ele);</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            t.left = remove(ele, t.left);</span><br><span class="line">        &#125; else if (res &gt; 0) &#123;</span><br><span class="line">            t.right = remove(ele, t.right);</span><br><span class="line">        &#125; else if (t.left != null &amp;&amp; t.right != null) &#123;</span><br><span class="line">            t.ele = findMin(t.right).ele;</span><br><span class="line">            t.right = remove(t.ele, t.right);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            t = (t.left != null) ? t.left : t.right;</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BinaryNode&lt;T&gt; insert(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t == null) &#123;</span><br><span class="line">            return new BinaryNode&lt;&gt;(ele, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        int res = ele.compareTo(t.ele);</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            t.left = insert(ele, t.left);</span><br><span class="line">        &#125; else if (res &gt; 0) &#123;</span><br><span class="line">            t.right = insert(ele, t.right);</span><br><span class="line">        &#125;</span><br><span class="line">        else;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BinaryNode&lt;T&gt; findMax(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t.right == null) &#123;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line">        return findMax(t.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BinaryNode&lt;T&gt; findMin(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">       if (t.left == null) &#123;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line">        return findMin(t.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean contains(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int res = ele.compareTo(t.ele);</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            return contains(ele, t.left);</span><br><span class="line">        &#125; else if (res &gt; 0) &#123;</span><br><span class="line">            return contains(ele, t.right);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><ol><li><font color="blue"><b>节点类</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private static class BinaryNode&lt;T&gt; &#123;</span><br><span class="line">//节点值</span><br><span class="line">T ele;</span><br><span class="line">//指向该节点的左子树</span><br><span class="line">BinaryNode&lt;T&gt; left;</span><br><span class="line">//指向该节点的右子树</span><br><span class="line">BinaryNode&lt;T&gt; right;</span><br><span class="line">//无参构造方法</span><br><span class="line">BinaryNode(T ele) &#123;</span><br><span class="line">this(ele, null, null);</span><br><span class="line">&#125;</span><br><span class="line">BinaryNode(T ele, BinaryNode&lt;T&gt; left, BinaryNode&lt;T&gt; right) &#123;</span><br><span class="line">this.ele = ele;</span><br><span class="line">this.left = left;</span><br><span class="line">this.right = right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>就像前面的链表结构、哈希表结构，它们的每一个节点也都是一个类，这里定义了一个树节点类，使用了泛型。<br>节点类类有三个属性、一个无参构造方法和一个含餐构造方法。实现比较简单，就不多说</p><ol start="2"><li><font color="blue"><b>contains(T ele)方法</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断树中是否含有指定元素</span><br><span class="line"> * @param ele 指定元素</span><br><span class="line"> * @return 包含返回true，否则返回false</span><br><span class="line"> */</span><br><span class="line">public boolean contains(T ele) &#123;</span><br><span class="line">return contains(ele, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================================”</span><br><span class="line"></span><br><span class="line">private boolean contains(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t == null) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">int res = ele.compareTo(t.ele);</span><br><span class="line">if (res &lt; 0) &#123;</span><br><span class="line">return contains(ele, t.left);</span><br><span class="line">&#125; else if (res &gt; 0) &#123;</span><br><span class="line">return contains(ele, t.right);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>调用的是contains(T ele)的重载方法contains(T ele,BinaryNode<t> t)，将根节点root作为参数传递进去。<br>该方法使用递归查询</t></p><ol><li><p>将待查找值和当前节点值进行比较</p><ol><li>如果大于当前节点值，递归查询当前节点的右子树</li><li>如果小于当前节点值，递归查询当前节点的左子树</li><li>如果等于当前节点值，说明树中包含该节点，返回true</li></ol></li><li><p>递归出口：当前节点为空时，说明树中不包含查找值，返回false</p></li><li><p><font color="blue"><b>findMax()和findMin()</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取树中节点的最小值</span><br><span class="line"> * @return 最小节点值</span><br><span class="line"> */</span><br><span class="line">public T findMin() &#123;</span><br><span class="line">if (isEmpty()) &#123;</span><br><span class="line">throw new NullPointerException();</span><br><span class="line">&#125;</span><br><span class="line">return findMin(root).ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line"></span><br><span class="line">private BinaryNode&lt;T&gt; findMin(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">   if (t.left == null) &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">return findMin(t.left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line">“================================================”</span><br><span class="line">/**</span><br><span class="line"> * 获取树中最大节点的值</span><br><span class="line"> * @return 最大节点值</span><br><span class="line"> */</span><br><span class="line">public T findMax() &#123;</span><br><span class="line">if (isEmpty()) &#123;</span><br><span class="line">throw new NullPointerException();</span><br><span class="line">&#125;</span><br><span class="line">return findMax(root).ele;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line"></span><br><span class="line">private BinaryNode&lt;T&gt; findMax(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t.right == null) &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">return findMax(t.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>分别获取树中节点最大值和最小值。思想很简单，对于二叉查找树的每一个节点，其左子树一定小于右子树。因此该树的最右叶子节点就是最大节点，同样的，最左叶子节点即为最小节点。</p><ol start="4"><li><font color="blue"><b>insert(T ele)</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 向树种插入节点</span><br><span class="line"> * @param ele 插入元素的值</span><br><span class="line"> */</span><br><span class="line">public void insert(T ele) &#123;</span><br><span class="line">root = insert(ele, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line">private BinaryNode&lt;T&gt; insert(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t == null) &#123;</span><br><span class="line">return new BinaryNode&lt;&gt;(ele, null, null);</span><br><span class="line">&#125;</span><br><span class="line">int res = ele.compareTo(t.ele);</span><br><span class="line">if (res &lt; 0) &#123;</span><br><span class="line">t.left = insert(ele, t.left);</span><br><span class="line">&#125; else if (res &gt; 0) &#123;</span><br><span class="line">t.right = insert(ele, t.right);</span><br><span class="line">&#125;</span><br><span class="line">else;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>向树中插入节点，要保证插入后仍是二叉查找树。使用递归实现比较简单。</p><ol><li><p>比较待插入值和当前节点值大小</p><ol><li>如果待插入值大于当前节点值，说明该值应该插入在当前节点的右子树中</li><li>如果待插入值小于当前节点值，说明该值应该插入在当前节点的左子树中</li><li>如果待插入值等于当前节点值，由二叉查找树的定义可知节点值不能重复，因此不做插入操作</li></ol></li><li><p>递归出口，有两个递归出口</p><ol><li>找到合适的插入位置，插入后return</li><li>待插入值等于当前节点值，递归结束。返回当前节点</li></ol></li><li><p><font color="blue"><b>树的前中后序遍历</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 先序遍历树并打印</span><br><span class="line"> */</span><br><span class="line">public void infixPrintTree() &#123;</span><br><span class="line">infixPrintTree(this.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 中序遍历树并打印</span><br><span class="line"> */</span><br><span class="line">public void InOrderPrintTree() &#123;</span><br><span class="line">InOrderPrintTree(this.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后序遍历树并打印</span><br><span class="line"> */</span><br><span class="line">public void SufixPrintTree() &#123;</span><br><span class="line">SufixPrintTree(this.root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line">private void SufixPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t != null) &#123;</span><br><span class="line">SufixPrintTree(t.left);</span><br><span class="line">SufixPrintTree(t.right);</span><br><span class="line">System.out.println(t.ele);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void InOrderPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t != null) &#123;</span><br><span class="line">System.out.println(t.ele);</span><br><span class="line">InOrderPrintTree(t.left);</span><br><span class="line">InOrderPrintTree(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void infixPrintTree(BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t != null) &#123;</span><br><span class="line">infixPrintTree(t.left);</span><br><span class="line">System.out.println(t.ele);</span><br><span class="line">infixPrintTree(t.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>思想较为简单，算是树的基础操作，不多说</p><ol start="6"><li><font color="blue"><b>remove(T ele)</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除指定节点</span><br><span class="line"> * @param ele 删除节点值</span><br><span class="line"> */</span><br><span class="line">public void remove(T ele) &#123;</span><br><span class="line">root = remove(ele, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“================================================”</span><br><span class="line"></span><br><span class="line">private BinaryNode&lt;T&gt; remove(T ele, BinaryNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t == null) &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">int res = ele.compareTo(t.ele);</span><br><span class="line">if (res &lt; 0) &#123;</span><br><span class="line">t.left = remove(ele, t.left);</span><br><span class="line">&#125; else if (res &gt; 0) &#123;</span><br><span class="line">t.right = remove(ele, t.right);</span><br><span class="line">&#125; else if (t.left != null &amp;&amp; t.right != null) &#123;</span><br><span class="line">t.ele = findMin(t.right).ele;</span><br><span class="line">t.right = remove(t.ele, t.right);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">t = (t.left != null) ? t.left : t.right;</span><br><span class="line">&#125;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>删除操作是二叉查找树最困难的操作，对于以恶搞要删除的节点，需要考虑几种可能的情况<br>    1. 如果节点是一个叶子节点，那么可以直接删除<br>    2. 如果节点有一个子节点(左右都可以)，那么可以可以将该节点的父节点指向它的子节点来达到删除该节点的目的，如图<br>    <img src="/2019/10/18/数据结构-树/1.png" alt><br>    3. 比较复杂的是，待删除节点具有两个孩子节点，一般的策略是<font color="red">用待删除节点的右子树中最小的子节点代替该节点的数据并递归的删除那个最小的节点。</font>因为右子树中最小的节点不可能有左儿子，因此第二次remove时要容易。如图<br>    <img src="/2019/10/18/数据结构-树/2.png" alt></p><h1 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h1><p>二叉查找树在大多数情况下能够提高我们的访问速度，但是对于下面这样已经退化为链表的二叉排序树，并不能提高我们的访问速度。因此在二叉查找树的基础上又引进了AVL树<br><img src="/2019/10/18/数据结构-树/3.png" alt><font color="red">对于AVL树结构，要求它的每一个节点的左右子树的高度最多相差1。</font></p><h2 id="平衡调整策略"><a href="#平衡调整策略" class="headerlink" title="平衡调整策略"></a>平衡调整策略</h2><p>当执行插入操作时，我们需要更新通向根节点路径上的哪些节点的所有平衡信息。但是，插入一个节点可能会破坏AVL树的特性。如图<br><img src="/2019/10/18/数据结构-树/4.png" alt>破坏平衡的插入情况一共有4种，下面将对这四种情况进行分别说明</p><ol><li><font color="blue"><b>LL形调整</b></font><br><img src="/2019/10/18/数据结构-树/5.png" alt>如图所示</li><li><font color="blue"><b>RR形调整</b></font><br>和LL形类似，可以推导一下</li><li><font color="blue"><b>LR形调整</b></font><br><img src="/2019/10/18/数据结构-树/6.png" alt>如图所示</li><li><font color="blue"><b>RL形调整</b></font><br>同样的，和LR形类似，可以推导一下</li></ol><p>以上就是四种破坏平衡的情况对应的调整策略，下面来看一下代码实现</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class AVLtree&lt;T extends Comparable&lt;? super T&gt;&gt;&#123;</span><br><span class="line">    private static final int ALLOW_IMBALANCE = 1;</span><br><span class="line">    private AvlNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    public AVLtree() &#123;</span><br><span class="line">        root = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //私有嵌套类，树节点类</span><br><span class="line">    private static class AvlNode&lt;T&gt; &#123;</span><br><span class="line">        T ele;</span><br><span class="line">        AvlNode&lt;T&gt; left;</span><br><span class="line">        AvlNode&lt;T&gt; right;</span><br><span class="line">        int height;</span><br><span class="line"></span><br><span class="line">        public AvlNode(T ele) &#123;</span><br><span class="line">            this(ele, null, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private AvlNode(T ele, AvlNode&lt;T&gt; lt, AvlNode&lt;T&gt; rt) &#123;</span><br><span class="line">            this.ele = ele;</span><br><span class="line">            right = left;</span><br><span class="line">            left = lt;</span><br><span class="line">            height = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向AVL树中插入节点</span><br><span class="line">     * @param x 插入的节点值</span><br><span class="line">     */</span><br><span class="line">    public void insert(T x) &#123;</span><br><span class="line">        root=insert(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从AVL树中删除节点</span><br><span class="line">     * @param x 删除的节点值</span><br><span class="line">     */</span><br><span class="line">    public void remove(T x) &#123;</span><br><span class="line">        root = remove(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private AvlNode&lt;T&gt; remove(T ele,AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        //如果当前节点为空，说明树中不存在要删除的节点值，直接返回</span><br><span class="line">        if (t == null)</span><br><span class="line">            return t;</span><br><span class="line">        //将当前节点值和删除值比较</span><br><span class="line">        int res = ele.compareTo(t.ele);</span><br><span class="line">        //删除值大于当前节点值，向节点的右子树查询</span><br><span class="line">        if (res &lt; 0) &#123;</span><br><span class="line">            t.left = remove(ele, t.left);</span><br><span class="line">        &#125;</span><br><span class="line">        //删除值小于当前节点值，向节点的左子树查询</span><br><span class="line">        else if (res &gt; 0) &#123;</span><br><span class="line">            t.right= remove(ele, t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    //找到要删除的节点</span><br><span class="line">        //如果要删除的节点左右子树都不为空，</span><br><span class="line">        //那么就将该节点右子树中最小的值代替当前节点的值并递归删除右子树中最小的值</span><br><span class="line">        else if (t.left != null &amp;&amp; t.right != null) &#123;</span><br><span class="line">            t.ele = finMin(t.right).ele;</span><br><span class="line">            t.right = remove(t.ele, t.right);</span><br><span class="line">        &#125;</span><br><span class="line">        //如果要删除的节点左右子树有一个或两个不存在，直接删除</span><br><span class="line">        else</span><br><span class="line">            t = (t.left != null) ? t.left : t.right;</span><br><span class="line">        //每次删除后重新对AVL树进行调整</span><br><span class="line">        return balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private AvlNode&lt;T&gt; finMin(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t.left == null) &#123;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line">        return finMin(t.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 先序遍历AVL树</span><br><span class="line">     */</span><br><span class="line">    public void preOrder() &#123;</span><br><span class="line">        preOrder(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 中序遍历AVL树</span><br><span class="line">     */</span><br><span class="line">    public void InOrder() &#123;</span><br><span class="line">        InOrder(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void InOrder(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            InOrder(t.left);</span><br><span class="line">            System.out.println(t.ele);</span><br><span class="line">            InOrder(t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void preOrder(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t != null) &#123;</span><br><span class="line">            System.out.println(t.ele);</span><br><span class="line">            preOrder(t.left);</span><br><span class="line">            preOrder(t.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取节点高度</span><br><span class="line">    private int height(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        return t == null ? -1 : t.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private AvlNode&lt;T&gt; insert(T x, AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t == null)</span><br><span class="line">            return new AvlNode&lt;T&gt;(x, null, null);</span><br><span class="line">        int CompareResult = x.compareTo(t.ele);</span><br><span class="line">        if (CompareResult &lt; 0 ) &#123;</span><br><span class="line">            t.left = insert(x, t.left);</span><br><span class="line">        &#125; else if (CompareResult &gt; 0) &#123;</span><br><span class="line">            t.right = insert(x, t.right);</span><br><span class="line">        &#125;</span><br><span class="line">        return balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private AvlNode&lt;T&gt; balance(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">        if (t == null) &#123;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果节点左子树的高度高于右子树的高度</span><br><span class="line">        if (height(t.left) - height(t.right) &gt; ALLOW_IMBALANCE) &#123;</span><br><span class="line">            //当前节点t左子树的左子树高度大于左子树的右子树的高度</span><br><span class="line">            //属于LL形，需要一次单旋转</span><br><span class="line">            if (height(t.left.left) &gt;= height(t.left.right)) &#123;</span><br><span class="line">                //LL形调整</span><br><span class="line">                t=rotateWithLeftChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">            //LR形，需要一次双旋转</span><br><span class="line">            else &#123;</span><br><span class="line">                t=doubleWithLeftChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (height(t.right) - height(t.left) &gt; ALLOW_IMBALANCE) &#123;</span><br><span class="line">            //RR形</span><br><span class="line">            if (height(t.right.right) &gt;= height(t.right.left)) &#123;</span><br><span class="line">                //RR形式调整</span><br><span class="line">                t=rotateWithRightChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">            //RL形</span><br><span class="line">            else &#123;</span><br><span class="line">                t=doubleWithRightChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.height = Math.max(height(t.left), height(t.right)) + 1;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RL调整</span><br><span class="line">     * @param k3 不平衡的节点</span><br><span class="line">     * @return 调整后的新节点</span><br><span class="line">     */</span><br><span class="line">    private AvlNode&lt;T&gt; doubleWithRightChild(AvlNode&lt;T&gt; k3) &#123;</span><br><span class="line">        AvlNode&lt;T&gt; k1 = k3.right;</span><br><span class="line">        AvlNode&lt;T&gt; k2 = k1.left;</span><br><span class="line">        k3.right = k2.left;</span><br><span class="line">        k1.left = k2.right;</span><br><span class="line">        k2.left = k3;</span><br><span class="line">        k2.right = k1;</span><br><span class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">        k3.height = Math.max(height(k3.left), height(k3.right)) + 1;</span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">        return k2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LR调整</span><br><span class="line">     * @param k3 不平衡的节点</span><br><span class="line">     * @return 调整后的新节点</span><br><span class="line">     */</span><br><span class="line">    private AvlNode&lt;T&gt; doubleWithLeftChild(AvlNode&lt;T&gt; k3) &#123;</span><br><span class="line">        AvlNode&lt;T&gt; k1 = k3.left;</span><br><span class="line">        AvlNode&lt;T&gt; k2 = k1.right;</span><br><span class="line">        k1.right = k2.left;</span><br><span class="line">        k3.left = k2.right;</span><br><span class="line">        k2.left = k1;</span><br><span class="line">        k2.right = k3;</span><br><span class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">        k3.height = Math.max(height(k3.left), height(k3.right)) + 1;</span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">        return k2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RR调整</span><br><span class="line">     * @param k2 不平衡的节点</span><br><span class="line">     * @return 调整后新的节点</span><br><span class="line">     */</span><br><span class="line">    private AvlNode&lt;T&gt; rotateWithRightChild(AvlNode&lt;T&gt; k2) &#123;</span><br><span class="line">        AvlNode&lt;T&gt; k1 = k2.right;</span><br><span class="line">        k2.right = k1.left;</span><br><span class="line">        k1.left = k2;</span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">        return k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LL调整</span><br><span class="line">     * @param k2 不平衡的节点</span><br><span class="line">     * @return 调整后新的节点</span><br><span class="line">     */</span><br><span class="line">    private AvlNode&lt;T&gt; rotateWithLeftChild(AvlNode&lt;T&gt; k2) &#123;</span><br><span class="line">        AvlNode&lt;T&gt; k1 = k2.left;</span><br><span class="line">        k2.left = k1.right;</span><br><span class="line">        k1.right = k2;</span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">        return k1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现细节-1"><a href="#实现细节-1" class="headerlink" title="实现细节"></a>实现细节</h2><ol><li><font color="blue"><b>节点类</b></font><br>对于二叉查找树中的简单方法入isEmpty等这里就不实现了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//私有嵌套类，树节点类</span><br><span class="line">private static class AvlNode&lt;T&gt; &#123;</span><br><span class="line">//节点值</span><br><span class="line">T ele;</span><br><span class="line">//指向节点左子树</span><br><span class="line">AvlNode&lt;T&gt; left;</span><br><span class="line">//指向节点右子树</span><br><span class="line">AvlNode&lt;T&gt; right;</span><br><span class="line">//记录节点的高度</span><br><span class="line">int height;</span><br><span class="line"></span><br><span class="line">//空参数构造方法</span><br><span class="line">public AvlNode(T ele) &#123;</span><br><span class="line">this(ele, null, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private AvlNode(T ele, AvlNode&lt;T&gt; lt, AvlNode&lt;T&gt; rt) &#123;</span><br><span class="line">this.ele = ele;</span><br><span class="line">right = left;</span><br><span class="line">left = lt;</span><br><span class="line">height = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>由于AVL树要求节点的左右子树高度最多相差1，因此就需要<font color="red">每一个节点记录自身的高度，如果是叶子节点，那么高度为0，空节点高度为-1。</font></p><ol start="2"><li><font color="blue"><b>height(AvlNode<t> t)</t></b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//获取节点高度</span><br><span class="line">private int height(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">return t == null ? -1 : t.height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在介绍插入删除操作之前，先介绍两个方法，这是其中一个。思想很简单，如果当前节点不为空，就返回节点的高度，如果为空，返回-1。</p><ol start="3"><li><font color="blue"><b>balance(AvlNode<t> t)</t></b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">private AvlNode&lt;T&gt; balance(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t == null) &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">//如果节点左子树的高度和右子树的高度相差超过1</span><br><span class="line">if (height(t.left) - height(t.right) &gt; ALLOW_IMBALANCE) &#123;</span><br><span class="line">//当前节点t左子树的左子树高度大于等于左子树的右子树的高度</span><br><span class="line">//属于LL形，需要一次单旋转</span><br><span class="line">if (height(t.left.left) &gt;= height(t.left.right)) &#123;</span><br><span class="line">//LL形调整</span><br><span class="line">t=rotateWithLeftChild(t);</span><br><span class="line">&#125;</span><br><span class="line">//LR形，需要一次双旋转</span><br><span class="line">else &#123;</span><br><span class="line">t=doubleWithLeftChild(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果右子树的高度和左子树的高度相差超过1</span><br><span class="line">if (height(t.right) - height(t.left) &gt; ALLOW_IMBALANCE) &#123;</span><br><span class="line">//RR形</span><br><span class="line">if (height(t.right.right) &gt;= height(t.right.left)) &#123;</span><br><span class="line">//RR形式调整</span><br><span class="line">t=rotateWithRightChild(t);</span><br><span class="line">&#125;</span><br><span class="line">//RL形</span><br><span class="line">else &#123;</span><br><span class="line">t=doubleWithRightChild(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.height = Math.max(height(t.left), height(t.right)) + 1;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=================================================================”</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * RL调整</span><br><span class="line"> * @param k3 不平衡的节点</span><br><span class="line"> * @return 调整后的新节点</span><br><span class="line"> */</span><br><span class="line">private AvlNode&lt;T&gt; doubleWithRightChild(AvlNode&lt;T&gt; k3) &#123;</span><br><span class="line">AvlNode&lt;T&gt; k1 = k3.right;</span><br><span class="line">AvlNode&lt;T&gt; k2 = k1.left;</span><br><span class="line">k3.right = k2.left;</span><br><span class="line">k1.left = k2.right;</span><br><span class="line">k2.left = k3;</span><br><span class="line">k2.right = k1;</span><br><span class="line">//先重新确定子树的高度，最后确定k2的高度，k2一定在最后确定</span><br><span class="line">k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">k3.height = Math.max(height(k3.left), height(k3.right)) + 1;</span><br><span class="line">k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">return k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * LR调整</span><br><span class="line"> * @param k3 不平衡的节点</span><br><span class="line"> * @return 调整后的新节点</span><br><span class="line"> */</span><br><span class="line">private AvlNode&lt;T&gt; doubleWithLeftChild(AvlNode&lt;T&gt; k3) &#123;</span><br><span class="line">AvlNode&lt;T&gt; k1 = k3.left;</span><br><span class="line">AvlNode&lt;T&gt; k2 = k1.right;</span><br><span class="line">k1.right = k2.left;</span><br><span class="line">k3.left = k2.right;</span><br><span class="line">k2.left = k1;</span><br><span class="line">k2.right = k3;</span><br><span class="line">//先重新确定子树的高度，最后确定k2的高度，k2一定在最后确定</span><br><span class="line">k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">k3.height = Math.max(height(k3.left), height(k3.right)) + 1;</span><br><span class="line">k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">return k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * RR调整</span><br><span class="line"> * @param k2 不平衡的节点</span><br><span class="line"> * @return 调整后新的节点</span><br><span class="line"> */</span><br><span class="line">private AvlNode&lt;T&gt; rotateWithRightChild(AvlNode&lt;T&gt; k2) &#123;</span><br><span class="line">AvlNode&lt;T&gt; k1 = k2.right;</span><br><span class="line">k2.right = k1.left;</span><br><span class="line">k1.left = k2;</span><br><span class="line">//先确定子树k2的高度，后确定k1的高度</span><br><span class="line">k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">return k1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * LL调整</span><br><span class="line"> * @param k2 不平衡的节点</span><br><span class="line"> * @return 调整后新的节点</span><br><span class="line"> */</span><br><span class="line">private AvlNode&lt;T&gt; rotateWithLeftChild(AvlNode&lt;T&gt; k2) &#123;</span><br><span class="line">AvlNode&lt;T&gt; k1 = k2.left;</span><br><span class="line">k2.left = k1.right;</span><br><span class="line">k1.right = k2;</span><br><span class="line">//先确定子树k2的高度，后确定k1的高度</span><br><span class="line">k2.height = Math.max(height(k2.left), height(k2.right)) + 1;</span><br><span class="line">k1.height = Math.max(height(k1.left), height(k1.right)) + 1;</span><br><span class="line">return k1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上balance()平衡方法和平衡被破坏后四种调整策略的代码是AVL树中的核心部分。<font color="red">对于LR调整和RL调整最后重新确定高度的时候，由于将k2作为根节点，所以一定要注意确定的顺序。先确定k2的左右子树高度，最后确定k2高度。</font>LL调整和RR调整同理，最后确定调整后根节点的高度。</p><ol start="4"><li><font color="blue"><b>insert(T x)</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 向AVL树中插入节点</span><br><span class="line"> * @param x 插入的节点值</span><br><span class="line"> */</span><br><span class="line">public void insert(T x) &#123;</span><br><span class="line">root=insert(x, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“=============================================”</span><br><span class="line"></span><br><span class="line">private AvlNode&lt;T&gt; insert(T x, AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t == null)</span><br><span class="line">return new AvlNode&lt;T&gt;(x, null, null);</span><br><span class="line">int CompareResult = x.compareTo(t.ele);</span><br><span class="line">if (CompareResult &lt; 0 ) &#123;</span><br><span class="line">t.left = insert(x, t.left);</span><br><span class="line">&#125; else if (CompareResult &gt; 0) &#123;</span><br><span class="line">t.right = insert(x, t.right);</span><br><span class="line">&#125;</span><br><span class="line">return balance(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对于AVL树的插入，和二叉查找树的插入过程一摸一样，只是每插入一个节点，要<font color="red">对插入节点到根节点路径上的所有节点进行平衡调整。</font></p><ol start="5"><li><font color="blue"><b>remove(T x)</b></font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从AVL树中删除节点</span><br><span class="line"> * @param x 删除的节点值</span><br><span class="line"> */</span><br><span class="line">public void remove(T x) &#123;</span><br><span class="line">root = remove(x, root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;==============================================================&quot;</span><br><span class="line"></span><br><span class="line">private AvlNode&lt;T&gt; remove(T ele,AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">//如果当前节点为空，说明树中不存在要删除的节点值，直接返回</span><br><span class="line">if (t == null)</span><br><span class="line">return t;</span><br><span class="line">//将当前节点值和删除值比较</span><br><span class="line">int res = ele.compareTo(t.ele);</span><br><span class="line">//删除值大于当前节点值，向节点的右子树查询</span><br><span class="line">if (res &lt; 0) &#123;</span><br><span class="line">t.left = remove(ele, t.left);</span><br><span class="line">&#125;</span><br><span class="line">//删除值小于当前节点值，向节点的左子树查询</span><br><span class="line">else if (res &gt; 0) &#123;</span><br><span class="line">t.right= remove(ele, t.right);</span><br><span class="line">&#125;</span><br><span class="line">//找到要删除的节点</span><br><span class="line">//如果要删除的节点左右子树都不为空，</span><br><span class="line">//那么就将该节点右子树中最小的值代替当前节点的值并递归删除右子树中最小的值</span><br><span class="line">else if (t.left != null &amp;&amp; t.right != null) &#123;</span><br><span class="line">t.ele = finMin(t.right).ele;</span><br><span class="line">t.right = remove(t.ele, t.right);</span><br><span class="line">&#125;</span><br><span class="line">//如果要删除的节点左右子树有一个或两个不存在，直接删除</span><br><span class="line">else</span><br><span class="line">t = (t.left != null) ? t.left : t.right;</span><br><span class="line">//每次删除后重新对AVL树进行调整</span><br><span class="line"></span><br><span class="line">return balance(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“===========================================================”</span><br><span class="line"></span><br><span class="line">private AvlNode&lt;T&gt; finMin(AvlNode&lt;T&gt; t) &#123;</span><br><span class="line">if (t.left == null) &#123;</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br><span class="line">return finMin(t.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对于删除节点，无疑更为麻烦。但是就像插入方法一样。我们<font color="red">使用二叉查找树的删除方法，最后不直接返回t，而是对删除节点到根节点上的每一个节点进行平衡调整后再返回，即返回balance(t)</font>，这是可行的！<br>为了证明可行，下面推导一种删除后需要LL调整的情形：<br><img src="/2019/10/18/数据结构-树/7.png" alt>对于需要RR调整和另外两种调整的情形类似。</p><hr>二叉查找树和AVL树介绍告一段落，对于树要学的还有很多。另外可以发现，树相关的问题大多可以用递归来解决，因此能够理解并运用递归非常重要。(参考书籍：数据结构和算法分析(Java语言描述)》)]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AVL树 </tag>
            
            <tag> 递归 </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉查找树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想之内部类</title>
      <link href="/2019/10/14/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2019/10/14/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>可以将一个类的定义放在另一个类的定义内部，这就是内部类，Java的内部类用者很多妙用和特性。但对于内部类，总是有一些不明白的地方，最近看了书，算是有所收获，来记录一下内部类相关知识。</p><hr><a id="more"></a><p>内部类主要分为一下几种(还有一些接口内部类省略)</p><ol><li><b>非静态内部类</b><ol><li>普通内部类</li><li>局部内部类</li><li>匿名内部类(前面介绍工厂模式用过，这里不赘述)</li></ol></li><li><b>静态内部类(嵌套类)</b></li></ol><h1 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h1><ul><li><p><font color="blue"><b>非静态内部类的创建</b></font><br>非静态内部类的创建必须依赖于其外部类(稍后会说到为什么)，对于非静态内部类而言，在拥有外部类对象之前是不可能创建内部类对象的。</p></li><li><p><font color="blue"><b>创建内部类对象格式</b></font><br><font color="red"><b>外部类名.内部类名 内部类对象名=外部类对象.new 内部类名()</b></font></p></li><li><p><font color="blue"><b>指向外部类的引用</b></font><br>在内部类中，使用<font color="blue"><b>外部类.this</b></font>可以获取对外部类对象的引用。直接使用this就是对自身的引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//外部类</span><br><span class="line">public class DoThis &#123;</span><br><span class="line">    void f() &#123;</span><br><span class="line">        System.out.println(&quot;DoThis.f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//DoThis类的内部类</span><br><span class="line">    public class Inner&#123;</span><br><span class="line">//返回对外部类对象的引用</span><br><span class="line">        public DoThis outer() &#123;</span><br><span class="line">            //通过外部类名.this获取外部类对象的引用</span><br><span class="line">            return DoThis.this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//先创建外部类对象</span><br><span class="line">        DoThis dt=new DoThis();</span><br><span class="line">通过外部类对象创建内部类对象</span><br><span class="line">        DoThis.Inner inner = dt.new Inner();</span><br><span class="line">        DoThis outer = inner.outer();</span><br><span class="line">        System.out.println(outer == dt);      //两个引用指向同一个对象，因此返回true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>内部类对象和外部类对象的关系</b></font><br>当生成一个内部类对象时，该对象与制造它的外部类对象之间存在着一种联系，它能够无条件的访问其外部类对象的所有成员。内部类自动拥有对其外围类所有成员的访问权，这是如何做到的呢？<br><font color="red">当某个外部类对象创建了一个内部类对象时，该内部类对象会自动获取一个指向该外部类对象的引用。然后在使用内部类来访问外部类的成员时，就会使用那个引用来操作。</font><br>因为内部类中会有一个指向外部类对象的引用，因此内部类对象的创建必须依靠外部类对象，否则无法获取到该引用。</p></li><li><p><font color="blue"><b>局部内部类</b></font><br>在一个方法的作用域内(而不是在类内)创建一个完整的类，这被称为局部内部类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class Parcel6 &#123;</span><br><span class="line">    private void inter(boolean b) &#123;</span><br><span class="line">        if (b) &#123;</span><br><span class="line">            //该类被嵌入在if语句的作用域内，这并不是说该类的创建是有条件的，它其实和别的类一起编译过了，</span><br><span class="line">            // 然而在定义该类的作用域之外，他是不可用的。除此之外，它与普通的类一样</span><br><span class="line">            class Tracking&#123;</span><br><span class="line">                private String id;</span><br><span class="line"></span><br><span class="line">                Tracking(String s) &#123;</span><br><span class="line">                    id = s;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String get() &#123;</span><br><span class="line">                    return id;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Tracking t = new Tracking(&quot;局部内部类&quot;);</span><br><span class="line">            System.out.println(t.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//在方法之外无法访问Tracking类</span><br><span class="line">//Tracking t = new Tracking(&quot;局部内部类&quot;);</span><br><span class="line"></span><br><span class="line">    public void track() &#123;</span><br><span class="line">        inter(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Parcel6 p=new Parcel6();</span><br><span class="line">        p.track();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意，<font color="blue">上面代码中Tracking类是一个局部内部类，它是inter(boolean b)方法的一部分，而不是Parcel6类的一部分。所以，在方法之外不能访问该内部类。</font></p><h1 id="静态内部类-嵌套类"><a href="#静态内部类-嵌套类" class="headerlink" title="静态内部类(嵌套类)"></a>静态内部类(嵌套类)</h1><p>如果不需要内部类对象和其外部类对象之间的引用关系，可以将类声明为static，这通常称为嵌套类。需要牢记：普通内部类(包括局部内部类)对象隐式的保存了一个引用，指向创建它的外部类对象，而static不存在这个引用。<br>这也就是说，嵌套类的创建不需要依赖于外部类的对象。</p><ul><li><p><font color="blue"><b>嵌套类创建</b></font><br><font color="red">外部类名.内部类名 对象名=new 内部类名()</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//外部类</span><br><span class="line">public class Practice18 &#123;</span><br><span class="line">//内部类</span><br><span class="line">    protected static class Inner&#123;</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;你好，嵌套类&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //对于嵌套类(静态内部类)，不需要创建其外围类对象啊，通过外围类名可以直接调用</span><br><span class="line">        Practice18.Inner inner = new Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>多层类的嵌套</b></font><br>一个内部类被嵌套多少层并不重要，他能透明的访问所有它嵌入的外围类的所有成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//最外围类</span><br><span class="line">public class Practice20 &#123;</span><br><span class="line">    //创建内部类对象</span><br><span class="line">    Practice20.Innerclass1 innerclass1=new Innerclass1();</span><br><span class="line"></span><br><span class="line">    //创建内部类的内部类对象</span><br><span class="line">    Practice20.Innerclass1.Innerclass2 innerclass2=innerclass1.new Innerclass2();</span><br><span class="line"></span><br><span class="line">    private void show() &#123;</span><br><span class="line">        System.out.println(&quot;Practice20.show()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //内部类</span><br><span class="line">    private class Innerclass1&#123;</span><br><span class="line">        //创建内部类对象</span><br><span class="line">        Innerclass1.Innerclass2 innerclass2 = new Innerclass2();</span><br><span class="line"></span><br><span class="line">        private void show() &#123;</span><br><span class="line"></span><br><span class="line">            //对外围类的引用</span><br><span class="line">            Practice20.this.show();</span><br><span class="line">            System.out.println(&quot;Innerclass1.show()&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //内部类的内部类</span><br><span class="line">        private class Innerclass2&#123;</span><br><span class="line">            private void show() &#123;</span><br><span class="line"></span><br><span class="line">                //对最外围类的引用</span><br><span class="line">                Practice20.this.show();</span><br><span class="line"></span><br><span class="line">                //对外围类的引用</span><br><span class="line">                Innerclass1.this.show();</span><br><span class="line"></span><br><span class="line">                System.out.println(&quot;Innerclass2.show()&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//创建最外部类对象</span><br><span class="line">        Practice20 p=new Practice20();</span><br><span class="line">        p.show();</span><br><span class="line">        System.out.println(&quot;===============&quot;);</span><br><span class="line">//通过最外部类对象创建其内部类对象</span><br><span class="line">        Practice20.Innerclass1 innerclass1 = p.new Innerclass1();</span><br><span class="line">        innerclass1.show();</span><br><span class="line">        System.out.println(&quot;===============&quot;);</span><br><span class="line">//通过内部类对象创建内部类的内部类对象</span><br><span class="line">        Practice20.Innerclass1.Innerclass2 innerclass2=innerclass1.new Innerclass2();</span><br><span class="line">        innerclass2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>当出现下列情况，即<font color="red"><b>子类和父类不在一个包下时，子类如果想创建父类内部类的对象，那么父类的内部类构造器必须为public，否则子类无法访问到父类内部类的构造器。</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//Pricitice6有一个protected修饰的内部类，如果不显式指明，其构造方法也是protected的</span><br><span class="line">public class Pricitice6 &#123;</span><br><span class="line">    protected class Inner implements inter&#123;</span><br><span class="line">//显式指明public构造方法</span><br><span class="line">public Inner() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void show() &#123;</span><br><span class="line">            System.out.println(&quot;内部类实现的接口&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=========================================================================</span><br><span class="line">//在另一个包下，有Pricitice6的一个子类Pricitice6Test</span><br><span class="line">public class Pricitice6Test extends Pricitice6 &#123;</span><br><span class="line">    public inter geta() &#123;</span><br><span class="line">//在另一个包下，如果想要创建其父类的内部类对象，那么要求该内部类的构造方法必须是public</span><br><span class="line">//否则子类无法访问到其父类内部类的构造器(因为不在一个包下)</span><br><span class="line">        return new Inner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Pricitice6Test p=new Pricitice6Test();</span><br><span class="line">        Pricitice6Test.Inner inner=p.new Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Java基础 </tag>
            
            <tag> 内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之工厂模式</title>
      <link href="/2019/10/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍工厂模式的两种实现方式：即接口实现和匿名内部类实现。在介绍工厂模式之前，会先对接口的一些细节性知识做一个记录和小结。</p><hr><a id="more"></a><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul><li><p><font color="blue"><b>接口的访问权限</b></font></p><ul><li><b>public</b><br>公共接口，所有类都能访问</li><li><b>default</b><br>包访问权限，只有同一个包内的类可以访问</li></ul></li><li><p><font color="blue"><b>接口的变量</b></font><br>可以含有变量，但是接口中的变量默认都是sttaic final public修饰，即接口中只有常量。</p></li><li><p><font color="blue"><b>接口的方法</b></font><br>对于接口中的方法可以显式的声明为public，也可以不声明，接口中的方法默认是public的。因此当实现一个接口时，在接口中被定义的方法必须为public，否则会报错。接口中可以有三种方法</p><ul><li><p><b>默认方法(default修饰)</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">1. 接口方法和父类方法参数列表和返回值一样，那么&quot;类优先原则&quot;，使用父类方法</span><br><span class="line">interface inter3&#123;</span><br><span class="line">default void show() &#123;</span><br><span class="line">System.out.println(&quot;接口方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class sub extends classDefault implements inter3 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class classDefault &#123;</span><br><span class="line">public void show() &#123;</span><br><span class="line">System.out.println(&quot;父类方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">sub s=new sub();</span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">Output：</span><br><span class="line">父类方法</span><br><span class="line"></span><br><span class="line">2. 接口方法和父类方法参数列表不同时，构成重载</span><br><span class="line">3. 接口方法和父类方法参数列表一样，返回值不一样时，报错，因为返回值不同不构成重载。</span><br></pre></td></tr></table></figure></li><li><p><b>抽象方法(没有方法体)</b></p></li><li><p><b>静态方法</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">JDK8中，添加了静态方法</span><br><span class="line">interface inter3&#123;</span><br><span class="line">static void show() &#123;</span><br><span class="line">System.out.println(&quot;接口方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class sub extends classDefault implements inter3 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class classDefault &#123;</span><br><span class="line">public void show() &#123;</span><br><span class="line">System.out.println(&quot;父类方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">sub s=new sub();</span><br><span class="line">s.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">同样的，也是类优先原则。不同的是，接口中的静态方法和类一样，可以使用接口直接调用。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="工厂模式-接口"><a href="#工厂模式-接口" class="headerlink" title="工厂模式(接口)"></a>工厂模式(接口)</h1><ol><li>需要两个接口，一个是工厂接口，一个是想要的实现类接口(比如这里最后想要得到Animal对象，那就创建一个Animal接口)</li><li>创建不同的类来实现Animal。这里我想要一个狗和一个猫，那我就分别创建两个类来实现Animal接口。<br>如果还想要别的动物，那就创建再创建类来实现Animal接口。</li><li>为每一个实现类创建一个单独的工厂类，每一个工厂类都实现工厂接口。这样通过不同的工厂类就能够得到不同的动物实现类。</li><li>最后只需要传入相应的工厂类即可得到不同的Animal实现类，即得到不同的动物。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//Animal接口</span><br><span class="line">interface Animal&#123;</span><br><span class="line">    void eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工厂接口</span><br><span class="line">interface AnimalFactory&#123;</span><br><span class="line">    Animal getAnimal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Animal接口实现类--Dog</span><br><span class="line">class Dog implements Animal &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName() + &quot; eat meet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Animal接口实现类--Cat</span><br><span class="line">class Cat implements Animal&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName() + &quot; eat fish&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//相应实现类的工厂实现类</span><br><span class="line">class DogFactory implements AnimalFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//相应实现类的工厂实现类</span><br><span class="line">class CatFactory implements AnimalFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Animal getAnimal() &#123;</span><br><span class="line">        return new Cat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Factories &#123;</span><br><span class="line">    //静态方法，返回Animal接口的实现类(多态)</span><br><span class="line">    public static Animal CreateAnimal(AnimalFactory factory) &#123;</span><br><span class="line">        return factory.getAnimal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Factories.CreateAnimal(new DogFactory()).eat();</span><br><span class="line">        Factories.CreateAnimal(new CatFactory()).eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">Output：</span><br><span class="line">Dog eat meet</span><br><span class="line">Cat eat fish</span><br></pre></td></tr></table></figure></li></ol><h1 id="工厂模式-匿名内部类-Lambda表达式"><a href="#工厂模式-匿名内部类-Lambda表达式" class="headerlink" title="工厂模式(匿名内部类+Lambda表达式)"></a>工厂模式(匿名内部类+Lambda表达式)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">//Animal接口</span><br><span class="line">interface Animal&#123;</span><br><span class="line">    void eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//工厂接口</span><br><span class="line">interface AnimalFactory&#123;</span><br><span class="line">    Animal getAnimal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Animal接口实现类--Dog</span><br><span class="line">class Dog implements Animal &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName() + &quot; eat meet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">//使用匿名内部类实现工厂接口</span><br><span class="line">    public static AnimalFactory factory = () -&gt; new Dog();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Animal接口实现类--Cat</span><br><span class="line">class Cat implements Animal&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void eat() &#123;</span><br><span class="line">        System.out.println(this.getClass().getSimpleName() + &quot; eat fish&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">//使用匿名内部类实现工厂接口</span><br><span class="line">    public static AnimalFactory factory = () -&gt; new Cat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Factories &#123;</span><br><span class="line">    //静态方法，返回Animal接口的实现类(多态)</span><br><span class="line">    public static Animal CreateAnimal(AnimalFactory factory) &#123;</span><br><span class="line">        return factory.getAnimal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//调用不同Animal实现类的类变量作为参数传入</span><br><span class="line">        Factories.CreateAnimal(Dog.factory).eat();</span><br><span class="line">        Factories.CreateAnimal(Dog.factory).eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">Dog eat meet</span><br><span class="line">Cat eat fish</span><br></pre></td></tr></table></figure><p>这种方式不同为每一个Animal实现类单独创建一个工厂实现类，而是以匿名内部类的方式实现工厂接口并作为相应动物类的静态变量，看起来更为优雅简单。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 接口 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 匿名内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写简单的LinkedList集合</title>
      <link href="/2019/10/13/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84LinkedList%E9%9B%86%E5%90%88/"/>
      <url>/2019/10/13/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84LinkedList%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>前面介绍了一个简单了AyyayList集合，现在来继续整个复杂一点的，那就是双向链表组成的LinkedList集合。</p><hr><a id="more"></a><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><p>集合底层是一个带头节点和尾节点的双向链表，主要步骤和完成的功能</p><ol><li>创建一个节点类，可以是一个私有的嵌套类</li><li>创建一个链表类</li><li>一个私有的内部类实现了Iterator接口，作为迭代器</li><li>实现的接口方法<ol><li>isEmpty()、clear()、size()等基础方法</li><li>add()方法几种重载形式、get()方法</li><li>set()方法、remove()方法</li></ol></li><li>内部方法<br>我们知道，当我们在使用链表进行操作的时候，输入的总是值或者是index位置，但是实际上我们需要通过位置来定位到链表中具体的节点从而对链表进行操作。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ConcurrentModificationException;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line">public class MyLinkedList&lt;T&gt; implements Iterable&lt;T&gt; &#123;</span><br><span class="line">    //记录元素个数</span><br><span class="line">    private int size = 0;</span><br><span class="line">    //分为指向头节点和为尾节点</span><br><span class="line">    private Node&lt;T&gt; first;</span><br><span class="line">    private Node&lt;T&gt; last;</span><br><span class="line">    //用于判断迭代器是否过时</span><br><span class="line">    private int modeCount = 0;</span><br><span class="line"></span><br><span class="line">    //节点类</span><br><span class="line">    private static class Node&lt;T&gt;&#123;</span><br><span class="line">        private Node&lt;T&gt; pre;</span><br><span class="line">        private Node&lt;T&gt; next;</span><br><span class="line">        private T d;</span><br><span class="line">        //构造方法</span><br><span class="line">        public Node(T ele, Node p, Node n) &#123;</span><br><span class="line">            d = ele;</span><br><span class="line">            this.pre = p;</span><br><span class="line">            this.next = n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //以下为接口方法</span><br><span class="line">    /*=========================================*/</span><br><span class="line">    /**</span><br><span class="line">     * 构造方法</span><br><span class="line">     */</span><br><span class="line">    public MyLinkedList() &#123;</span><br><span class="line">        doclear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清空集合</span><br><span class="line">     */</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        doclear();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建带头节点的链表</span><br><span class="line">     */</span><br><span class="line">    public void doclear() &#123;</span><br><span class="line">        size = 0;</span><br><span class="line">        first = new Node&lt;&gt;(null, null, null);</span><br><span class="line">        last = new Node&lt;&gt;(null, first, null);</span><br><span class="line">        first.next = last;</span><br><span class="line">        modeCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否为空</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return size() == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回集合元素个数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 移除指定位置元素</span><br><span class="line">     * @param index</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T remove(int index) &#123;</span><br><span class="line">        return remove(getNode(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改指定位置元素的值</span><br><span class="line">     * @param index</span><br><span class="line">     * @param val</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T set(int index, T val) &#123;</span><br><span class="line">        Node&lt;T&gt; p = getNode(index);</span><br><span class="line">        T oldValue = p.d;</span><br><span class="line">        p.d = val;</span><br><span class="line">        return oldValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 指定位置添加元素</span><br><span class="line">     * @param index</span><br><span class="line">     * @param x</span><br><span class="line">     */</span><br><span class="line">    public void add(int index, T x) &#123;</span><br><span class="line">        addBefore(getNode(index, 0, size()), x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 默认尾添加</span><br><span class="line">     * @param ele</span><br><span class="line">     */</span><br><span class="line">    public void add(T ele) &#123;</span><br><span class="line">        add(size(), ele);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定位置的元素</span><br><span class="line">     * @param index</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T get(int index) &#123;</span><br><span class="line">        return getNode(index).d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回一个迭代器，用于遍历链表</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">        return new LinkedListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //以下为内部方法</span><br><span class="line">    /*===========================================*/</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 内部方法</span><br><span class="line">     * @param p</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private T remove(Node&lt;T&gt; p) &#123;</span><br><span class="line">        T ele = p.d;</span><br><span class="line">        p.pre.next = p.next;</span><br><span class="line">        p.next.pre = p.pre;</span><br><span class="line">        size--;</span><br><span class="line">        modeCount++;</span><br><span class="line">        return ele;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定索引元素值</span><br><span class="line">     * @param index</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Node&lt;T&gt; getNode(int index) &#123;</span><br><span class="line">        return getNode(index, 0, size() - 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回指定索引元素节点</span><br><span class="line">     * @param index</span><br><span class="line">     * @param lower</span><br><span class="line">     * @param upper</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private Node&lt;T&gt; getNode(int index, int lower, int upper) &#123;</span><br><span class="line">        Node&lt;T&gt; p;</span><br><span class="line">        if (index &lt; lower || index &gt; upper) &#123;</span><br><span class="line">            throw new IndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        if (index &lt; size() / 2) &#123;</span><br><span class="line">            p = first.next;</span><br><span class="line">            for (int i = 0; i &lt; index; i++) &#123;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            p = last;</span><br><span class="line">            for (int i = size(); i &gt; index; i--) &#123;</span><br><span class="line">                p = p.pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 插入到指定节点前面</span><br><span class="line">     * @param p</span><br><span class="line">     * @param ele</span><br><span class="line">     */</span><br><span class="line">    private void addBefore(Node&lt;T&gt; p, T ele) &#123;</span><br><span class="line">        p.pre = p.pre.next = new Node(ele, p.pre, p);</span><br><span class="line">        size++;</span><br><span class="line">        modeCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //私有内部类，实现Iterator接口，用作迭代器</span><br><span class="line">    private class LinkedListIterator implements Iterator&lt;T&gt; &#123;</span><br><span class="line">        private Node&lt;T&gt; current = first.next;</span><br><span class="line">        private int expCount = modeCount;</span><br><span class="line">        private boolean canRemove = false;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return current!=last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public T next() &#123;</span><br><span class="line">            if (modeCount != expCount) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!hasNext()) &#123;</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">            T ele = current.d;</span><br><span class="line">            current = current.next;</span><br><span class="line">            canRemove = true;</span><br><span class="line">            return ele;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void remove() &#123;</span><br><span class="line">            if (expCount != modeCount) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!canRemove) &#123;</span><br><span class="line">                throw new IllegalStateException();</span><br><span class="line">            &#125;</span><br><span class="line">            MyLinkedList.this.remove(current.pre);</span><br><span class="line">            expCount++;</span><br><span class="line">            canRemove = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>一个简单地双向链表实现的LinkedList集合就完成了，其实难度并不高，但是在上手之前，最好先明确自己要实现什么功能(也就是实现几个接口方法)，有了大方向之后在动手实现就会事半功倍。]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想之final和多态</title>
      <link href="/2019/10/13/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8Bfinal%E5%92%8C%E5%A4%9A%E6%80%81/"/>
      <url>/2019/10/13/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8Bfinal%E5%92%8C%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>多态是Java语言面向对象的三大特征之一，也是Java很有特色的部分。这里对于多态的基本知识不做赘述，主要关注多态的一些细节知识。</p><hr><a id="more"></a><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>final通常指的是”这是不可变的”，它可以用来修饰数据、方法、类，下面就分别谈谈这三种用法</p><ul><li><p><font color="blue">final数据<b></b></font></p><ul><li><b>final修饰基本数据类型</b><br>表示该变量不可改变，在对这个常量定义的时候，必须对其进行赋值。一个既是final又是static的字段只占据一块不可改变的空间，通常被称为编译期常量。</li><li><b>final修饰对象引用</b><br>表示该对象引用不能再指向其他的对象，即引用指向不可变，但是对象自身数据却是可以改变的。</li><li><b>final数据的初始化</b><br>对于final字段(成员变量)，<font color="red">要么在定义时初始化，要么在构造器中对其进行初始化</font>。这保证了final字段在使用前总被初始化</li><li><b>final参数</b><br>Java允许在方法的参数列表中以声明的方式将参数指明为final，这就表示无法在方法中改变参数的值或参数引用所指向的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void f(final int i) &#123;</span><br><span class="line">//无法对i重新赋值</span><br><span class="line">       //i = 0;</span><br><span class="line">       System.out.println(i);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><font color="blue">final方法<b></b></font><br>使用final方法主要是为了把方法锁定，以防止任何继承类修改它的含义，即确保在继承中使方法的行为保持不变，且不会被覆盖</p><ul><li><b>final和private关键字</b><br><font color="blue">类中所有的private关键字都隐式的指定为final</font>。因为你无法取用private方法，自然也就无法覆盖它。<br>对于final和private，稍后会在多态提到</li></ul></li><li><p><font color="blue">final类<b></b></font><br>当一个类整体定义为final时，该类就不可被继承，但是final类的字段可以不是final。对于final类中的方法，因为final类是不可被继承的，因此final类的所有方法都不能被覆盖，因此这些方法都隐式的被指定为final。</p></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>Java中除了static和final方法(private属于final方法)，其他所有方法都是后期绑定。由于static和final方法在编译期进行了解析，那么也就不存在多态，因此可以得出结论：static、private、final修饰的方法不存在多态。</p><ol><li>static方法是属于类的方法，对于所有的对象不会有不同的行为</li><li>final方法和private方法不能被重写覆盖，自然也就不会产生多态了</li></ol><ul><li><font color="blue"><b>不能覆盖私有方法</b></font><br>下面一段代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class BB extends PrivateTest&#123;</span><br><span class="line">    public void show() &#123;</span><br><span class="line">        System.out.println(&quot;privateOverride&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class PrivateTest &#123;</span><br><span class="line">    private void show() &#123;</span><br><span class="line">        System.out.println(&quot;private f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PrivateTest p = new BB();</span><br><span class="line">        p.show();</span><br><span class="line">        BB b=new BB();</span><br><span class="line">        b.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">============</span><br><span class="line">Output：</span><br><span class="line">private f()</span><br><span class="line">privateOverride</span><br></pre></td></tr></table></figure></li></ul><p>测试可以看出，private方法并没有被覆盖，即<font color="red">父类的private修饰的show()方法对子类是屏蔽的，子类的show()方法相当于是一个全新的方法。</font></p><ul><li><font color="blue"><b>不能覆盖字段</b></font><br>下面一段代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Div extends FinalField&#123;</span><br><span class="line">    public int field = 1;</span><br><span class="line">    public int getField() &#123;</span><br><span class="line">        return field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class FinalField &#123;</span><br><span class="line">    public int field = 0;</span><br><span class="line">    public int getField() &#123;</span><br><span class="line">        return field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        FinalField f = new Div();</span><br><span class="line">        //父类的field字段</span><br><span class="line">        System.out.println(f.field);</span><br><span class="line">        //子类的getField方法，返回子类的field字段</span><br><span class="line">        System.out.println(f.getField());</span><br><span class="line">        Div d=new Div();</span><br><span class="line">        //子类的field字段</span><br><span class="line">        System.out.println(d.field);</span><br><span class="line">        //子类的getField方法</span><br><span class="line">        System.out.println(d.getField());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==============</span><br><span class="line">Output：</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li></ul><p><font color="red">当Div对象(子类对象)向上转型为父类对象时，任何字段访问操作都将由编译器解析，因此不是多态的</font>。可以这么理解，在子类对象中，为父类和子类的field字段分配了两块不同的空间。所以在使用时，不建议给父类和子类字段取相同的名字。</p><ul><li><font color="blue"><b>构造器内部的多态</b></font><br>下面一段代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class AAA &#123;</span><br><span class="line">    void draw() &#123;</span><br><span class="line">        System.out.println(&quot;father.draw()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AAA() &#123;</span><br><span class="line">        System.out.println(&quot;father.draw() before&quot;);</span><br><span class="line">//父类构造器调用了draw()方法</span><br><span class="line">        draw();</span><br><span class="line">        System.out.println(&quot;father.draw() after&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BBB extends AAA&#123;</span><br><span class="line">    private int i = 1;</span><br><span class="line"></span><br><span class="line">    BBB(int i) &#123;</span><br><span class="line">//子类构造器首先执行父类构造器</span><br><span class="line">        this.i = i;</span><br><span class="line">        System.out.println(&quot;BBB+&quot;+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void draw() &#123;</span><br><span class="line">        System.out.println(&quot;son.draw():&quot; + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PolyConstructors &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        BBB b = new BBB(5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">===============</span><br><span class="line">Output：</span><br><span class="line">father.draw() before</span><br><span class="line">son.draw():0</span><br><span class="line">father.draw() after</span><br><span class="line">BBB+5</span><br></pre></td></tr></table></figure></li></ul><p>在上面这段测试中，子类BBB重写了父类的draw方法。在创建子类对象时，会先执行父类的构造器。那么在父类构造器中调用的肯定是子类的draw方法(多态)，这没有问题。但是我们在创建子类对象时期望的是son.draw():5而不是son.draw():0，因为我们传递的i的参数为i=5，这就出现了错误。<br>这是因为，<font color="red">在所有代码执行之前，虚拟机会将分配给对象的空间初始化成二进制0(JVM虚拟机中讲到过)，而父类构造器中执行draw方法时，子类对i的赋值还没有进行，此时i仍是初始化的0，这样就出现了问题。</font></p>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想之复用类</title>
      <link href="/2019/10/12/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%A4%8D%E7%94%A8%E7%B1%BB/"/>
      <url>/2019/10/12/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%A4%8D%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>这次主要介绍一下访问权限修饰符的一些细节和复用类的几种方法</p><hr><a id="more"></a><h1 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h1><p>我们都知道，Java中有四种访问权限修饰符，它们从大到小依次为<font color="red">public-&gt;protected-&gt;包访问权限(没有关键字)-&gt;private</font>。</p><ol><li>为什么要设置访问权限控制？<br>当你编写一个代码给别人用的时候(例如写一个类库，后面假设就是类库)，你可能会发现类库中的某些代码或者方法有更好的实现方式，因此你可能需要对代码进行反复修改。举个例子，JDK7中的HashMap使用的是数据+链表实现，后来发现链表较长时效率不高，因此就改成了数组+链表+红黑树实现。<br>但是你在修改代码的过程中，你需要确保使用你类库的人不会因为你改动的这些代码而受到影响。这很容易理解，别人可能正在用你的一些方法，而你把这个方法删掉了，那么别人的代码就用不了了。这时候，你就需要确认那些地方是类库使用者用不到的，那些地方是使用者正在使用的。因此Java就提供了访问权限控制，供类库开发人员向使用者指明哪些是可用的，哪些是不可用的。这样就很容易的知道你能够改动哪些部分而不会影响别人的使用。</li></ol><p>总的来说，控制对成员的访问权想有两个原因<br>    1. 为了使用户不要触碰那些它们不该触碰的部分，这些部分对类的内部操作是必要的，但是并不属于使用者所需要接口的一部分<br>    2. 也是最重要的，<font color="blue">为了让类库设计者可以更改类的内部工作方式而不必担心这样会对使用者产生重大影响</font></p><h1 id="复用类"><a href="#复用类" class="headerlink" title="复用类"></a>复用类</h1><ul><li><p><font color="bllue"><b>组合语法(has-a关系)</b></font><br>实现很简单，只需要在新的类中产生现有类的对象，由于新的类是由现有类的对象组成，所以这种方法成为组合。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class ClassTest&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class combimation &#123;</span><br><span class="line">    //在新类中产生ClassTest类对象和String类对象</span><br><span class="line">    private ClassTest c = new ClassTest();</span><br><span class="line">    private String s = &quot;abc&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="bllue"><b>继承语法(is-a关系)</b></font><br><font color="blue">子类继承父类时，会自动得到<b>父类所有的字段和方法</b>(即得到父类所有的部分)，这里也包括private修饰的字段和方法，只是子类不能够直接访问这些private字段和方法。但是可以通过反射来访问。</font></p><ul><li>初始化父类<br>当创建一个子类对象时，该子类对象包含了一个父类的子对象，这个子对象和你直接用父类创建的对象是一摸一样的。两者的区别在于直接用父类创建的对象在外部，而子对象被包裹在子类对象的内部。<br>因此，在初始化子类对象时，对子类对象中的父类子对象的初始化是至关重要的。即<font color="red">在子类构造器中调用基类构造器来执行对子对象的初始化，如果没有写，编译器会自动在<b>子类构造器第一行</b>加上对父类无参构造器的调用(super())。</font></li></ul></li></ul><p>注意：在构造器中，<font color="red">super和this关键字不能同时使用，因为两者都必须位于第一行</font>。但是如果只写this来调用子类其他构造方法，编译器会自动添加对父类无参构造方法的调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class ClassTest&#123;</span><br><span class="line">    ClassTest() &#123;</span><br><span class="line">        System.out.println(&quot;父类构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ClassSon extends ClassTest&#123;</span><br><span class="line">    ClassSon() &#123;</span><br><span class="line">        System.out.println(&quot;子类构造器&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassSon(int i) &#123;</span><br><span class="line">//      super();同时写super和this会编译报错</span><br><span class="line">        this();//只写一个this，编译器会隐式的添加对父类无参构造方法的调用</span><br><span class="line">//      super();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">Output：</span><br><span class="line">父类构造器</span><br><span class="line">子类构造器</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java编程思想之初始化与清理</title>
      <link href="/2019/10/12/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/"/>
      <url>/2019/10/12/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E6%B8%85%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>为了巩固基础，特意找来了”Java圣经”之称的《Java编程思想》(第四版)来看，准备一边学习一边做笔记，虽然会慢一点，但是感觉会扎实一点。</p><hr><a id="more"></a><h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><p>方法重载以及其底层原理在前面已经介绍过，就不多说。只需要记住，区分重载方法的规则很简单：<font color="red">每个重载方法都必须有一个独一无二的参数类型列表</font>。</p><ul><li><font color="bllue"><b>涉及基本类型的重载</b></font><br>基本类型能从一个”较小”的类型自动提升至一个”较大的类型”。即<br><font color="red">byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</font>。<br><b>对于char类型，会自动提升至int类型而不是short类型</b><br>如果传递的实际参数大于方法要求的参数，就必须进行显式类型转换，否则编译不通过。</li></ul><h1 id="在构造器中调用构造器"><a href="#在构造器中调用构造器" class="headerlink" title="在构造器中调用构造器"></a>在构造器中调用构造器</h1><p>一个类有多个不同的构造器，如果想要在一个构造器中调用另外一个构造器，可以使用this(通过传递参数调用不同的构造器)。但是，<font color="blue">this()部分必须位于构造器的第一行，这也就意味着尽管可以用this调用以恶搞构造器，但是只能调用一个。</font><br>并且，除了构造器外，不能在任何其他方法中调用构造器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class initTest &#123;</span><br><span class="line">    public initTest() &#123;</span><br><span class="line">        this(10);//this代码必须位于第一行</span><br><span class="line">        this(1, 9); //只能调用一次</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public initTest(int i) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public initTest(int a, int b) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="成员初始化"><a href="#成员初始化" class="headerlink" title="成员初始化"></a>成员初始化</h1><p>初始化顺序：</p><ol><li>父类静态部分(静态代码块和静态成员变量初始化顺序取决于代码上的顺序)</li><li>子类静态部分(静态代码块和静态成员变量初始化顺序取决于代码上的顺序)</li><li>父类非静态代码块和父类成员变量(初始化顺序取决于代码上的顺序)</li><li>父类构造方法</li><li>子类非静态代码块和子类成员变量(初始化顺序取决于代码上的顺序)</li><li>子类构造方法</li></ol><p><font color="red">类是在其任何static成员被访问时加载的(构造器是隐式的static)，静态变量和静态代码块只有在第一次创建对象时初始化一次。</font>这是因为静态部分在类加载过程中进行初始化(前面介绍过)，而类只加载一次，因此静态部分也就只初始化一次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">class staticfield&#123;</span><br><span class="line">    public staticfield(String s) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Father&#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;父类静态代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private static staticfield s=new staticfield(&quot;父类静态变量&quot;);</span><br><span class="line"></span><br><span class="line">    public Father() &#123;</span><br><span class="line">        System.out.println(&quot;Father 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Father 普通代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private staticfield f=new staticfield(&quot;父类成员变量&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Son extends Father&#123;</span><br><span class="line">    private static staticfield s=new staticfield(&quot;子类静态变量&quot;);</span><br><span class="line">    static &#123;</span><br><span class="line">        System.out.println(&quot;子类静态代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Son() &#123;</span><br><span class="line">        System.out.println(&quot;Son 构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    private staticfield f=new staticfield(&quot;子类成员变量&quot;);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;Son 普通代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class staticinit &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Son s=new Son();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">Output：</span><br><span class="line">父类静态代码块</span><br><span class="line">父类静态变量</span><br><span class="line"></span><br><span class="line">子类静态变量</span><br><span class="line">子类静态代码块</span><br><span class="line"></span><br><span class="line">Father 普通代码块</span><br><span class="line">父类成员变量</span><br><span class="line">Father 构造方法</span><br><span class="line"></span><br><span class="line">子类成员变量</span><br><span class="line">Son 普通代码块</span><br><span class="line">Son 构造方法</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写简单ArrayList集合</title>
      <link href="/2019/10/11/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95ArrayList%E9%9B%86%E5%90%88/"/>
      <url>/2019/10/11/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95ArrayList%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>ArrayList集合是Java中最常用的集合类之一，是一个能够扩容的集合，它的底层维护的是一个数组。闲来无事，今天就手写一个简单地ArrayList集合吧。</p><hr><a id="more"></a><h1 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h1><ol><li>可以自动进行扩容，并允许回收老数组</li><li>实现get()和set方法</li><li>提供size()、isEmpty()和clear()方法以及remove()方法、两种不同的add()方法</li><li>能够使用迭代器Iterator</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">public class MyArrayList&lt;T&gt; implements Iterable&lt;T&gt;&#123;</span><br><span class="line">//初始容量，默认为10</span><br><span class="line">    private final int DEFAYLT_VALUE = 10;</span><br><span class="line">//集合中元素个数</span><br><span class="line">    private int size;</span><br><span class="line">//底层数组</span><br><span class="line">    private T[] Array;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造方法</span><br><span class="line">     */</span><br><span class="line">    public MyArrayList() &#123;</span><br><span class="line">//无参构造方法，默认创建大小为10的集合</span><br><span class="line">        grow(10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 清空集合</span><br><span class="line">     */</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        size=0;</span><br><span class="line">        grow(DEFAYLT_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取元素个数</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否为空</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return size == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取指定元素</span><br><span class="line">     * @param index</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public T get(int index) &#123;</span><br><span class="line">//判断参数正确性</span><br><span class="line">        if (index &lt; 0 || index &gt;= size) &#123;</span><br><span class="line">            throw new ArrayIndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        return Array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改指定元素</span><br><span class="line">     * @param index</span><br><span class="line">     * @param newValue</span><br><span class="line">     */</span><br><span class="line">    public void set(int index, T newValue) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt;= size) &#123;</span><br><span class="line">            throw new ArrayIndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        Array[index] = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加方法</span><br><span class="line">     * @param value</span><br><span class="line">     */</span><br><span class="line">    public void add(T value) &#123;</span><br><span class="line">//默认将元素添加到末尾</span><br><span class="line">        add(size, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加方法</span><br><span class="line">     * @param index</span><br><span class="line">     * @param value</span><br><span class="line">     */</span><br><span class="line">    public void add(int index, T value) &#123;</span><br><span class="line">//如果参数小于0，默认插到头部</span><br><span class="line">        if (index &lt; 0) &#123;</span><br><span class="line">            index = 0;</span><br><span class="line">        &#125;</span><br><span class="line">//如果参数大于当前集合中元素个数，默认插到尾部</span><br><span class="line">        if (index &gt;= size) &#123;</span><br><span class="line">            index = size;</span><br><span class="line">        &#125;</span><br><span class="line">//如果集合满，那么就以2倍扩容</span><br><span class="line">//+1是为了防止出现0*2==0的情况</span><br><span class="line">        if (size == Array.length) &#123;</span><br><span class="line">            grow(Array.length * 2 + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = size; i &gt; index; i--) &#123;</span><br><span class="line">            Array[i] = Array[i - 1];</span><br><span class="line">        &#125;</span><br><span class="line">        Array[index] = value;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T remove(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt;= size) &#123;</span><br><span class="line">            throw new ArrayIndexOutOfBoundsException();</span><br><span class="line">        &#125;</span><br><span class="line">        T removeEle = Array[index];</span><br><span class="line">        for (int i = index; i &lt; size; i++) &#123;</span><br><span class="line">            Array[i] = Array[i + 1];</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        return removeEle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 数组扩容</span><br><span class="line">     * @param newSize</span><br><span class="line">     */</span><br><span class="line">    private void grow(int newSize) &#123;</span><br><span class="line">        if (newSize &lt; size) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        T[] oldArr = Array;</span><br><span class="line">        Array = (T[]) new Object[newSize];</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            Array[i] = oldArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//由于容器实现了Iterable接口，所以要重写该方法，返回一个迭代器</span><br><span class="line">    @Override</span><br><span class="line">    public Iterator&lt;T&gt; iterator() &#123;</span><br><span class="line">        return new ArrayListIterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//该类实现了Iterator接口，重写hasNext()、next()、remove()方法</span><br><span class="line">    private class ArrayListIterator implements Iterator&lt;T&gt; &#123;</span><br><span class="line">        private int cur=0;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return cur &lt; size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public T next() &#123;</span><br><span class="line">            if (!hasNext()) &#123;</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">            return Array[cur++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void remove() &#123;</span><br><span class="line">            MyArrayList.this.remove(--cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>这样，一个极其简化的ArrayList集合就写出来了。]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子序列和问题</title>
      <link href="/2019/10/11/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/11/%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>题目：给定一个数组，在数组所有的子序列中找到和最大的子序列。我将用4中解法来对该题进行求解</p><hr><a id="more"></a><h1 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h1><ul><li><p><font color="blue"><b>算法思想</b></font><br>思路很简单，遍历数组所有的子序列，对每个子序列进行求和，找到最大的和并返回</p></li><li><p><font color="blue"><b>代码实现</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 暴力求解</span><br><span class="line"> * @param arr </span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static int maxSubSum(int[] arr) &#123;</span><br><span class="line">int maxsum=0;</span><br><span class="line">//遍历以数组中所有元素开头的子序列</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">//对于每个元素，以该元素开头的所有长度序列都要计算一次</span><br><span class="line">for (int j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">int thissum = 0;</span><br><span class="line">//计算序列和</span><br><span class="line">for (int k = i; k &lt;= j; k++) &#123;</span><br><span class="line">thissum += arr[k];</span><br><span class="line">&#125;</span><br><span class="line">if (maxsum &lt; thissum) &#123;</span><br><span class="line">maxsum = thissum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>时间复杂度</b></font><br>三重循环，所以时间复杂度为O(N3)</p></li></ul><h1 id="优化暴力求解"><a href="#优化暴力求解" class="headerlink" title="优化暴力求解"></a>优化暴力求解</h1><ul><li><p><font color="blue"><b>算法思想</b></font><br>我们需要知道，f(k+1)=k+f(k)，即对于一个子序列，该子序列的和，等于它前一个子序列的和加上一个元素得到。借此可以消除一层循环</p></li><li><p><font color="blue"><b>代码实现</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 优化暴力解法</span><br><span class="line"> * @param arr</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static int maxSubSum1(int[] arr) &#123;</span><br><span class="line">int maxsum=0;</span><br><span class="line">//同样的，遍历以每个元素开头的序列</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">int thissum = 0;</span><br><span class="line">//找到以arr[i]开头的所有序列中最大和序列</span><br><span class="line">for (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">thissum += arr[j];</span><br><span class="line">if (maxsum &lt; thissum) &#123;</span><br><span class="line">maxsum = thissum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxsum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>时间复杂度</b></font><br>双重循环，时间复杂度为O(N2)</p></li></ul><h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><ul><li><font color="blue"><b>算法思想</b></font><br>分治的思想就是把问题分成两个大致相等的子问题，然后递归对它们进行求解这就是”分”；”治”阶段将两个子问题的解修补到一起并可能再做一些少量步骤的附加工作，最后得到整个问题的解。<br>对于这个题，最大子序列可能在三处出现</li></ul><ol><li>该子序列全部位于数组的左边</li><li>改子序列全部位于数组的右边</li><li>该子序列跨越数组中部，即一部分在左边一部分在右边</li></ol><p>因此我们可以进行分治递归求解</p><ul><li><p><font color="blue"><b>代码实现</b></font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 分治算法</span><br><span class="line"> * @param arr</span><br><span class="line"> * @param left 初始值为0</span><br><span class="line"> * @param right 初始值为arr.length-1</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static int maxSubRec(int[] arr, int left, int right) &#123;</span><br><span class="line">//递归出口，当左边界等于右边界时只有一个数，直接返回</span><br><span class="line">if (left == right) &#123;</span><br><span class="line">return arr[left];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int center = (left + right) / 2;</span><br><span class="line">//左递归，求出数组左边部分最大子序列</span><br><span class="line">int leftsum = maxSubRec(arr, left, center);</span><br><span class="line">//右递归，求出数组右边部分最大子序列</span><br><span class="line">int rightsum = maxSubRec(arr, center + 1, right);</span><br><span class="line"></span><br><span class="line">//求出跨越数组中部的子序列左边部分的最大值</span><br><span class="line">int leftbordersum = arr[center];</span><br><span class="line">int maxleftborder = arr[center];</span><br><span class="line">for (int i = center - 1; i &gt;= left; i--) &#123;</span><br><span class="line">maxleftborder += arr[i];</span><br><span class="line">if (leftbordersum &lt; maxleftborder) &#123;</span><br><span class="line">leftbordersum = maxleftborder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//求出跨越数组中部的子序列右边部分的最大值</span><br><span class="line">int rightbordersum = arr[center + 1];</span><br><span class="line">int maxrightborder = arr[center + 1];</span><br><span class="line">for (int i = center +2; i &lt;= right; i++) &#123;</span><br><span class="line">maxrightborder += arr[i];</span><br><span class="line">if (rightbordersum &lt; maxrightborder) &#123;</span><br><span class="line">rightbordersum = maxrightborder;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//leftbordersum+rightbordersum即为数组中间部分的最大值</span><br><span class="line"></span><br><span class="line">//返回三者最大值，即为最大子序列和</span><br><span class="line">return Math.max(Math.max(leftsum, rightsum), leftbordersum + rightbordersum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><font color="blue"><b>时间复杂度</b></font><br>O(NlogN)</p></li></ul><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>我们需要知道，负数不可能是最大子序列的前缀，这不难理解，因为一个负数对于序列和没有任何增益效果反而会使得序列和变小。那么可以推广的到任何负序列也不可能是最大子序列的前缀。由此可以得到动态规划解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 动态规划</span><br><span class="line"> * 时间复杂度：O(n)</span><br><span class="line"> * @param arr</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static int maxSubSumdyn(int[] arr) &#123;</span><br><span class="line">int maxsum=0;</span><br><span class="line">int thissum = 0;</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">thissum += arr[i];</span><br><span class="line">//当前最大子序列和小于当先序列和时，更新最大子序列和</span><br><span class="line">if (maxsum &lt; thissum) &#123;</span><br><span class="line">maxsum = thissum;</span><br><span class="line">&#125;</span><br><span class="line">//当thissum&lt;0时，说明当前子序列和为负，丢弃该子序列</span><br><span class="line">else if (thissum &lt; 0) &#123;</span><br><span class="line">thissum = 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return maxsum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//该算法中加了一个可以得到最大子序列左右边界的实现</span><br></pre></td></tr></table></figure><ul><li><font color="blue"><b>时间复杂度</b></font><br>很明显的。只有一重循环，复杂度为O(N)，是线性的</li></ul><hr>四种解法，动态规划法最优，个人感觉分治算法较为考验细节部分]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 分治算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下之计算机网络和因特网-运输层</title>
      <link href="/2019/10/09/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91-%E8%BF%90%E8%BE%93%E5%B1%82/"/>
      <url>/2019/10/09/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91-%E8%BF%90%E8%BE%93%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>运输层位于应用层和网络层之间，是分层网络体系结构的重要部分。该层为运行在不同主机上的应用进程提供直接的通信服务起着至关重要的作用。其中两个运输层协议TCP和UDP是本次介绍的重点。</p><hr><a id="more"></a><h1 id="概述和运输层服务"><a href="#概述和运输层服务" class="headerlink" title="概述和运输层服务"></a>概述和运输层服务</h1><h2 id="运输层介绍"><a href="#运输层介绍" class="headerlink" title="运输层介绍"></a><font size="5">运输层介绍</font></h2><p>运输层协议为运行在不同主机上的应用进程提供了<font color="blue">逻辑通信</font>功能。运输层协议是在端系统中而不是在路由器中实现的。</p><ul><li>在发送端，运输层将从应用程序接收到的报文转换成运输层分组(报文段)<ul><li>实现的方法是<font color="blue">将应用报文划分为较小的块，并为每块加上一个运输层首部从而生成运输层报文段</font></li><li>然后，在发送端系统中，<font color="blue">运输层将这些报文段传递到网络层，网络层将其封装为网络层分组(数据报)并向目的地发送</font></li></ul></li><li>在接收端，<font color="bllue">网络层从数据报中提取运输层报文段，并将该报文段上交给运输层</font><ul><li><font color="bllue">运输层则处理接收到的报文段，最后将其中的数据交给应用程序</font></li></ul></li></ul><p>通过上述过程可以明确：<font color="blue">网络路由器仅作用于该数据报的网络层字段，即它们不检查封装在该数据报的运输层报文段的字段。</font>事实上网络路由器并没有实现运输层协议。</p><h2 id="运输层和网络层的关系"><a href="#运输层和网络层的关系" class="headerlink" title="运输层和网络层的关系"></a><font size="5">运输层和网络层的关系</font></h2><ul><li>在协议栈中，运输层位于网络层上面，网络层提供了<font color="red">主机之间的逻辑通信</font>，而运输层为运行在不同主机上的<font color="red">进程之间提供了逻辑通信</font></li><li>在端系统中，运输层协议将来自应用进程的报文移动到网络边缘(网络层)，反之亦然。但对有关这些报文在网络核心如何移动不做任何规定。中间路由器既不处理也不识别运输层加载应用层报文上的任何信息。</li><li><font color="blue">运输层能够提供的服务常常受制于网络层协议的服务模型。</font>如果网络层协议无法为主机之间发送的运输层报文段提供延时或带宽保证的话，那么运输层协议也就无法为进程之间发送的应用程序提供延时和带宽保证。</li><li>然而，即使底层网络协议不能再网络层提供相应的服务，运输层协议也能提供某些服务。例如，网络层IP协议是不可靠的，然而应用层协议TCP却是可靠的传输协议。</li></ul><h2 id="因特网运输层概述"><a href="#因特网运输层概述" class="headerlink" title="因特网运输层概述"></a><font size="5">因特网运输层概述</font></h2><p>因特网运输层为应用层提供两种不同的运输层协议</p><ol><li>UDP协议，它提供了一种无连接的、不可靠的的服务</li><li>TCP协议，提供了一种可靠的、面向连接的服务</li></ol><p>在对UDP和TCP进行介绍之前，先简要介绍一下因特网网络层，因特网网络层协议中有一个IP协议(网际协议)，IP协议为主机提供了逻辑通信。<font color="red">IP协议的服务模型是尽力而为交付服务</font>。<br>也就是说，IP尽它最大的努力在通信主机之间交付数据，但它并不做任何保证。他不确保报文段的交付、不保证报文段的按序交付，不保证报文段中数据的完整性(可以理解为三无产品…)。<font color="blue">即IP为不可靠服务。</font><br>初步了解了IP服务模型之后，来总结一下TCP和UDP所提供的服务模型</p><ol><li>TCP和UDP最基本的责任是，<font color="red">将两个端系统间IP的交付服务扩展为运行在端系统上的两个进程之间的交付服务。</font><ul><li>将主机间的交付扩展到进程间的交付被称为运输层的<font color="blue">多路复用和多路分解</font></li></ul></li><li>UDP和TCP还可以通过在其报文段首部中包括差错检查字段来<font color="bllue">提供完整性检查</font></li></ol><p>以上两种服务是最低限度的运输层服务，同时也是UDP仅能提供的两种服务。</p><ul><li>UDP<br>和IP一样，UDP提供了是一种不可靠服务(不止一次提到过)，它不能保证数据能够完整的从一个进程发送到另外一个进程。</li><li>TCP<br>TCP为应用程序提供了几种附加服务<ul><li>可靠数据传输<br>通过使用流量控制、序号、确认和定时器TCP能够确保正确的、有序的将数据交付给接收进程(后面将会具体说到)</li><li>拥塞控制服务<br>前面说到过，该服务是一种提供给因特网的服务，它防止任何一条TCP连接用过多的流量来淹没通信主机之间的链路和交换设备。(后面会着重介绍)</li></ul></li></ul><h1 id="多路分解和多路复用"><a href="#多路分解和多路复用" class="headerlink" title="多路分解和多路复用"></a>多路分解和多路复用</h1><p>多路复用和多路分解，即将网络层提供的主机间的交付服务扩展到运行在主机上的进程间的交付服务。在发送主机中，<font color="blue">发送主机将应用层报文推进套接字，在套接字中为应用层报文加上运输层报文首部字段形成运输层报文段，然后将报文段交付给运输层。</font>同样的在接收主机中，<font color="bllue">运输层实际上并没有直接将数据交付给进程，而是将数据交付给中间的套接字。</font></p><ul><li><font color="bllue"><b>多路分解</b></font><br>将运输层报文段中的数据交付到正确的套接字</li><li><font color="bllue"><b>多路复用</b></font><br>在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息(用于后面的多路分解)从而生成报文段，然后将报文段传递到网络层。</li></ul><h2 id="无连接的多路复用和多路分解"><a href="#无连接的多路复用和多路分解" class="headerlink" title="无连接的多路复用和多路分解"></a><font size="5">无连接的多路复用和多路分解</font></h2><p>如下图<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/1.png" alt><br>在主机A(客户主机)和主机B(服务主机)中各有3个进程，假设每个进程分配了一个套接字(实际上一个进程可能分配多个)。<br>现在<font color="blue">A主机的进程1(端口号为7777)，要向B主机上的进程1(端口号为4567)发送一个应用层报文</font></p><ol><li>将应用层报文推进进程1对应的套接字中，形成如图所示的应用层报文段，该报文段中有这样两个字段。然后将该报文段交付给运输层<ul><li><b>目的端口号</b><br>发送进程的端口号</li><li><b>源端口号</b><br>接受进程的端口号</li></ul></li><li>运输层将接收到的报文段传递给网络层</li><li>网络层将接收到的报文段封装为IP数据报，并尽力的交付给B主机(目的主机)。</li><li>主机B有多个进程，每个进程都有一个UDP套接字和端口号，<font color="red">当报文段从应用层到达时，主机B通过检查该报文段中的目的端口号，将报文段定向(分解)到对应的套接字中。</font><br>在本例中，报文段的目的端口号为4567，那么最终会被交付给B主机的进程1套接字</li><li>套接字将报文段数据取出并交付给B中的接收进程1。</li></ol><p>以上就是无连接的多路分解和多路复用</p><p><b>注意：</b><br><font color="red">一个UDP套接字是由一个二元组全面标识的，该二元组包含一个目的IP地址和一个目的端口号。</font>因此，<font color="red">如果两个UDP报文段有不同的源IP地址或源端口号，但是具有相同的目的IP地址和目的端口号，那么这两个报文段会被定向到同一个目的套接字(目的进程)</font><br>如下图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/2.png" alt></p><h2 id="面向连接的多路复用和多路分解"><a href="#面向连接的多路复用和多路分解" class="headerlink" title="面向连接的多路复用和多路分解"></a><font size="5">面向连接的多路复用和多路分解</font></h2><p>前面说过，UDP的套接字是由一个二元组标识，而<font color="red">TCP的套接字是由一个<b>四元组标识(源IP地址，源端口号，目的IP地址，目的端口号)</b>来标识的</font>。<br>因此，当一个TCP报文段到达一台主机时，该主机使用4个值来将报文段定向(分解)到相应的套接字。和UDP不同的是，<font color="blue">两个具有不同的源IP地址或源端口号的TCP报文段将被定向到两个不同的套接字。</font>如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/3.png" alt></p><ul><li><font color="blue"><b>报文段中源端口号的作用：</b></font><br>假设A向B发送数据，报文段中的源端口号就是运行在A上的进程的端口号。当B要向A发送数据时，B发送的报文段的目的端口号就从这里取值。</li></ul><h1 id="无连接运输：UDP"><a href="#无连接运输：UDP" class="headerlink" title="无连接运输：UDP"></a>无连接运输：UDP</h1><p>UDP做了运输协议能够做的最少工作。<font color="blue">UDP从应用进程得到数据，附上用于多路复用/分解的源和目的端口号，以及两个其他的小字段形成了UDP报文段。</font>然后将报文段交付给网络层。其中，使用UDP时，在发送报文段之前，发送方和接收方的运输层实体之间没有进行握手，正因为如此，UDP被称为无连接运输协议。<br>我们前面说过的<font color="red">DNS应用层协议就是基于UDP运输协议的。</font>当一台主机的DNS应用程序想要进行以恶搞查询时，它构造一个DNS查询报文并将其交给UDP。UDP为此报文添加首部字段封装为UDP报文段并交付给网络层。</p><h2 id="UDP的优点"><a href="#UDP的优点" class="headerlink" title="UDP的优点"></a><font size="5">UDP的优点</font></h2><ul><li>采用UDP时，只要应用进程将数据传递给UDP，UDP就会将数据封装成UDP报文段并立即交付给网络层。而TCP并非如此，TCP有一个拥塞控制机制，当源和目的主机间的一条或多条通信链路变得极为拥塞时来遏制TCP发送方。这样会导致报文段的延时发送。</li><li><b>无需建立连接</b>：TCP在开始数据传输之前会经历三次握手。而UDP却并不需要任何准备即可进行数据传输。因此UDP不会引入建立连接的时延。这也是DNS建立在UDP而非TCP上的原因</li><li><b>无连接状态</b>：TCP需要在端系统中维护连接状态。该连接状态包括接收和发送缓存、拥塞控制参数以及序号和确认号参数。而对于UDP而言，不需要维护连接状态，也不需要跟踪这些参数</li><li><b>分组首部开销小</b>：每个TCP报文段首部为20字节，而UDP报文段首部只有8个字节。</li></ul><p>另外，<font color="red">虽然UDP是不可靠的数据传输协议，但这并不意味着使用UDP的应用不能实现可靠数据传输，可以通过在应用程序自身建立可靠性机制来完成。</font>例如谷歌的Chrome浏览器使用的QUIC协议在UDP之上的应用层协议中是西安了可靠性。</p><h2 id="UDP报文段的结构"><a href="#UDP报文段的结构" class="headerlink" title="UDP报文段的结构"></a><font size="5">UDP报文段的结构</font></h2><p>如图，一个UDP报文段的结构及其首部字段的作用：<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/4.png" alt></p><h2 id="UDP检验和"><a href="#UDP检验和" class="headerlink" title="UDP检验和"></a><font size="5">UDP检验和</font></h2><p>UDP提供了差错检验功能。它的检验和字段用于确定当UDP报文段从源到目的地移动时，其中的bit是否发生了变化。<br><font color="blue">发送方的UDP对报文段中所有16bit字的和进行反码运算，<b>求和时遇到的任何溢出都被回卷</b>。得到的结果放在UDP报文段中的检验和字段中。</font>例如<br>假定有3个16bit的字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0110 0110 0110 0000</span><br><span class="line">0101 0101 0101 0101 </span><br><span class="line">1000 1111 0000 1100</span><br><span class="line"></span><br><span class="line">前两个16bit字的和：</span><br><span class="line">0110 0110 0110 0000</span><br><span class="line">0101 0101 0101 0101 </span><br><span class="line">————————————————————</span><br><span class="line">1011 1011 1011 0101</span><br><span class="line"></span><br><span class="line">再加上第三个16bit字</span><br><span class="line">1011 1011 1011 0101</span><br><span class="line">1000 1111 0000 1100</span><br><span class="line">————————————————————(在这次加法中有溢出，它要被回卷)</span><br><span class="line">0100 1010 1100 0010</span><br><span class="line"></span><br><span class="line">将该结果进行反码运算得到</span><br><span class="line">1011 0101 0011 1101==&gt;这就是检验和</span><br></pre></td></tr></table></figure><p>在接收方，<font color="red">将全部的4个16bit字(包括检验和)加在一起。</font>如果该UDP报文段没有差错，那么在接收方的和应该是<b>1111 1111 1111 1111</b>。</p><h1 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h1><p>《计算机网络自顶向下方法》p134-144，转换图很多很详细，就不赘述了。归纳一下可靠数据传输协议的要点</p><ul><li><b>检验和</b><br>用于判断报文段是否有差错，如果有差错则重传</li><li><b>序号</b></li><li><b>定时器</b><br>当发生丢包或者接收方确认超时时进行重传</li><li><b>肯定和否定确认分组</b><br>对检验和无误的分组返回肯定ACK确认，对有误的分组返回否定NAK确认。</li></ul><h2 id="流水线可靠数据传输协议"><a href="#流水线可靠数据传输协议" class="headerlink" title="流水线可靠数据传输协议"></a><font size="5">流水线可靠数据传输协议</font></h2><p>rdt3.0是一个正确的可靠数据传输协议(见书p141)，但是由于他是一个停等协议，所以性能不能够令人满意。停等协议，即发送方发送一个分组后，只有等到接收方的肯定确认才能发送下一个分组，性能较低。<font color="blue">解决的方法就是不以停等方式运行，允许发送方发送多个分组而无需等待确认。即流水线技术</font><br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/5.png" alt><br>如图，如果要使用流水线技术，那么就不得不考虑：</p><ol><li><font color="blue">每个输送中的分组(不包括重传的)必须有一个唯一的序号。</font></li><li><font color="blue">协议的发送方和接收方两端不得不缓存多个分组</font>，对于接收方，至少应该缓存哪些已发送但没有收到接收方确认的分组，接收方也需要缓存正确接收的分组(后面会说到)。</li><li><font color="blue">怎样处理丢失、损坏以及延时过大(超时)的分组</font></li></ol><h2 id="回退N步-Go-Back-N，GBN"><a href="#回退N步-Go-Back-N，GBN" class="headerlink" title="回退N步(Go-Back-N，GBN)"></a><font size="5">回退N步(Go-Back-N，GBN)</font></h2><p>解决流水线的差错回复有两种基本方法是：<font color="blue">回退N步和选择重传</font>。现在就介绍一下回退N步。<br>在回退N步协议中，允许发送发发送多个分组而不需等待确认。但是在流水线中未确认的分组数不能超过某个最大允许数N。<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/6.png" alt>如图，显示了发送方看到的GBK协议的序号范围。可以将分组序号范围分成4段</p><ol><li><b>[0，base-1]</b>段内的序号对应已经发送并被确认的分组(收到接收方的ACK)。</li><li><b>[base，nextseqnum-1]</b>段内的序号对应已经发送但没有被确认的分组(没有收到接收方的ACK)</li><li><b>[nextseqnum，base+N-1]</b>段内的序号能用于立即要被发送的分组。</li><li><b>[base+N，~]</b>的序号处于窗口外面，不能被分组使用</li></ol><p>随着协议的运行，分组被确认后base向前移动，该窗口在<font color="red">序号空间</font>向前滑动。因此N被称为窗口长度，GBN协议也被称为<font color="red"><b>滑动窗口协议</b></font>。<br>那么问题来了，为什么要限制这些已发送但未被确认的分组数目为N而不允许这些分组无限制数目(即N无穷大)呢？后面会说到<font color="blue">TCP的流量控制和拥塞控制机制是限制窗口长度不能为无限大的的原因。</font></p><p><font color="bllue"><b>对于GBN协议，GBN发送方必须响应三种类型的事件</b></font></p><ul><li><font color="blue"><b>上层的调用</b></font><br>当上层调用rdt_send()时(可以理解为应用层将数据交付给GBN协议)，发送方首先检查发送窗口是否已满，即是否有N个已发送但未被确认的分组。<ul><li>如果窗口未满，则产生一个分组并将其发送，相应的更新变量</li><li>如果窗口已满，将数据返回上层，隐式的指示上层该窗口已满，上层可能过会儿再试。</li></ul></li><li><font color="blue"><b>收到一个ACK</b></font><br>在GBN协议中，对序号n的分组采取<font color="red">累计确认</font>的方式。表明接收方以正确接收序号在n之前(包括n)的所有分组。</li><li><font color="blue"><b>超时事件</b></font><br>协议的名字”回退N步”来源于出现丢失和延时过长分组时发送方的行为。当发送分组时，定时器开始计时，如果超时，则<font color="red">发送方重传所有已发送但还没确认的分组</font>。</li></ul><p><font color="bllue"><b>对于GBN协议，GBN接收方的动作</b></font></p><ul><li>如果一个序号为n的分组被正确接收到，并且按序(即上一次收到的分许序号为n-1)，则接收方为分组n发送一个ACK分组，并将分组中的数据交付给上层。</li><li>在其他情况下，<font color="blue">接收方丢弃该分组，并为最近按序接收的分组重新发送ACK</font>。</li></ul><p>从接收方的动作可以发现，<font color="red">当分组k已接收并被交付时，所有序号比k小的分组必然已经接收并交付。因此说GBK使用累计确认。</font><br>如图给出一个长度为4的GBN协议运行情况<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/7.png" alt></p><p>向上面给出的运行情况一样，<font color="blue">GBN协议中，接收方丢弃所有失序的分组</font>。</p><ul><li><b>优点：</b>接收方不缓存任何失序的分组，需要维护的唯一信息就是下一个按序接收分组的序号。</li><li><b>缺点：</b>丢弃一个正确分组，后续对该分组的重传可能会丢失或出错，从而导致更多的重传。</li></ul><h2 id="选择重传"><a href="#选择重传" class="headerlink" title="选择重传"></a><font size="5">选择重传</font></h2><p>对于GBN协议，当窗口长度和带宽延时较大时，单个分组的差错会引起大量分组的重传，但是许多分组并没有重传的必要。这样会导致更大的时延。顾名思义，<font color="blue">选择重传(SR)协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。</font><br><font color="blue">SR接收方将确认一个正确接受的分组而不管其是否按序。失序的分组n将被缓存，直到n之前的所有分组都被收到。这时才可以将这一批分组按序交付给上层。</font><br><font color="bllue"><b>SR发送方事件和动作</b></font></p><ol><li><b>从上层收到数据</b>。从上层收到数据后，SR发送方检查下一个可用于该分组的序号。如果序号位于发送方窗口内，则将该数据打包并发送；否则和GBN一样，返回给上层。</li><li><b>超时</b>。每个分组都有自己的逻辑定时器，和GBN不同(GBN公用一个定时器)，因为超时后只能发送一个分组。</li><li>收到ACK。<ul><li>如果收到ACK，倘若该分组序号在窗口内，则SR发送方将那个被确认的分组标记为已接收。</li><li>如果该分组序号等于send_base(发送方基序号)，则窗口向前移动到最小的已发送但未确认分组序号处。</li><li>如果窗口移动了并且有未发送的分组序号位于窗口内，则发送这些分组。</li></ul></li></ol><p><font color="bllue"><b>SR接收方事件和动作</b></font></p><ol><li><b>序号在[rec_base，rec_base+N-1]内的分组被正确接收</b>。此时，收到的分组落在接收方窗口内，给发送方回一个ACK。<ul><li>如果该分组以前没有收到过，缓存该分组。</li><li>如果该分组序号等于接收窗口的基序号(rec_base)，则将从该分组开始(包括该分组)的连续的缓存的分组交付给上层(例如之前收到了3，4，5，这一次收到了2，那么就将2，3，4，5一起交付给上层，并将rec_base移动到6)。</li></ul></li><li><b>序号在[rec_base-N,rec_base+N-1]内的分组被正确收到</b>。此时，必须产生一个ACK，即使该分组是接受方以前已经确认过的分组。因为可能虽然接收方确认了该分组，但是发送方并没有收到(ACK丢失)，如果不再次确认，这就导致发送方的send_base一直停在该分组序号处，窗口无法移动</li><li>其他情况，忽略该分组。</li></ol><p>另外，由于分组的序号取模运算。<font color="red">因此窗口的长度必须小于序号空间的一半。</font><br>假设序号空间为[0~3]，窗口长度为3(大于序号空间的一半)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//有可能会出现这种情况：当收到分组0时，无法判断该分组是新的分组还是重传的分组。</span><br><span class="line">0，1，2，3，0，1，2，3</span><br><span class="line">如图8所示</span><br></pre></td></tr></table></figure><p><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/8.png" alt></p><h1 id="面向连接的传输：TCP"><a href="#面向连接的传输：TCP" class="headerlink" title="面向连接的传输：TCP"></a>面向连接的传输：TCP</h1><p>前面已经介绍了可靠数据传输的基本原理，现在就可以学习TCP了</p><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a><font size="5">TCP连接</font></h2><p>TCP在两个进程发送数据之前，这两个进程必须先相互”握手”，即它们必须相互发送一些预备报文段，以建立确保数据传输的参数。</p><ul><li><font color="bllue"><b>双全工服务</b></font><br>如果一台主机中的进程A和另一台主机上的进程B存在一条TCP连接，那么<font color="blue">应用层数据就可在从A流向B的同时，也从B流向A</font>。</li><li><font color="bllue"><b>点对点</b></font><br>TCP连接是点对点的，即在单个接收方和单个发送方之间的连接。对于TCP而言，两个主机是一对。</li></ul><p>TCP连接建立的大致过程</p><ol><li>客户端首先发送一个特殊的TCP报文段，该报文段不承载数据</li><li>服务器用另一个特殊的TCP报文段来响应，该报文段不承载数据</li><li>客户端再用第三个特殊报文段作为响应，该报文段可以承载数据</li></ol><p>建立起TCP连接后，两进程就能够互相发送数据。如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/9.png" alt>发送进程将数据推进套接字，TCP将数据导入TCP的发送缓存，发送缓存是三次握手期间设置的缓存之一。接下类TCP就会不时的从发送缓存中取出一块数据，并传递到网络层。<br>TCP可从缓存中取出并放入报文段中的数据数量受限于最大报文段长度(MSS)，MSS通常根据本地发送主机发送的最大链路层帧长度(最大传输单元，MTU)来设置。<font color="red">设置该MSS要保证一个TCP报文段加上TCP/IP首部长度(通常40字节)将适合单个链路层帧。</font><br>注意，<font color="blue">MSS是指报文段里应用层数据的最大长度，而不是包括首部的TCP报文段的最大长度。</font></p><h2 id="TCP报文段结构"><a href="#TCP报文段结构" class="headerlink" title="TCP报文段结构"></a><font size="5">TCP报文段结构</font></h2><p>TCP报文段结构如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/10.png" alt></p><ul><li><b>目的端口号和源端口号</b><br>用于多路复用和多路分解</li><li><b>检验和字段</b><br>用于报文段的差错检验</li><li><b>序号字段和确认号字段</b><br>被TCP发送方和接收方用来实现可靠数据传输</li><li><b>接收窗口字段</b><br>用于流量控制，指示接收方愿意接受的字节数量</li><li><b>首部长度</b><br>以32bit的字为单位，一般为10个字(20字节)</li><li><b>标志字段</b><ul><li>ACK<br>用于指示确认字段中的值是有效的，即该报文包含一个对已被成功接收报文段的确认</li><li>RST\SYN\FIN<br>用于连接的建立和拆除</li><li>CWR\ECE<br>明确拥塞通告中用到这两个字段</li></ul></li></ul><h3 id="序号和确认号"><a href="#序号和确认号" class="headerlink" title="序号和确认号"></a><font size="5">序号和确认号</font></h3><ul><li><font color="bllue"><b>序号</b></font><br>TCP首部字段中最重要的两个字段。TCP把数据看成是一个有序的字节流。<font color="blue">一个报文段的序号就是该报文段首字节的字节流编号。</font>如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/11.png" alt></li><li><font color="bllue"><b>确认号</b></font><br>前面说过，TCP是双全工的，因此A在向B发送数据的同时，也许在接收B的数据。从B到达的每一个报文段中都有一个序号用于从B流向A的数据。<font color="blue">主机A发送的报文中的确认号就是主机A期望从主机B接收到的下一个字节的序号(也就是下一个报文段的序号)。</font><br>假设A已经收到了来自B的编号为0-535的所有字节，同时它打算给B发送一个报文段。那么该报文段的确认号就是A期望从B接收到的下一个字节的序号，也就是536。<br>此外如果TCP收到了来自B的数据流0-535和900-1000。此时A到B的下一个报文段的确认号仍然是536而不是1001。<font color="red">即TCP只确认该流中第一个丢失的字节，所以TCP被称为提供累计确认。</font><h2 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a><font size="5">可靠数据传输</font></h2>前面说过，IP是不可靠的，TCP在IP不可靠的尽力而为服务上创建了一种可靠数据传输服务。TCP的可靠数据传输服务保证一个进程从其接收缓存中接收到的数据和发送进程发送的数据一模一样。<br><font color="blue"><b>为了简化讨论，先假设数据只从A到B，TCP发送方的动作</b></font></li></ul><ol><li>从应用程序接收数据<br>从应用程序接收数据，生成具有序号seq的TCP报文段，如果定时器没有运行那么启动定时器</li><li>定时器超时<br>重传序号最小的未收到确认的报文，重启定时器</li><li>收到ACK<br>收到ACK，ACK的确认号为y，如果y&gt;sendBase，那么sendBase==y。其中sendBase为发送方为最早未被确认的字节序号。如果仍有未被确认的报文段，TCP还要重启定时器<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/12.png" alt><br>以上是TCP过程中两种特殊情况，还有一种情况和第二种类似，<font color="blue">如果主机B的ACK=100和ACK=120没有超时，但是ACK=100丢失，即只有ACK=120按时到达了主机A，那么主机A不会重传任何报文，因此TCP的累计确认机制，发送方收到ACK=120后，就能够知道B已经收到了119以及之前的所有字节。</font></li></ol><ul><li><font color="bllue"><b>超时间隔加倍</b></font><br>这是大多TCP实现中的一种改进，每当超时事件发生时，就像前面提到的，TCP发送方重传具有最小序号但还未被确认的报文段。但是<font color="blue">每次TCP重传时都会将下次的超时间隔设为先前值得两倍。</font>例如假设初始的TCP超时间隔为0.75s，那么第一次超时事件发生后，TCP重传报文段，并将超时间隔设置为1.5秒，以此类推……<br>这样修改是因为，<b>定时器过时很可能是因为网络拥塞引起的，分组并没有真的丢失。在拥塞的时候，如果发送方持续的重传分组，会导致拥塞更为严重</b>，所以TCP采用超时间隔加倍的方式使延时的分组尽可能少的被重传。</li><li><font color="bllue"><b>快速重传</b></font><br>前面说到的超时间隔加倍也可能存在一个问题，<b>当一个分组真的丢失时，超时间隔过长就会导致端到端的时延，因此TCP设计了快速重传机制。</b><br>TCP发送方通常可在超时事件发生之前通过冗余ACK来较好的检测到丢包的情况。冗余ACK就是对同一个报文段重复确认的ACK。<br><font color="blue">如果TCP发送方接收到对相同数据的3个冗余ACK(即一共接收到4个ACK)，它就认为跟在这个已经被确认3次之后的报文段之后的报文段已经丢失(即序号为冗余ACK报文段确认号的报文段)。此时TCP进行快速重传，即在该报文段的定时器过期之前重传丢失的报文段。</font></li></ul><h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a><font size="5">流量控制</font></h2><p>前面提到过，TCP连接的两侧主机都为该连接设置了一个缓存，当TCP接收到正确按序的字节后，就将数据放入缓存，相应的进程会从缓存中读取数据。事实上，接收方应用也许正忙于其他任务，甚至要很长时间后才去读取该数据，<font color="blue">如果某些应用程序读取数据时相对缓慢，而发送方发送的太多太快，发送的数据很容易使得接收缓存溢出而导致数据丢失。</font><br><font color="red">流量控制服务就是用来消除发送方使接收方缓存溢出得可能性。</font><br>TCP通过让发送方维护一个称为接收窗口的变量来提供流量控制(<b>即TCP报文段中接收窗口字段</b>)。通俗的说，<font color="blue">接收窗口是一个变量，用于给发送方一个指示–该接收方还有多少可用的缓存空间。</font>由于TCP是双全工通信，因此连接连端各有一个接收窗口。<br>现假设A通过TCP连接向B发送一个大文件。主机B为该连接分配了一个TCP接收缓存(用RcvBuffer表示其大小)。主机B上的进程不断地从该缓存中读取数据。我们定义一下变量</p><ul><li><b>LastByteRead</b><br>主机B上的进程从缓存中读取的最后一个字节的编号</li><li><b>LastByteRcvd</b><br>从网络到达并放入B接收缓存中的数据流最后一个字节的编号。</li></ul><p>由于TCP不允许缓存溢出，因此必须有<br><font color="red"><b>(LastByteRcvd-LastByteRead)&lt;=RcvBuffer</b></font><br>接收窗口用rwnd表示，根据缓存可用空间来设置：<br><font color="red"><b>rwnd=RcvBuffer-(LastByteRcvd-LastByteRead)</b></font><br>如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/13.png" alt><font color="blue">主机B通过把当前的rwnd的值放入它发给主机A的报文段接收窗口字段中，通知A它在该连接的接收缓存中还有多少可用空间，开始时rwnd=RcvBuffer</font><br>在主机A中，主机A跟踪两个变量，LastByteSent和LastByteAcked，这两个变量的差LastByteSent-LastByteAcked就是A发送到连接中但未被确认的数据量，通过将该差值控制在rwnd以内，就可以保证B中接收缓存不会溢出。<br>因此，主机A在该连接的整个生命周期保证<font color="red"><b>LastByteSent-LastByteAcked&lt;=rwnd</b></font>。</p><p>以上的流量控制还存在一个小问题：<b>即当主机B的接收缓存已满，使得rwnd为0。再将rwnd=0发送给A之后，假设B没有任何数据要发送给主机A，那么当B的应用进程将接收缓存中的数据读取完之后，主机A并不知道B的接收缓存已经有新空间了。即主机A被阻塞而不能在发送数据。</b>为了解决这个问题，TCP规范中要求：<br><font color="bllue">当主机B的接收窗口rwnd=0时，主机A继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认。最终缓存开始清空，并且确认报文中将包含一个非0的rwnd值。</font>这样主机A就能够知道B的接收窗口有空闲空间从而继续发送数据。</p><h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a><font size="5">TCP连接管理</font></h2><p>下面主要介绍TCP连接是如何建立和拆除的，即<b>三次握手、四次挥手</b>是如何进行的。</p><ul><li><font color="bllue"><b>三次握手</b></font></li></ul><ol><li>客户端TCP首先向服务器发送一个特殊的TCP报文段。该报文段<b>不包含数据内容</b>，但是<b>报文段首部的SYN字段(回顾TCP报文段结构)被置1</b>，因此该报文段又被称为<font color="red">SYN报文段</font>。另外，<b>客户端会随机选择一个初始序号(client_isn)，放在SYN报文段的序号字段中</b></li><li>服务器接收到客户端的SYN报文段后，就<b>为该TCP连接分配TCP缓存和变量</b>，并向客户端TCP发送允许连接的报文段。这个报文段也<b>不包含应用层数据，SYN字段也被置为1(该报文段被称为font color=red&gt;SYNACK报文段)</b>。服务器也会选择一个<b>初始序号sever_isn，放在该SYNACK报文段的序号字段中</b>。另外，<font color="red">该SYNACK报文段的确认号字段放的是client_isn+1。</font><br><font color="blue">这个报文段实际上表明了：我收到了你的SYN分组，该分组的初始序号为client_isn，我同意建立连接。我的序号为sever_isn。</font></li><li>在收到SYNACK报文段后，<b>客户端给该TCP连接分配缓存和变量</b>。并且向服务器发送另外一个报文段；该报文段对服务器的SYNACK报文段进行了确认(<font color="red">将sever_isn+1放到确认号字段中</font>)，因为连接已经建立，因此<b>该报文段SYN置0，并且该报文段可以携带应用层数据。</b></li></ol><ul><li><font color="bllue"><b>四次挥手</b></font><br>当TCP连接结束后，主机中的资源(缓存和变量)将被释放<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/14.jpg" alt>(来自网络)</li></ul><ol><li>客户的应用进程要关闭此连接，那么<b>客户TCP发送一个FIN标志位置1的FIN报文段，并<font color="red">进入FIN_WAIT_1状态</font></b>。等待一个来自服务器对FIN报文段的ACK报文段</li><li>服务器<b>接收到来自客户端的FIN报文段，发出确认报文段ACK，<font color="red">进入CLOSE_WAIT状态</font></b>。此时客户端向服务器方向的连接就释放了。该连接处于半关闭状态，即客户端已经没有数据要发送了，但服务器若发送数据，客户端依然要接受。</li><li>客户端<b>收到来自服务器的ACK报文段后<font color="red">进入FIN_WAIT_2状态</font>，等待来自服务器的FIN报文段</b></li><li>处于CLOSE_WAIT状态服务器如果仍有数据要发送，就继续发送数据。当<b>服务器将该发送的数据发送完后，发送一个FIN报文段并<font color="red">进入LAST_ACK状态</font></b></li><li>处于FIN_WAIT_2状态的客户端<b>收到来自服务器的FIN报文段后，发送一个ACK报文段进行确认并<font color="red">进入TIME_WAIT状态</font></b>，该状态持续一段时间后自动退出，之后客户端释放资源</li><li>服务器收到来自客户端的ACK之后，直接释放资源。从图上可以看出，服务器释放资源要比客户端早一些</li></ol><p>以上就是四次挥手的过程(由于书上描述的不够详细，从网上查阅资料结合书本得出)</p><p><font color="bllue"><b>关于”三次握手、四次挥手”的一些问题</b></font></p><ol><li><p><b>为什么连接时三次握手，而关闭时却需要四次回收？</b></p><ul><li>在建立连接时，服务器收到客户端的SYN报文段时，发送的是SYNACK报文段，即SYN+ACK，该报文段即包含了对客户端SYN报文段的应答也包含了自己的连接请求SYN。</li><li>在关闭连接时，当服务器收到客户端的FIN报文段后，可能还有数据没有发送完毕仍然需要发送，并不能立刻关闭。因此并不会发送一个类似于SYNACK的FINACK，而是先发送ACK报文段对客户端的FIN报文段进行确认(告诉客户端你的FIN我收到了，此时客户端到服务器方向连接关闭)，然后发送需要发送的数据，等到数据发送完毕之后，再发送自己的FIN报文段(请求关闭到客户端方向的连接)。</li></ul></li><li><p><b>为什么客户端在发送完对服务器的FIN报文段的ACK后需要一个TIME_WAIT状态而不能直接关闭？</b><br>这是因为，有可能该ACK在网络中丢失，而服务器没有收到来自客户端的ACK报文段，那么服务器将重新发送FIN报文段，客户端需要对该重传的FIN再次进行ACK确认。</p></li><li><p><b>为什么不能用两次握手？</b><br>这是为了防止已失效的连接请求报文段突然又到达了服务器。</p><ol><li><b>客户端向服务器发送一个请求连接的SYN报文段1，但是该报文段由于网络延时较长，导致客户端认为该报文段丢失，然后重新发送SYN报文段2</b></li><li>SYN报文段2成功到达了服务器，最后成功的建立了TCP连接</li><li>客户端和服务器在完成数据传输后关闭了该TCP连接。</li><li>但是问题来了，<font color="blue">前面延时的SYN报文段1经过较长一段时间后又到达了服务器。服务器会认为这是客户端新发起的TCP连接，因此向客户端发送一个ACK报文段，如果没有第三次握手，那么连接就已经建立了，但是事实上客户端并没有任何数据要发送给服务器，因为SYN报文段1对于客户端来说是一个过期的报文段。这样就白白浪费了资源。</font></li></ol></li></ol><h1 id="拥塞控制原理"><a href="#拥塞控制原理" class="headerlink" title="拥塞控制原理"></a>拥塞控制原理</h1><p>在介绍拥塞控制原理之前，先简要介绍一下拥塞的原因和代价</p><h2 id="拥塞的代价"><a href="#拥塞的代价" class="headerlink" title="拥塞的代价"></a><font size="5">拥塞的代价</font></h2><ol><li>如果网络中发生拥塞，那么路由器中会形成分组队列，首先会导致延时。</li><li>当分组队列过长时，由于路由器缓存有限，进而会造成分组丢失。</li><li>由于TCP是可靠数据传输服务，因此必须对丢失的分组进行重传。</li><li>当分组在路由器中延时过长导致超时，即使分组没有丢失那么TCP发送方也会重传分组，这就会导致路由器转发不必要的重复分组。</li><li>如果一个分组经过了很多个路由器后，在之后的路由器中因为超时或者路由器缓存溢出而丢失导致发送方对该分组进行重传，那么这就意味着该分组经过的每个上游路由器所用的资源都浪费了。</li></ol><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a><font size="5">TCP拥塞控制</font></h2><p>TCP使用的是端到端的拥塞控制，这是因为IP层不向端系统提供显式的网络拥塞反馈。TCP所采用的方法是让每一个发送方根据所感知到的网络拥塞程度来限制其向连接发送流量的速率。如果发送方感知到从它到目的地之间没什么拥塞，就加快发送速率，反之，就抑制发送速率。<br>那么问题来了</p><ol><li>TCP发送方如何限制它向连接发送数据的速率呢？</li><li>TCP发送方如何感知从他到目的地之间的路径上存在拥塞呢？</li><li>当发送方感知到拥塞时，采用什么算法来改变发送速率呢？</li></ol><ul><li><font color="bllue"><b>TCP限制向其连接发送流量的方式</b></font><br>在前面提到过，<font color="red">TCP连接的每一端都是由一个接收缓存、一个发送缓存和几个变量组成。</font><b>运行在发送方的TCP拥塞控制机制跟踪一个额外的变量，即拥塞窗口(cwnd)，它对一个TCP发送方能像网络中发送流量的速率进行了限制。</b><br>一个发送方中未被确认的数据量不会超过cnwd和rnwd中的最小值，即<br><font color="red"><b>(LastByteSent-LastByteAcked)&lt;=min{cwnd，rndw}</b></font><br>在这里为了和流量控制区分开，我们假设接收窗口无限大(这样就不存在缓存溢出，也就不存在流量控制了)，因此在发送方未被确认的数据量就受限于cwnd，还假设发送方总是有数据要发送。这样的约束控制了发送方未被确认的数据量，间接的控制了发送方的发送速率。</li><li><font color="bllue"><b>TCP发送方感知网络拥塞的方式</b></font><br>我们将TCP丢包事件定义为：要么出现超时，要么收到来自接收方的三个冗余ACK。</li></ul><ol><li>当出现过度拥塞时，在沿着这条路径上的一台或多台路由器缓存溢出，引发一个数据报(网络层分组，包含TCP报文段)丢失。丢失的分组接着会引起<font color="red">丢包事件</font>，<b>发送方就认为在网络中(发送方到接收方的网络路径)出现了拥塞。</b></li><li>当网络没有拥塞时，即没有出现丢包事件。在此情况下，TCP发送方将收到对未确认报文段的ACK。<font color="red">TCP将这些确认的到达作为网络正常的指示，并使用确认来增加窗口长度(发送速率)</font>，(这不难理解，当发送方觉得网络很好的时候，理所当然的就会尝试提高发送速率)。注意，窗口增大的速率取决于ACK确认报文到达的速率。TCP使用确认来触发增大它拥塞窗口长度的被称为自计时方式。</li></ol><p>那么TCP又是怎样确定发送速率呢？如果发送速率太快，会导致拥塞，太慢又导致带宽不能充分得到利用。<font color="blue">TCP使用下列三种指导性原则</font></p><ol><li><b>一个丢失的报文段意味着拥塞，因此当丢包事件发生时应当降低TCP发送方的速率</b></li><li><b>一个确认报文段(ACK报文段)意味着网络中一切顺利，因此对先前未确认的确认到达时，能够增加发送方速率</b></li><li><b>带宽检测。TCP调节其传输速率的策略是<font color="red">增加其速率以影响到达的ACK，除非出现丢包事件，此时才减小传输速率</font></b>。该行为类似于一个要求并得到越来越多糖果的孩子，知道最后告知他不行。孩子后退一点，然后过一会儿再次开始要糖果。</li></ol><p>概述了TCP拥塞控制后，现在开始介绍TCP拥塞控制算法细节，该算法主要包括3个部分：</p><ol><li>慢启动</li><li>拥塞避免</li><li>快速恢复</li></ol><p>前两种是TCP的强制部分</p><h3 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a><font size="5">慢启动</font></h3><p>一条TC连接开始时，cwnd初始值同设置为一个MSS(最大传输单元)，这使得初始发送速率大约为MSS/RTT(平均往返时间)。对于TCP发送方而言，可用带宽可能远远大于该速率，因此发送方希望希望迅速找到可用带宽的数量<br>cwnd的值以1个MSS开始并且每当传输的报文段首次被确认就增加一个MSS。如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/14.png" alt>从图中可以看出，没过一个RTT，发送速率就会翻倍。<font color="blue">因此TCP发送速率起始满，但在慢启动阶段以指数增长。</font><br>那么这种指数增长什么时候结束呢？有三种方式分别对应三种情况</p><ul><li><font color="bllue"><b>出现由超时指示的丢包事件时(拥塞)</b></font><br>TCP发送方将cwnd重新置为1，将ssthresh(慢启动阈值标记)设置cwnd/2(这里的cwnd是置1之前的值)，并重新开始慢启动过程。</li><li><font color="bllue"><b>当cwnd&gt;=sshthresh时</b></font><br>当cwnd一直翻倍增长，超过ssthresh时，直接进入到拥塞避免模式(后面会说到)，这是因为，在第一种情况检测到拥塞时将sshthresh设置为拥塞时cwnd的一半，当cwnd再次达到ssthresh时，如果继续翻倍，那么很有可能继续造成拥塞，因此应采取更为缓慢的增长方式，即拥塞避免模式。</li><li><font color="bllue"><b>快速恢复</b></font><br>如果检测到3个冗余的ACK，这时TCP将执行快速重传，并进入快速回复模式</li></ul><h3 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a><font size="5">拥塞避免</font></h3><p>一旦进入拥塞避免，cwnd的值大约是上次拥塞值得一半，即距离拥塞并不远。因此TCP使用一种较为保守的方式增加cwnd，每个RTT将cwnd的值增加一个MSS。<br>如何结束拥塞避免模式得线性增长呢？</p><ul><li><font color="bllue"><b>出现由超时指示的丢包事件时(拥塞)</b></font><br>和慢启动一样，将MSS设置为1个MSS，ssthresh设置为cwnd/2，重新进入慢启动模式</li><li><font color="bllue"><b>收到3个冗余ACK包</b></font><br>将ssthresh设置为cwnd/2，然后将cwnd增加3个MSS(可以理解为3个冗余ACK各增加一个)，进入快速回复模式</li></ul><h3 id="快速回复"><a href="#快速回复" class="headerlink" title="快速回复"></a><font size="5">快速回复</font></h3><p>在此状态下，对收到的每一个冗余ACK，cwnd值增加一个MSS。<br>如何结束拥塞避免模式得线性增长呢？</p><ul><li><font color="bllue"><b>收到对未确认报文段的ACK</b></font><br>将cwnd设置为ssthresh值，进入到拥塞避免模式</li><li><font color="bllue"><b>出现由超时指示的丢包事件时(拥塞)</b></font><br>和慢启动一样，将ssthresh设置为cwnd/2，将cwnd置为1个MSS，重新进入慢启动模式</li></ul><p>TCP拥塞控制的状态转换如图所示<br><img src="/2019/10/09/自顶向下之计算机网络和因特网-运输层/15.png" alt><br>我们不难发现一些规律</p><ol><li>引起状态转换一共有四种事件，分别是<ol><li><b>超时</b></li><li><b>窗口长度超过阈值</b></li><li><b>收到正常ACK</b></li><li><b>收到累计3个冗余ACK</b></li></ol></li><li>当累计收到3个冗余ACK时，必定会转换到快速回复模式，并有ssthresh=cwnd/2和cwnd=ssthresh+3 MSS操作</li></ol><hr>关于运输层的简要学习就到这里，主要介绍了多路复用/分解，滑动窗口协议、选择重传、TCP的可靠数据传输、超时间隔加倍以及快速重传、流量控制和拥塞控制机制等。下次介绍网络层相关知识。]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 计算机网络自顶向下方法 </tag>
            
            <tag> 传输层 </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找算法之二分查找</title>
      <link href="/2019/10/08/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>/2019/10/08/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>查找在日常生活中的应用也非常广泛，除了一般的线性查找，还有专门针对有序数组得二分查找、插值查找、斐波那契查找等查找算法。今天介绍的就是著名的二分查找算法。</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>二分查找要求待查找数据是有序的。每次取出数据的中间项midValue，和要查找的数searchValue相比较</p><ol><li>如果midValue&lt;searchValue，那么就在midValue得左边继续查找</li><li>如果midValue&gt;searchValue，那么就在midValue得右边继续查找</li><li>如果midValue==searchValue，返回midValue下标。</li></ol><p>算法使用递归实现，当<font color="red">left(左边界)&gt;right(有边界)时，说明数据得每一个元素都已经被访问过仍然没有找到，返回-1</font>。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ul><li><p>只查找一个值，找到后就返回，无论是否有重复值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分查找</span><br><span class="line"> * 找到一个就返回，不管是否重复</span><br><span class="line"> * @param arr 待查找数组</span><br><span class="line"> * @param left 左边界索引，初始值为0</span><br><span class="line"> * @param right 右边界索引，初始值为length-1</span><br><span class="line"> * @param value 要查找的值</span><br><span class="line"> * @return 返回值得下标，没找到返回0</span><br><span class="line"> */</span><br><span class="line">public static int binarySearch(int[] arr, int left, int right, int value) &#123;</span><br><span class="line">//递归出口当left&gt;right时说明说明数组每一个元素都已经遍历完但是没有找到，直接返回-1</span><br><span class="line">if (left &gt; right) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int mid = (right + left) / 2;</span><br><span class="line">int midValue = arr[mid];</span><br><span class="line"></span><br><span class="line">//向右递归</span><br><span class="line">if (value &gt; midValue) &#123;</span><br><span class="line">return binarySearch(arr, mid + 1, right, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向左递归</span><br><span class="line">else if (value &lt; midValue) &#123;</span><br><span class="line">return binarySearch(arr, left, mid - 1, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line"></span><br><span class="line">return mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找数据中所有值为value的下标，返回一个下标集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分查找</span><br><span class="line"> * 找出所有值为value的下标</span><br><span class="line"> * @param arr 带查找数组</span><br><span class="line"> * @param left 左边界索引，初始值为0</span><br><span class="line"> * @param right 右边界索引，初始值为length-1</span><br><span class="line"> * @param value 要查找的值</span><br><span class="line"> * @return 值得下标集合</span><br><span class="line"> */</span><br><span class="line">public static List&lt;Integer&gt; binarySearch1(int[] arr, int left, int right, int value) &#123;</span><br><span class="line">//当left&gt;right时说明说明数组每一个元素都已经遍历完但是没有找到，直接返回-1</span><br><span class="line">if (left &gt; right) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int mid = (right + left) / 2;</span><br><span class="line">int midValue = arr[mid];</span><br><span class="line"></span><br><span class="line">//向右递归</span><br><span class="line">if (value &gt; midValue) &#123;</span><br><span class="line">return binarySearch1(arr, mid + 1, right, value);</span><br><span class="line">&#125;</span><br><span class="line">//向左递归</span><br><span class="line">else if (value &lt; midValue) &#123;</span><br><span class="line">return binarySearch1(arr, left, mid - 1, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else &#123;</span><br><span class="line">//再找到mid值时不马上返回，向mid索引值的两边扫描</span><br><span class="line">//将所有值为value的下标值添加到ArrayList集合中，最后返回集合</span><br><span class="line">//向左查找</span><br><span class="line">int goLeft=mid-1;</span><br><span class="line">List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">while (left &gt; 0 &amp;&amp; arr[goLeft] == value) &#123;</span><br><span class="line">list.add(goLeft);</span><br><span class="line">goLeft--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向右查找</span><br><span class="line">while (mid &lt; arr.length &amp;&amp; arr[mid] == value) &#123;</span><br><span class="line">list.add(mid);</span><br><span class="line">mid++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h1><p>请注意，当我们需要在数组{1,2,3….100}中查找1或100时，用二分会查找次数相对多一些，这时候可以用到插值查找<br>插值查找思路也非常的简单，和二分查找唯一的区别在于mid(每次查找分界点)的选用不同。</p><ul><li>二分查找每次都去中间的数据作为分界点<br>即mid=left+(right-left)/2</li><li>而插值查找mid的选取是自适应的，和要查找的值findValue有关<br>mid=left+(right-left)*{(findValue-arr[left])/(arr[right]-arr[left])}</li></ul><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a><font size="5">代码实现</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 插值查找</span><br><span class="line"> * @param arr 待查找数组</span><br><span class="line"> * @param left 左边界索引</span><br><span class="line"> * @param right 有边界索引</span><br><span class="line"> * @param findValue 待查找的值</span><br><span class="line"> * @return 数组下标，没找到返回-1</span><br><span class="line"> */</span><br><span class="line">public static int insertValueSearch(int[] arr, int left, int right, int findValue) &#123;</span><br><span class="line">//必须确保findValue在数组最大值和最小值中间，否则会导致数组越界</span><br><span class="line">if (left &gt; right || findValue &lt; arr[left] || findValue &gt; arr[right]) &#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int mid = left + (right - left) * (findValue - arr[left]) / (arr[right] - arr[left]);</span><br><span class="line">int midValue = arr[mid];</span><br><span class="line"></span><br><span class="line">if (midValue &lt; findValue) &#123;</span><br><span class="line">return insertValueSearch(arr, mid + 1, right, findValue);</span><br><span class="line">&#125; else if (midValue &gt; findValue) &#123;</span><br><span class="line">return insertValueSearch(arr, left, mid - 1, findValue);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a><font size="5">算法分析</font></h2><p>这样一来，当要查找的数位于数据靠两边的位置时，查找次数会相对少一些。该算法<font color="blue">适用于待查找数据较为连续时。</font>当数不连续时有时甚至比二分查找次数更多一些。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之基数排序</title>
      <link href="/2019/10/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>这次要介绍的是最后一种排序算法，个人觉得也是最一种神奇的排序算法、当然更是最典型的空间换时间排序算法。它就是基数排序</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><ol><li>首先要额外申请10个桶(一维数组，和待排序数组arr一样大)，可以用二维数组来实现。</li><li>取出arr的每个元素个位数字m，根据元素的个位数字将元素放到下标为m的桶中(例如：123个位数为3，就将123放到下标为3的桶中)</li><li>将10个桶中的数依次再放回arr数组中</li><li>取出arr的每个元素十位数字，继续进行以上操作</li><li>知道最大元素的每个位都遍历完为止。</li></ol><p>该算法按照个、十、百位等依次将元素进行排序，最终得到有序数组。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 基数排序</span><br><span class="line"> * @param arr 待排序数组</span><br><span class="line"> */</span><br><span class="line">public static void radixSort(int[] arr) &#123;</span><br><span class="line">//用作桶的数组</span><br><span class="line">int[][] temp = new int[10][arr.length];</span><br><span class="line">//计数数组，用于记录每个桶中有多少个数</span><br><span class="line">int[] count = new int[10];</span><br><span class="line">//找到最大的元素</span><br><span class="line">int max = arr[0];</span><br><span class="line">for (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class="line">if (arr[i] &gt; max) &#123;</span><br><span class="line">max = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//获取最大元素的位数，即循环次数</span><br><span class="line">int maxLength = (max + &quot;&quot;).length();</span><br><span class="line">for (int r = 0, i = 1; r &lt; maxLength; r++, i *= 10) &#123;</span><br><span class="line">for (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class="line">//取出每个元素相应位的数</span><br><span class="line">int digitElement = (arr[j] / i) % 10;</span><br><span class="line">//放到对应的桶中</span><br><span class="line">temp[digitElement][count[digitElement]++] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line">//每一轮开始将arr下标置0</span><br><span class="line">int index = 0;</span><br><span class="line">//遍历10个桶，将桶中元素放回arr数组中</span><br><span class="line">for (int k = 0; k &lt; 10; k++) &#123;</span><br><span class="line">int countIndex = 0;</span><br><span class="line">//将每个桶中的元素依次放回arr数组中</span><br><span class="line">while (count[k] &gt; 0) &#123;</span><br><span class="line">arr[index++] = temp[k][countIndex++];</span><br><span class="line">count[k]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>时间复杂度<br> O(n*k)</li><li>空间复杂度<br> O(n+k)</li><li>稳定性<br> <font color="red">基数排序是稳定的</font></li></ol><h1 id="算法速度"><a href="#算法速度" class="headerlink" title="算法速度"></a>算法速度</h1><p>既然说基数排序是典型的空间换时间，那么它的性能究竟如何呢？来测试一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//生成了一个800w的随机数组进行排序</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//随机生成一个数组，对其进行排序</span><br><span class="line">int[] arr = new int[8000000];</span><br><span class="line">Random random = new Random();</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = random.nextInt(800000);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;====================&quot;);</span><br><span class="line">long start = System.currentTimeMillis();</span><br><span class="line">radixSort(arr);</span><br><span class="line">long ends = System.currentTimeMillis();</span><br><span class="line">System.out.println(&quot;插入排序共花费：&quot; + (ends - start) + &quot;毫秒&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=============</span><br><span class="line">Output：</span><br><span class="line">500毫秒左右</span><br></pre></td></tr></table></figure><p>在800w时，速度仅为快排的一半。但是由于该算法空间复杂度过高，因此在8000w时就OOM了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下之计算机网络和因特网-应用层</title>
      <link href="/2019/10/07/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91-%E5%BA%94%E7%94%A8%E5%B1%82/"/>
      <url>/2019/10/07/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91-%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>应用层是五层协议中的最顶层，网络应用是计算机网络存在的理由，如果我们不能构想出来任何有用的应用，也就没必要去设计支持他们的网络协议了。接下来就介绍一些应用层的一些相关知识。</p><hr><a id="more"></a><h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><p>开发网络应用的核心在于能够写出运行在两个不同的端系统和通过网络彼此通信的程序。例如，在WEB应用中，有两个相互通信的不同的程序：一个是运行在用于主机上的浏览器程序，另一个是运行在服务主机上的WEB服务器程序。</p><h2 id="网络应用程序体系结构"><a href="#网络应用程序体系结构" class="headerlink" title="网络应用程序体系结构"></a><font size="5">网络应用程序体系结构</font></h2><p>应用程序体系结构由研发者设计，规定了如何在各种端系统上组织该应用程序。有两种主流的体系结构</p><ul><li><font color="blue"><b>客户-服务器体系结构</b></font><br>在该体系中，有一个总是打开的主机被称为服务器，它服务于来自许多被称为客户端主机的请求。该体系有两个特点<ul><li>客户端和客户端不直接通信</li><li>服务器具有周知的固定的IP地址</li></ul></li><li><font color="blue"><b>P2P体系结构</b></font><br>对专用服务器有最小的或者没有依赖，<b>应用程序在间断连接的主机对直接直接通信</b>，这些主机对称为对等方。</li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a><font size="5">进程通信</font></h2><p>用操作系统的术语来说，进程通信的实际上是进程而不是程序</p><ul><li>进程<br>可以被认为是运行在端系统上的一个程序。</li></ul><p>当多个进程运行在相同的端系统上时，它们使用进程通信机制相互通信。进程通信的规则由端系统上的操作系统确定。在这里，我们主要关注运行在不同端系统上的进程间通信。<br><font color="blue">在两个不同端系统上的进程，通过跨越计算机网络交换报文而相互通信：</font></p><ul><li>发送进程生成并向网络中发送报文</li><li>接收进程接受这些报文并可能通过回送报文进行相应</li></ul><h3 id="客户和服务器进程"><a href="#客户和服务器进程" class="headerlink" title="客户和服务器进程"></a><font size="5">客户和服务器进程</font></h3><p>网络应用程序由成对的进程组成，这些进程通过网络相互发送报文。对于每一对通信进程，我们称其中一个为客户，另一个为服务器</p><ul><li><b>客户</b><br>在一对进程之间的会话通信中，发起通信的进程被标识为客户</li><li><b>服务器</b><br>在会话开始时等待联系的进程被标识为服务器</li></ul><h3 id="进程和计算机之间的接口"><a href="#进程和计算机之间的接口" class="headerlink" title="进程和计算机之间的接口"></a><font size="5">进程和计算机之间的接口</font></h3><p>前面说过，多数应用程序是由通信进程对组成，每对两个进程间相互发送报文。从一个进程到另一个进程发送报文必须通过下面的网络。<font color="bllue">进程通过一个称为套接字的软件接口像网络发送报文和从网络接收报文。</font></p><ul><li><b>套接字</b><br>是同一台主机内应用层和运输层之间的接口(关于套接字在前面一篇文章已介绍过)，又被称为应用程序和网络之间的应用程序编程接口。</li></ul><h3 id="进程寻址"><a href="#进程寻址" class="headerlink" title="进程寻址"></a><font size="5">进程寻址</font></h3><p>为了向特定目的地发送邮件，需要一个地址。类似的，在一台主机上运行的进程为了向另一台主机上运行的进程发送分组，接收进程需要有一个地址，这样发送方才能通过这个地址找到接收进程。为了标识该进程，需要定义两种信息</p><ol><li>主机的地址<br>在因特网中，主机地址由IP地址标识。现在，只需要了解IP地址是一个32bit的数并且能唯一标识该主机。</li><li>目的主机中指定接收进程的标识符<br>知道了主机的地址后，分组就能够到达改主机。但是，主机中运行着不止一个进程，发送进程还必须指定运行在接受主机上的接收进程。我们用<font color="blue">目的端口号来标识进程。</font></li></ol><p><font color="red">发送进程通过IP地址和目的端口号，就能准确地将定位运行在目的主机上的接收进程。</font></p><h2 id="可供应用程序使用的运输服务"><a href="#可供应用程序使用的运输服务" class="headerlink" title="可供应用程序使用的运输服务"></a><font size="5">可供应用程序使用的运输服务</font></h2><p>前面说了，套接字是应用程序和运输层协议之间的接口。在发送端的应用程序将报文推进该套接字，在套接字的另一侧，运输层协议负责从接收进程的套接字得到该报文。运输层协议不止一种，当开发一个应用时，要选择一种可用的运输层协议。一个运输层协议能够为调用它的应用程序提供呢？接下来将从四个方面对应用程序服务要求进行分类</p><ul><li><font color="bllue"><b>可靠数据传输</b></font><br>前面说过，分组在计算机网络中可能丢失。有时候，数据丢失会带来巨大的损失，如金融应用程序，文件传输等。为了支持这些应用，必须做一些工作以<font color="blue">确保由应用程序的一端发送的数据正确、完全的交给另一端</font>。如果一个列协议提供了这样的确保数据交付服务，就认为提供了<font color="red">可靠数据传输</font>。<br>运输层协议能够潜在的想应用程序提供的一个重要服务是进程到进程的可靠数据传输服务。当一个运输层协议不提供可靠数据传输时，由进程发送的某些数据就可能到达不了接收进程。像多媒体应用如视频音乐等应用是允许少量数据丢失的。</li><li><font color="bllue"><b>吞吐量</b></font><br><font color="blue">可用吞吐量就是发送进程能够向接收进程交付比特的速率。</font>运输层协议能够以某种特定的速率提供确保的可用吞吐量，使用这种服务，该应用程序能够请求r bit/s的确保吞吐量，并且该运输协议能够确保可用吞吐量总是至少为r bit/s。这对一些即时应用如视频会话很有吸引力。具有吞吐量要求的应用被称为带宽敏感应用。相对的，弹性应用能够根据当时可用的带宽或多或少的利用可供使用的吞吐量，如电子邮件等。</li><li><font color="bllue"><b>定时</b></font><br>运输层协议也能提供定时保证。这种服务对于交互式应用很有吸引力，在多方游戏和虚拟互动环境中，在做出动作并看到来自环境的相应之间，较长的延迟极大的影响体验。</li><li><font color="bllue"><b>安全性</b></font><br>在发送主机中，运输协议能够加密由发送进程传输的所有数据，在接受主机中，运输层协议能够在将数据交付给接收进程之前解密这些数据。这样就能够防止数据在发送的过程中被观察到。</li></ul><h2 id="因特网提供的运输服务"><a href="#因特网提供的运输服务" class="headerlink" title="因特网提供的运输服务"></a><font size="5">因特网提供的运输服务</font></h2><p>上面考虑了计算机网络能够提供的通用运输服务，现在就具体介绍由因特网提供的运输层服务类型。因特网(或者说TCP/IP网络)为应用程序提供了两个运输层协议，即TCP和UDP</p><ul><li><font color="bllue"><b>TCP</b></font><br>TCP服务包括面向连接和可靠数据传输服务。当某个应用程序调用TCP作为运输协议时，该应用程序就能获得来自TCP的这两种服务。<ul><li><b>面向连接的服务</b><br>在应用层数据报文开始流动之前，TCP让客户端和服务器相互交换控制层信息(握手过程)。握手阶段后，一个TCP连接就在连个进程的套接字之间建立了。<font color="blue">这是一条双全工连接，即连接双方的进程可以在连接上同时进行报文收发。</font>当应用程序结束报文发送时，该连接被拆除。</li><li><b>可靠的数据传输服务</b><br>通信进程能够依靠TCP，无差错、按适当顺序交付所有发送的数据。</li></ul></li></ul><p>TCP协议具有拥塞控制协议，该服务不一定能贵进程带来直接好处，但能为互联网带来整体好处。当发送方和接收方之间的网络出现拥塞时，TCP的拥塞控制机制会抑制发送进程。</p><ul><li><font color="bllue"><b>UDP</b></font><br><font color="blue">UDP是无连接的，提供一种不可靠数据传输服务</font>，也就是说，当进程将一个报文发送进UDP套接字时，UDP协议并不保证该报文将到达接收进程。并且接收进程的报文也有可能是乱序到达的。</li></ul><p>前面说了四种运输协议的服务，那么对因特网运输协议来说，TCP提供了可靠数据传输并且能通过SSL提供安全性服务(后面会说到)。然而对于定时和吞吐量，因特网协议虽然没有提供任何保证，但是却能够为时间敏感应用提供满意的服务。</p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a><font size="5">应用层协议</font></h2><p><font color="red">应用层协议是网络应用的一部分(很重要的一部分)。</font>前面介绍了通过把报文发送进套接字实现网络进程间的相互通信，但是如何构造这些报文？报文中字段的含义是什么等等问题……应用层协议定义了运行在不同端系统上的应用程序进程如何相互传递报文。特别是应用层协议定义了如下：</p><ol><li><b>交换的报文类型，如请求报文和响应报文等</b></li><li><b>各种报文类型的语法</b></li><li><b>字段的含义</b></li><li><b>确定一个进程何时以及如何发送这些报文，对报文进行响应的规则</b></li></ol><h1 id="Web和TTTP"><a href="#Web和TTTP" class="headerlink" title="Web和TTTP"></a>Web和TTTP</h1><p>Web具有按需操作，当我们需要时，就能得到想要的内容。这不同于广播和电视，它们迫使用户只能收听观看它们提供的内容。</p><h2 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a><font size="5">HTTP概况</font></h2><p>Web的应用层协议是超文本传输协议(Hyper Text Transfer Proyocol，即HTTP)，它是Web的核心。HTTP由两个程序实现：一个客户端程序和一个服务器程序。客户程序和服务器程序运行在不同的端系统中，通过交换HTTP报文进行会话。<font color="blue">HTTP定义了这些报文的结构以及客户和服务器进行报文交换的方式。</font><br>在介绍HTTP之前，先来了解几个Web术语</p><ul><li><b>Web页面</b><br>是由对象构成的，一个对象只是一个文件。诸如一个HTML文件、一个图片等等。且它们可以通过一个URL地址寻址。</li><li><b>URL地址</b><br>每个URL地址包括两部分：存放对象的服务器主机名和对象地址。    </li></ul><p>HTTP定义了Web客户向Web服务器请求Web页面的方式以及服务器向客户传送Web页面的方式。<font color="red">HTTP使用TCP作为它的支撑运输协议</font>。HTTP客户首先发起一个与服务器的TCP连接，一旦连接建立，该浏览器和服务器进程就可以通过套接字访问TCP。<br>客户向它的套接字发送HTTP请求报文并从它的套接字接口接收HTTP响应报文。一旦客户向它的套接字发送了一个请求报文，该报文就脱离了客户控制并进入TCP控制。</p><ul><li><b>无状态协议</b><br><font color="blue">服务器向客户发送被请求的文件，而不存储任何关于该客户的状态信息，</font>即<font color="red">HTTP是一个无状态协议</font>。同时Web服务器总是打开的并且拥有一个固定的IP地址。</li></ul><h2 id="非持续连接和持续连接"><a href="#非持续连接和持续连接" class="headerlink" title="非持续连接和持续连接"></a><font size="5">非持续连接和持续连接</font></h2><p>在许多因特网应用程序中，客户和服务器在很长的时间范围内通信，其中客户发出一系列请求并且服务器对每个请求进行响应。那么问题来了，每个请求/响应对是经一个单独的TCP连接发送还是所有的请求/响应对经同一个TCP连接发送呢？前面的方法被称为非持续连接，后面的被称为持续连接。</p><ul><li><font color="bllue"><b>非持续连接</b></font><br>对于非持续连接，<font color="blue">每一次请求响应都要维持一个新的TCP连接。</font>即一个请求/响应对对应着一个TCP连接。假设有一个Web页面包含一个HTML文件和10个png文件，那么发送该页面就要创建11个TCP连接。这种方式有一些缺点<ul><li>必须为每一个请求/响应对建立和维护一个全新的TCP连接，对于每一个TCP连接，在客户端和服务器端中都要分配TCP缓冲区和保持TCP变量(后面会说到)，这给Web服务器带来了严重的负担</li><li>对于每个TCP连接的都要经历”三次握手”的过程，因此响应时间变长。</li></ul></li><li><font color="bllue"><b>持续连接</b></font><br>HTTP1.1使用了持续连接。服务器在发送响应后保持TCP连接打开。<font color="blue">在相同的客户和服务器之间，后续的请求和响应报文能够通过相同的连接进行传送</font>。一般来说，如果一条TCP连接经过一段时间间隔(可设置该间隔)仍未被使用，HTTP服务器就关闭该连接。</li></ul><h2 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a><font size="5">HTTP报文格式</font></h2><p>HTTP报文有两种：请求报文和响应报文</p><ul><li><font color="bllue"><b>请求报文</b></font></li></ul><ol><li><b>请求行</b><ol><li>方法字段：包括GET、POST等</li><li>URL字段</li><li>HTTP版本字段</li></ol></li><li><b>请求头</b><br>由一系列键值对组成(具体键值对在HTTP协议概述大致介绍过)</li><li><b>请求空行</b><br>就是一个空行，用于分隔请求头和请求体</li><li><b>请求体</b><ol><li>使用GET方法时请求体为空，此时请求参数跟在URL后面</li><li>使用POST方法时，请求参数被封装在请求体中。</li></ol></li></ol><ul><li><font color="bllue"><b>响应报文</b></font><br>和请求报文类似，响应报文也有4部分</li></ul><ol><li>响应行(状态行)<ol><li>协议版本字段</li><li>状态码</li><li>对应状态信息</li></ol></li><li>响应头<br>同样的，由一系列键值对组成</li><li>响应空行<br>用于分隔响应头和响应体</li><li>响应体<br>包含了客户请求的对象。如HTML文档、jpg图片以及视频等</li></ol><h2 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a><font size="5">Web缓存</font></h2><p>Web缓存器也叫Web代理服务器。它能够代表初始服务器来满足HTTP请求的网络实体。Web缓存器有自己的磁盘空间，并在存储空间中保存最近请求过的对象的副本。<br><img src="/2019/10/07/自顶向下之计算机网络和因特网-应用层/1.png" alt>如图，当浏览器正在请求对象<a href="http://www.aaa.com/campas.gif时" target="_blank" rel="noopener">http://www.aaa.com/campas.gif时</a></p><ol><li>浏览器会创建一个到Wen缓存器的TCP连接，并向Web缓存器中对象发送一个HTTP请求</li><li>Web缓存器进行检查，查看本地是否存储了该对象的副本。如果有，Web缓存器就像客户浏览器用响应报文返回该对象</li><li>如果Web缓存器中没有该对象，它就创建一个与该对象初始服务器(<a href="http://www.aaa.com" target="_blank" rel="noopener">www.aaa.com</a> )的TCP连接。并在这个连接上发送一个该对象的HTTP请求。在接收到该请求后，初始服务器向Web缓存器发送具有该对象的响应报文。</li><li>Web缓存器收到来自初始服务器的对象时，在本地存储空间存储一份副本，并通过客户-缓存器的TCP连接向客户的浏览器用HTTP响应报文发送该副本。</li></ol><p>通过上面的描述可以发现，<font color="red">Web缓存器既是客户又是服务器。</font></p><p><font color="bllue"><b>在因特网上部署Web缓存器的原因</b></font></p><ol><li>Web缓存器可以大大减少对客户请求的响应时间，特别是客户与服务器之间的瓶颈带宽远低于客户与Web缓存器之间的瓶颈带宽时。</li><li>Web缓存器能够大大减少一个机构的接入链路到因特网的通信量。减少通信量，该机构就不必增加带宽，减少了成本。</li><li>Web缓存器能够从整体上大大降低因特网上的wen流量，从而改善了所有应用的性能。</li></ol><h2 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a><font size="5">条件GET方法</font></h2><p>前面说了Web缓存的一系列好处，但是也引入了一个新的问题：即存放在缓存器中的对象副本可能是陈旧的。换句话说，<font color="blue">保存在服务器中的对象自改副本缓存在客户上以后可能已经被修改了。</font><br>好在，HTTP协议有一种机制，允许缓存器证实它的对象是新的。这就是条件GET方法。如果</p><ol><li><b>请求报文中使用GET方法</b></li><li><b>并且请求报文中包含一个”If-Modified-Since”请求头字段</b></li></ol><p>那么该HTTP请求就是一个条件GET请求报文。</p><ol><li>前面说过，当缓存器将对象转发到浏览器时，也在本地缓存了该对象。重要的是，缓存器缓存对象的同时也缓存了最后修改日期。</li><li>下次再次请求该对象时，该对象仍然在缓存器中。由于该对象再这期间可能被修改，所以该浏览器发送一个条件GET执行最新检查。</li><li>该请求里面有一个If-Modified-Since字段，该字段的值，正是上次缓存的最后修改日期。该条件GET报文告诉服务器，仅当自指定日期之后该对象没有被修改过，才发送该对象。</li><li>如果没有修改过，Web服务器向缓存器发送一个响应报文(该响应报文中响应体为空)，状态行为304 Not Modified。告诉缓存器可以使用该对象</li><li>缓存器将本地缓存的对象发送给浏览器。</li></ol><h1 id="DNS-Domain-Name-System-域名系统"><a href="#DNS-Domain-Name-System-域名系统" class="headerlink" title="DNS(Domain Name System)域名系统"></a>DNS(Domain Name System)域名系统</h1><p>因特网上的主机和人类一样，可以用多种方式进行标识。主机的一种标识方法是用它的主机名，也可以用IP地址进行标识</p><h2 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a><font size="5">DNS提供的服务</font></h2><p>主机名是一种方便人们记忆的标识方式，而路由器则更喜欢定长的、有结构层次的IP地址。为了折中这些偏好。我们需要一种能<font color="blue">进行主机名到IP地址转换的目录服务，这就是域名系统的主要任务</font>。DNS是：</p><ol><li><b>一个由分层的DNS服务器实现的分布式数据库</b></li><li><b>一个使得主机能够查询分布式数据库的应用层协议</b></li></ol><p><font color="red">DNS是基于UDP协议的应用层协议，端口号为53。</font>通常是由其他应用层协议所使用的，包括HTTP、SMTP和FTP，将用户提供的主机名解析为IP地址。当用户访问一个主机名时</p><ol><li>将主机名发送给DNS应用的客户端</li><li>DNS客户端向DNS服务器发送一个包含主机名的请求</li><li>DNS客户最终会收到一份回答报文，其中包含主机名对应的IP地址</li><li>浏览器收到IP地址后，它能够向位于该IP地址的80端口的HTTP服务器进程发起一个TCP连接</li></ol><p>从上面可以看到，DNS的使用会带来额外的网络时延，有时可能时延很长。但是幸运的是，我们想获得的IP地址通常就缓存在一个”附近”的DNS服务器中，这有助于减少DNS的网络流量和DNS平均时延。<br>除了进行主机名到IP地址的转换以外，DNS还提供了一些其他的服务</p><ul><li><font color="bllue"><b>主机别名</b></font><br>有着复杂主机名的主机能拥有一个或多个别名。主机别名通常比主机规范名更加容易记忆。应用程序可以调用DNS来获得主机别名对应的主机规范名以及IP地址。</li><li><font color="bllue"><b>负载分配</b></font><br>DNS也用于再冗余的服务器(如冗余的Web服务器)之间进行负载分配。繁忙的站点被冗余分布在多个服务器上，每台服务器运行在不同的端系统上，都有不同的IP地址。这些IP地址集合同一个主机名相联系。DNS数据库中存储着这些IP地址集合。<br><font color="blue">当客户对映射到某地址集合的名字发出一个DNS请求时，该服务器用IP地址集合进行响应，但在每个回答中循环这些地址次序。因为这些客户通常总时向IP地址排在最前面的服务器发送HTTP请求报文，所以DNS就在所有这些冗余的Web服务器之间循环分配了负载。</font></li></ul><h2 id="DNS工作机理概述"><a href="#DNS工作机理概述" class="headerlink" title="DNS工作机理概述"></a><font size="5">DNS工作机理概述</font></h2><p>下面主要讨论DNS的主机名到IP地址转换服务。假设运行在用户主机上的某应用程序(Web浏览器等)需要将主机名转换为IP地址。</p><ol><li>这些应用程序将调用DNS的客户端，并指明需要被转换的主机名</li><li>用户主机上的DNS接收到后，向网络中发送一个DNS查询报文。所有的DNS请求和回答报文使用UDP协议经53号端口发送</li><li>用户主机上的DNS接收到一个提供所希望映射的DNS回答报文。</li><li>这个映射结果被传递到调用DNS的应用程序。</li></ol><p>从用户主机上调用应用程序的角度看，DNS是一个提供简单地直接转换的黑盒子。事实上，这个黑盒子相当复杂，它<font color="red">由分布在全球的大量DNS服务器以及定义了DNS服务器与查询主机通信方式的应用层协议组成。</font></p><h3 id="分布式、层次数据库"><a href="#分布式、层次数据库" class="headerlink" title="分布式、层次数据库"></a><font size="5">分布式、层次数据库</font></h3><p>DNS使用了大量的DNS服务器，它们以层次的方式组织，并且分布在全世界范围内。没有一台服务器拥有因特网上所有主机的映射。DNS服务器分为三种</p><ul><li>根DNS服务器<br>有400多个根服务器分布在全世界，用于提供TLD服务器的IP地址</li><li>顶级域DNS(TLD)服务器<br>每一个顶级域(如com、org、net等)和所有的国家顶级域(如cn、uk等)都有TLD服务器，用于提供权威服务器的IP地址</li><li>权威DNS服务器<br>在因特网上具有公共可访问主机(例如Web服务器、邮件服务器等)的每个组织都必须提供公共可访问的DNS记录，这些记录将这些主机的名字映射为IP地址。<br><img src="/2019/10/07/自顶向下之计算机网络和因特网-应用层/2.png" alt></li></ul><p>另外，还有一种很重要的DNS服务器，即本地服务器。它并不属于DNS服务器层次结构，但是它很重要。每个ISP都有一个本地DNS服务器，当主机和某个ISP连接时，该ISP提供一台主机的IP地址，该主机具有一台或多台其本地DNS服务器的IP地址。<font color="blue">主机的本地DNS服务器通常”邻近”本主机。</font><br><img src="/2019/10/07/自顶向下之计算机网络和因特网-应用层/3.png" alt>如图请求主机如果要得到服务器主机的IP地址，假设服务器主机名为( aaa.bbb.com)</p><ol><li>主机向本地服务器发送一个DNS查询报文，该报文含有被转换的主机名</li><li>本地服务器将该报文转发到根服务器</li><li>根服务器注意到其com前缀并向本地服务器返回负责com得TLD得IP地址列表</li><li>本地服务器再向这些TLD服务器之一发送查询报文</li><li>该TLD服务器注意到bbb.com前缀，并用权威DNS服务器的IP地址进行响应，该权威服务器是bbb.com</li><li>最后，本地服务器直接向bbb.com重发查询报文,bbb.com用aaa.bbb.com的IP地址进行响应。这样就得到了服务器主机的IP地址。</li></ol><h3 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a><font size="5">DNS缓存</font></h3><p>在上述映射中，为了得到一台主机名的映射，共发送了8份DNS报文，这无疑是增加了查询流量和查询时延。实际上，<font color="blue">为了改善时延性能并减少DNS报文数量，DNS广泛使用了缓存技术。</font><br>DNS缓存的原理很简单，<font color="blue">在一个请求链中，当某DNS服务器接收到一个DNS回答(如包含某主机名到IP的映射)时，它能将映射缓存在本地服务器中。</font><br>如果DNS服务器缓存了一台主机名/IP对，另一个对相同主机名的查询到达该DNS服务器时，该DNS服务器就能够提供所要求的IP地址，即使它不是该主机名的权威服务器。</p><ol><li>要注意的是，主机名和IP地址之间的映射不是永久的，DNS服务器会在一段时间后(一般设置为2天)丢弃该缓存信息</li><li><font color="red">本地服务器也能够缓存TLD服务器的IP地址，因而允许本地DNS绕过查询链中的根DNS服务器</font>。事实上，除了少数DNS查询外，根服务器被绕过了。</li></ol><h2 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a><font size="5">DNS记录和报文</font></h2><h3 id="DNS记录"><a href="#DNS记录" class="headerlink" title="DNS记录"></a><font size="5">DNS记录</font></h3><p>共同实现DNS分布式数据库的所有DNS服务器存储了资源记录(Resource Record，简称RR)，RR提供了主机名到IP地址的映射。每个DNS回答报文包含了一条或多条RR。<br><font color="bllue">资源记录是一个包含了<b>{Name，Value，Type，TTL}</b>这些字段的四元组。</font></p><ul><li><b>TTL</b><br>是该记录的生存时间，它决定了资源记录应当从缓存中删除的时间</li></ul><p><font color="bllue">Name和Value的值取决于Type</font></p><ul><li><b>Type=A</b><br>那么<font color="red">Name是主机名，Value是该主机名对应的IP地址</font>。即一条A类型的资源记录提供了标准主机名到IP地址的映射。</li><li><b>Type=NS</b><br>那么<font color="red">Name是一个域，而Value是一个权威服务器的主机名</font>，该权威服务器能够获取该域中主机IP地址的。</li><li><b>Type=CNAME</b><br>则<font color="red">Value是一个别名为Name的主机对应的规范主机名。</font></li><li><b>Type=MX</b><br>则<font color="red">Value是一个别名为Name的邮件服务器的规范主机名。</font></li></ul><ol><li>如果一台DNS服务器是用于某特定主机名的权威DNS服务器，那么该DNS服务器会包含一条用于该主机名的类型A记录。</li><li>如果DNS服务器不是用于主机名的权威服务器<ul><li>那么该服务器将包含一条NS记录，该记录对应包含主机名的域；</li><li>它还将包含一条类型A记录，该记录提供了上面NS记录中Value字段(权威服务器主机名)的IP地址</li></ul></li></ol><h3 id="DNS报文"><a href="#DNS报文" class="headerlink" title="DNS报文"></a><font size="5">DNS报文</font></h3><p>前面说到了DNS查询和回答报文，DNS只有这两种报文并且两种报文格式相同。<br><img src="/2019/10/07/自顶向下之计算机网络和因特网-应用层/4.png" alt></p><ul><li><font color="blue"><b>前12个字节是首部区域</b></font><ul><li><b>标识符(16比特)</b><br>用于标识该查询。这个标识符会被复制到对查询的回答报文中，以便让客户用它来匹配发送的请求和收到的回答</li></ul></li><li><font color="blue"><b>问题区域</b></font><br>包含正在进行的查询信息，该区域包括<ul><li><b>名字字段</b><br>包含正在被查询的主机名字</li><li><b>类型字段</b><br>指出有关名字的正被询问的问题类型，如主机地址是一个和名字相关(类型A)还是和邮件服务器相关(类型给MX)</li></ul></li><li><font color="blue"><b>回答区域</b></font><br>包含了对最初请求的名字的资源记录，在回答区域可以包含多条RR，因此一个主机名能够有多个IP地址的(前面讨论的冗余Web服务器)</li><li><font color="blue"><b>权威区域</b></font><br>包含了其他权威服务器的记录</li></ul><hr>应用层大致介绍到这里就结束了，主要介绍了HTTP和DNS两个应用层协议，至于书中的P2P、SMTP等其他协议就不赘述了。]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> DNS </tag>
            
            <tag> 应用层 </tag>
            
            <tag> HTTP </tag>
            
            <tag> 计算机网络自顶向下方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之归并排序</title>
      <link href="/2019/10/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>前面说完了用递归实现的快速排序，这次介绍一下另外一种新的递归排序算法–归并排序。归并排序不仅用到了递归，更重要的是其分治的思想。</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>将待排序数组递归分成左右两部分，使得左右两部分数组分别有序，最后合并左右两数组得到有序的数组。<br>对于长度为n得数组，一共只需要进行n-1次合并。以数组{8, 4, 5, 7, 1, 3, 6, 2}为例</p><ol><li>第一次{8，4}的左右两部分合并为有序数组得到{4，8}</li><li>第二次{5，7}的左右两部分合并为有序数组得到{5，7}</li><li>第三次{4，8，5，7}的左右两部分合并为有序数组得到{4，5，7，8}</li><li>第四次{1，3}的左右两部分合并为有序数组得到{1，3}</li><li>第五次{6，2}的左右两部分合并为有序数组得到{2，6}</li><li>第六次{1，3，2，6}的左右两部分合并为有序数组得到{1，2，3，6}</li><li>最后一次{4，5，7，8，1，2，3，6}的左右两部分合并为有序数组得到{1，2，3，4，5，6，7，8}，最终得到有序数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//对数组&#123;8, 4, 5, 7, 1, 3, 6, 2&#125;进行排序每一轮排序后的输出</span><br><span class="line">初始数组[1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">第一次归并过后[#4, 8#, 5, 7, 1, 3, 6, 2]</span><br><span class="line">第二次归并过后[4, 8, #5, 7#, 1, 3, 6, 2]</span><br><span class="line">第三次归并过后[#4, 5, 7, 8#, 1, 3, 6, 2]</span><br><span class="line">第四次归并过后[4, 5, 7, 8, #1, 3#, 6, 2]</span><br><span class="line">第五次归并过后[4, 5, 7, 8, 1, 3, #2, 6#]</span><br><span class="line">第六次归并过后[4, 5, 7, 8, #1, 2, 3, 6#]</span><br><span class="line">第七次归并过后[#1, 2, 3, 4, 5, 6, 7, 8#]</span><br><span class="line">排序后数组[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 归并算法</span><br><span class="line"> * @param arr  原始数组</span><br><span class="line"> * @param left 左边界</span><br><span class="line"> * @param right 有边界</span><br><span class="line"> * @param temp  中间数组</span><br><span class="line"> */</span><br><span class="line">public static void mergeSort(int[] arr, int left, int right, int[] temp) &#123;</span><br><span class="line">if (left &lt; right) &#123;</span><br><span class="line">int mid = (left + right) / 2;   //中间索引</span><br><span class="line">//向左递归</span><br><span class="line">mergeSort(arr, left, mid, temp);</span><br><span class="line">//向右递归</span><br><span class="line">mergeSort(arr, mid + 1, right, temp);</span><br><span class="line">//调用方法合并</span><br><span class="line">merge(arr, left, right, mid, temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">=======================================================================================</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 每一次完成归并的方法</span><br><span class="line"> * @param arr 排序的原始数组</span><br><span class="line"> * @param left 左边有序序列的初始索引</span><br><span class="line"> * @param right 右边索引</span><br><span class="line"> * @param mid 中间索引</span><br><span class="line"> * @param temp 中转数组</span><br><span class="line"> */</span><br><span class="line">public static void merge(int[] arr, int left, int right, int mid, int[] temp) &#123;</span><br><span class="line">int i = left;       //初始化左边有序序列的初始索引</span><br><span class="line">int j = mid + 1;    //初始化右边有序序列的初始索引</span><br><span class="line">int t = 0;          //初始化temp数组的当前索引</span><br><span class="line"></span><br><span class="line">//先把左右两边的数据按照规则填充到temp数组中，直到左右两边的有序序列有一方处理完毕为止</span><br><span class="line">while (i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">if (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">temp[t] = arr[i];</span><br><span class="line">t++;</span><br><span class="line">i++;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">temp[t] = arr[j];</span><br><span class="line">t++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//把有剩余的一边依次全部填充到temp数组中</span><br><span class="line">while (i &lt;= mid) &#123;</span><br><span class="line">temp[t++] = arr[i++];</span><br><span class="line">&#125;</span><br><span class="line">while (j &lt;= right) &#123;</span><br><span class="line">temp[t++] = arr[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将temp数组元素拷贝到arr数组中</span><br><span class="line">t=0;</span><br><span class="line">int tempLeft = left;</span><br><span class="line">while (tempLeft &lt;= right) &#123;</span><br><span class="line">arr[tempLeft++] = temp[t++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><font color="bllue"><b>时间复杂度</b></font><br> 最好情况：nlogn<br> 最差情况：nlogn</li><li><font color="bllue"><b>空间复杂度</b></font><br> 一个temp数组，所以为O(n)</li><li><font color="bllue"><b>稳定性</b></font><br> <font color="blue">归并排序是稳定的</font></li></ol><h1 id="算法速度"><a href="#算法速度" class="headerlink" title="算法速度"></a>算法速度</h1><p>同前面一样，用一个大小为80000的随机数组进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//随机生成一个数组，对其进行排序</span><br><span class="line">int[] arr = new int[8000000];</span><br><span class="line">int[] temp = new int[arr.length];</span><br><span class="line">Random random = new Random();</span><br><span class="line">for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = random.nextInt(800000);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;====================&quot;);</span><br><span class="line">long start = System.currentTimeMillis();</span><br><span class="line">mergeSort(arr, 0, arr.length - 1, temp);</span><br><span class="line">long ends = System.currentTimeMillis();</span><br><span class="line">System.out.println(&quot;归并排序共花费：&quot; + (ends - start) + &quot;毫秒&quot;);</span><br><span class="line">&#125;</span><br><span class="line">======</span><br><span class="line">测试结果稳定在16-20毫秒左右</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例模式是23种设计模式中最简单的一种。简单地说，单例模式就是整个程序中有且只有一个实例。该类负责创建自己的对象，同时确保只有一个对象。</p><hr><a id="more"></a><p>单例模式分为两种</p><ul><li><b>懒汉式</b><br>线程不安全，即在使用时在进行初始化。</li><li><b>饿汉式</b><br>线程安全，容易产生垃圾，因为类加载时就将对象初始化。</li></ul><h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><p>饿汉式的实现很简单，类的实例作为该类的静态的成员属性和一个静态的public成员方法用于获取该属性，类加载时就已经生成了类的实例，调用静态方法可以获取该实例。<br>代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton1 &#123;</span><br><span class="line">    //私有化构造方法</span><br><span class="line">    private Singleton1() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //饿汉式，类加载时就已经创建</span><br><span class="line">    private static Singleton1 s = new Singleton1();</span><br><span class="line"></span><br><span class="line">//通过静态方法获取单例</span><br><span class="line">    public static Singleton1 getInstance() &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显而易见，getInstance方法里面的操作是原子性的，因此饿汉式单例模式是线程安全的</p><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><p>线程不安全的实现代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton2 &#123;</span><br><span class="line"></span><br><span class="line">    private Singleton2()&#123;&#125;;</span><br><span class="line">    private static  Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    //线程不安全的单例模式</span><br><span class="line">    public static Singleton2 getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;    </span><br><span class="line">            instance=new Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于懒汉式是线程不安全的，因此有两种实现方式</p><ul><li><font color="blue"><b>给相应部分加上同步代码块，使之变成线程安全</b></font><br>这里用的是双重检查加锁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//双重检查加锁</span><br><span class="line">public class Singleton2 &#123;</span><br><span class="line"></span><br><span class="line">    private Singleton2()&#123;&#125;;</span><br><span class="line">    private static volatile Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    //一个线程安全的单例模式</span><br><span class="line">    public static Singleton2 getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            synchronized (Singleton2.class) &#123;</span><br><span class="line">                if (instance == null) &#123;</span><br><span class="line">                    instance=new Singleton2();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上实现代码只需要在第一次实例化单例的时候会执行到同步代码部分。</p><ul><li><font color="blue"><b>利用内部类实现</b></font><br>使用静态内部类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton3 &#123;</span><br><span class="line">    private Singleton3() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    private static class inner&#123;</span><br><span class="line">        private static Singleton3 instance=new Singleton3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Singleton3 getInstance() &#123;</span><br><span class="line">        return inner.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>可以看出，在获取方法中的操作也是原子性的，因此是线程安全的。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存模型</title>
      <link href="/2019/10/01/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/10/01/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>由于计算机的存储设备与处理器的运算速度有几个数量级差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存来作为内存与处理器之间的缓冲：将运算需要用到的数据复制到缓存中，让运算能够快速运行，当运算结束后再从缓存同步回内存之中，这样处理器就不用等待患难的内存读写了。</p><a id="more"></a><h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><p>上面说的基于高速缓存的存储交互很好的解决了处理器和内存的速度矛盾，但是又引入了新的问题：<font color="blue">缓存一致性</font>。在多个处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主存。那么<font color="red">当多个处理器的运算任务都涉及同一块主存区域时，将可能导致各自缓存数据不一致，如果发生这种情况，那同步回主内存时又以以谁为准呢？</font><br>为了解决一致性问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作。</p><ul><li><font color="bllue"><b>内存模型</b></font><br>可以理解为在特定的操作协议下，对特定内存或高速缓存进行读写访问的过程抽象。<br><img src="/2019/10/01/Java内存模型/1.png" alt>处理器、高速缓存以及主内存间的交互关系</li><li><font color="bllue"><b>指令重排序</b></font><br>为了<font color="blue">使处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但是并不保证程序中各个语句的执行顺序和输入代码中的顺序一致。</font>Java虚拟机的即时编译器中也有类似的指令重排序优化。</li></ul><h1 id="Java内存模型-JMM"><a href="#Java内存模型-JMM" class="headerlink" title="Java内存模型(JMM)"></a>Java内存模型(JMM)</h1><p>Java虚拟机规范中定义了一种Java内存模型(Java Memory Model)来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台上都能达到一致性的内存访问效果。</p><h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a><font size="5">主内存与工作内存</font></h2><p>Java内存模型的主要目标是<font color="blue">定义程序中各个变量的访问规则</font>，即<font color="blue">在虚拟机中将变量存储到内存和内存中取出变量这样的底层细节。</font>这里说的变量,和Java编程中所说的变量有所不同，它包括了<font color="bllue">实例字段、静态字段和构成数组对象的元素</font>，不包括局部变量和方法参数，因为这两者是线程私有的。<br>Java内存模型规定了所有变量都存储在主内存中，每条线程还有自己的工作内存(和前面说的处理器高速缓存类似)，线程的工作内存中保存了被该线程使用到的变量的主内存的拷贝副本。不同线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需通过主内存来完成。<br><img src="/2019/10/01/Java内存模型/2.png" alt>线程、主内存以及工作内存三者关系</p><h2 id="内存间交互"><a href="#内存间交互" class="headerlink" title="内存间交互"></a><font size="5">内存间交互</font></h2><p>关于一个变量如何从主内存拷贝到工作内存、如何从工作内存同不会主内存之类的实现细节，Java内存模型中定义了8种操作来完成，这8种操作都是原子性的。</p><ul><li><font color="bllue"><b>lock(锁定)</b></font><br>作用于主内存的变量，把变量标识为一条线程独占状态</li><li><font color="bllue"><b>unlock(解锁)</b></font><br>作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才能被其他线程锁定</li><li><font color="bllue"><b>read(读取)</b></font><br>作用于主内存的变量，他一个变量的值从主内存传输到线程的工作内存</li><li><font color="bllue"><b>load(载入)</b></font><br>作用于工作内存的变量，把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li><font color="bllue"><b>use(使用)</b></font><br>作用于工作内存的变量，把工作内存的一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量值的字节码指令时将会执行这个操作</li><li><font color="bllue"><b>assign(赋值)</b></font><br>作用于工作内存的变量，把一个从执行引擎收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时将会执行这个操作</li><li><font color="bllue"><b>store(存储)</b></font><br>作用于工作内存的变量，把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</li><li><font color="bllue"><b>write(写入)</b></font><br>作用于主内存的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul><p>同样Java内存模型还规定了在执行上述8种操作时必须满足一下条件</p><ul><li>不允许read和load，store和write这两对操作之一单独出现，即如果执行了read操作，那么就必须执行load(但两个操作不一定要连续执行)。即<font color="blue">不允许一个变量从主内存读取但工作内存不接受，或者从工作内存发起回写但主内存不接受的情况。</font></li><li>不允许一个线程丢弃它最近的assign(赋值)操作，即<font color="blue">变量在工作内存中改变了之后必须把该变化同步回主内存</font></li><li>不允许线程<font color="blue">无原因地(没有发生过assign操作)把数据从工作内存同步回主内存</font></li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化(load或assign)的变量。也就是说，<font color="blue">对一个变量实施use、store操作之前，必须先执行过了assign和load操作</font></li><li><font color="blue">一个变量同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次</font>，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值</li><li><font color="blue">对一个变量执行unlock之前，必须先把此变量同步回主内存中(执行store、write操作)</font></li></ul><h2 id="Java指令重排序"><a href="#Java指令重排序" class="headerlink" title="Java指令重排序"></a><font size="5">Java指令重排序</font></h2><p>在执行过程中为了提高性能，编译器和处理器经常会对指令进行重排序，重排序分成三种类型</p><ul><li><b>编译器优化的重排序</b>，编译器在不改变单线程程序语义前提下，可以重新安排语句的执行顺序。</li><li><b>指令级并行的重排序</b>，现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性(可以理解为指令A不用到指令B的数据)，处理器可以改变语句对应机器指令的执行顺序。</li><li><b>内存系统的重排序</b>，由于处理器使用缓存和读写缓冲区，使得加载和存储操作看上去可能是在乱序执行。</li></ul><p>从Java源码到最终实际执行的指令序列，会经过下面三种重排序<br><img src="/2019/10/01/Java内存模型/3.png" alt></p><hr><p><a href="https://www.cnblogs.com/nexiyi/p/java_memory_model_and_thread.html" target="_blank" rel="noopener">参考博客</a><br>Java内存模型大致能介绍就这些，关于并发和多线程最近开始看书，有了初步的理解后逐步介绍。深入理解JVM虚拟机这本书也算是初步看完了，继续努力。</p>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的语法糖</title>
      <link href="/2019/09/30/Java%E4%B8%AD%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/2019/09/30/Java%E4%B8%AD%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<p>语法糖，是指在计算机中添加某种语法这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说，语法糖能够增加程序的可读性。Java中常用的语法糖有泛型、变长参数、自动拆箱/装箱等。下面就介绍一下这些语法糖的原理。</p><a id="more"></a><h1 id="泛型和类型擦除"><a href="#泛型和类型擦除" class="headerlink" title="泛型和类型擦除"></a>泛型和类型擦除</h1><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a><font size="5">类型擦除</font></h2><p>泛型时JDK1.5的新增特性，本质是参数化类型的应用。即将所操作的数据类型指定为一个参数，这种参数可以用在类、接口、方法的创建中，分别被称为泛型类、泛型接口和泛型方法。<br>Java中的泛型被称为伪泛型，它<font color="bllue">只在Java源码中存在，在编译后的字节码文件中就已经被替换为原生类型了(裸类型)，并且在相应地方插入了强制转型代码</font>。因此对于运行期的Java语言来说，ArrayList<integer>和ArrayList<string>就是同一个类，所以Java中泛型实现方法被称为类型擦擦除。<br>举一个Java泛型的例子</string></integer></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;hello&quot;, &quot;你好&quot;);</span><br><span class="line">map.put(&quot;how are you&quot;, &quot;吃了没&quot;);</span><br><span class="line">System.out.println(map.get(&quot;hello&quot;));</span><br><span class="line">System.out.println(map.get(&quot;how are you&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上面代码，编译成Class文件，然后再反编译进行反编译后，会变成下main这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map map = new HashMap();</span><br><span class="line">map.put(&quot;hello&quot;, &quot;你好&quot;);</span><br><span class="line">map.put(&quot;how are you&quot;, &quot;吃了没&quot;);</span><br><span class="line">System.out.println((String) map.get(&quot;hello&quot;));</span><br><span class="line">System.out.println((String) map.get(&quot;how are you&quot;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以看到，程序中所有的泛型又变回的原生类型，并且加上了强制转型。这说明，<font color="blue"><b>在编译后的字节码文件中是没有泛型的，即泛型仅存在于源码中，在编译过程中已经被擦除。</b></font><br>既然知道了泛型的实现原理，那么看一看下面这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test1 &#123;</span><br><span class="line">    public static void method(List&lt;String&gt; list) &#123;</span><br><span class="line">        System.out.println(&quot;List&lt;String&gt; list&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void method(List&lt;Integer&gt; list) &#123;</span><br><span class="line">        System.out.println(&quot;List&lt;Integer&gt; list&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毫无疑问，上面这段代码是无法通过编译的，这是为什么呢？<font color="blue">因为编译期对泛型进行类型擦除后，这两个方法实际上是一模一样的，不构成重载</font>。因此自然无法通过编译。那么你可能会问：既然泛型只存在于源码中，那么JVM在运行时怎么知道这个对象的具体类型呢？(例如怎么知道List<integer> list中要添加Integer类型元素呢？)</integer></p><h2 id="如何得知具体类型"><a href="#如何得知具体类型" class="headerlink" title="如何得知具体类型"></a><font size="5">如何得知具体类型</font></h2><p>要回答这个问题，我们需要回到前面的Class文件结构，了解三个属性表：</p><ol><li><p><font size="5">Signature</font><br>该属性可以用在类、方法表、字段表中。这个属性用于支持泛型，在Java中，任何类、接口、初始化方法或成员属性如果使用了泛型，那么该Signature将泛型记录下来。这样，即使在编译时泛型被擦除，JVM仍能通过该属性获知泛型的类型。</p></li><li><p><font color="red"><b>LocalVariableTable属性</b></font><br>该属性可以用在用在Code属性中，用于描述栈帧中局部变量表中的变量和Java源码中定义的变量之间的关系。对于表的结构这里不作赘述，只介绍一下这个属性的作用：对于局部变量表的每一个变量，该属性记录了变量名称、在局部变量表中的位置、变量的描述符和作用域。</p></li><li><p><font color="red"><b>LocalVariableTypeTable属性</b></font><br>该属性和LocalVariableTable属性相比，只改动了一处：它不记录字段的描述符，而是记录字段的特征签名(Signature属性)。</p></li></ol><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a><font size="5">演示</font></h2><p>前面说了三个属性，其实是为了这里的实验做铺垫。我们将以下面的类为基础进行演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//泛型类</span><br><span class="line">public class test&lt;K&gt; &#123;</span><br><span class="line">    //未使用泛型</span><br><span class="line">    String x = &quot;1&quot;;</span><br><span class="line">    //使用泛型</span><br><span class="line">    ArrayList&lt;String&gt; strings;</span><br><span class="line">    ArrayList&lt;Integer&gt; integers;</span><br><span class="line">    K ele;</span><br><span class="line"></span><br><span class="line">    public void foo() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //使用泛型参数</span><br><span class="line">    public void bar(K ele, int x) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对上面类进行编译，然后查看字节码文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">public class jvmtest.test&lt;K extends java.lang.Object&gt; extends java.lang.Object</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 56</span><br><span class="line">  flags: (0x0021) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #4                          // jvmtest/test</span><br><span class="line">  super_class: #5                         // java/lang/Object</span><br><span class="line">  interfaces: 0, fields: 4, methods: 3, attributes: 2</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #5.#34         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = String             #35            // 1</span><br><span class="line">   #3 = Fieldref           #4.#36         // jvmtest/test.x:Ljava/lang/String;</span><br><span class="line">   #4 = Class              #37            // jvmtest/test</span><br><span class="line">   #5 = Class              #38            // java/lang/Object</span><br><span class="line">   #6 = Utf8               x</span><br><span class="line">   #7 = Utf8               Ljava/lang/String;</span><br><span class="line">   #8 = Utf8               strings</span><br><span class="line">   #9 = Utf8               Ljava/util/ArrayList;</span><br><span class="line">  #10 = Utf8               Signature</span><br><span class="line">  #11 = Utf8               Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;</span><br><span class="line">  #12 = Utf8               integers</span><br><span class="line">  #13 = Utf8               Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;</span><br><span class="line">  #14 = Utf8               ele</span><br><span class="line">  #15 = Utf8               Ljava/lang/Object;</span><br><span class="line">  #16 = Utf8               TK;</span><br><span class="line">  #17 = Utf8               &lt;init&gt;</span><br><span class="line">  #18 = Utf8               ()V</span><br><span class="line">  #19 = Utf8               Code</span><br><span class="line">  #20 = Utf8               LineNumberTable</span><br><span class="line">  #21 = Utf8               LocalVariableTable</span><br><span class="line">  #22 = Utf8               this</span><br><span class="line">  #23 = Utf8               Ljvmtest/test;</span><br><span class="line">  #24 = Utf8               LocalVariableTypeTable</span><br><span class="line">  #25 = Utf8               Ljvmtest/test&lt;TK;&gt;;</span><br><span class="line">  #26 = Utf8               foo</span><br><span class="line">  #27 = Utf8               bar</span><br><span class="line">  #28 = Utf8               (Ljava/lang/Object;I)V</span><br><span class="line">  #29 = Utf8               I</span><br><span class="line">  #30 = Utf8               (TK;I)V</span><br><span class="line">  #31 = Utf8               &lt;K:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class="line">  #32 = Utf8               SourceFile</span><br><span class="line">  #33 = Utf8               test.java</span><br><span class="line">  #34 = NameAndType        #17:#18        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #35 = Utf8               1</span><br><span class="line">  #36 = NameAndType        #6:#7          // x:Ljava/lang/String;</span><br><span class="line">  #37 = Utf8               jvmtest/test</span><br><span class="line">  #38 = Utf8               java/lang/Object</span><br><span class="line">&#123;</span><br><span class="line">  java.lang.String x;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line"></span><br><span class="line">  java.util.ArrayList&lt;java.lang.String&gt; strings;</span><br><span class="line">    descriptor: Ljava/util/ArrayList;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #11                          // Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;</span><br><span class="line"></span><br><span class="line">  java.util.ArrayList&lt;java.lang.Integer&gt; integers;</span><br><span class="line">    descriptor: Ljava/util/ArrayList;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #13                          // Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;</span><br><span class="line"></span><br><span class="line">  K ele;</span><br><span class="line">    descriptor: Ljava/lang/Object;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #16                          // TK;</span><br><span class="line"></span><br><span class="line">  public jvmtest.test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String 1</span><br><span class="line">         7: putfield      #3                  // Field x:Ljava/lang/String;</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 7: 0</span><br><span class="line">        line 8: 4</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      11     0  this   Ljvmtest/test;</span><br><span class="line">      LocalVariableTypeTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0      11     0  this   Ljvmtest/test&lt;TK;&gt;;</span><br><span class="line"></span><br><span class="line">  public void foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=1, args_size=1</span><br><span class="line">         0: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 19: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       1     0  this   Ljvmtest/test;</span><br><span class="line">      LocalVariableTypeTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       1     0  this   Ljvmtest/test&lt;TK;&gt;;</span><br><span class="line"></span><br><span class="line">  public void bar(K, int);</span><br><span class="line">    descriptor: (Ljava/lang/Object;I)V</span><br><span class="line">    flags: (0x0001) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=0, locals=3, args_size=3</span><br><span class="line">         0: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 23: 0</span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       1     0  this   Ljvmtest/test;</span><br><span class="line">            0       1     1   ele   Ljava/lang/Object;</span><br><span class="line">            0       1     2     x   I</span><br><span class="line">      LocalVariableTypeTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            0       1     0  this   Ljvmtest/test&lt;TK;&gt;;</span><br><span class="line">            0       1     1   ele   TK;</span><br><span class="line">    Signature: #30                          // (TK;I)V</span><br><span class="line">&#125;</span><br><span class="line">Signature: #31                          // &lt;K:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br><span class="line">SourceFile: &quot;test.java&quot;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><ol><li>我们先看类的成员属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//未使用泛型</span><br><span class="line">java.lang.String x;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line"></span><br><span class="line">==============================</span><br><span class="line">//使用了泛型</span><br><span class="line">java.util.ArrayList&lt;java.lang.String&gt; strings;</span><br><span class="line">    //泛型被擦除</span><br><span class="line">    descriptor: Ljava/util/ArrayList;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #11                          // Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;</span><br><span class="line"></span><br><span class="line">java.util.ArrayList&lt;java.lang.Integer&gt; integers;</span><br><span class="line">    //泛型被擦除</span><br><span class="line">    descriptor: Ljava/util/ArrayList;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #13                          // Ljava/util/ArrayList&lt;Ljava/lang/Integer;&gt;;</span><br><span class="line"></span><br><span class="line">K ele;</span><br><span class="line">    //泛型被擦除</span><br><span class="line">    descriptor: Ljava/lang/Object;</span><br><span class="line">    flags: (0x0000)</span><br><span class="line">    Signature: #16                          // TK;(T:Type K:泛型)</span><br></pre></td></tr></table></figure></li></ol><p>可以看出，三个使用了泛型的成员属性在编译成字节码后，泛型都被擦除了。但是和没有使用泛型的成员属性x相比，它们多了Signature属性，虽然泛型被擦除，但是我们通过该属性仍可以得知泛型的类型。</p><ol start="2"><li>我们再来看看方法。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public void bar(K, int);</span><br><span class="line">  //泛型被擦除</span><br><span class="line">  descriptor: (Ljava/lang/Object;I)V</span><br><span class="line">  flags: (0x0001) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=0, locals=3, args_size=3</span><br><span class="line">       0: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 23: 0</span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       1     0  this   Ljvmtest/test;</span><br><span class="line">          //泛型被擦除</span><br><span class="line">          0       1     1   ele   Ljava/lang/Object;</span><br><span class="line">          0       1     2     x   I</span><br><span class="line">    LocalVariableTypeTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          0       1     0  this   Ljvmtest/test&lt;TK;&gt;;</span><br><span class="line">          0       1     1   ele   TK;</span><br><span class="line">  Signature: #30                          // (TK;I)V</span><br></pre></td></tr></table></figure></li></ol><p>我们看看带泛型参数的方法bar()，我们看到方法中前面说过的三个属性全部都有。我们来分析一下：可以看到，该方法的泛型也被擦除了，在LocalVariableTable也不能查看到泛型参数的类型(也被擦除)，但是在LocalVariableTypeTable中，可以看到参数ele的泛型为K。另外，该方法的Signature属性记录了该方法的特征签名(方法名参数类型和顺序)，该属性中保存了泛型信息。</p><ol start="3"><li>最后在看一下字节码的末尾<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Signature: #31                          // &lt;K:Ljava/lang/Object;&gt;Ljava/lang/Object;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，该类也有一个Signature属性，记录了泛型的信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font size="5">总结</font></h2><p>Java的泛型是伪泛型，即泛型仅仅存在于源码中，在编译时泛型被擦除，所谓的擦除，<font color="red"><b>仅仅是对方法的Code属性中的字节码进行擦除，实际上Signature属性和LocalVariableTypeTable属性还是保留了泛型信息，这也是我们能通过反射取得参数化类型的根本依据。</b></font></p><h1 id="自动装箱、拆箱和遍历循环"><a href="#自动装箱、拆箱和遍历循环" class="headerlink" title="自动装箱、拆箱和遍历循环"></a>自动装箱、拆箱和遍历循环</h1><ul><li><p><b>自动装箱</b><br>实际上调用的是<font color="blue">包装类的valueOf()</font>方法；</p></li><li><p><b>自动拆箱</b><br>调用的则是<font color="blue">包装类的xxxValue()</font>方法。下面以Integer和int为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int i=1;</span><br><span class="line">//自动装箱</span><br><span class="line">Integer.valueOf(i)</span><br><span class="line">=======================</span><br><span class="line">Integer=new Integer(4)</span><br><span class="line">//自动拆箱</span><br><span class="line">i=Integer.intValue()</span><br></pre></td></tr></table></figure></li><li><p><b>遍历循环for-each</b><br>使用的则是<font color="blue">Iterator迭代器</font>来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list=new ArrayList;</span><br><span class="line">for(int i:list)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//实际上是通过迭代器实现</span><br><span class="line">for(Iterator localIterator=list.iterator();localIterator.hasNext;)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>使用包装类要注意两点</b></p><ul><li>包装类的”==”再不遇到算术运算的情况下不会自动拆箱</li><li>包装类的”equals()方法”不处理数据转型的关系</li></ul></li></ul><p>给出下面一段测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Integer a = 1;</span><br><span class="line">Integer b = 2;</span><br><span class="line">Integer c = 3;</span><br><span class="line">Integer d = 3;</span><br><span class="line">Integer e = 321;</span><br><span class="line">Integer f = 321;</span><br><span class="line">Long g = 3L;</span><br><span class="line"></span><br><span class="line">System.out.println(c == d); //true ,-128~127之间用到Integer内的缓存池</span><br><span class="line">System.out.println(e == f); //false</span><br><span class="line"></span><br><span class="line">//遇到算术运算，自动拆箱</span><br><span class="line">System.out.println(c == (a + b));   //true</span><br><span class="line">//equals不会处理数据转型</span><br><span class="line">System.out.println(c.equals(a + b));//true</span><br><span class="line">System.out.println(g.equals(a + b));//false</span><br><span class="line">//遇到算术运算自动拆箱，进行数据转型</span><br><span class="line">System.out.println(g == a + b);     //true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java编程思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM虚拟机四</title>
      <link href="/2019/09/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%9B/"/>
      <url>/2019/09/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>这一节主要介绍一下虚拟机是怎么执行Class文件的字节码以及《深入理解JVM虚拟机》后面一些知识，因为后面很多都不是很理解，所以结合在一起记录，如果以后再次翻看弄懂了一些，就再另外记录吧。</p><a id="more"></a><p>执行引擎是Java虚拟机最核心的组成部分之一，Java虚拟机在执行Java代码时可能会有解释执行(通过解释器执行)和编译执行(通过编译器执行)两种选择，或者两者都有。所有Java虚拟机的执行引擎都是一致的</p><ul><li>输入过程：输入字节码文件</li><li>处理过程：字节码解析，执行相应指令</li><li>输出过程：输出执行结果</li></ul><h1 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h1><ul><li><font color="bllue"><b>栈帧</b></font><br>是<font color="blue">用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素</font>。每一个方法从调用开始到执行完成的过程，对应着栈帧在虚拟机中从入栈到出栈的过程。栈帧中包括<ul><li><b>方法的局部变量表</b></li><li><b>操作数栈</b></li><li><b>动态连接</b></li><li><b>方法返回地址等</b></li></ul></li></ul><p>另外前面说到过，在编译阶段，局部变量表和操作数栈的大小都已经确定并写在Code属性中，因此<font color="bllue">一个栈桢分配多少内存不会受到运行时数据的影响。</font><br>对于执行引擎来说，只有线程栈顶的栈帧才是有效的，称为当前栈帧，与栈帧相关联的方法称为当前方法。<br>虚拟机使用<font color="bllue">局部变量表完成参数值到参数列表的传递过程</font>，如果是一个实例方法，那局部变量表第0位索引的Slot默认用于传递方法所属对象实例的引用，在方法中可以通过this关键字来访问这个隐含的参数。其余参数按照参数表顺序排列，占用从1开始的Slot。参数表分配完毕后再根据方法体内定义变量的顺序和作用域分配其余Slot。<br><font color="blue">局部变量表的Slot是可以重用的，如果当前字节码PC计数器已经超过了方法体中的某个变量的作用域，那么该变量对应的Slot就可以交给其他变量使用。</font></p><ol><li>对于类变量(static)，会有两次赋值<ul><li><b>一次是在准备阶段赋初始值</b></li><li><b>一次是在初始化阶段赋予程序设置的值</b><br>因此<font color="red">初始化阶段不为类类变量赋值也可以直接使用。</font></li></ul></li><li>对于<font color="red">局部变量，如果定义了但没有赋初始值是不能使用的。</font></li><li>对于类成员变量，也会有两次赋值<ul><li><b>第一次是new指令过后，&lt; init&gt;方法执行之前，对象的字段(即成员变量)已经被赋初始化值</b></li><li><b>第二次是在&lt; init&gt;方法(实例构造器)，赋予字段程序设置的值</b><br>因此<font color="red">对于成员变量，不赋初值也能直接使用</font></li></ul></li></ol><ul><li><p><font color="bllue"><b>操作数栈</b></font><br>和局部变量表一样，操作数栈的大小在编译后就已经确定，记录在Code属性中。<font color="blue">操作数栈的每一个元素可以是任意的Java数据类型。</font><br>当一个方法开始执行时，方法的操作数栈是空的，在方法的执行过程中，会有各种字节码指令往操作数栈中写入和提取内容，也就是入栈出栈操作。<font color="bllue">Java虚拟机的解释执行引擎被称为”基于栈的执行引擎”，这里指的就是操作数栈。</font></p></li><li><p><font color="bllue"><b>动态连接</b></font><br><font color="blue">每个栈帧中都包含一个指向运行时常量池中该栈帧所属方法的引用。</font>前面说到，Class文件的常量池中有大量符号引用，字节码中的方法调用指令就常以常量池中指向方法的符号引用作为参数，这些符号引用</p><ul><li><b>一部分会在类加载阶段或第一次使用时转换为直接引用，即静态解析</b></li><li><b>另外一部分将在每次运行期间转换为直接引用，这部分称为动态连接</b></li></ul></li><li><p><font color="bllue"><b>方法返回地址</b></font><br>当一个方法开始执行，有两种方式可以退出这个方法。</p><ul><li><b>执行引擎遇到任意一个方法返回的字节码指令。</b><br>这时可能会有返回值传递给调用该方法的方法，至于是否有返回值或者返回值类型取决于返回指令的类型。这种退出方式被称为正常完成出口。<br><font color="blue">此时调用该方法的方法PC计数器的值可以作为返回地址。</font></li><li><b>方法执行过程中遇到了异常，并且这个异常没有在方法体内得到处理。</b><br>无论是Java虚拟机内部产生的异常，还是代码中使用athrow字节码产生的异常(throw语句)只要在方法的方法表中内有搜索到匹配的异常处理器(即不属于Java代码中catch语句列举的异常)，就会导致方法退出。这种退出方式被称为异常完成出口。是不会给上层调用方法任何返回值的。<br><font color="blue">此时，返回地址是通过异常处理器来确定的。</font></li></ul></li></ul><h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><p><font color="blue">方法调用不等同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本，即调用哪一个方法(因为Java中重写和重载机制)</font>，不涉及方法的执行。前面说过，一切调用在Class文件里存储的都只是符号引用，而不是方法在实际运行时内存布局的入口地址(直接引用)，这就导致Java方法调用时，需要在类加载期，甚至是运行期才能确定目标方法的直接引用。</p><ul><li><p><font color="bllue"><b>解析</b></font><br>在类加载的解析阶段，会将一部分符号引用转化为直接引用。这种解析能成立的前提是：方法在程序运行之前就有一个确定的调用版本，并且这个调用版本在运行期间是不可变的。即编译器可知，运行期不可变，这类方法主要有两类</p><ul><li><b>静态方法</b><br>与类型直接关联</li><li><b>私有方法</b><br>外部不可被访问</li><li><b>实例构造器</b></li><li><b>父类方法</b><br>这四类方法<font color="blue">适合在类加载阶段进行解析</font>。这四类方法又被称为<font color="red">非虚方法</font>，其他方法都是虚方法。<font color="bllue">除此之外final方法也是非虚方法。</font></li><li><b>解析调用是静态过程</b><br>在编译期就完全确定，在类加载的解析阶段就会把涉及的符号引用全部转变为直接引用。这时第一次的解析结果会被缓存在运行时常量池中，并将常量标识为已解析，从而避免重复解析。</li><li><b>分派调用可能是静态的也可能是动态的</b></li></ul></li><li><p><font color="bllue"><b>静态分派</b></font><br>Java具备三大特征：继承、封装和多态。分派将会揭示重写和重载在Java虚拟机中是如何实现的。来测试一下下面一段代码，然后看一看结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class StaticDispath &#123;</span><br><span class="line">    static abstract class Human&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Man extends Human &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Woman extends Human &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sayHello(Human human) &#123;</span><br><span class="line">        System.out.println(&quot;Human&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void sayHello(Man human) &#123;</span><br><span class="line">        System.out.println(&quot;Man&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public void sayHello(Woman human) &#123;</span><br><span class="line">        System.out.println(&quot;Woman&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Human man = new Man();</span><br><span class="line">        Human woman=new Woman();</span><br><span class="line"></span><br><span class="line">        StaticDispath s=new StaticDispath();</span><br><span class="line">        s.sayHello(man);</span><br><span class="line">        s.sayHello(woman);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行结果<br><img src="/2019/09/30/深入理解JVM虚拟机四/1.png" alt>有三个重载的方法，为什么会选择执行参数类型为Human的重载呢？先介绍一下两个概念</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Human man = new Man();</span><br></pre></td></tr></table></figure><p>上面这段代码中的”Human”被称为静态类型，new后面的”Man”被称为实际类型。</p><ul><li>静态类型<br>仅仅在使用时发生变化，而变量本身的静态类型不会改变，并且静态类型在编译期可知</li><li>实际类型<br>在运行期才能确定变化的结果，编译器在编译时并不知道实际类型是什么</li></ul><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在这里实际类型从Man变成了Woman，而静态类型仍是Hunman</span><br><span class="line">Human man=new Man()</span><br><span class="line">man=new Woman()</span><br><span class="line"></span><br><span class="line">//这时候静态类型仅仅在使用时发生了变化，但是man和woman仍旧是Human类型。</span><br><span class="line">//如果这样调用，那么输出结果就是Man和Woman而不是Human了。</span><br><span class="line">s.sayHello((Man)man);</span><br><span class="line">s.sayHello((Woman)woman);</span><br></pre></td></tr></table></figure><p>虚拟机(确切的说是编译器)在重载时通过参数的静态类型(即参数字面值)作为判定依据而不是实际类型。并且静态类型是编译期可知的，因此，<font color="bllue">在编译期Javac编译器会根据参数的静态类型选择使用哪个重载方法。</font><br>所有依赖静态分派来定位方法执行版本的分派动作称为静态分派。<font color="blue">静态分派的典型就是<b>方法重载</b></font></p><ul><li><font color="bllue"><b>动态分派</b></font><br>同样的，还用一段代码来做测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class DynamicDispatch &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Human man = new Man();</span><br><span class="line">        Human woman = new Woman();</span><br><span class="line"></span><br><span class="line">        man.sayHello();</span><br><span class="line">        woman.sayHello();</span><br><span class="line">        man=new Woman();</span><br><span class="line">        man.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Human&#123;</span><br><span class="line">    protected abstract void sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Man extends Human&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;man&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Woman extends Human &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;woman&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>很简单的一段代码，用到了重写，运行结果<br><img src="/2019/09/30/深入理解JVM虚拟机四/2.png" alt>这里显然不是根据静态类型来决定的，因为静态类型都是Human的两个变量在调用sayHello时执行了不同的方法，并且man两次调用sayHello方法输出结果不同。<br>来看一下字节码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">16: aload_1</span><br><span class="line">17: invokevirtual #6                  // Method Human.sayHello:()V</span><br><span class="line">20: aload_2</span><br><span class="line">21: invokevirtual #6                  // Method Human.sayHello:()V</span><br></pre></td></tr></table></figure><p>其中aload_1和aload_2就是将man和woman两个对象的引用入操作数栈，这两个对象是将要执行的sayHello方法的所有者。<br>17和21行的invokevirtual是方法调用指令，从字节码角度来看，无论是指令(都是invokevirtual指令)还是参数(注释显示了参数是Human.sayHello的符号引用)都完全一样，两行指令一模一样。但是执行的结果却不同。<br>这就要从invokevirtual的多态查找过程说起，该指令运行使得解析过程大致分为一下几个步骤</p><ol><li>找到操作数栈顶的<font color="blue">第一个元素指向的对象的实际类型</font>(在这里man的实际类型是Man，woman的实际类型是Woman)，记为C。</li><li>如果在C中找到了与常量中的描述符和简单名称都相符(Human.sayHello:()V)的方法，则进行访问权限校验，如果通过返回该方法的直接引用，否则抛出异常。</li><li>否则，按照继承关系从下往上依次对C的父类进行第二步操作</li><li>如果始终没有找到，抛出异常。</li></ol><p>从上面过程可以发现，该指令第一步就是在<font color="red">运行期间找到执行方法所有者的实际类型，所以两次invokevirtual虽然参数一模一样，但是却将符号引用解析到了不同的直接引用上，这就是<b>Java重写的本质</b>。</font><br>这种运行期间根据实际类型确定具体实行哪个方法的分派过程称为动态分派。</p>]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM虚拟机三</title>
      <link href="/2019/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89/"/>
      <url>/2019/09/28/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>前面已经介绍了JVM的内存布局、自动内存管理、垃圾回收以及Class文件结构，那么虚拟机又是怎么加载Class文件的？Class文件的信息进入到JVM中会不会发生变化呢？那么这次就记录一下<b>虚拟机类加载机制</b>。</p><hr><a id="more"></a><font color="bllue">虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析以及初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</font>在Java中，类型的加载、连接、初始化过程都是在程序运行期间完成的，这种做法会令加载时性能开销增加一些，但是却为Java程序提供了高灵活性。例如，对于一个接口，可以等到运行时在指定其实际的实现类。可以通过类加载器在程序运行时从其他地方加载一个二进制流作为代码的一部分。<h1 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的生命周期如下<br><font color="red"><b>加载==&gt;连接(验证==&gt;准备==&gt;解析)==&gt;初始化==&gt;运行==&gt;使用==&gt;卸载</b></font><br>其中验证、准备、解析三个阶段统称为连接。并且加载、验证、准备、解析、初始化这5个阶段的顺序是确定的。<br>那么什么情况下需要执行类加载的第一个过程：加载呢？<br>对于初始化阶段，虚拟机严格规定了<font color="red"><b>有且只有</b></font>5种情况必须立即对类进行初始化(初始化之前自然要先进行加载、连接操作)</p><ul><li>遇到<font color="blue">new、getstatic、putstatic、invokestatic这四条指令</font>时，如果类没有进行过初始化，则需要先对类进行初始化。可以概括为一下几个方面：<ul><li><b>使用new关键字实例化对象时</b></li><li><b>读取或设置一个类的静态字段(被final修饰、已在编译器把结果放入常量池的静态字段除外)时</b></li><li><b>调用一个类的静态方法时</b></li></ul></li><li><font color="blue">使用java.lang.reflect包的方法进行反射调用时</font>，如果类没有进行过初始化，则需要先对类进行初始化。</li><li><font color="blue">初始化一个类时，如果发现其父类还没有进行过初始化，则需先对其父类进行初始化。</font></li><li>当虚拟机启动时，用户需要指定一个要执行的<font color="blue">主类(含main方法的类)，虚拟机会先初始化这个类</font></li><li>如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStati或REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先对类进行初始化。</li></ul><p>上面5种场景的行为称为对一个类的主动引用。<font color="blue">除此之外，所有引用类的方法都不会触发其初始化，称为被动引用</font>，如：</p><ul><li>通过子类引用父类的静态字段，子类不会被初始化。<font color="bllue">对于静态字段，只有直接定义这个字段的类才会被初始化。</font></li><li><font color="bllue">通过数组来引用类，不会触发此类的初始化。</font></li><li><font color="bllue">常量在编译期进入调用类的常量池，本质上讲没有直接引用到定义常量的类，因此不会触发定义常量类的初始化。</font></li></ul><p>(具体示例代码见书P211。)<br>接口的类加载过程和类有所不同，主要体现在第3点，<font color="red">一个接口在初始化时，并不要求其父接口全部完成了初始化，只有在真正使用到父接口的时候才会初始化。</font></p><h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p>下面说一下类加载的全过程：加载、验证、准备、解析和初始化。</p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a><font size="5">加载</font></h2><p>加载时类加载过程的一个阶段，在加载阶段，虚拟机可以完成三件事</p><ul><li><b>通过一个类的全限定名获取此类的二进制字节流</b></li><li><b>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</b></li><li><b>在内存中生成一个代表此类的java.lang.Class对象，作为方法区此类各种数据的访问入口。</b></li></ul><p>相比于类加载过程的其他阶段，一个非数组类的加载阶段(确切的说是加载阶段中获取类的二进制字节流的操作)是开发人员可控性最强的。因为我们可以使用系统的的引导类加载器来完成，也可以使用自定义的类加载器完成。<br>对于数组类而言，<font color="bllue">数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的</font>。但数组类和类加载器仍有密切的关系。数组类的元素类型(去掉所有[])最终要靠类加载器去创建。一个数组类C的创建过程如下</p><ul><li>如果数组的组件类型(去掉一对[]的类型)是引用类型，那就递归采用前面说的加载过程去加载这个组件类型，<font color="bllue">数组C将在加载组件类型的类加载器的类名称空间上被标识</font></li><li>如果数组的组件类型不是引用类型(如int[] a或二维数组等)，<font color="bllue">Java虚拟机将会把数组标记为与引导类加载器关联</font></li><li>数组类的可见性与它的组件类型可见性一致，如果组件类型不是引用类型，那数组可见类型默认public。</li></ul><p><font color="blue">加载完成后，虚拟机外部的二进制字节流就被加载进方法区中。然后在内存中实例化一个java.lang.Class对象</font>，(对于HotSpot而言，该对象存放在方法区中)</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a><font size="5">验证</font></h2><p>加载阶段和连接阶段的部分内容是交叉进行的，如一部分字节码文件格式的验证动作。<br>验证时连接阶段的第一步，是虚拟机对自身保护的一项重要工作。这一阶段的目的<font color="bllue">是为了确保Class文件的字节流中包含的信息符合虚拟机要求，并且不会危害虚拟机自身安全。</font>该阶段分为四步：</p><ol><li><b>文件格式验证</b></li><li><b>元数据验证</b></li><li><b>字节码验证</b></li><li><b>符号引用验证</b></li></ol><h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a><font size="5">文件格式验证</font></h3><p>验证字节码是否符合Class文件格式，并且能被当前版本虚拟机处理，可能包含一下验证点</p><ul><li>是否以魔数”0xCAFEBABE”开头</li><li>主次版本号是否在当前虚拟机处理范围</li><li>常量池常量是否有不被支持的常量类型(检查tag标志)….</li></ul><p>实际上，该阶段的验证点有很多，该阶段的主要目的是<font color="blue">保证输入的字节流能够正确的解析并存储与方法区内</font>，格式上符合一个Java类型信息的要求。该方法是基于二进制字节流进行的，<font color="red">只有通过了该阶段，字节流才会进入方法区，后面的三个阶段都是基于方法区的存储结构进行</font>，不会直接操作字节流。</p><h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a><font size="5">元数据验证</font></h3><p>该阶段<font color="bllue">对字节码描述的信息进行语义分析，保证其描述的信息符合Java语言规范</font>，可能的验证点</p><ul><li>该类是否有父类(除了java.lang.Object以外，所有类都应该有父类)</li><li>该类是否继承了不允许被继承的类(final类)</li><li>该类如果不是抽象类，那么是否实现了其父类/父接口的抽象方法……</li></ul><p>该阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规范的元数据信息。</p><h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a><font size="5">字节码验证</font></h3><p>该阶段最为复杂，主要目的是<font color="blue">确定程序语义是否合法、符合逻辑，该阶段对方法体进行校验分析，确保被校验的方法在运行时不会做出危害虚拟机安全的事</font>。可能验证的点</p><ul><li>保证跳转指令不会跳转到方法体以外的字节码指令上</li><li>保证方法体中的类型转换是有效的，例如不能把对象赋值给与他毫无继承关系、完全不相干的数据类型，这是不合法的……</li></ul><p>如果一个类不能通过字节码验证，那么这个类肯定有问题，但是通过了字节码验证，并不能够说明其一定安全。</p><h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a><font size="5">符号引用验证</font></h3><p>该阶段发生在虚拟机将符号引用转化为直接引用的时，这个转化动作将在连接的第三个阶段–解析阶段发生。<br>符号引用验证可以看作是对类自身以外的信息(常量池中的各种符号引用)进行匹配性校验，通常需要校验以下内容</p><ul><li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li><li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li><li>符号引用中的类、字段、方法的访问性(public、private…)是否可以被当前类访问……</li></ul><p>符号引用验证的<font color="blue">目的是确保解析动作能够正常进行</font>，如果无法通过该阶段验证，那么会抛出异常。<br>最后，对于虚拟机类加载机制来说，<font color="blue">验证阶段非常重要、但却不一定必要</font>。如果所运行的全部代码都已经被反复使用和验证过，那么可以通过”-Xverify:none”参数来关闭大部分验证措施。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><font size="5">准备</font></h2><p>准备阶段是<font color="blue">正式为类变量分配内存并设置类变量初始值的阶段</font>。这些变量所使用的内存都在方法区分配。这里说的<font color="red">初始化值通常情况下是数据类型的零值。</font><br>例如一个类变量private static int value=123。在准备阶段过后的初始值是0值而不是123。而将<font color="red">value赋值为123的操作是在初始化阶段的类构造器&lt; clinit&gt;方法执行。</font><br>如果一个<font color="blue">类字段有ConstantValue属性，那么准备阶段变量value就会被初始化为ConstantValue属性所指定的值。</font></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><font size="5">解析</font></h2><p>前面说过，Class文件中不会保存各个方法、字段最终在内存的哪个地方，因此这些字段、方法的符号引用不经过不经过运行期转换是无法得到字段、方法的内存入口。解析阶段是<font color="bllue">虚拟机将常量池内的符号引用替换为直接引用的过程。</font></p><ul><li><b>符号引用</b><br>用一组符号来描述所引用的目标(如字段表集合中对字段的描述)，符号引用可以是任意形式的字面量，只要能无歧义的定位到所引用的目标。符号引用的目标不一定已经被加载进内存。</li><li><b>直接引用</b><br>可以是指向目标的指针的相对偏移量、或能间接定位目标的句柄，能够直接在内存中定位到目标。如果有了直接引用，那么引用的目标肯定在内存中存在。</li></ul><p>需要注意的是，虚拟机规范并未规定解析阶段发生的具体时间，只要求在执行<b>anewarray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokespecial、invokestatic、invokevirtual、ldc、ldc_w、new、putfield、putstatic</b>等<font color="bllue">操作符号引用的字节码指令之前，先对他们所使用的符号引用进行解析。</font><br>对一个符号引用进行多次请求解析是很常见的，除了invokedynamic指令外，虚拟机实现可以对第一次解析的结果进行缓存(在运行时常量池中记录直接引用，并把常量标识为已解析状态)从而避免重复解析，这些解析被称为<font color="red">静态解析</font>。<br>而<font color="blue">对于invokedynamic指令，必须等到程序实际运行到这条指令时，才会对符号引用进行解析，并且不会缓存。每一次运行时都要讲符号引用转换为直接引用</font>，这种解析被称为<font color="red">动态连接<font>。(后面讲到动态分派和重写时会介绍)</font></font></p><p><font color="bllue"><b>解析动作主要针对</b></font></p><ul><li><b>类或接口</b></li><li><b>字段</b></li><li><b>类方法</b></li><li><b>接口方法等</b></li></ul><p>具体对类、接口、类字段、类方法的解析见书P221</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><font size="5">初始化</font></h2><p>该阶段是类加载过程的最后一步，前面的类加载过程，除了加载阶段用户可以参与，其余动作完全由虚拟机控制。到了初始化阶段，才真正开始执行类中定义的Java代码(Java代码编译后的字节码更准确一些)。<br>在准备阶段，变量已经赋过一次值，而在初始化阶段，则根据程序员通过程序制定的计划去初始化类变量和其他资源。<font color="bllue">初始化阶段是执行类构造器&lt; clinit&gt;方法的过程。</font></p><ul><li><font color="bllue"><b>&lt; clinit&gt;()方法</b></font><ul><li>由编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并产生的。编译器手机的顺序是由语句在源文件中出现的顺序决定的。静态语句块只能访问到定义在静态语句块之前的变量，定义在它之后的变量，语句块只能赋值不能访问。(书P225)</li><li>该方法和实例构造器不同，不需要显式的调用父类构造器。<font color="bllue">虚拟机会保证在子类的&lt; clinit&gt;()方法执行前，父类的&lt; clinit&gt;()方法已经执行完毕</font>。因此在虚拟机中第一个执行&lt; clinit&gt;()方法的类肯定是Object类。</li><li>由于父类的&lt; clinit&gt;()方法先执行，也就意味着<font color="blue">父类中定义的静态语句块和静态变量赋值要优先于子类</font></li><li>&lt; clinit&gt;()方法对于接口或类来说不是必须的，<font color="bllue">如果类中没有静态代码块、也没有对类变量的赋值操作，那么编译器可以不生成&lt; clinit&gt;()方法</font></li><li>对于接口，执行接口的&lt; clinit&gt;()方法不需要先执行父接口的&lt; clinit&gt;()方法，只有当父接口中定义的变量使用时父接口才会被初始化。</li><li>同样的，接口的实现类在初始化时也一样不会执行接口的&lt; clinit&gt;()方法。</li><li><font color="red">同一个类加载器下，一个类型只会初始化一次。</font></li></ul></li></ul><p>至此，一个类加载的全过程就完成了。</p><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a><font size="5">类加载器</font></h1><p>加载阶段中”通过一个类的全限定名来获取类的的二进制字节流”这个动作是在虚拟机外部实现的，实现这个动作的代码模块被称为类加载器。<br><font color="blue">对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。</font>即如果比较两个类是否”相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义。否则，<font color="blue">即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</font><br>这里说的相等</p><ul><li>代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法返回结果</li><li>使用instanceof关键字做对象所属关系判定结果……</li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a><font size="5">双亲委派模型</font></h2><p>对于开发人员来说，类加载器分为三种</p><ul><li>启动类加载器(Bootstrap ClassLoader)=&gt;最顶层<br>将存放在<java_home>\lib目录中的虚拟机识别的类库加载到虚拟机内存中</java_home></li><li>扩展类加载器(Extension ClassLoader)=&gt;第二层<br>负责加载lib目录下ext目录中的类库，开发者可以直接使用扩展类加载器</li><li>应用程序类加载器(Application ClassLoader)=&gt;第三层<br>这个类加载器时ClassLoader中的getSystemClassLoader()方法返回值，所以也叫系统类加载器。<font color="bllue">如果应用程序没有自定义过自己的类加载器，一般情况下这个就是程序默认的类加载器。</font></li><li>自定义类加载器=&gt;最底层</li></ul><ul><li><font color="bllue"><b>双亲委派模型的工作过程</b></font><br>如果一个类加载器收到了类加载的请求，它首先不会自己尝试加载这个类，而是把这个请求委派给父类加载器完成，每个层次的类加载器都是这样，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类反馈自己无法完成这个加载请求时，子类加载器才会尝试自己去加载。</li><li><font color="bllue"><b>好处</b></font><br>使用双亲委派模型来组织类加载器的关系，Java类随着它的类加载器一起具备了一种带优先级的层次关系。例如java.lang.Object，无论哪一个类加载器要加载这个类，绥中都是委派给顶层的启动类加载器完成，因此Object类在程序中总是一个类。</li></ul><h2 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a><font size="5">破坏双亲委派模型</font></h2><p>没怎么理解，见书P234</p><hr>至此，类加载机制也就介绍完了。主要介绍了类的加载、验证、准备、解析和初始化过程中虚拟机是怎么做的，以及类加载器的工作原理和双亲委派模型。]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM虚拟机二</title>
      <link href="/2019/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%8C/"/>
      <url>/2019/09/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>前面说了JVM虚拟机的内存布局和自动内存管理机制，这次就着重记录一下Class文件的结构，毕竟JVM只是工具，而Class文件才是被执行的主体。</p><hr><a id="more"></a><h1 id="无关性基石"><a href="#无关性基石" class="headerlink" title="无关性基石"></a>无关性基石</h1><p>这里说的无关性，包括两个方面</p><ul><li><b>平台无关性</b></li><li><b>语言无关性</b></li></ul><p><font color="bllue"><b>平台无关性</b></font><br>你一定听过一句话–Write Once,Run AnyWhere。以前，一个应用程序要想在要想在不同的操作系统上运行，就要编写不同的代码。因为代码编译后得到的是本地机器码，而不同的操作系统机器码是不一样的，因此如果一个程序需要在多个系统上运行，就要编写不同的代码。平台无关性，顾名思义，就是同样的代码可以在不同的操作系统上正确的运行。这就要通过虚拟机来实现。<br>我们编写的代码(并不是特指Java代码)，<font color="blue">会通过编译器编译为字节码，而虚拟机能够载入和执行字节码，从而实现了平台无关性。</font>运行在不同操作系统上的JVM虚拟机是不一样的。JVM虚拟机接收到字节码后，再将字节码转换为本地的机器码。虚拟机就相当于代码和机器码之间的转换器，能够将同一种字节码根据不同的操作系统转换成不同的机器码。<br>通过上述的介绍不难发现，<font color="bllue">各种不同平台的虚拟机和所有平台都使用的统一的程序存储格式–字节码是构成平台无关性的基石。</font><br><font color="bllue"><b>语言无关性</b></font><br>语言无关性的基石仍然是虚拟机和字节码存储格式。<font color="bllue">Java虚拟机只认识字节码，只和”Class文件”这种特定的二进制文件关联</font>。即如果你将其他语言编译成字节码交付给Java虚拟机，它一样能够执行。事实也是这样，Java程序通过Javac编译器将Java编译成字节码，其他语言如JRuby通过jruby编译器将JRuby编译成字节码，JVM都能够执行。</p><p>Java中的各种变量、关键字、和运算符号最周都是由多条字节码命令组合而成，因此字节码命令的语言描述能力肯定比Java更加强大。有一些Java语言本身无法支持的语言特性并不代表字节码本身无法识别。</p><h1 id="Class类文件结构"><a href="#Class类文件结构" class="headerlink" title="Class类文件结构"></a>Class类文件结构</h1><p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目都严格的按照顺序紧凑的排列在Class文件中，中间没有任何分隔符，也就是说，整个Class文件所存储的内容几乎都是程序运行时必要的数据。对于需要占用8位以上的数据项，会按照<font color="red">高位在前</font>的方式将其分割成若干个8位字节进行存储。</p><h2 id="魔数和Class文件版本"><a href="#魔数和Class文件版本" class="headerlink" title="魔数和Class文件版本"></a><font size="5">魔数和Class文件版本</font></h2><ul><li><font color="bllue"><b>魔数</b></font><br>每个Class文件的<font color="blue">前四个字节</font>，值为”0xCAFEBABE”(可以称为咖啡宝贝…)。它的唯一作用是<font color="blue">确定这个文件是否为一个能被虚拟机接受的Class文件。</font></li><li><font color="bllue"><b>Class文件版本</b></font><br>紧接着魔数的<font color="blue">四个字节，前两个字节是Class文件的次版本号(Minor Version)，后两个字节是主版本号(Major Version)</font>。<font color="blue">高版本的JDK能够运行低版本的Class文件，但是不能运行更高版本的Class文件</font>，即使这个Class文件没有发生任何变化。</li></ul><h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a><font size="5">常量池</font></h2><p>紧接着版本号之后就是常量池入口。常量池可以理解位Class文件的资源仓库。常量池中常量的数量是不确定的，因此需要一个常量池容量计数器。</p><ul><li><font color="bllue"><b>常量池容量计数器</b></font><br>紧接着版本号后的<font color="blue">两个字节</font>，但是要注意的是，&lt;?font color=blue&gt;容量计数是从1开始的。即如果容量转换为十进制是22，那么就有21项常量(1-21)。将0索引空出来的目的在于，当有些指向常量池的索引值的数据在特定情况下需要表达”不引用任何一个常量池项目”时，就可以把索引值置0。</li></ul><p>常量池中主要存放两大类常量</p><ul><li><font color="bllue"><b>字面量</b></font><br>如文本字符串、声明为final的常量值等</li><li><font color="bllue"><b>符号引用</b></font><ul><li><b>类和接口的全限定名</b></li><li><b>字段的名称和描述符</b></li><li><b>方法的名称和描述符</b></li></ul></li></ul><p>Java代码在进行Javac编译时，是在虚拟机加载Class文件的时候进行<font color="red">动态连接</font>。也就是说，<font color="bllue">在Class文件中不会保存各个方法、字段最终在内存的哪个位置，因此这些字段、方法的符号引用要经过运行期的转换才能得到真真的内存地址</font>。当虚拟机运行，需要从常量池获得符号引用，在类创建或运行时解析、翻译到具体内存地址中。(常量池表的类型和内容见书P169)</p><h2 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a><font size="5">访问标志</font></h2><p>常量池结束后紧接着的<font color="red">两个字节</font>就是访问标志(access_flags)，该标志用于识别一些类或者接口层次的访问信息。</p><ul><li>该Class是类还是接口</li><li>是否为public类型</li><li>是否为abstruct</li><li>如果是类是否被声明为final等…(P173)</li></ul><h2 id="类索引、父类索引和索引接口集合"><a href="#类索引、父类索引和索引接口集合" class="headerlink" title="类索引、父类索引和索引接口集合"></a><font size="5">类索引、父类索引和索引接口集合</font></h2><p>紧接着访问标志之后</p><ul><li><font color="bllue"><b>类索引</b></font><br><font color="red">两个字节</font>，用于确定类的全限定名</li><li><font color="bllue"><b>父类索引</b></font><br><font color="red">两个字节</font>，用于确定这个类的父类的全限定名，由于Java不允许多重继承，所以父类索引只有一个。如果没有显式的继承，那么此处父类字段为Object</li><li><font color="bllue"><b>接口索引集合</b></font><ul><li><font color="red">两个字节</font>，接口计数器。表示类实现的接口数</li><li>每一组都是<font color="red">2个字节</font>，用于确定类实现了哪些接口。如果接口计数器为0，那么一组都没有。</li></ul></li></ul><h2 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a><font size="5">字段表集合</font></h2><p>用于描述接口或类中声明的变量。即<font color="bllue">字段表包括类级变量和实例级变量，但不包括方法内部声明的变量。</font></p><ul><li><font color="bllue"><b>字段计数器(fields_count)</b></font><br>紧接着接口集合后的<font color="red">两个字节</font>，表示字段的数量。</li></ul><p>每个字段都有一个字段表，用于记录字段信息，字段计数器为多少，后面就有多少个字段表。</p><ul><li><font color="bllue"><b>字段表</b></font><ul><li><b>access_flags(访问标志)</b><br><font color="red">两个字节</font>，同类的访问标志一样，描述字段的信息(书P176)</li><li><b>name_index(名称索引)</b><br><font color="red">两个字节</font>，对常量池的引用，代表字段的简单名称(不包括类名包名等…)</li><li><b>descriptor_index(描述索引)</b><br><font color="red">两个字节</font>，对常量池的引用，字段的描述符(描述符含义表书P177)</li><li><b>属性表集合</b><br>用于存储额外信息，字段可以有0至多项额外信息。例如一个final修饰的字段，额外信息中就可能(注意是可能！)包含一项ConstantValue属性，指向了该字段的值。</li></ul></li></ul><p><font color="bllue">字段表集合中不会列出从超类或父接口中继承而来的字段</font>，但有可能列出原本Java代码中不存在的字段，譬如一个内部类，在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。并且，<font color="blue">在Java中字段是无法重载的，两个字段的数据类型、描述符不管是否相同，都必须使用不一样的名称，但是对于字节码而言，如果两个字段的描述符不一致，那么字段可以重名。</font></p><h2 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a><font size="5">方法表集合</font></h2><p>和字段表集合描述方式一模一样，分别是</p><ul><li><font color="bllue"><b>方法计数器(fields_count)</b></font><br>紧接着字段表集合后的<font color="red">两个字节</font>，表示方法的数量。</li><li><font color="bllue"><b>方法表</b></font><ul><li><b>access_flags(访问标志)</b><br><font color="red">两个字节</font>，同字段的访问标志一样，描述方法的信息(书P179)</li><li><b>name_index(名称索引)</b><br><font color="red">两个字节</font>，对常量池的引用，代表方法的简单名称(int inc()==&gt;简单名称为inc)</li><li><b>descriptor_index(描述索引)</b><br><font color="red">两个字节</font>，对常量池的引用，方法的描述符(描述符含义表书P177)</li><li><b>属性表集合</b><br>用于存储额外信息，字段可以有0至多项额外信息，例如<font color="bllue">方法的方法体编译为字节码后存放在Code属性中</font></li></ul></li></ul><p>与字段表集合相应的，<font color="bllue">如果父类方法在子类中没有被重写，方法表集合中就不会出现父类的方法信息</font>。在Java中，要重载一个方法有两个要求</p><ul><li><b>重载方法和原方法具有相同的简单名称</b></li><li><b>重载方法和原方法的特征签名不同。</b><ul><li><font color="bllue"><b>特征签名(Signature)</b></font><ul><li>Java代码中包含了方法名称、参数类型、参数顺序</li><li>字节码中还包括了方法返回值和受检查异常表</li></ul></li></ul></li></ul><p><font color="blue">因此Java中返回值的不同不能构成重载。</font>但是在Class文件中却可以。</p><h2 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a><font size="5">属性表集合</font></h2><p>前面以及提到了很多次，在Class文件、字段表、方法表都可以携带自己的属性表集合信息。(虚拟机规范预定义属性见书P181)</p><ul><li><font color="bllue"><b>Code属性</b></font><ul><li><b>attribute_name_index(属性名称索引)</b><br><font color="red">两个字节</font>，对常量池的引用，固定为Code，代表属性名称。</li><li><b>attribute_length</b><br><font color="red">四个字节</font>属性值的长度</li><li><b>max_stack</b><br><font color="red">两个字节</font>，操作数栈的最大深度，方法执行的任意时刻操作数栈都不会超过这个深度。<font color="bllue">虚拟机运行时需要根据这个值来分配栈帧。</font></li><li><b>max_locals</b><br><font color="red">两个字节</font>，局部变量表所需的存储空间，单位是Slot(double和long占2个Slot，其他基本类型等长度不超过32位的占1个Slot)。局部变量表中存放着<ul><li>方法参数(包括实例方法的隐藏参数this)</li><li>显示异常处理器参数(try-catch中catch块定义的异常)</li><li>方法中定义的局部变量</li></ul></li><li><b>code_length和code</b><br>分别为<font color="red">四个字节和一个字节</font>，用于存储Java代码编译后生成的字节码指令。code_length代表字节码长度，code用于存储字节码指令。(每个指令占一个字节)。当虚拟机读取到一条指令时，就可以找到这个字节码代表的是什么指令，并且可以知道这条指令后有没有跟参数，以及参数该如何理解。</li></ul></li></ul><p><font color="blue">Code属性时Class文件最重要的属性</font>。如果将Java程序分为元数据(类、字段、方法等信息)和代码，那么在Class文件中</p><ul><li><b>Code属性用于描述代码</b></li><li><b>其他所有数据项目都用于描述元数据。</b></li></ul><p><b>在任何实例方法中，都可通过this关键字访问到此方法所属的对象，这是为什么？</b></p><ol><li>通过Javac编译的时候把对this关键字的访问转变为对一个普通方法参数的访问</li><li>然后再虚拟机调用实例方法时自动传入此参数</li></ol><p>因此在<font color="red">实例方法的局部变量表中至少会有一个指向当前实例对象的参数，局部变量表也会预留出一个Slot位来存放对象实例的引用。</font><br>同样在<font color="bllue">Code属性中，字节码指令后存放的是方法的显式异常处理表(简称异常表)</font>，该表对于Code属性来说不是必须存在的。(当方法中有try-catch语句时会有该表)</p><ul><li><b>显式异常处理表</b><br>  属于Java代码的一部分，编译器使用异常表来实现Java异常和finally处理机制，表结构如下<ul><li>start_pc</li><li>end_pc</li><li>handler_pc</li><li>catch_type</li></ul></li></ul><p><font color="blue">如果方法在start_pc行和end_pc行(不包括end_pc)间出现了catch_type异常，则转到handler_pc行继续处理。</font></p><ul><li><p><font color="bllue"><b>Exceptions属性</b></font><br>不要和前面的显式异常处理表混淆，显式异常处理表是Code属性的一部分，Exceptions属性是属性表集合中的一种属性，和Code属性平级。该<font color="bllue">属性的作用是列举出方法中可能抛出的受检查异常，也就是方法描述时throws关键字后面列举的异常。</font></p><ul><li><b>attribute_name_index</b><br><font color="red">两个字节</font>，对常量池的引用，固定为Exception，代表属性名称。</li><li><b>attribute_length</b><br><font color="red">四个字节</font>属性值的长度</li><li><b>numbers_of_exception</b><br><font color="red">两个字节</font>，可能抛出的受检查异常的个数</li><li><b>exception_index_table</b><br><font color="red">两个字节</font>，对常量池的引用，代表了受检查异常的类型。</li></ul></li><li><p><font color="bllue"><b>LineNumberTable属性</b></font><br>用于<font color="blue">描述Java源码行号和字节码行号之间对应关系</font>(例如3：0，前面是字节码行号，后面是源码行号)。可以选择不生成，如果不生成，那么抛出异常时将不会显示出错的行号，并且调试程序时无法按照源码设置断点。</p></li><li><p><font color="bllue"><b>LocalVariable Table属性</b></font><br>用于<font color="blue">描述局部变量表中的变量和Java源码中定义的变量之间的关系</font>，可以选择不生成。如果不生成，当其他人引入这个方法时，所有参数名称都会丢失，IDE会使用arg0、arg1等代替原参数名。该属性作用</p><ul><li><b>描述局部变量在字节码中的作用域</b></li><li><b>存放局部变量的名称以及描述符</b></li><li><b>该局部变量在栈帧局部变量表中Slot位置，如果变量为64位，那么它占用的Slot为index和index+1。</b></li></ul></li><li><p><font color="bllue"><b>ConstantValue属性</b></font><br><font color="blue">通知虚拟机自动为静态变量赋值。只有被final修饰的变量并且满足一定的条件才可以使用这项属性。</font></p><ul><li>对于实例变量，在实例构造器(&lt; init&gt;)方法中进行赋值</li><li>对于类变量(静态变量)，可以在类构造器(&lt; clinit&gt;)中进行赋值，也可以使用ConstantValue属性进行赋值。<ul><li>如果同时也使用了final修饰、该变量数据类型为基本类型或String并且在定义时赋值，就生成ConstantValue属性。在编译期为该变量赋值</li><li>否则，在类构造器中进行赋值</li></ul></li><li>对于final修饰的变量，该变量数据类型为基本类型或String并且在定义时赋值，就生成ConstantValue属性。在编译期为该变量赋值。</li></ul></li><li><p><font color="bllue"><b>Signature属性</b></font><br>可以用在类/接口、方法表、字段表上。在Java中，任何类、接口、初始化方法或成员如果使用了泛型，则该属性会记录泛型的类型(在Java的语法糖中会详细说到)。</p><ul><li><b>Java代码的方法特征签名</b><br>包括了<font color="blue">方法名称、参数顺序以及参数类型</font></li><li><b>字节码层次的方法特征签名</b><br><font color="blue">还包括了方法返回值和受检查异常表</font></li></ul></li></ul><p>可以出现在类、字段表和方法表结构的属性表中，可选属性。在Java中的泛型采用的是擦除机制，在Code属性中，泛型信息编译的(类型变量，参数化类型)之后都统统被擦除掉。好处是实现简单、运行期节省一些类型所占的空间。但坏处是无法将泛型类型和用户定义的普通类型同等对待。例如运行期反射无法获取到泛型信息。<br>该属性就是为了弥补这个缺陷设计，<font color="bllue">Java反射API能够获取泛型类型，最终数据来源就是这个属性</font>。</p><hr>属性表还有很多其他属性，就不多记录了。Class文件结构就记录到这里。]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM虚拟机一</title>
      <link href="/2019/09/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%80/"/>
      <url>/2019/09/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>作为Java程序员，对于JVM虚拟机的理解是必不可少的。今天刚看了周志明周老师的《深入理解JVM虚拟机》(第二版)，还是有所收获。看得不多，简单小结一下，后面会继续完善JVM方面的知识(本文及后面系列文章全部基于JDK1.7版本，JDK1.8以后方法区被移除)。</p><hr><a id="more"></a><h1 id="走进Java"><a href="#走进Java" class="headerlink" title="走进Java"></a>走进Java</h1><p>从传统意义上来讲，Java技术体系包括以下几个组成部分：</p><ul><li><b>Java程序设计语言</b></li><li><b>各种硬件平台上的Java虚拟机</b></li><li><b>Class文件格式</b></li><li><b>Java的API类库</b></li><li><b>来自商业机构和开源社区的第三方Java类库</b></li></ul><p>其中<font color="bllue">JDK(Java Development Kit)是用于支持Java程序开发的最小环境</font>，包括<font color="red">Java程序设计语言、各种硬件平台上的Java虚拟机以及Java的API类库</font>。<br>而<font color="bllue">JRE(Java Runtime Enviroment)是支持Java运行的标准环境</font>，包括<font color="red">Java类库中Java SE API子集和Java虚拟机两部分。</font><br>目前使用范围最广的Java虚拟机是<b>HotSpot</b>。</p><h1 id="自动内存管理机制"><a href="#自动内存管理机制" class="headerlink" title="自动内存管理机制"></a>自动内存管理机制</h1><h2 id="Java内存区域"><a href="#Java内存区域" class="headerlink" title="Java内存区域"></a><font size="5">Java内存区域</font></h2><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的区域：</p><ol><li><b>方法区<font color="red">(JDK1.8后被元空间代替)</font></b></li><li><b>堆</b></li><li><b>虚拟机栈</b></li><li><b>本地方法栈</b></li><li><b>程序计数器</b></li></ol><p>下面来分别说一说这几个区域的作用。再说之前，先说一下线程私有的概念<br><font color="bllue"><b>线程私有</b></font><br>每条线程都需要有一个自己的内存区域，<font color="red">各线程之间互不影响，独立存储</font>，我们称这类内存区域为线程私有。<br><font color="bllue"><b>程序计数器</b></font></p><ul><li>是一块较小的内存空间，它可以看作是<font color="blue">当前线程所执行的字节码的行号指示器</font>。</li><li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li><li>该区域是<font color="red">线程私有</font>的</li></ul><p><font color="bllue"><b>Java虚拟机栈</b></font></p><ul><li>虚拟机栈也是<font color="red">线程私有</font>的，生命周期和线程相同</li><li>每个方法在执行时会创建一个栈帧，用于<font color="bllue">存储局部变量表、操作数栈、动态链接和方法出口</font>等信息，调用方法时，将栈帧入虚拟机栈；方法执行过后，栈帧出栈，因此不难发现，<font color="bllue">虚拟机栈可以看作是用于执行Java方法的内存</font></li></ul><p><font color="bllue"><b>局部变量表</b></font></p><ul><li>存放了<font color="blue">编译期可知</font>的各种基本数据类型，对象引用(reference类型)和returnAddress类型(指向一条字节码指令的地址)</li><li>long和double类型数据占2个局部变量空间(Slot)，其余的只占1个。</li><li>局部变量表所需的<font color="blue">内存空间在编译期间分配完成</font>。<b>当进入一个方法时，这个方法需要在栈帧中分配的局部变量空间是完全确定的。</b></li><li>在方法运行期间不会改变局部变量表大小</li></ul><p><font color="bllue"><b>本地方法栈</b></font><br>该栈和Java虚拟机栈的服务很类似，区别在于Java虚拟机栈为执行Java方法(字节码)服务，而本地方法栈<font color="blue">为虚拟机使用到的Nativa方法(本地方法，由其他语言编写)服务。</font><br><font color="bllue"><b>Java堆(Java Heap)</b></font></p><ul><li>一般来说，堆是Java虚拟机管理的内存中最大的一块</li><li>被所有线程共享的内存区域，在虚拟机启动时创建</li><li>作用是存放对象实例，几乎所有的对象实例都在这里分配</li><li><font color="blue">字符串常量池在堆中(JDK1.8之前位于方法区)</font></li><li>同时，堆是垃圾收集器管理的主要区域，又被称为GC堆</li><li>Java堆还可以被细分为<ul><li>新生代(1/3)<ul><li>Eden区(8/10)</li><li>From Survivor区(1/10)</li><li>ToSurvivor区(1/10)</li></ul></li><li>老年代(2/3)</li></ul></li><li>常见的配置堆的参数<ul><li><b>-Xmx</b>：堆内存的最大内存</li><li><b>-Xms</b>：堆内存的最小内存</li><li><b>-Xmn</b>：新生代的大小</li><li><b>XX:NewRatio</b>：设置老年代是年轻代的几倍</li><li><b>XX:SurvivorRatio</b>：设置Eden区是一个Survivor的几倍(注意是一个)</li></ul></li></ul><p><font color="bllue"><b>方法区</b></font></p><ul><li>方法区也是各个线程共享的内存区域</li><li>用于存储一下信息<ul><li><b>已被虚拟机加载的类信息</b></li><li><b>常量</b></li><li><b>静态变量</b></li><li><b>即时编译后的代码等</b></li></ul></li></ul><p><font color="bllue"><b>运行时常量池</b></font></p><ul><li>该区域是方法区的一部分</li><li>Class文件除了有类的版本、字段、方法、接口等描述信息(后面会说到)外，还有一项信息是常量池，<font color="blue">用于存放编译期生成的各种字面量和符号引用</font></li><li>这部分内容将在<font color="red">类加载后</font>进入方法区的运行时常量池中</li><li>相比于Class文件的常量池，运行时常量池具备<font color="red">动态性</font>。Java语言不要求常量一定只有编译期才能产生，也就是并不是只有预置入Class文件中常量池的内容才能进入方法区的运行时常量池，<font color="blue">运行期间也可能有新的常量放入运行时常量池中</font>，例如String类的intern方法。(关于此方法可以看我String源码的文章)</li></ul><h2 id="关于Java对象"><a href="#关于Java对象" class="headerlink" title="关于Java对象"></a><font size="5">关于Java对象</font></h2><p>说完了JVM内存区域，就简单说一下Java对象的相关内容</p><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a><font size="5">对象的创建</font></h3><p>当遇到一条new指令时</p><ol><li>检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化<ul><li>如果没有，那必须先执行相应的类加载过程</li></ul></li><li>类加载完成后，为新生对象分配内存。值得注意的是，<font color="blue">对象所需内存大小在类加载完成后就已经完全确定</font>。为对象分配内存的过程其实就是从堆内存中划分出一块确定大小的区域。</li><li>内存分配完成后，虚拟机将分配到的内存空间都<font color="red">初始化为零值，除了对象头以外</font>(后面会说到)。这一操作保证了对象的实例字段在Java代码中可以不赋初始值就能使用。(不难理解，因为我们在创建Java对象时，成员变量就是默认零值)</li><li>接下来JVM对对象进行必要的配置，这些信息都<font color="blue">存放在对象头中</font>。例如<ul><li>对象是哪个类的实例</li><li>如何找到类的元数据信息</li><li>对象的哈希值</li><li>对象的GC分代年龄(后面会说)等</li></ul></li><li>到了这一步，已经执行完new指令了，但是此时对象的成员变量值都为0，显然不符合我们的实际情况。一般来说，这时候会<font color="blue">执行&lt; init&gt;方法，把对象按照程序员的意愿进行初始化</font>。这样，我们就得到了一个真正可用的对象。</li></ol><h3 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a><font size="5">对象的内存布局</font></h3><p>说完了对象的创建，紧接着自然就该说一说创建出来的对象是什么样的，有着什么样的内存布局。<br>在HotSpot中虚拟机中，对象在内存中存储的布局可以分为三部分</p><ol><li><b>对象头</b></li><li><b>实例数据</b></li><li><b>对齐填充</b></li></ol><p>下面分别说一下这三个部分<br><font color="bllue"><b>对象头</b></font><br>前面说过，在创建对象分配内存阶段，会将除了对象头以外的内存空间初始化为零值，那接下来就看看对象头到底有什么作用吧。<br>对象头包含两部分信息</p><ul><li>一部分<font color="blue">用于存储对象自身的运行时数据</font>，如<ul><li><b>哈希值</b></li><li><b>GC分代年龄</b></li><li><b>锁状态标志</b></li><li><b>线程持有的锁</b></li><li><b>偏向线程ID和偏向时间戳等</b></li></ul></li><li>另一部分是类型指针，即对象指向它的类元数据的指针。通俗的讲，<font color="blue">JVM通过这个指针来确定对象是哪个类的实例</font>。</li></ul><p><font color="bllue"><b>值得注意的是：</b></font></p><ol><li>查找对象的元数据信息并不一定要经过对象本身(后面会说到)，因此并不是所有的虚拟机实现都必须在对象数据上保留类型指针。</li><li>除此之外，如果对象是<font color="red">Java数组，对象头中还必须有一块用于记录数组长度的数据。</font></li></ol><p><font color="bllue"><b>实例数据</b></font></p><ul><li>该部分是对象真正存储的有效信息，也是程序代码中所定义的各种类型的字段内容。</li><li>无论是从父类继承的，还是子类定义的，都会记录下来。</li><li>默认情况下，相同宽度的字段会分配到一起。在满足这个条件的前提下，父类中定义的变量会出现在子类之前。</li></ul><p><font color="bllue"><b>对齐填充</b></font><br>这一部分并不是必然存在的，也没有特别含义，仅仅起着占位符的作用。HotSpot VM的自动内存管理系统要求对象的起始地址必须是8字节的整数倍。因此实例对象的大小必须是8字节的整数倍，如果对象不是，那么就需要通过对齐填充来补全。</p><h3 id="对象的定位访问"><a href="#对象的定位访问" class="headerlink" title="对象的定位访问"></a><font size="5">对象的定位访问</font></h3><p>介绍了对象的创建和内存布局，相比你对Java对象已经有了一定的了解了，那么我们又是怎么在堆中找到这个对象并使用它的呢？<br>Java程序是通过栈上的<font color="blue">reference类型数据(前面说过，存放在栈帧中的局部变量表)来操作堆上的具体对象。</font>通过reference数据有两种方式可以定位到堆中的数据</p><ol><li>使用句柄访问对象，此时会在堆中划出一块内存叫做句柄池，<font color="bllue">refenence中存储的就是对象的句柄地址。</font>而<font color="red">句柄中包含了对象的实例数据和类型数据各自的地址信息</font><ul><li><b>实例数据</b>：可以理解为当前对象的所有数据，位于堆中。</li><li><b>类型数据</b>：属于类的数据，如静态变量，常量等，位于方法区中。</li></ul></li><li>使用指针直接访问，此时<font color="bllue">reference中存储的就是对象实例数据的地址</font>。而在<font color="red">对象中有指向类型数据的指针，通过该指针可以访问类型数据。</font></li></ol><p><font color="bllue"><b>以上两种访问方式都有各自的优势：</b></font></p><ul><li>句柄访问，reference中存储的是稳定的句柄地址，在对象移动时(如GC过程中)只会改变句柄的实例数据指针，而reference本身不需要修改。</li><li>指针直接访问，速度更快，节省了一次指针定位的时间<ul><li><font color="red">在使用句柄访问时,reference</font><ul><li>需要访问句柄池(1次)</li><li>通过句柄池中指向实例数据的指针访问堆上的实例数据(2次)</li><li>通过句柄池中指向类型数据的指针访问访问方法区上的类型数据(3次)</li></ul></li><li><font color="red">直接使用指针时，reference</font><ul><li>直接访问堆上的实例数据(1次)</li><li>在示例数据中找到指向类型数据的指针</li><li>通过该指针访问方法区上的类型数据(2次)</li></ul></li></ul></li></ul><p>由于对象的访问在Java中很频繁，因此这一次开销也是相当客观的。<font color="blue">对于HotSpot而言，使用的是第二种情况。<font></font></font></p><h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><p>前面说过，程序计数器、虚拟机栈、本地方法栈这三个区域和线程生命周期相同，每个栈帧中分配多少内存基本在类结构确定下来时就已知，<b>这几个区域的内存分配的回收都具有确定性，因此不用过多考虑回收问题。</b>但是Java堆和方法区不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法不同的分支所需要的内存也可能不一样，<font color="blue">只有在程序运行期间才能知道会创建哪些对象。</font>这部分内存分配和回收都是动态的，垃圾收集器所关注的就是这一部分内存。</p><h2 id="判断对象是否存活"><a href="#判断对象是否存活" class="headerlink" title="判断对象是否存活"></a><font size="5">判断对象是否存活</font></h2><p>垃圾收集器在对堆进行回收前，首先要判断堆中的哪些对象还”存活”着，哪些对象已经”死去”(不可能再被任何途径使用的对象)，判断对象是否存活，有以下几种常用方法</p><h3 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a><font size="5">引用计数法</font></h3><p>给对象添加一个<font color="blue">引用计数器</font></p><ul><li>每当有一个地方引用它时，计数器值+1</li><li>当引用失效时，计数器值-1；</li><li>这样一来，任何时候计数器值为0的对象就是不可能再被使用的，也就是已经”死去”的</li></ul><p>这样的算法实现简单，效率也高，在大多数情况下都是一个不错的算法。但是它也有一个很大的缺陷，那就是<font color="bllue">无法解决两个对象相互引用的问题</font>。<br><b>什么是相互引用的问题呢？</b>(代码见《深入理解JVM虚拟机》P63)</p><ul><li>有两个对象A和B，A和B这两个对象已经不可能再被访问，但是它们之间相互引用</li><li>导致两者引用计数器都不为0，于是GC收集器也就无法收集它们。</li></ul><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a><font size="5">可达性分析算法</font></h3><p>大多数的应用程序语言都是使用可达性分析算法来判定对象是否存活。<br><font color="bllue"><b>基本思路</b></font></p><ul><li>通过一系列被称为<font color="blue">“GC Roots”的对象作为起始点，从这些节点向下搜索</font></li><li>搜索走过的路径称为”引用链”，当一个对象到GC Roots没有任何引用链相连时(即<font color="red">从GC Roots到这个对象不可达</font>)，则该对象是”死亡”的。</li></ul><p><font color="bllue"><b>在Java中，可作为GC Roots的对象有</b></font></p><ul><li>虚拟机栈(栈帧中的本地变量表)中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中Nativa方法引用的对象</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a><font size="5">引用</font></h3><p>前面说到的引用计数法和可达性分析法两种方法判断对象是否存活，都和”引用”有关，下面就详细说一下引用的类型</p><ul><li><b>强引用(StrongReference)</b><br>在程序代码中普遍存在，类似Object o=new Object()这类的引用。<font color="blue">只要强引用还在，垃圾收集器永远不会回收掉被引用的对象。</font></li><li><b>软引用(SoftReference)</b><br>用来描述一些<font color="red">还有用但并非必须的对象</font>。对于这些对象，<font color="blue">在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围内进行第二次回收</font>。但如果这次回收还没有足够的内存，就会抛出内存溢出异常。</li><li><b>弱引用(WeakReference)</b><br>比软引用强度更弱，被弱引用关联的对象<font color="red">只能生存到下次垃圾收集发生之前</font>。当垃圾收集器工作时，<font color="bllue">无论当前内存是否足够，都会回收掉被弱引用关联的对象。</font></li><li><b>虚引用(PhantomReference)</b><br>最弱的一种引用关系，一个对象是否有虚引用存在，完全不影响其生存时间，也无法通过虚引用来获取一个对象实例。设置该引用的<font color="bllue">唯一目的就是能在这个对象被垃圾收集器回首时收到一个系统通知。</font></li></ul><h3 id="生存还是死亡"><a href="#生存还是死亡" class="headerlink" title="生存还是死亡"></a><font size="5">生存还是死亡</font></h3><p>即使在前面的可达性分析中得到不可达的对象，该对象也并是”非死不可”。这时候它们暂时处于”缓刑”，如果真正要宣告一个对象”死亡”，至少要经过两次标记过程。在其中对象还有”自救”的机会。</p><ul><li>如果对象在可达性分析中发现没有和GC Roots相连的引用链，那么它将会<font color="red">被第一次标记并且进行筛选</font><ul><li>如果该对象<font color="red">没有覆盖”finalize()”方法或该方法已经被虚拟机调用过，那么该对象被回收</font></li><li>如果该对象覆盖了”finalize()”方法并且没有被虚拟机调用过，那么该对象会被放置在F-Queue中。并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程执行它。<ul><li>这里说的”执行”是指虚拟机会触发finalize()方法，但并不承诺会等待它运行结束。这样做的原因在于<ul><li>如果一个对象在finalzie()方法中执行缓慢，或者发生了死循环，很可能会导致F-Queue队列中其他对象处于永久等待，甚至内存回收系统崩溃。</li></ul></li></ul></li></ul></li><li><font color="red">finalzie()方法是对象最后一次自救机会。</font>稍后GC将对F-Queue队列中的对象进行第二次标记。<ul><li>如果对象在finalxize()方法中成功拯救自己，<font color="bllue">和引用链上的任何一个对象建立关联</font>(例如把自己this赋值给某个类的变量等)，那么<font color="bllue">在第二次标记时会被移出”即将回收”集合。</font></li><li>如果对象这时候没有成功拯救自己，那么基本就被回收了。</li></ul></li></ul><h2 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a><font size="5">回收方法区</font></h2><p>方法区回收效率较低，这是由方法区存放的数据相关的。方法区主要回收两部分内容，<font color="blue">废弃常量和无用的类</font>。判断一个常量是否是废弃常量比较简单，但是要判定一个类是无用的类，条件就会严苛许多，这也是导致方法区回收效率低的原因。<br><font color="bllue"><b>判断无用的类</b></font></p><ul><li>该类的所有实例都被回收</li><li>加载该类的ClassLoader已被回收</li><li>该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p><b>满足上述三个条件的类可以被回收，但并不是必然被回收。</b></p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a><font size="5">垃圾收集算法</font></h2><p>正如书上所说，垃圾收集算法涉及大量的程序细节，这里只是大致的介绍三种算法的思想</p><ul><li>标记清除算法</li><li>复制算法</li><li>标记整理算法</li></ul><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a><font size="5">标记清除算法</font></h3><p>该算法分为<font color="bllue">标记</font>和<font color="bllue">清除</font>两个阶段。</p><ol><li>标记出所有需要回收的对象(标记过程前面已经说过)</li><li>标记完成后统一回收所有被标记的对象。</li></ol><p>这个方法主要<font color="red">有两个缺点</font></p><ul><li><b>效率问题</b>，标记和清除两个过程效率都不高。</li><li><b>空间问题</b>，标记清楚过后会产生大量不连续的内存碎片，这类碎片过多可能会导致程序在分配较大对象时无法找到连续内存而不得不再进行一次GC。</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a><font size="5">复制算法</font></h3><p>为了解决效率问题，该算法出现了。它<font color="blue">将可用内存按容量划分为大小相等的两块，每次只使用其中一块</font>。当这一块内存用完了，将还存活着的对象复制到另一块内存上面，然后把自己使用过的内存空间一次清理掉。<br><font color="bllue">这样做的好处</font></p><ul><li>每次都是对整个半区进行内存回收，内存分配时也不用考虑内存碎片等复杂情况，只需要移动堆顶的指针，按顺序分配内存即可，实现简单且运行高效。</li></ul><p><font color="red">缺点</font></p><ul><li>将内存缩小为原来的一半，代价过高。</li></ul><p>现在的虚拟机大多都采用这种方法来<font color="blue">回收新生代</font>(注意是新生代)。据分析，98%的对象都是朝生夕死的所以并不需要1：1的比例来分配内存空间。因此新生代就被划分为Eden区(8/10)、FromSurvivor区(1/10)和ToSurvivor区(1/10)三个区域。</p><ul><li>每次使用Eden区和一块Survivor区</li><li>当回收时，将Eden和Survivor中还存活的对象一次性的复制到另外一块Survivor区中</li><li>清理Eden区和刚才用过的Survivor区。</li></ul><p>当然，我们并不能保证每次回收后都只有不多于1/10的对象存活，即有可能某次回收后对象存活较多，Survivor空间不够。这时候就要依赖其他内存(老年代)进行分配担保。</p><h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a><font size="5">标记整理算法</font></h3><ul><li>复制算法在对象存活率较高时，效率就会变低(因为要进行较多的复制操作)</li><li>更关键的是，使用复制算法就必须要有额外的空间进行分配担保。</li></ul><p>对于老年代，没有空间进行担保，因此<font color="red">对于老年代不能够使用复制算法，应该使用标记整理算法。</font><br>和标记清除算法思想一样，但是后续的步骤不是直接对可回收对象进行清理，<font color="bllue">而是让所有存活对象都向一端移动，然后直接清理掉边界以外的内存。</font></p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a><font size="5">分代收集算法</font></h3><p>这种算法就是根据对象存活周期不同将内存划分为几块。一般是<font color="blue">把Java堆划分为新生代和老年代，然后根据各个年代的特点采用最适当的收集算法。</font></p><ul><li>对于<font color="red">新生代</font>，每次垃圾收集都会有大量对象死去，只有少量存活，因此<font color="bllue">选用复制算法。</font></li><li>对于<font color="red">老年代</font>，对象存活率较高且没有额外担保空间，不宜使用复制算法，因此<font color="bllue">选用标记清理或标记整理算法。</font></li></ul><h2 id="HotSpot算法实现"><a href="#HotSpot算法实现" class="headerlink" title="HotSpot算法实现"></a><font size="5">HotSpot算法实现</font></h2><p>前面从理论上介绍了对象的存货判定和垃圾收集算法，下面就具体说一下HotSpot的实现细节</p><h3 id="HotSpot枚举根节点"><a href="#HotSpot枚举根节点" class="headerlink" title="HotSpot枚举根节点"></a><font size="5">HotSpot枚举根节点</font></h3><ul><li>在判断对象存活的可达性分析算法中，使用到了GC Roots。而可以作为GC Root的节点有很多，如果要逐一检查，无疑是很耗费时间的。</li><li>另外，可达性分析的过程中整个执行系统看起来就被冻结在某个时间点上，即GC停顿。不允许出现分析过程中对象的引用关系还在不断变化的情况，否则分析结果的准确性就不能得到保证。这就导致了GC进行时必须停掉所有的Java线程(Stop The World)。</li></ul><p>由于大多虚拟机都是采用<font color="red">准确式GC</font>(<font color="bllue">即虚拟机知道内存中某个地方的数据到底是什么类型，这样在GC时能够准确判断堆上的数据是否还可能被使用</font>)。HotSpot虚拟机使用一组称为<font color="blue">OopMap的数据结构</font>，在<font color="red">类加载完成后</font>，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在<font color="red">JIT编译过程中</font>，也会在<font color="bllue">特定位置记录下栈和寄存器中哪些位置是引用</font>。这样，GC在扫描时就可以直接得知这些信息了。</p><h3 id="安全点-SafePoint"><a href="#安全点-SafePoint" class="headerlink" title="安全点(SafePoint)"></a><font size="5">安全点(SafePoint)</font></h3><p>前面说了，在OopMap的协助下，HotSpot可以准确地完成GC Roots枚举。但仍有一个问题，可能程序中，<font color="bllue">导致引用关系变化(即导致OopMap内容发生变化)的指令很多，如果每一条指令都生成对应的OopMap，这样很占内存</font>。<br>实际上，HotSpot也没有为每条指令都生成OopMap。前面说到了，它只是在<font color="red">特定位置</font>记录这些信息，这些位置被称为<font color="blue">安全点</font>。即<font color="bllue">在程序执行时并非所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。</font><br>安全点的选用既不能太少以至于让GC等待时间太长，也不能太多导致频繁GC增大运行负荷。安全点的选定<font color="blue">基本上是以指令”是否具有让程序长时间执行的特征”为标准进行选定。</font><br>这是因为：每条指令执行时间都非常短暂，”长时间执行”最明显的特征<font color="bllue">就是指令序列的复用</font>，例如<font color="blue">方法调用、循环跳转、异常跳转等</font>。所以<font color="red">具有这些功能的指令才会产生SafePoint。</font></p><p>对于安全点，还有一个问题就是<font color="red">如何在GC发生时让除了执行Native的所有线程都”跑”到最近的安全点上再停顿下来？</font>书上给了两种方案</p><ul><li><b>抢先式中断</b><br>不需线程的执行代码主动去配合，在GC发生时，首先把所有的线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复该线程，让它跑到”安全点”上。(这种方法现在几乎不用)</li><li><b>主动式中断</b><br>当GC需要中断线程时，不直接对线程进行操作，仅仅是简单地设定一个标志，各个线程执行时主动的去访问这个标志，发现中断标志为真时就自己中断挂起。标志的地方和安全点是重合的。</li></ul><h3 id="安全区域-Safe-Region"><a href="#安全区域-Safe-Region" class="headerlink" title="安全区域(Safe Region)"></a><font size="5">安全区域(Safe Region)</font></h3><p>前面的安全点并没有完全解决如何进入GC的问题。你发现没有，<font color="bllue">当一个线程不执行的时候(即没有分配到CPU时间，有可能是处于Sleep状态或者Blocked状态)，显然无法响应JVM的中断请求，”走”到安全点中断挂起；同样的JVM也不可能等待线程重新被分配CPU时间。</font>这时，就需要安全区域来解决。</p><ul><li><font color="blue">安全区域</font><br>指的是在一段代码片段中，引用关系不会发生变化。那么在这个区域内的任意地方开始GC都是安全的。</li></ul><p><b>对于安全区域的线程</b></p><ol><li>在线程执行到安全区域中的代码时，首先<font color="bllue">标识自己已经进入了安全区域。</font></li><li>这样，当在这段时间里JVM要发起GC时，<font color="bllue">就不用管标识自己为Safe Region状态的线程。</font></li><li>线程要离开Safe Region时，它要检查系统是否已经完成了根节点枚举(或者是整个GC过程)<ul><li>如果完成了，线程就继续执行</li><li>否则它就必须等待直到收到可以安全离开Safe Region的信号为止</li></ul></li></ol><h2 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a><font size="5">内存分配和回收策略</font></h2><p>Java体系中的自动内存管理，实际上可以归结为给对象分配内存以及回收分配给对象的内存。前面已经大致介绍了内存回收这方面，下面就说一下给对象分配内存的细节。<br> 对象内存的分配，基本都是分配在堆上。对象主要分配在新生代的Eden区。<br><font color="bllue"><b>对象优先在Eden分配</b></font><br>大多数情况下，对象在新生代Eden区分配。当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC。</p><ul><li><b>Minor GC</b><br>新生代GC，指发生在新生代的GC，因为Java对象大多都具有朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也较快。</li><li><b>Full GC</b><br>老年代GC，指发生在老年代的GC，Full GC速度一般会比Minor GC慢10倍以上。</li></ul><p><font color="bllue"><b>大对象直接进入老年代</b></font><br>大对象，即<font color="bllue">需要大量连续内存空间的Java对象</font>。最典型的有<font color="red">很长的字符串或数组</font>。可以通过设置”<b><font color="blue">-XX:PretenureSizeThreshold&lt;/font</font></b>“参数，<font color="bllue">令大于这个设置值的对象直接在老年代分配</font>。这样做的目的就是避免在Eden区以及两个Survivor区发生大量内存复制。<br><font color="bllue"><b>长期存活的对象将进入老年代</b></font><br>前面说过，JVM采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些又该放在老年代。为此，<font color="blue">虚拟机给每个对象定义了一个年龄(Age)计数器。</font></p><ul><li>如果对象在Eden区出生并经过一次Minor GC后仍然存在，并且能够被Survivor区容纳，将被移动到Survivor区中，并且对象年龄设为1</li><li>对象在Survivor区中每熬过一次Minor GC，Age就+1，当年龄增加到一定数时(默认15)，就会被移到老年代。</li><li>对象晋升到老年代的阈值，可以通过参数”<b>-XX:MaxTenuringThreshold</b>“设置</li></ul><p><font color="bllue"><b>动态对象年龄判断</b></font><br>为了更好地适应不同程序的内存情况，对象并不是一定要达到阈值年龄才能晋升到老年代。<font color="blue">如果Survivor区中相同年龄所有对象的大小总和大于Survovir空间(一个Survivor大小)的一半，年龄大于或等该年龄的对象就可以直接进入老年代。</font></p><hr>对于JVM的简单介绍就记录到这里，回顾一下主要介绍了JVM内存模型、自动内存管理以及垃圾收集机制。下次会记录一下第六章内容，即JavaClass文件结构。]]></content>
      
      
      <categories>
          
          <category> JVM虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之快速排序</title>
      <link href="/2019/09/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>前面已经说过了四种排序算法，这次来讲一讲一种效率较高，应用也较多的一种排序，那就是<b>快速排序</b>。听名字就知道，这种排序算法速度是比较快的，那它究竟是怎么操作的呢？让我们来看一看吧</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>快速排序其实是对冒泡排序的一种改进，用到了分治和递归思想。通过一趟排序将要排序的数组分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据小，然后再按照此方法对两部分数据分别进行快速排序，整个排序过程递归进行。</p><ol><li>在待排序的数组中选定一个基数(作用后面说)<ul><li>这里基数的选择有很多种方法：<ul><li>数组的第一个元素作为基数</li><li>数组的最后一个元素作为基数</li><li>数组的中间元素作为基数</li><li>随机在数组中选择一个数作为基数</li></ul></li></ul></li></ol><p>我这里是选择<font color="bllue">中间的数作为基数。</font></p><ol start="2"><li>在当前数组的开头和末尾各定义一个指针，暂且命名为l和r</li><li>l指针向右扫描，直到找到小于等于基数的数为止</li><li>r指针向左扫描，直到找到大于等于基数的数为止</li><li>交换arr[l]和arr[r]，重复3，4直到r&lt;=l为止</li><li><font color="bllue">当r==l的时候，l和r指向基数。并且数组中比基数小的元素都在数组的左边，比基数大的元素都在数组的右边。</font></li><li>分别对数组的左边和右边递归进行2、3、4、5步，最后整个数组就被排序。</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public static void quickSort(int[] arr,int left,int right) &#123;</span><br><span class="line">//左下标，初始值为0</span><br><span class="line">int l=left;  </span><br><span class="line">//右下标，初始值为最后一个元素的下标</span><br><span class="line">int r = right; </span><br><span class="line">//基数</span><br><span class="line">int pivot = arr[(left + right) / 2];   </span><br><span class="line">//while循环让比pivot小的值放到左边，大的放到右边</span><br><span class="line">while (r &gt; l) &#123; </span><br><span class="line"></span><br><span class="line">//在pivot左边一直找，直到找到大于等于pivot的值，才退出</span><br><span class="line">while (arr[l] &lt; pivot) &#123;        </span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//在pivot右边一直找，直到找到小于等于pivot的值，才退出</span><br><span class="line">while (arr[r] &gt; pivot) &#123;        </span><br><span class="line">r--;</span><br><span class="line">&#125;</span><br><span class="line">//此时说明pivot左边的值都小于等于pivot，右边都大于等于pivot</span><br><span class="line">if (l &gt;= r) &#123;   </span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">//交换</span><br><span class="line">int temp;   </span><br><span class="line">temp = arr[l];</span><br><span class="line">arr[l] = arr[r];</span><br><span class="line">arr[r] = temp;</span><br><span class="line"></span><br><span class="line">//如果交换完后发现arr[l]==pivot，让r前移一步，r--</span><br><span class="line">if (arr[l] == pivot) &#123;        </span><br><span class="line">r--; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果如果交换完后发现arr[r]==pivot，让l后移一步，l++</span><br><span class="line">if (arr[r] == pivot) &#123;        </span><br><span class="line">l++; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//注意：如果l==r，必须让l++,r--，否则会出现栈溢出</span><br><span class="line">if (l == r) &#123;                     </span><br><span class="line">l++;</span><br><span class="line">r--; </span><br><span class="line">&#125;</span><br><span class="line">//向左递归</span><br><span class="line">if (left &lt; r) &#123;        </span><br><span class="line">quickSort(arr, left, r); </span><br><span class="line">&#125;</span><br><span class="line">//向右递归</span><br><span class="line">if (l &lt; right) &#123;       </span><br><span class="line">quickSort(arr, l, right); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="细节解释"><a href="#细节解释" class="headerlink" title="细节解释"></a>细节解释</h1><p>我把我觉得代码中不好理解的地方说一下</p><ol><li><img src="/2019/09/22/排序算法之快速排序/2.png" alt><b>这两个判断的作用是什么呢？</b><br>举个例子：</li><li>现有一个待排序数组{3,1,1,2}，初始时l=0；r=3；pivot=arr[1]=1;</li><li>第一次扫描过后，得到数组{1,1,3,2}，此时l=0；r=2；</li><li>第二次扫描，因为arr[r]=3&gt;pivot,r左移，r=1；l不变，l=0</li></ol><p><font color="red">这时候问题就来了，这时候arr[l]==arr[r]==pivot，所以l和r会一直互相交换值，但是它们指向的位置不变，即l==r==1一直保持，这样就会陷入死循环</font><br><b>为什么在arr[l] == pivot时是r–而不是l++呢？</b><br><font color="red">前面说过，因为最后r==l时，arr[r]==arr[l]==pivo一定是存在的。当arr[l] == pivot时，说明l已经找到了确定的位置，这时候如果移动l，那么最后l==r时，arrr[r]==arr[l]就有可能不等于pivot。</font><br><img src="/2019/09/22/排序算法之快速排序/3.png" alt><b>为什么会出现栈溢出？</b><br>可以这么理解，当第一趟排序过后，arr[r]==arr[l]==pivot，数组中小于pivot的都在左边，大于pivot的都在右边。这时候要递归对左右序列分别进行快排。通过下面的递归代码可以发现：</p><ol><li>对其左序列进行快排时，以r为新的右边界</li><li>对其右序列进行快排时，以l为新的左边界</li></ol><p><font color="red">这时候r和l指向的值是已经确定了位置的基数值，自然就不需要参与后面的快排。所以要将r前移，l后移，目的就是将已经确定位置的基数值排除在外。</font></p><h1 id="排序速度"><a href="#排序速度" class="headerlink" title="排序速度"></a>排序速度</h1><p>同样的，我们来测试一下快排有多快<br><img src="/2019/09/22/排序算法之快速排序/4.png" alt><br>排序时间<br><img src="/2019/09/22/排序算法之快速排序/5.png" alt><br>进过多次测试发现快排的速度大约在<font color="bllue">20ms左右</font>，比前面的希尔排序还要快一倍，果然是快排，名不虚传。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之希尔排序</title>
      <link href="/2019/09/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>前面说到了插入排序，并且知道了它是不稳定的。并且测试速度后发现插入排序的速度与冒泡、选择相比还是比较可观的。但是，不知道你有没有发现，插入排序再某些情况下存在着一些弊端。<br>比如有这样的一个数组arr={4,7,9,6,4,1}，数组自身的顺序接近于逆序，当将4、1插入到有序数组中时，需要将有序数组部分所有元素都后移一个位置，这无疑会有一定的时间消耗。那么在这种情况下，就出现了<b>希尔排序</b>，你可以将希尔排序理解为插入排序的增强版。</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>希尔排序，又称为缩小增量排序</p><ol><li>设置一个步长step，通常初始化为arr.length/2，即数组长度的一半</li><li>间隔为一个步长的元素为一组</li><li>分别对同一组的元素进行插入排序</li><li>每一趟过后将step减半，即step/=2(缩小增量)</li><li>重复3和4，直到step为1</li><li>setp为1时，数组已经接近有序，这时对整个数组进行插入排序。</li></ol><p>前面说过，插入排序适用于哪些自身顺序比较良好的数组，而希尔排序通过不断地缩小步长，将一个数组变成一个接近有序的数组后，直到step=1，此时就相当于对一个接近有序的数组进行插入排序。<br><img src="/2019/09/21/排序算法之希尔排序/1.png" alt></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void Shellsort1(int[] arr) &#123;</span><br><span class="line">int count=0;</span><br><span class="line">for (int step = arr.length / 2; step &gt; 0; step /= 2) &#123;</span><br><span class="line">//类比于插入排序</span><br><span class="line">for (int i = step; i &lt; arr.length; i++) &#123;</span><br><span class="line">//当前分组中有序部分的最后一个数下标</span><br><span class="line">int insertIndex = i - step;  </span><br><span class="line">//当前分组中待待插入的数</span><br><span class="line">int insertVal = arr[i];         </span><br><span class="line">while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex + step] = arr[insertIndex];</span><br><span class="line">insertIndex -= step;</span><br><span class="line">&#125;</span><br><span class="line">arr[insertIndex + step] = insertVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;希尔排序后的数组&quot;);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>算法的时间复杂度<ul><li>平均时间：O(nlogn)</li><li>最差情况：O(n的1.2次方)</li></ul></li></ol><p>这不难理解，因为对于一个简单地双重循环来说，时间复杂度都是O(n²)</p><ol start="2"><li>空间复杂度<ul><li>只用了一个insertIndex和一个insertVal，和n的大小无关，所以是O(1)</li></ul></li><li>稳定性<ul><li>和插入排序不同，<font color="red">希尔排序不是稳定的</font></li></ul></li></ol><h1 id="算法速度"><a href="#算法速度" class="headerlink" title="算法速度"></a>算法速度</h1><p>既然说希尔排序时插入排序的增强版，那就来测试一下希尔排序和插入排序的速度谁更快一些，又快多少呢？<br>同样的，创建一个80000大小的随机数组，来测试希尔排序的排序速度<br><img src="/2019/09/21/排序算法之希尔排序/3.png" alt><br>排序时间(毫秒)为<br><img src="/2019/09/21/排序算法之希尔排序/4.png" alt><br>通过前面插入排序的对比不难发现，希尔排序能够较大的提高插入排序的速度</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 希尔排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之插入排序</title>
      <link href="/2019/09/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>前面说了两种排序算法，分别是冒泡排序和选择排序，这两种算法都比较容易理解。那么这次来学习第三种排序—-<b>插入排序</b>，这也是一种相对简单的排序算法，理解起来难度也不大。</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><p>将数组分成两部分：</p><ul><li>一部分是有序数组</li><li>一部分是无序数组。</li></ul><p>在每一趟排序中，从无序数组中拿出一个数来，放到有序数组的正确位置。即每一趟排序过后，无序数组元素减少一个，相应的有序数组元素增加一个。到最后该数组全部变为有序数组。</p><ul><li>初始化有序数组长度为1，即arr[0]为有序数组。</li><li>第一趟排序，将无序数组中第一个元素arr[1]放到有序数组中，此时有序数组包含两个元素</li><li>第二趟排序，将无序数组中第一个元素arr[2]放到有序数组中，此时有序数组包含三个元素</li><li>……</li><li>第n-1趟排序，将无序数组中第一个也是最后一个元素arr[n-1]放到有序数组中，至此数组全部有序<br><img src="/2019/09/21/排序算法之插入排序/1.png" alt>可以看到，最后一趟排序过后，无序数组长度为0，至此数组全部有序。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 插入排序</span><br><span class="line"> * @param arr</span><br><span class="line"> */</span><br><span class="line">public static void insertSort(int[] arr) &#123;</span><br><span class="line">//待插入的数，无序数组第一个元素</span><br><span class="line">int insertIndex; </span><br><span class="line">//待插入的数前面一个数的下标，有序数组最后一个元素</span><br><span class="line">int insertVal;      </span><br><span class="line">for (int i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class="line">//待插入的数为无序数组第一个元素</span><br><span class="line">insertVal = arr[i+1];</span><br><span class="line">//有序数组最后一个元素</span><br><span class="line">insertIndex = i ;    </span><br><span class="line">while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex + 1] = arr[insertIndex];</span><br><span class="line">insertIndex--;</span><br><span class="line">&#125;</span><br><span class="line">arr[insertIndex+1] = insertVal;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;排序后的数组&quot;);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>算法的时间复杂度<ul><li>平均时间：O(n²)</li><li>最差情况：O(n²)</li></ul></li></ol><p>这不难理解，因为对于一个简单地双重循环来说，时间复杂度都是O(n²)</p><ol start="2"><li>空间复杂度<ul><li>只用了一个insertIndex和一个insertVal，和n的大小无关，所以是O(1)</li></ul></li><li>稳定性<ul><li>不难发现，<font color="red">插入排序是稳定的</font></li></ul></li><li>另外，该排序算法在<font color="red">大部分元素已经是有序时比较好</font></li></ol><h1 id="算法速度"><a href="#算法速度" class="headerlink" title="算法速度"></a>算法速度</h1><p>和前面两个排序算法一样，我们来随机创建一个80000大小的随机数组，测试所用的时间<br><img src="/2019/09/21/排序算法之插入排序/3.png" alt><br>最后测得的排序时间为<br><img src="/2019/09/21/排序算法之插入排序/4.png" alt><br>让我们以ms为单位，再测试一次<br><img src="/2019/09/21/排序算法之插入排序/5.png" alt><br>通过结果可以发现，相比于冒泡排序和选择排序，插入排序的速度还是很可观的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之JDBCUtils工具类</title>
      <link href="/2019/09/20/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJDBCUtils%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2019/09/20/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJDBCUtils%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>每次使用JDBC操作数据库的时候，都需要导入驱动、获取连接等重复的操作，因此写了一个JDBC工具类，该工具类使用Druid数据库连接池，能够获取连接池(供JdbcTemplate使用)和连接对象，方便以后使用，本文基于Maven下的JavaWeb项目。</p><hr><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a><font size="5">导入jar包</font></h2><p>要使用数据库连接和Druid连接池，需要导入MySQL驱动和Druid连接池相关jar包，我们打开pom.xml文件。在<dependencies>标签体中加入下面两个<dependency>标签，如果没有<dependencies>标签则创建一个。</dependencies></dependency></dependencies></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--mysql驱动--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.26&lt;/version&gt;</span><br><span class="line">    &lt;!--作用域--&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--druid连接池--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a><font size="5">配置文件</font></h2><p>对于Druid连接池，除了导入相关jar包以外，我们还需要将Druid.properties配置文件放置到resources目录(该目录放置代码相关的配置文件)下，后面在使用时将配置文件加载进内存。<br><img src="/2019/09/20/Web基础之JDBCUtils工具类/1.png" alt></p><h1 id="工具类编写"><a href="#工具类编写" class="headerlink" title="工具类编写"></a>工具类编写</h1><p>到目前为止我们所有的前期工作已经完成，现在可以编写JDBCUtils工具类了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">1. 声明静态数据源成员变量</span><br><span class="line">2. 创建连接池对象</span><br><span class="line">3. 定义公有的得到数据源的方法</span><br><span class="line">4. 定义得到连接对象的方法</span><br><span class="line">5. 定义关闭资源的方法</span><br><span class="line"> */</span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">// 1.声明静态数据源成员变量</span><br><span class="line">private static DataSource ds;</span><br><span class="line"></span><br><span class="line">// 2. 创建连接池对象</span><br><span class="line">static &#123;</span><br><span class="line">// 加载配置文件中的数据</span><br><span class="line">InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">Properties pp = new Properties();</span><br><span class="line">try &#123;</span><br><span class="line">pp.load(is);</span><br><span class="line">// 创建连接池，使用配置文件中的参数</span><br><span class="line">ds = DruidDataSourceFactory.createDataSource(pp);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">System.out.println(&quot;JDBCUtils&quot;);</span><br><span class="line">//e.printStackTrace();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;JDBCUtils&quot;);</span><br><span class="line">//e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3. 定义公有的得到数据源的方法</span><br><span class="line">public static DataSource getDataSource() &#123;</span><br><span class="line">return ds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4. 定义得到连接对象的方法</span><br><span class="line">public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">return ds.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5.定义关闭资源的方法</span><br><span class="line">public static void close(Connection conn, Statement stmt, ResultSet rs) &#123;</span><br><span class="line">if (rs != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (stmt != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">stmt.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (conn != null) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (SQLException e) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 6.重载关闭方法</span><br><span class="line">public static void close(Connection conn, Statement stmt) &#123;</span><br><span class="line">close(conn, stmt, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码其他部分都比较简单，主要记录一下记载配置文件时的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br></pre></td></tr></table></figure><p>maven编译完成后，所有的源文件，包括resources目录下的文件，默认都会放在target/classes下面，这个路径其实就是classPath(环境变量)的路径。在resources 根目录下的配置文件其实就是 classPath的路径。所以我们可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 获取classpath下资源的URL对象</span><br><span class="line">java.net.URL appURL = App.class.getClassLoader().getResource(&quot;app.properties&quot;);</span><br><span class="line">System.out.println(appURL.getPath());  // 输出该文件的绝对路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 获取classpath下资源的InputStream对象</span><br><span class="line">InputStream propertiesInputStream = App.class.getClassLoader().getResourceAsStream(&quot;app.properties&quot;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> 工具类 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自顶向下之计算机网络和因特网</title>
      <link href="/2019/09/20/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/"/>
      <url>/2019/09/20/%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
      
        <content type="html"><![CDATA[<p>最近在读计算机网络方面的书—–<b>《计算机网络自顶向下方法》(第七版)</b>，个人觉得书中概念讲的很清楚，举例也是很形象易懂了，如果你想学计网的话，5星强烈推荐！刚读完第一章，做个小结，方便回头复习。书中有些图有助于理解，建议搭配书本一起学习。</p><hr><a id="more"></a><h1 id="什么是因特网"><a href="#什么是因特网" class="headerlink" title="什么是因特网"></a>什么是因特网</h1><p>这一节主要从两个方面来解释什么是因特网</p><ul><li>从因特网得具体构成，也就是从因特网的基本硬件和软件组成方面解释</li><li>从为分布式应用程序提供服务得联网基础设施来描述</li></ul><h2 id="具体构成描述"><a href="#具体构成描述" class="headerlink" title="具体构成描述"></a><font size="5">具体构成描述</font></h2><p>因特网是一个世界范围内的网络，一个互联了遍及全世界数十亿计算设备的网络，这些计算设备包括计算机、手机、智能手表、电视…，用因特网术语来说，这些和因特网被称为<font color="red">主机/端系统。</font><br>端系统通过<font color="blue">通信链路</font>和<font color="blue">分组交换机</font>连接到一起</p><ul><li><b>通信链路</b><ul><li>用来传输数据，由不同类型的物理媒体组成，例如同轴电缆、铜线、光纤…</li><li>传输速率：链路传输数据的频率，比特/秒(bit/s)</li></ul></li><li><b>分组交换机</b><ul><li>顾名思义，分组交换机从它一条如通信链路接收到达的分组，并从它的一条出通信链路转发该分组</li><li>两种有名的分组交换机：<font color="blue">路由器</font>和<font color="blue">链路层交换机</font></li><li>链路层交换机通常位于<font color="red">接入网</font>中</li><li>路由器通常位于<font color="red">网络核心</font>中</li></ul></li><li><b>分组</b><ul><li>当端系统向另一台端系统之间发送数据时，发送端系统将数据分段，并为每段加上首部字节</li><li>由此形成的信息包用计算机网络术语来说称为分组</li><li>分组通过网络发送到目的端系统，并在那里被装配成原始数据</li></ul></li><li><b>路径</b><br>  一个分组所经历的一系列通信链路和分组交换机被统称为通过该网络的路径</li></ul><p>也许通过上面的描述，你还是不明白数据在网络中怎么传输的。不着急，我们来举个例子：<br><b>一个工厂</b>需要将大量的<b>货物</b>搬运到数千里以外的某个<b>目的地仓库</b>。在工厂中，<b>货物要分开并装上卡车</b>车队。然后每辆卡车独立的通过<b>高速公路、公路或立交桥</b>组成的运输网络向仓库运送货物。在目的地仓库，卸下这些货物，并且<b>与一起装载的同一批货物的其余部分堆放在一起</b>。</p><ul><li>工厂就相当于源端系统</li><li>货物就相当于数据</li><li>目的地仓库就相当于目的端系统</li><li>在工厂中将货物分开并装上卡车，即将数据分段，为每段加上首部字节，形成分组。因此、分组就相当于卡车。</li><li>高速公路、立交桥就相当于各种通信链路</li><li>分组交换机则相当于路的交叉口</li><li>公路两边的建筑物就相当于端系统</li><li>就像卡车选取运输网路的一条路径前行一样，分组选取计算机网络的一条路径前行</li></ul><p><b><font color="red">这下你明白了么？</font></b><br>端系统通过ISP(Internet Service Provider,因特网服务提供商)接入因特网</p><ul><li><b>ISP</b><br>一个由多台分组交换机和多段通信链路组成的网络。<br>各ISP为端系统提供了不同类型的网络接入，因特网就是将端系统彼此互联，因此为端系统提供接入的ISP也必须互联，后面会详细说到ISP</li><li><b>协议</b><ul><li><font color="bllue">控制着因特网中信息的接受和发送</font>，端系统、分组交换机和其他因特网部件都要运行一系列协议</li><li>TCP(Transmission Control Protocal，传输控制协议)和IP(Internet Protocol，网际协议)是因特网中最为重要的协议</li><li>IP协议定义了在路由器和端系统之间<font color="bllue">发送和接收的分组格式</font></li></ul></li></ul><h2 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a><font size="5">服务描述</font></h2><p>除了电子邮件、Web冲浪等传统应用外，因特网应用还包括手机和平板的应用程序。例如在线电影、多人游戏、视频会议…因为这些应用&lt;font color=bllue涉及到多个相互交换数据的系统，故它们被称为<b>分布式应用程序</b>。重要的是，这些因特网应用程序都是<b>运行在端系统上</b>的，即它们并不运行在位于网络核心的分组交换机中。<br>假如你写了一个应用程序，运行在不同端系统上的软件需要相互发送数据(例如QQ、微博…)，这时候问题就来了，你怎么才能<font color="bllue">让运行在一个端系统上的应用程序指令因特网向运行在另一个端系统的软件发送数据</font>呢？这个问题引出了另一种描述因特网的方法：即<b>将因特网描述为应用程序的平台。</b><br>与因特网相连的端系统提供了一个套接字接口(在Java中，接口就是规则)，该接口规定了运行在端系统上的应用程序请求因特网向运行在另一个端系统上的特定目的地程序交付数据的方式。</p><ul><li><b>套接字</b><ul><li>由端系统提供</li><li>规定了端系统上的应用程序请求因特网向另一个端系统上的特定目的地程序交付数据的方式。</li><li>一套发送程序必须遵循的规则集合</li></ul></li></ul><p><b>我们继续来做一个类比</b><br>假设张三使用邮政服务向李四发送一封信。那我们知道，张三不能只是写了这封信，然后丢出窗外，这样邮政服务是不会接收的，李四也收不到信。<br>正确的做法是什么呢？张三应该将信装在信封里，在信封上写李四的姓名、住址、邮编；在信封右上角贴上邮票；最后将信封丢进邮政的服务信箱中。这是邮政服务定义的规则，是每个要发信的人必须遵守的。同理，因特网也有一个发送数据的程序必须遵守的套接字接口(规则)，是因特网能向接收数据的程序交付数据。</p><h2 id="什么是协议"><a href="#什么是协议" class="headerlink" title="什么是协议"></a><font size="5">什么是协议</font></h2><p>同样的，为了帮助理解，我们像举个例子类比一下协议这个概念。<br>我们的生活中，无时无刻不在执行协议。假设张三遇到了李四，发生了下面一段对话</p><hr>张三：你好，李四(李四发送报文)<br>李四：你好，张三(发送报文)<br>这时，李四对张三的回应按时着两人可以继续进行交谈(通信)。<hr>但是如果是这样的：张三：你好啊李四<br>李四：别烦我/没有理张三<br>李四的反应表明两人之间的交谈(通信)很勉强或者无法进行，这时张三可能会放弃和李四的交谈。<hr><p>通过上面两段对话，可以知道，发送和接收的报文，以及这些报文发送、接收报文(在第一段中，李四接收报文后对张三进行了回复)或者其他事件出现时所采取的动作(在第二段中，李四没有进行回复)，在一个人类协议中起到了核心作用。<br>如果两个人交谈时，使用不同的协议，例如张三和李四的语言不通，那么他们就无法通信。同样的，<font color="bllue">在网络中为了完成一项工作，要求两个(多个)通信实体运行相同的协议。</font><br>网络的协议和人类协议类似，交换报文和采取动作的实体时设备而不是人</p><ul><li><b>协议</b><br>定义了在两个或多个通信实体间交换报文的&lt;font color=bllue格式和顺序，以及报文发送和或接受一条报文或其他事件发生时所采取的动作。因特网广泛的使用了协议，不同的协议用于完成不同的通信任务，<b>掌握计算机网络领域知识的过程就是理解网络协议的构成、原理和工作方式的过程。</b></li></ul><h1 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h1><p>前面说过，通常把与因特网相连的计算机或其他设备称为端系统，它们位于互联网的边缘，因此被称为端系统。<br>想象一下，在现实生活中，各种各样的房子/建筑物就相当于各种各样的端系统，建筑物前的公路将数以亿计的建筑物连接在一起，就相当于因特网将无数端系统连接在一起。通常路的尽头都是建筑物，建筑物位于公路系统的边缘，同样的端系统也位于互联网的边缘。<br>端系统也称为主机，因为它们运行应用程序，主机有时又被分为两类：客户端和服务器。</p><h2 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a><font size="5">接入网</font></h2><p>前面说到了位于网络边缘的端系统和应用程序，现在主要说一下<b>接入网</b>，这是指<font color="bllue">将端系统物理连接到边缘路由器的网络</font></p><ul><li><b>边缘路由器</b><br>端系统到任何其他远程端系统路径上的第一台路由器。<br>下面说一下使用接入网的几种环境。</li></ul><h3 id="家庭接入"><a href="#家庭接入" class="headerlink" title="家庭接入"></a><font size="5">家庭接入</font></h3><p>家庭接入有大致4种不同的接入链路</p><ul><li>DSL(Digital Subscriber Line，数字用户线)</li><li>电缆</li><li>FTTH(Fiber To The Home，光纤到户)</li><li>拨号和卫星</li></ul><p>下面分别做一下了解</p><h4 id="DSL-数字用户线"><a href="#DSL-数字用户线" class="headerlink" title="DSL-数字用户线"></a><font size="5">DSL-数字用户线</font></h4><p>住户通常从<b>提供本地电话接入的本地电话公司处</b>获得DSL因特网接入。当使用DSL时，本地电话公司也是它的ISP(因特网服务提供商)。<br>每个用户的<font color="blue">DSL调制解调器</font>使用现有的<b>电话线</b>(双绞铜线)与电话公司的数字用户线接入复用器<font color="blue">(DSLAM)</font>交换数据。家庭的DSL调制解调器得到数字信号后将其转换为高频音，通过电话线传输给电话公司，在电话公司的DSLAM处转换回数字信号。<br>这样，<b>电话线同时承载了数据和传统的电话信号</b>，它们通过<b>不同的频率进行编码</b></p><ul><li>高速上行信道：50kHz-1MHz频段</li><li>中速下行信道：4kHz-50kHz频段</li><li>普通双向电话信道：0-4kHz频段</li></ul><p>这种方法使得单根的DSL线路看起来就像有三根一样，因此一个电话呼叫和一个因特网连接能够同时共享DSL链路(后面会说到这种频分复用技术)</p><ul><li><b>用户一侧：</b>一个<font color="blue">分配器</font>把到达家庭的数据信号和电话信号分开，并将数据信号转发给DSL调制解调器</li><li><b>电话公司一侧：</b>DSLAM把数据和电话信号分开，并将数据信号发送到因特网。</li></ul><p><b>以上就是DSL接入方式。适用于短距离接入</b></p><h4 id="电缆接入"><a href="#电缆接入" class="headerlink" title="电缆接入"></a><font size="5">电缆接入</font></h4><p>DSL利用电话公司的本地电话基础设施，而电缆因特网接入利用有线电视公司的有线电视基础设施。住宅从提供有线电视的公司获得电缆因特网接入。<br>电视公司的电缆头端和地区枢纽通过光缆连接，地区枢纽使用传统的同轴电缆到达各家各户，每个地区枢纽通常支持500~5000个家庭。<br>电缆因特网接入需要特殊的调制解调器，即<font color="blue">电缆调制解调器</font>。</p><ul><li><b>家庭端</b><br>类似DSL调制解调器，电缆调制解调器通常是一个外部设备，通过一个以太网端口连接到家庭PC，将数字信号转换为模拟信号。</li><li><b>电视公司的电缆头端</b><br>电缆调制解调器端接系统(CMTS)，类似于DSL中的DSLAM，功能也类似。即将来自住户的电缆调制解调器发送的模拟信号转换回数字信号。</li><li><b>共享广播媒体</b><ul><li>电缆因特网接入一个重要的特征是共享广播媒体。</li><li>由头端发送的每个分组向下行经每段链路到每个家庭，每个家庭发送的每个分组经上行信道向头端传输。因此，如果几个用户同时经下行信道下载一个视频文件，每个用户接收视频文件的实际速率将大大低于电缆总计的下行速率。</li></ul></li></ul><h4 id="FTTH-光纤到户"><a href="#FTTH-光纤到户" class="headerlink" title="FTTH(光纤到户)"></a><font size="5">FTTH(光纤到户)</font></h4><p>从本地中心局直接到家庭提供了一条光纤路径，有两种方案</p><ul><li>直接光纤，从本地中心局到每户设置一个光纤</li><li>从中心局出来的每根光纤实际上由多个家庭共享，直到相对接近这些家庭的位置，该光纤才分成每户一根光纤，进行这种分配形成了两种光纤分布体系方案<ul><li>主动光纤网络(Active Optical NetWork,AON)，AON本质上就是交换因特网，后面会说到</li><li>被动光纤网络(Passive Optical NetWork,PON)</li></ul></li></ul><p>简单说一下PON</p><ul><li><b>家庭端</b><br>每个家庭具有一个<font color="blue">光纤网络端接器(ONT)</font>，用户将一台家庭路由器和ONT相连,并通过这台路由器接入因特网。ONT由专门的光纤连接到邻近的<font color="blue">分配器</font>，分配器把一些家庭(一般100个)集结到一根共享的光纤。</li><li><b>公司端</b><br>该光纤在连接到本地公司的<font color="blue">光纤线路端接器(OLT)</font>，OLT提供了光信号和电信号之间的转换，经过本地公司的路由器和因特网相连</li></ul><p>在PON体系中，所有从OLT发送到分配器的<font color="bllue">分组在分配器处复制。</font></p><h4 id="拨号和卫星"><a href="#拨号和卫星" class="headerlink" title="拨号和卫星"></a><font size="5">拨号和卫星</font></h4><p>在无法提供上面三种接入的地方，能够使用这两种方式，速度较慢。</p><h3 id="企业和家庭接入"><a href="#企业和家庭接入" class="headerlink" title="企业和家庭接入"></a><font size="5">企业和家庭接入</font></h3><p>在公司和大学校园以及越来越多的家庭环境中，使用<font color="blue">局域网(LAN)</font>将端系统连接到边缘路由器，局域网技术有很多种，目前<font color="blue">以太网是最流行的接入技术</font>(会在后面讲到该技术)。</p><ul><li>以太网用户使用双绞铜线与一台以太网交换机相连</li><li>以太网交换机或者这样相连的网络再与更大的因特网相连。</li></ul><p>还有越来越多的手机等设备<b>无线接入因特网。在无线LAN环境中：</b></p><ul><li>无限用户从一个接入点发送/接收分组；</li><li>该接入点与企业网连接(可能是用了有线以太网)；</li><li>企业网再与有线因特网相连。<br>现在我们知道的<font color="bllue">WiFi，就是基于IEEE802.11技术的无线LAN接入。</font></li></ul><h3 id="广域无线接入：4G和LTE"><a href="#广域无线接入：4G和LTE" class="headerlink" title="广域无线接入：4G和LTE"></a><font size="5">广域无线接入：4G和LTE</font></h3><ul><li><b>4G(第四代广域无线网络)</b><br>我们平常使用的手机网络(联通、电信…)也能够接入因特网，这就用到了与蜂窝电话相同的无线基础设施，通过蜂窝网提供商(电信…)运营的基站来发送和接收分组。<br>和WiFi不同的是，我们在使用4G网络的时候，并不需要在接入点几十米范围内，而是在基站数万米内都可以使用。</li><li><b>LTE(Long-Term-Evolutuon,长期演进)</b><br>来源于3G技术</li></ul><h2 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a><font size="5">物理媒体</font></h2><p>在前面说到因特网一些接入技术的时候，说到了所使用的物理媒体。例如DSL使用了双绞铜线，电缆接入网络使用了光纤和同轴电缆…接下来就简要说一下常用的物理媒体。<br>我们描述下一个bit从一个端系统开始传输，经过一系列链路和路由器，到达另一个端系统的历程。</p><ul><li>源端系统发送这个bit，不久后第一台路由器接收该bit</li><li>第一台路由器转发该bit，不久后第二台路由器接收</li><li>……中间经历了若干个路由器最终到达端系统</li></ul><p>因此，该bit从源到目的地传输时，通过一系列的<b>“发射器-接收器”对</b>。对于每个发射器-接收器对，<b>通过跨越一种物理媒体传播电磁波或光脉冲来发送该比特。</b><br>物理媒体有多种形状和形式，并且对沿途的每一个发射器-接收器对来说不必具有相同的类型。<br><b>物理媒体分为两种</b></p><ul><li>引导型媒体：电波沿着固体媒体前行，如光缆、双绞铜线以及同轴电缆……</li><li>非引导型媒体：电波在空气或外层空间种传播，如无线局域网或数字卫星频道中。</li></ul><p>另外，<b>物理链路(铜线、光缆等)的实际成本与其他网络成本相比通常小很多。</b>下面说几种常见的物理媒体：</p><h3 id="双绞铜线"><a href="#双绞铜线" class="headerlink" title="双绞铜线"></a><font size="5">双绞铜线</font></h3><ul><li>最便宜最常用的引导型传输媒体；</li><li>由两根绝缘铜线组成以规则的螺旋排列，一对电线构成了一个通信链路。</li><li>数据传输速率取决于线的粗细以及传输方和接收方之间的距离。</li></ul><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a><font size="5">同轴电缆</font></h3><p>和双绞线类似，由两个铜导体组成，但这两个铜导体是<b>同心而不是并行</b>的，同轴电缆能够达到较高的数据传输速率，在电缆电视系统中相当普遍。特别的，<b>许多端系统能够直接与该电缆相连，每个端系统都能接收由其他端系统发送的内容。</b></p><h3 id="光纤"><a href="#光纤" class="headerlink" title="光纤"></a><font size="5">光纤</font></h3><p>一种柔软的、能够引导光脉冲的媒体，每个脉冲表示一个bit。有以下特点：</p><ul><li>比特速率极高</li><li>不受电磁干扰并且光缆信号衰减极低</li><li>很难窃听</li></ul><p>这些特征使得光纤成为<b>长途引导型传输媒体</b>，特别是跨海链路&gt;。</p><h3 id="陆地无线电信道"><a href="#陆地无线电信道" class="headerlink" title="陆地无线电信道"></a><font size="5">陆地无线电信道</font></h3><p>无线电信道承载电磁频谱中的信号，不需要安装物理线路，并且具有<b>穿透墙壁、提供与移动用户的连接以及长距离承载信号的能力。</b>无线电信道的特性依赖于<font color="blue">传播环境和信号传输距离</font>。环境上取决于</p><ul><li>路径损耗</li><li>遮挡衰落(信号跨距离传播通过阻碍物时信号强度降低)</li><li>多径衰落(干扰对象的信号反射)</li><li>干扰(由于其他传输或电磁信号)</li></ul><p>陆地无线电信道大致划分为三类</p><ul><li><b>运行在很短距离：</b>个人设备如无线头戴耳机、无线鼠标…</li><li><b>运行在局域，</b>通常数十到几百米：无线LAN技术使用的就是该局域无线电信道</li><li><b>运行在广域，</b>跨越数万米：蜂窝接入技术使用的就是该广域无线电信道</li></ul><h3 id="卫星无线电信道"><a href="#卫星无线电信道" class="headerlink" title="卫星无线电信道"></a><font size="5">卫星无线电信道</font></h3><p>一颗通信卫星连接地球上两个或多个微波发射/接收器，它们被称为<font color="blue">地面站</font>。该卫星在一个频段上接受传输，使用一个转发器(后面会说到)再生信号，并在另一个频段上发射信号。<b>通常用于无法使用DSL或电缆接入的区域。</b></p><h1 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h1><p>前面说完了网络边缘，现在这里说一下<b>网络核心</b>，即<font color="bllue">由互联因特网端系统的分组交换机和链路构成的网状网路。</font></p><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a><font size="5">分组交换</font></h2><p>在各种应用程序中，端系统彼此交换<b>报文</b>。报文能够包含协议设计者需要的任何东西，可以包含控制功能，也可以包含数据。<br>源将长报文划分为较小的数据块，称之为<b>分组</b>。在源和目的地之间，每个分组都通过通信链路和分组交换机传送。分组以<font color="red">等于该链路最大传输速率的速度</font>通过通信链路。例如，源或分组交换机将一个长为L的分组发送出去，链路的传输速率为R(bit/s)，那么传输该分组的时间为L/R秒。</p><h3 id="存储转发传输"><a href="#存储转发传输" class="headerlink" title="存储转发传输"></a><font size="5">存储转发传输</font></h3><p><b>交换机能够开始向输出链路传输该分组的第一个bit之前，必须接收到整个分组。</b><br>多数分组交换机在链路的输入端使用存储转发传输。</p><h3 id="排队时延和分组丢失"><a href="#排队时延和分组丢失" class="headerlink" title="排队时延和分组丢失"></a><font size="5">排队时延和分组丢失</font></h3><p>每台分组交换机有多条链路与之相连，对于每条相连的链路，该分组交换机具有一个输出缓存/输出队列</p><ul><li><b>输出缓存/输出队列</b><br>用于存储路由器正准备发往那条链路的分组。</li></ul><p>该输出缓存在分组交换中作用很大，如果到达的分组需要传输到某条链路，但发现该链路正在忙于传输其他分组，那么该分组必须在输出缓存中等待。<br>因此，除了存储转发时延以外，分组还要承受输出缓存的<b>排队时延</b>。这些时延是变化的，取决于网络的拥塞程度。</p><ul><li><b>分组丢失</b><br>前面说过，分组可能将会在路由器中的输出缓存中等待，因为<font color="bllue">缓存空间大小是有限</font>的，一个到达的分组可能发现路由器的<b>缓存空间已经被其他等待传输的分组完全充满</b>。在这种情况下，将会出现<font color="bllue">分组丢失/丢包</font>。到达的分组或已经排队的分组之一将被丢弃。</li></ul><h3 id="转发表和路由选择协议"><a href="#转发表和路由选择协议" class="headerlink" title="转发表和路由选择协议"></a><font size="5">转发表和路由选择协议</font></h3><p>路由器从一条通信链路得到分组，然后向与它相连的另一条链路转发分组，那么问题来了，路由器是怎么决定它应当向哪条链路进行转发呢？<br>在因特网中，每个端系统都有一个地址，被称为<b>IP地址</b>。当源主机要向目的主机发送一个分组时，源在该分组的首部包含了目的主机的IP地址。如同邮政地址一样，该地址具有<b>等级结构</b>。分组到达路由器时，路由器<b>检查该分组目的地址的一部分</b>，并向一台相邻的路由器转发该分组。<br>更特别的，每台路由器具有一个转发表</p><ul><li><b>转发表</b><br>用于将目的地址(或目的地址的一部分)映射成输出链路。</li></ul><p><font color="red">当分组到达路由器时，路由器检查分组的目的地址(或一部分)，用这个地址搜索转发表，找到合适的出链路，路由器将分组导向该链路。</font></p><ul><li>转发表的设置<br>因特网具有一些特殊的路由选择协议，用于<b>自动</b>的设置这些转发表。</li></ul><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a><font size="5">电路交换</font></h2><p>在电路交换网络中，端系统会话期间，<b>预留了端系统间路径通信所需要的资源。</b>而在分组交换网络中，这些资源则不是预留的，会话的报文按需使用资源，这样就带来了等待(排队)接入链路。</p><hr><p>举例说明，现有两家餐馆</p><ul><li><b>分组交换</b><br>不需要预定，但不保证能安排顾客，即顾客去的时候可能餐馆满了，就需要排队等待</li><li><b>电路交换</b><br>在去之前必须提前预定，虽然麻烦，但是我们到的的时候能够立即入座点菜。</li></ul><hr>传统的电话网络就是电路交换的例子，在发送方能够发送信息之前，该网络必须在发送方和接收方建立一个<b>名副其实的连接</b>，因此此时沿着该发送方和接收方之间路径上的交换机都将为该连接维护连接状态。该连接被称为一条<b>电路</b>当网络创建这种电路时，也在连接期间为该网络链路上<b>预留了恒定的传输速率</b>(每条链路传输容量的一部分)，能够<b>确保发送方以恒定速率向接收方传输数据。</b><p>例如：A向B发送报文，网络必须在链路中预留一条电路，如果一个链路的传输速率为1Mbps，有四条电路，那么A向B发送报文的速率恒定为250kbps，即使该链路此时只有这一条连接。</p><h3 id="电路交换网络中的复用"><a href="#电路交换网络中的复用" class="headerlink" title="电路交换网络中的复用"></a><font size="5">电路交换网络中的复用</font></h3><p>前面说的电路是通过频分复用(FDM)或时分复用(TDM)来实现的，并不是真正的电线电路。</p><ul><li><b>频分复用(FDM)</b><br>链路的频谱由跨越该链路创建的所有连接共享。特别的，在连接期间为每条连接专用一个频段。在电话网络中，这个频段的宽度通常为4kHz。这个频段的宽度称为<b>带宽</b></li><li><b>时分复用(TDM)</b><br>对于时分复用，时间被划分为固定时期的<b>帧</b>，每个帧又被划为为固定数量的<b>时隙</b>。当网络跨越链路创建一条连接时，网络在每个帧中为该连接指定一个时隙。这些时隙专门由该连接单独使用。<br>在TDM中，一条电路的<font color="bllue">传输速度等于帧速率乘一个时隙中的比特数量。</font><br>例如一个帧为1分钟，一个帧有60个时隙(即一个时隙1秒)，如果网络指定第二个时隙为该连接专用，那么在每分钟的第二秒时间内为该链接传送数据，其他的时隙即使没有连接使用，该链接也不能使用。</li></ul><p><b>通过上面的描述我们不难发现，电路交换虽然能够保证数据传输的速率，但是往往会造成资源的浪费，总体上说分组交换要更优一些。</b></p><h2 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a><font size="5">网络的网络</font></h2><p>前面说过，端系统通过一个接入ISP和因特网相连，因为因特网是将数以亿计的端系统相连，因为ISP自身也必须互联，通过创建<font color="bllue">网络的网络</font>可以做到这点。</p><ul><li><b>网络的网络</b><br>可以理解为将ISP连接成网络，因为ISP自身就是一个网络，将许多ISP连接成网络，就实现了与不同ISP相连的端系统相连。</li></ul><p>总的来说，今天的因特网是一个网络的网络，由十多个第一层ISP和数十万个较底层的ISP组成，较低层的ISP与较高层的ISP相连，较高层的ISP彼此互联。<br>用户和内容提供商是较低层ISP的客户，较底层ISP是较高层ISP的客户。也有一下大型的内容提供商(谷歌等)创建自己的网路，直接在一些地方和较低层ISP互联。从而减少这些大型内容提供商向顶层ISP支付的费用。</p><h1 id="分组交换网中的延时、丢包和吞吐量"><a href="#分组交换网中的延时、丢包和吞吐量" class="headerlink" title="分组交换网中的延时、丢包和吞吐量"></a>分组交换网中的延时、丢包和吞吐量</h1><p>因特网能够看成是一种基础设施，为运行在端系统上的分布式应用提供服务。在理想情况下，我们希望它能够在任意两个目标端系统之间随心所欲地移动数据而不会产生数据丢失。然而，这是很难做到的。相反的，计算机网络必定要限制在端系统之间的<b>吞吐量</b>，在端系统之间引入时延、并且也会丢失分组。</p><ul><li><b>吞吐量</b><br>每秒能够传送的数据量</li></ul><h2 id="时延概述"><a href="#时延概述" class="headerlink" title="时延概述"></a><font size="5">时延概述</font></h2><p>前面说过，分组从源到目的地的过程中，当分组从每个节点(主机或路由器)沿着这条路径到后继节点，该分组在每个节点经受了几种不同类型的时延</p><ul><li><b>节点处理时延</b></li><li><b>排队时延</b></li><li><b>传输时延</b></li><li><b>传播时延</b></li></ul><p>这些时延加起来就是<font color="bllue">节点总时延</font>。</p><ul><li><b>节点处理时延</b><br>检查分组首部和决定该分组导向何处所需要的时延是节点处理时延的一部分，通常是<b>微秒或更低的数量级</b></li><li><b>排队时延</b><br>在队列中，当分组在链路上等待传输时，它经受排队时延。一个分组排队时延取决于在它前面正在排队等待向链路传输的分组数量如果队列为空，那么排队时延为0。通常是<b>毫秒到微秒量级</b></li><li><b>传输时延</b><br>将<font color="bllue">所有分组的bit推向链路所需要的时间</font>，单位是bit/s，通常是<b>毫秒到微秒量级</b></li><li><b>传播时延</b><br>当<font color="red">比特被推向链路后</font>，该比特需要向下一个路由器传播。从该链路的起点到路由器B传播所需要的时间是传播时延。<font color="blue">传播时延等于两台路由器之间距离除以传播速率</font>。在广域网中，通常是<b>毫秒量级</b></li><li><b>传输时延和传播时延的比较</b><ul><li><b>传输时延</b><br>由路由器将分组推向链路所需要的时间，<font color="red">和距离无关，和分组大小相关</font>；单位是bit/s。</li><li><b>传播时延</b><br>是分组被路由器推出链路后经过链路传播到下一台路由器所需要的时间，<font color="red">和分组长度无关，和两台路由器之间的距离相关</font>；单位是m/s。</li></ul></li></ul><h2 id="排队时延和丢包"><a href="#排队时延和丢包" class="headerlink" title="排队时延和丢包"></a><font size="5">排队时延和丢包</font></h2><h3 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a><font size="5">排队时延</font></h3><ul><li>假设a表示分组到达队列的平均速率(以bps/s为单位)</li><li>R表示传输速率，即从队列中推出比特的速率(以bps/s为单位)</li><li>假定所有的分组都由L个比特组成。</li></ul><p>那么bit到达队列的平均速率为(La)bps/s。最后，假设该队列很大，能够容纳无限数量的bit，那么比率La/R被称为<b>流量强度</b></p><ul><li><b>流量强度</b><ul><li><b>La/R&gt;1</b>，即比特到达队列的平均速率超过从该队列传输出去的速率。这时，队列将会无限增加，排队时延就会趋于无穷大。</li><li><b>La/R≤1</b>，这时，到达流量的性质将影响排队时延。<ul><li>分组周期性到达，即每L/R秒到达一个分组，则每个分组到达时，队列刚好将上一个分组全部推出。此时队列为空，就不会有排队时延</li><li>分组以突发形式到达，即在某个时刻同时到达很多分组。就可能会有很大的平均排队时延</li></ul></li></ul></li></ul><p>因此：<font color="red">设计系统时流量强度不能大于1。</font><br>通常情况下，分组到达队列的时间是随机的</p><ul><li><b>到达速率小于传输能力时</b><br>队列的长度将缩短</li><li><b>流量强度接近于1时</b><br>平均队列长度将会变得越来越长。</li></ul><h3 id="丢包"><a href="#丢包" class="headerlink" title="丢包"></a><font size="5">丢包</font></h3><p>在上面，我们假设了队列能够容纳无穷多的分组，在现实中，链路的队列容量是有限的。随着流量强度接近于1，队列并不是趋于无穷大。到达的分组发现一个满的队列，该分组将会被路由器丢掉。<br><font color="bllue">丢失的比例随着流量强度的增加而增加。</font>因此，一个节点的性能不仅根据时延来度量，也根据丢包的概率来度量。<br>后面会说到，<b>丢失的分组可能基于端到端的原则重传，以确保所有的数据最终从源送到了目的地。</b></p><h2 id="端到端时延"><a href="#端到端时延" class="headerlink" title="端到端时延"></a><font size="5">端到端时延</font></h2><p>前面的讨论集中在节点时延上，即在单台路由器上的时延，这里考虑从源到目的地的总时延(端到端时延)<br>端到端的时延就是<font color="bllue">源主机的时延和路由器时延之和</font>，即节点时延的总和</p><h2 id="计算机网络中的吞吐量"><a href="#计算机网络中的吞吐量" class="headerlink" title="计算机网络中的吞吐量"></a><font size="5">计算机网络中的吞吐量</font></h2><ul><li><b>瞬时吞吐量</b><br>A向B发送数据，任何时间瞬间B接收该文件的速率</li><li><b>平均吞吐量</b><br>A向B发送大小为Fbit的文件，B接收所有Fbit用了Ts，则平均吞吐量为F/T</li></ul><p><b>服务器传送一个文件到客户端，两者之间只有一台路由器</b></p><ul><li>假设Rs为服务器和路由器之间的链路速率</li><li>假设Rc为路由器和客户端之间的链路速录</li><li>假设网络中只有该服务器到客户端的bit在传送</li></ul><p>那么<font color="red">服务器到客户端的吞吐量就是min(Rs,Rc)</font><br>我们想象bit是流体，链路是管道。显然，这台服务器不能以超过Rs的速率发送bit，路由器也不能以超过Rc的速率转发，最终的吞吐量取决去两者中小的那一个。<br><b>服务器传送一个文件到客户端，两者之间有N-1台路由器</b></p><ul><li>那么就有N条链路</li><li>假设这N条链路的速率分别是R1、R2…Rn</li></ul><p>那么<font color="red">服务器到客户端的吞吐量就是min(R1,R2…Rn)</font><br>目前，因特网核心都超量配置了高速率的链路，很少发生拥塞，今天<font color="bllue">在因特网中对吞吐量的限制因素通常是接入网。</font>但是并不绝对，当很多客户端和服务器公用一条共享链路时，由于链路需要同时为多个客户端服务器传输数据。这时共享链路可能称为限制吞吐率的因素。</p><h1 id="协议层次机器服务模型"><a href="#协议层次机器服务模型" class="headerlink" title="协议层次机器服务模型"></a>协议层次机器服务模型</h1><p>各层的所有协议被称为<b>协议栈</b>。因特网协议栈由5个层次组成，从上到下依次是</p><ul><li><b>应用层</b></li><li><b>运输层</b></li><li><b>网络层</b></li><li><b>链路层</b></li><li><b>物理层</b></li></ul><p>下面就分别简要的说一下每一层</p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><font size="5">应用层</font></h2><p><b>网络应用程序以及它们的应用层协议存留的地方</b><br>应用层协议包括</p><ul><li><b>HTTP：</b>HyperText Transfer Protocol(超文本传输协议)，提供了Web文档的请求和传送</li><li><b>SMTP：</b>Simple Mail Transfer Protocol(简单邮件传输协议)，提供了电子邮件报文的传输</li><li><b>FTP：</b>File Transfer Protocol(文件传输协议)，提供了两个端系统之间文件传送</li><li><b>DNS：</b>Domain Name System(域名系统)</li><li><b>……</b></li></ul><p>应用层协议分布在多个端系统上，端系统的应用陈旭之间使用协议交换信息分组。这种<font color="bllue">位于应用层的信息分组称为<b>报文</b>。</font></p><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a><font size="5">运输层</font></h2><p>因特网运输层<b>在应用程序端点之间</b>传送<b>应用层报文</b>。<br>两种应用层协议</p><ul><li><b>TCP：</b><br>向应用程序提供了面向连接的服务，包括应用层报文向目的地传输的确保传递和流量控制(发送方/接收方速率匹配)<br>TCP将长报文划分为短报文，并提供<b>拥塞控制机制</b>，当网络拥塞时，源抑制其传输速率。</li><li><b>UDP</b><br>向应用程序提供了无连接的服务，没有可靠性、没有流量控制、也没有拥塞控制。</li></ul><p><font color="bllue">将运输层的分组称为<b>报文段</b>。</font></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><font size="5">网络层</font></h2><p>因特网网络层<b>负责将网络层分组(数据报)从一台主机移动到另一台主机。</b><br><font color="red">源主机中的运输层协议(TCP/UDP)向网络层递交运输层报文段和目的地址</font>，就像你通过邮政服务寄信时提供的地址一样<br>网络层协议</p><ul><li><b>IP协议：</b><br>该协议定义了在数据报中的各个字段以及端系统和路由器如何作用于这些字段。</li><li><b>路由选择协议：</b><br>确定路由器的转发表。</li><li><b>……</b></li></ul><p><font color="bllue">将网络层的分组称为<b>数据报</b>。</font></p><h2 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a><font size="5">链路层</font></h2><p>因特网的网络层通过源和目的地之间一系列的路由器来路由数据报。<b>为了将分组从一个节点(路由器/主机)移动到下一个节点，网络层必须依靠链路层的服务。</b></p><ul><li>在每个节点，网络层将数据下传给链路层，链路层沿着路径(链路)将数据报传递给下一个节点。</li><li>到达下一个节点，链路层再将数据上传给网络层。</li></ul><p>链路层提供的服务取决于应用于该链路的特定的链路层协议。例如，某些协议基于链路提供可靠传递，从传输节点跨越一条链路到接收节点。<br>注意：这里的<font color="red">可靠连接服务不同于TCP的可靠传输服务</font>。<b>TCP提供从一个端系统到另一个端系统的可靠交付</b>。<br>链路层协议</p><ul><li>以太网</li><li>WiFi</li><li>电缆接入网的DOCSIS协议</li></ul><p>因为数据从源到目的地通常会经过几条链路，这些链路可能应用的链路层协议不同。网络层将受到每个不同链路层协议的不同服务<br><font color="bllue">将链路层的分组称为<b>帧</b>。</font></p><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a><font size="5">物理层</font></h2><p><b>链路层的任务是将整个帧从一个节点移动到临近的节点，而物理层的任务是将该帧的一个个bit从一个节点移动到临近的节点。</b><br>该层的协议仍和链路层相关，并且<font color="bllue">进一步和该链路的实际传输媒体相关。</font><br>例如以太网具有很多物理层协议：</p><ul><li><b>关于双绞铜线的</b></li><li><b>关于同轴电缆的</b></li><li><b>关于光纤的</b></li><li><b>……</b></li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a><font size="5">封装</font></h2><p>数据从发送端系统的协议栈向下，沿着中间的链路层交换机的路由器协议栈上上下下，然后向上到达接收端系统的协议栈。</p><ul><li>链路层交换机<br>实现了第一层和第二层，即物理层和链路层</li><li>路由器<br>实现了第一层到第三层，即物理层到链路层再到网络层。</li></ul><p>这意味着<b>路由器能实现IP协议，链路层交换机则不能。</b>但是链路层交换机能够识别第二层地址如以太网地址。<br><font color="bllue">主机实现了所有5个层次</font>，因为在发送数据时，需要将数据层层封装，最后封装为帧(链路层分组)，在接收数据时相反。因此主机必须实现所有的5个层次。</p><p><b>每一层的封装</b></p><ul><li><b>在发送主机端</b><br>应用层报文被传送给传输层</li><li><b>运输层</b><br>传输层收取到报文并附上附加信息，该首部信息将被接收端的运输层使用。<font color="blue">应用层报文和运输层首部信息一起构成了运输层分组—-报文段</font>。并将该报文段传递给网络层。</li><li><b>网络层</b><br>增加了<font color="blue">源和目的地端系统的地址</font>等网络层首部信息，<font color="blue">运输层报文段和网络层首部信息一起构成了网络层分组—-数据报</font>。并将该数据报传递给链路层。</li><li><b>链路层</b><br>增加自己的链路层首部信息，<font color="blue">网络层数据报和链路层首部信息一起构成了链路层分组—-帧</font>。</li></ul><p><b>所以我们看到，在每一层，一个分组具有两种类型的字段</b></p><ul><li><b>首部字段</b>：在当前层添加上的</li><li><b>有效载荷字段</b>：该字段通常是来自于上一层的分组</li></ul><p>实际上，封装的过程可能更加复杂。例如，一个大报文可能被划分为多个运输层的报文段(同样的，这些报文段可能被划分为多个网络层数据报)，在接收端，必须从其连续的数据包中重构这样一个报文段。</p><hr><font face="宋体"><b>第一章内容大致就这些，后面的网络攻击就不说了。后续的等看完一章写一章吧，一共16k个字，纯手打。在记录的过程中无形中对第一章内容又回顾了一遍，很明显感觉得到理解的更深入了，希望看完这篇博客的你也能学到一些知识哦。</b></font><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 计算机网络自顶向下方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之选择排序</title>
      <link href="/2019/09/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>前面说过了冒泡排序，这次来说一下<b>选择排序</b>。同样的，这次也会从算法思路、代码实现以及算法分析三个思路来剖析选择排序</p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><ol><li>第一次从arr[0]和arr[n-1]中选取最小值，与arr[0]交换</li><li>第二次从arr[1]和arr[n-1]中选取最小值，与arr[1]交换</li><li>……以此类推</li><li>第n-1次从arr[n-2]和arr[n-1]中选取最小值，与arr[n-2]交换</li><li>至此，得到一个从小到大的有序数组，一共进行n-1轮</li></ol><p>对于一个数组<font color="red">arr={3,-1,9,10,-2}</font><br><img src="/2019/09/18/排序算法之选择排序/1.png" alt></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void SelSort(int[] arr) &#123;</span><br><span class="line">int min;</span><br><span class="line">int index;</span><br><span class="line">//一共进行n-1趟排序，当确定了n-1个元素的位置后，最后一个元素的位置自然也就确定了</span><br><span class="line">for (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">//假定最大值为arr[i]，下标为i</span><br><span class="line">min = arr[i];</span><br><span class="line">index = i;</span><br><span class="line">//找到i+1到最后一个元素的最大值，记录该元素的值和下标位置</span><br><span class="line">for (int j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">if (arr[j] &lt; min) &#123;</span><br><span class="line">min=arr[j];</span><br><span class="line">index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果index发生了变化，说明arr[i]不是最大的，那么就将最大值和arr[i]交换</span><br><span class="line">if (index != i) &#123;</span><br><span class="line">arr[index]=arr[i];</span><br><span class="line">arr[i] = min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>算法的时间复杂度<ul><li>平均时间：O(n²)</li><li>最差情况：O(n²)</li></ul></li></ol><p>这不难理解，因为对于一个简单地双重循环来说，时间复杂度都是O(n²)</p><ol start="2"><li>空间复杂度<ul><li>只用了一个min和一个index，和n的大小无关，所以是O(1)</li></ul></li><li>稳定性<ul><li>不难发现，<font color="red">选择排序不是稳定的</font></li></ul></li><li>另外，该排序算法在<font color="red">n比较小时较好</font></li></ol><h1 id="和冒泡排序比较"><a href="#和冒泡排序比较" class="headerlink" title="和冒泡排序比较"></a>和冒泡排序比较</h1><p>这里，我创建了一个80000大小的数组对其进行排序，分别使用冒泡排序和选择排序，并记录两种排序耗费的时间<br><img src="/2019/09/18/排序算法之选择排序/3.png" alt></p><ul><li>冒泡排序<br><img src="/2019/09/18/排序算法之选择排序/4.png" alt><br><img src="/2019/09/18/排序算法之选择排序/5.png" alt></li><li>选择排序<br><img src="/2019/09/18/排序算法之选择排序/6.png" alt><br><img src="/2019/09/18/排序算法之选择排序/7.png" alt></li></ul><hr><font size="5,face=宋体">通过上面的对比发现，<font color="red">对同样规模的随机生成的数组进行排序，选择排序要比冒泡排序快很多</font></font><br>通过查看两种排序的实现过程不难发现：<ul><li>冒泡排序，每一趟排序中，相邻元素如果逆序，都要进行交换操作，整个排序过程会<font color="red">进行很多次交换操作</font></li><li>选择排序，每一趟排序中，只需要找到最大值/最小值的元素即其下标，最后只进行一次交换交换操作，整个排序过程<font color="red">最多进行n-1次交换操作</font></li></ul><p>两方法时间上的差异就在这里体现的</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之冒泡排序</title>
      <link href="/2019/09/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/09/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>正如categories所言：算法之美，是的，算法是美妙的，尤其是好的算法，总会让人感到眼前一亮，让人茅塞顿开。而今天说到的排序算法，是我们日常生活中用的及其之多的一种算法，排序算法种类也有很多，这篇博客记录的是其中较为简单地一种——<b>冒泡排序</b></p><hr><a id="more"></a><h1 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h1><ol><li>通过对排序序列从前向后(数组下标从小到大)开始，依次比较<font color="red">相邻元素</font>的值</li><li>若发现两相邻元素逆序，则交换两相邻元素的位置，<font color="red">使值较大的元素逐渐从前移到后</font><ul><li>第一趟排序使序列中最大的元素移到最后一个位置</li><li>第二趟排序使序列中第二大的元素移到倒数第二个位置</li><li>……以此类推</li><li>一共需要n-1趟排序(n为序列的大小)</li></ul></li></ol><p>对于一个数组<font color="red">arr={3,-1,9,10,-2}</font><br><img src="/2019/09/18/排序算法之冒泡排序/1.png" alt></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p><img src="/2019/09/18/排序算法之冒泡排序/2.png" alt></p><h1 id="优化冒泡排序"><a href="#优化冒泡排序" class="headerlink" title="优化冒泡排序"></a>优化冒泡排序</h1><p>因为每一趟排序都是将未排序部分的相邻元素进行比较，逆序则交换位置，那么反过来，在某一趟排序中，<font color="red">如果没有发生元素交换，说明该数组已经有序</font>，就不用在进行之后的排序<br>对于一个数组<font color="red">arr={3,-1,9,10,20}</font><br><img src="/2019/09/18/排序算法之冒泡排序/3.png" alt></p><ol><li>设置一个boolean类型的flag，初始化为true</li><li>将循环趟数的条件改为flag==true&amp;&amp;i &lt; arr.length</li><li>在进入某一趟排序之前，先将flag设置为false。<ul><li>如果在这一趟排序中，发生了相邻元素的交换，那么将flag重新设置为true</li><li>如果在这一趟排序中，没有发生相邻元素的交换，flag不变</li></ul></li><li>在进行下一趟循环时，判断flag是否为true<ul><li>如果为true，进行下一趟循环</li><li>如果为false，说明在上一趟排序中已经得到有序数组，那么不再进行下一趟排序</li></ul></li></ol><p><b>优化冒泡排序算法代码实现</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void BuSortBatter(int[] arr) &#123;</span><br><span class="line">int temp;</span><br><span class="line">//设置一个flag，判断当前趟是否进行过交换</span><br><span class="line">boolean flag = true;        </span><br><span class="line">for (int i = 1; flag==true&amp;&amp;i &lt; arr.length; i++) &#123;</span><br><span class="line">flag = false;</span><br><span class="line">for (int j = 0; j &lt; arr.length - i; j++) &#123;</span><br><span class="line">if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + 1];</span><br><span class="line">arr[j + 1] = temp;</span><br><span class="line">flag = true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样对于上面的数组<font color="red">arr={3,-1,9,10,20}</font>，使用优化冒泡排序<br><img src="/2019/09/18/排序算法之冒泡排序/5.png" alt><br>这样就达到了优化的目的</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>算法的时间复杂度<ul><li>平均时间：O(n²)</li><li>最差情况：O(n²)</li></ul></li></ol><p>这不难理解，因为对于一个简单地双重循环来说，时间复杂度都是O(n²)</p><ol start="2"><li>空间复杂度<ul><li>只用了一个临时变量和一个flag，和n的大小无关，所以是O(1)</li></ul></li><li>稳定性<ul><li>稳定性：即在排序过程中，对于两个大小相等的数A和B，排序前A在B的前面，如果排序后A还在B的前面，<font color="red">即排序前后不改变想等元素的顺序</font>，那么称该排序方法是稳定的</li><li>不难发现，<font color="red">冒泡排序是稳定的</font></li></ul></li><li>另外，该排序算法在<font color="red">n比较小时较好</font><hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 冒泡排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题</title>
      <link href="/2019/09/18/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/18/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><font size="5"><b>八皇后问题</b></font><br>一个古老而著名的问题，该问题是回溯算法的典型案例。在8*8格的国际棋盘上摆放8个皇后，使其相互不能攻击。即：任意两个皇后不能处于同一行、同一列或同意斜线上，问有多少中摆法？</p><hr><a id="more"></a><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ul><li>第一个皇后先放在第一行第一列</li><li>第二个皇后放在第二行第一列，然后判断是否满足条件<ul><li>不满足：继续放在第二行第二列…依次把所有列放完，找到一个合适的位置</li><li>满足：摆放下一个皇后(递归)</li></ul></li><li>直到第八个皇后也能放在一个满足条件的位置，就算找到一个正确解(递归出口)</li><li>当得到第一个正确解时，就会开始回溯，即将第一个皇后放在第一列的所有正确节点全部找到</li><li>然后回头继续将第一个皇后放在第二列，后面继续循环执行上面的步骤</li></ul><h1 id="一维数组代替二维数组"><a href="#一维数组代替二维数组" class="headerlink" title="一维数组代替二维数组"></a>一维数组代替二维数组</h1><p>理论上，我们应该创建一个二维数组表示棋盘，但实际上可以通过算法，用一个一维数组解决问题<br>例如：arr[8]={0,4,7,5,2,6,1,3}</p><ul><li>数组arr的下标：表示第几行，即第几个皇后</li><li>arr[i]=val：表示第i+1个皇后放在第i+1行的val+1的位置</li></ul><h1 id="检查冲突的方法"><a href="#检查冲突的方法" class="headerlink" title="检查冲突的方法"></a>检查冲突的方法</h1><p><img src="/2019/09/18/八皇后问题/1.png" alt>该方法用于检查当前第n个皇后和前面的n-1个皇后是否发生冲突(即是否在同一行、同一列或同一斜线上)</p><ul><li><font color="red">arr[n] == arr[i]：</font>数组的值表示的是列，这里是判断第i+1个皇后是否和第n+1个皇后在同一列</li><li><font color="red">Math.abs(n-i)==Math.abs(arr[n]-arr[i])：</font>判断第i+1个皇后是否和第n+1个皇后在同一斜线<ul><li><font color="red">Math.abs(n-i)：</font>第i+1个皇后和第n+1个皇后的行数差</li><li><font color="red">Math.abs(arr[n]-arr[i])：</font>第i+1个皇后和第n+1个皇后的列数差<br>如果行数差==列数差，说明两个皇后在同一斜线上</li></ul></li></ul><h1 id="递归回溯方法"><a href="#递归回溯方法" class="headerlink" title="递归回溯方法"></a>递归回溯方法</h1><p><img src="/2019/09/18/八皇后问题/2.png" alt></p><ol><li>首先，创建一个长度为9的数组，0-7用于表示8个皇后，最后一个用于记录摆放方法个数</li><li>当n==MAX=8时：之前说过，n代表第n+1个皇后(例如n=0时代表第一个皇后)，那么n=8应该代表的是第9个皇后，这时候说明前8个皇后都已经摆放好了，即找到了一种摆放方法<ul><li>arr[MAX]++：个数+1；</li><li>打印当前摆放方法</li></ul></li><li>n&lt;MAX说明皇后还没有摆放完，先将当前皇后摆放在第i列，检查这个位置是否和前面已经摆放的皇后位置冲突<ul><li>如果不冲突，递归调用方法，摆放下一个皇后</li><li>如果冲突，i++，回到第3步。(即将当前皇后摆放到下一列，继续判断)</li></ul></li></ol><hr><font size="5" color="red"><b>当找到一种正确方法后，会向上回溯</b></font><br><ol><li>前面7个皇后位置不变，将第8个皇后从当前列往后摆，找到所有正确的摆法</li><li>前面6个皇后不变，将第7个皇后向后摆放1列<ul><li>将第8个皇后从第1列往后摆，找到所有正确的摆法</li><li>回到第2步，直到将第7个皇后摆放到最后1列，找到所有正确的摆法</li></ul></li><li>前面5个皇后不变….</li><li>以此类推，直到最后将第1个皇后摆放到最后1列。这样，就找到了所有正确的解法！</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫问题</title>
      <link href="/2019/09/18/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/18/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><font size="5"><b>迷宫问题</b></font><br>有一个迷宫，迷宫中有一个小球，要求给小球一个起始位置和迷宫的终点位置，给小球找到一条路能够到达终点位置。</p><hr><a id="more"></a><h1 id="构建迷宫"><a href="#构建迷宫" class="headerlink" title="构建迷宫"></a>构建迷宫</h1><ul><li>用一个二维数组模拟迷宫</li><li>用1表示围墙和障碍物</li><li>用2表示小球从起始位置到终点位置走过的点<br><img src="/2019/09/18/迷宫问题/1.png" alt><br>以下就是构建好的迷宫<br><img src="/2019/09/18/迷宫问题/2.png" alt></li></ul><h1 id="递归解决"><a href="#递归解决" class="headerlink" title="递归解决"></a>递归解决</h1><ul><li>定义一个方法、传递一下参数<ul><li>毫无疑问、要将map二维数组传递进去</li><li>将小球的起始位置传递进去</li><li>由于这里默认出口是最右下角，就不传递终点位置了</li></ul></li><li><font color="red">递归出口：</font>前面说到了，用2表示小球走过的点，那么当终点位置map[6][5]==2时，说明小球已经走到了终点，递归结束</li><li>判断当前点map[i][j]是否为0,如果为0<ul><li>先假定通过当前点能到达终点位置，即将当前点设置为2</li><li>设置寻路策略：即每次到达一个点，就会有上下左右四种走法，所谓寻路策略，即指定小球先向哪个方向走，该方向走不通后再向哪个方向走，这里我指定的寻路策略是<font color="red">下右上左</font></li><li>如果该点的四个位置都走不通，那么说明该点不通，此时将当前点设置为3，即map[i][j]=3,表明该点走过，确认走不通</li></ul></li><li>如果不为0，那么当前点的取值情况有三种<ul><li>map[i][j]==1，说明该点为墙，走不通，返回false</li><li>map[i][j]==2，说明该点走过了，就不能再走了，返回false</li><li>map[i][j]==3，说明该点已经确定了走不通，返回false<br><img src="/2019/09/18/迷宫问题/3.png" alt></li></ul></li></ul><h1 id="找到出路"><a href="#找到出路" class="headerlink" title="找到出路"></a>找到出路</h1><p>最后根据我下右上左的寻路策略找到的路线<br><img src="/2019/09/18/迷宫问题/4.png" alt>其中2代表的就是起点到终点的路线，通过不同寻路策略找到的路线可能不同</p><hr><p><font size="5"><b>对于递归解决迷宫问题，我想可以这么理解</b></font><br>每次走到一个点时，都会按照寻路策略的顺序走</p><ul><li>如果某个方向能走通，那就继续往下走</li><li>如果到了某个点时，该点四个方向都走不通，那么就回溯，即回到该点的上一个节点，从上一个点的其他方向继续走</li></ul><p>例如：<br>对于A点，我们按照寻路策略先向下走，走到了B点，这时候发现，B点四个方向都走不通，那么<font color="red">就回退到A点，按照寻路策略向右走</font>。以此类推，直到找到终点和每个点都被标记为3。</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之JSP简单介绍</title>
      <link href="/2019/09/17/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJsp%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/09/17/Web%E5%9F%BA%E7%A1%80%E4%B9%8BJsp%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>今天就来介绍Web基础的另一部分知识–JSP页面，学习了JSP页面后，就能够像浏览器动态的展示页面。</p><hr><a id="more"></a><h1 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h1><p>JSP–Java Servlet Pages，Java服务器端页面，可以理解为一个特殊的页面，其中既可以指定html标签，又可以定义Java代码。JSP本质上就是一个Java的Servlet类。既然说JSP中可以定义Java代码，那么下面就说一下JSP中定义Java代码的格式：</p><ol><li><b>&lt;%  代码 %&gt;</b><br>转换成Servlet之后存在于在service方法中。Servlet中service方法中可以定义什么，该脚本中就可以定义什么。</li><li><b>&lt;%! 代码 %&gt;</b><br>转换成Servlet之后存在于Servlet类的成员位置。</li><li><b>&lt;%= 代码 %&gt;</b><br>转换成Servlet之后会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</li></ol><h1 id="JSP指令和注释"><a href="#JSP指令和注释" class="headerlink" title="JSP指令和注释"></a>JSP指令和注释</h1><p>在本节主要介绍JSP的指令和注释</p><h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a><font size="5">JSP指令</font></h2><p>JSP指令用于配置JSP页面，导入资源文件。格式为：<font color="red"><b>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 … %&gt;</b></font>，JSP有以下几种指令</p><ol><li><p><b>page指令：用于配置JSP页面</b><br>该指令可以设置的属性有(这里介绍一部分)</p><ul><li>contentType：等同于response.setContentType()<ol><li>设置响应体的mime类型以及字符集</li><li>设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</li></ol></li><li>import：导包</li><li>errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</li><li>isErrorPage：标识当前也是是否是错误页面。<ul><li>true：是，可以使用内置对象exception</li><li>false：否。默认值。不可以使用内置对象exception</li></ul></li></ul></li><li><p><b>include指令：用于导入资源文件</b></p><ul><li>&lt;%@include file=”top.jsp”%&gt;                </li></ul></li><li><p><b>taglib指令：导入资源</b><br>例如我们导入jstl的标签库可以使用：<br>&lt;%@ taglib prefix=”c” uri=”http: //java.sun.com/jsp/jstl/core” %&gt;。prefix：前缀(可以自定义，一般使用c)    </p></li></ol><h2 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a><font size="5">JSP注释</font></h2><p>下面介绍一下JSP页面的注释：</p><ol><li>html注释： <!-- -->:只能注释html代码片段</li><li>jsp注释：推荐使用<br> &lt;%– –%&gt;：可以注释所有    </li></ol><h1 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h1><p>介绍完JSP的指令和注释后，下面来介绍JSP很重要的一部分：即JSP的内置对象。JSP有九种内置对象，这些对象在jsp页面中不需要创建，可以直接使用。</p><table><thead><tr><th align="center">变量名</th><th align="center">真实类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">pageContext</td><td align="center">PageContext</td><td align="center">当前页面共享数据，获取其他八个内置对象</td></tr><tr><td align="center">request</td><td align="center">HttpServletRequest</td><td align="center">请求转发中共享数据</td></tr><tr><td align="center">session</td><td align="center">HttpSession</td><td align="center">一次会话中共享数据</td></tr><tr><td align="center">application</td><td align="center">ServletContext</td><td align="center">所有用户间共享数据</td></tr><tr><td align="center">response</td><td align="center">HttpServletResponse</td><td align="center">响应对象</td></tr><tr><td align="center">page</td><td align="center">Object</td><td align="center">当前页面(Servlet)的对象-this</td></tr><tr><td align="center">out</td><td align="center">JspWriter</td><td align="center">将数据输出到页面上</td></tr><tr><td align="center">config</td><td align="center">ServletConfig</td><td align="center">Servlet的配置对象</td></tr><tr><td align="center">exception</td><td align="center">Throwable</td><td align="center">异常对象</td></tr></tbody></table><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><p>前面说过，在JSP页面中可以写HTML标签，也可以写Java代码，那么这势必会带来一个问题：导致我们的JSP页面中包含很多元素，难以阅读和维护，因此在这里我们介绍一下EL表达式和jstl标签库。本节先介绍EL表达式。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font size="5">概述</font></h2><p>EL，即Expression Language 表达式语言。它能够替换和简化jsp页面中java代码的编写。它的语法为${表达式}。并且有一点需要注意，JSP是默认支持EL表达式的，如果你想将EL表达式当作文本字符串输出，有两个方法：</p><ol><li>设置jsp中page指令中：isELIgnored=”true” 忽略当前jsp页面中所有的el表达式</li><li>${表达式}：使用转义字符”&quot;忽略当前这个el表达式，</li></ol><h2 id="EL表达式使用"><a href="#EL表达式使用" class="headerlink" title="EL表达式使用"></a><font size="5">EL表达式使用</font></h2><p>下面将简单地介绍一下EL表达式是如何使用的</p><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a><font size="5">运算</font></h3><ol><li>算数运算符： + - * /(div) %(mod)</li><li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li><li>逻辑运算符： &amp;&amp;(and) ||(or) !(not)</li><li>空运算符： empty<ul><li>用于判断字符串、集合、数组对象是否为null或者长度是否为0</li><li>${empty list}:判断字符串、集合、数组对象是否为null或者长度为0</li><li>${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</li></ul></li></ol><h3 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a><font size="5">获取值</font></h3><p>EL表达式只能从域对象中获取值，域对象用来共享数据，即上面JSP内置对象的前4个都是域对象。我们使用<font color="red"><b>${域名称.键名}</b></font>从指定域中获取指定键的值。</p><table><thead><tr><th align="center">域名称</th><th align="center">域对象</th></tr></thead><tbody><tr><td align="center">pageScope</td><td align="center">pageContext</td></tr><tr><td align="center">requestScope</td><td align="center">request</td></tr><tr><td align="center">sessionScope</td><td align="center">session</td></tr><tr><td align="center">applicationScope</td><td align="center">application（ServletContext）</td></tr></tbody></table><p>例如，我们在request域中存储了name=张三。那么我们使用${requestScope.name}就可以获得request域中name的值。如果我们直接使用${键名}，表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a><font size="5">获取对象</font></h3><p>当我们使用EL获取基本类型和String值时，会直接得到值，那么如果我们想要获取一个对象，如果不加以处理会打印出对象的地址。</p><ol><li><p><b>对象</b><br><b>${域名称.键名.属性名}</b>：假设我们在request域中存储了(“user”,user)，其中user是一个JavaBean对象，此时通过EL获取user对象的属性，本质上会去调用对象的getter方法。</p></li><li><p><b>List集合</b><br><b>${域名称.键名[索引]}</b>：获取List集合中指定位置的元素</p></li><li><p><b>Map集合</b><br>有两种方式都可以获得Map集合中指定key对应的值</p><ol><li><b>${域名称.键名.key名称}</b></li><li><b>${域名称.键名[“key名称”]}</b></li></ol></li></ol><h3 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a><font size="5">隐式对象</font></h3><p>el表达式中有11个隐式对象，类似于JSP的内置对象，其实前面介绍的四个域就是EL的四个隐式对象。在这里介绍一个隐式对象。</p><ul><li>pageContext：能够获取JSP其它八个内置对象。例如：我们可以使用${pageContext.request.contextPath}来动态获取虚拟目录。</li></ul><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><p>前面说过，我们要尽量避免在JSP中编写Java代码，但是在有些时候我们不得不在JSP中编写Java代码。例如当我们要遍历一个集合时，EL表达式就无法满足我们的需求。为了解决这种问题，我们引入了JSTL技术。</p><h2 id="JSTL简介"><a href="#JSTL简介" class="headerlink" title="JSTL简介"></a><font size="5">JSTL简介</font></h2><p>JSTL-JavaServer Pages Tag Library：JSP标准标签库。是由Apache组织提供的开源的免费的jsp标签，用于简化和替换jsp页面上的java代码。它的使用步骤如下：</p><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  &lt;%@ taglib %&gt;</li><li>使用标签</li></ol><h2 id="长江的JSTL标签"><a href="#长江的JSTL标签" class="headerlink" title="长江的JSTL标签"></a><font size="5">长江的JSTL标签</font></h2><p>下面介绍三个常见的和流程控制相关的JSTL标签</p><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a><font size="5">if标签</font></h3><p>该标签相当于java代码的if语句。它有一个必须的属性test，接收boolean表达式。</p><ol><li>如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容。</li><li>一般情况下，test属性值会结合el表达式一起使用</li><li>注意：if标签没有else情况，想要else情况，则可以再定义一个if标签</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//假定前缀为c</span><br><span class="line">&lt;c:if test=&quot;true&quot;&gt;</span><br><span class="line">        &lt;h1&gt;我是真...&lt;/h1&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">该语句会将语句显示在浏览器上</span><br></pre></td></tr></table></figure><h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a><font size="5">choose标签</font></h3><p>该标签相当于java代码的switch语句</p><table><thead><tr><th align="center">choose</th><th align="center">switch</th></tr></thead><tbody><tr><td align="center">使用choose标签声明</td><td align="center">switch声明</td></tr><tr><td align="center">使用when标签做判断</td><td align="center">相当于case</td></tr><tr><td align="center">使用otherwise标签做其他情况的声明</td><td align="center">相当于default</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 1&#125;&quot;&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 2&#125;&quot;&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 3&#125;&quot;&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 4&#125;&quot;&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 5&#125;&quot;&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 6&#125;&quot;&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;number == 7&#125;&quot;&gt;星期天&lt;/c:when&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:otherwise&gt;数字输入有误&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h3 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a><font size="5">foreach标签</font></h3><p>该标签相当于java代码的for语句。它既可以完成重复操作又可以遍历容器</p><ol><li><b>完成重复操作</b><ol><li>begin：开始值</li><li>end：结束值</li><li>var：临时变量</li><li>step：步长</li><li>varStatus:循环状态对象，该属性又有两个属性<ol><li>index:容器中元素的索引，从0开始</li><li>count:循环次数，从1开始</li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=&quot;1&quot; end=&quot;10&quot; var=&quot;i&quot; step=&quot;1&quot;&gt;</span><br><span class="line">    $&#123;i&#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">相当于Java代码</span><br><span class="line">for(int i = 0; i &lt; 10; i ++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><b>遍历容器</b><ol><li>items:容器对象</li><li>var:容器中元素的临时变量</li><li>varStatus:循环状态对象<ol><li>index:容器中元素的索引，从0开始</li><li>count:循环次数，从1开始</li></ol></li></ol></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">现在我们在request域中定义了(&quot;list&quot;,list&lt;String&gt;(集合对象))</span><br><span class="line">&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;str&quot; varStatus=&quot;s&quot;&gt;</span><br><span class="line"></span><br><span class="line">        $&#123;str&#125;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">相当于Java代码</span><br><span class="line">List&lt;String&gt; list;</span><br><span class="line">for(String str : list)&#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            * 属性：</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于JSP相关知识到这里告一段落，这里只是进行简单的总结方便后期使用时能够有所参考，如果想要熟悉还需要多加练习。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之Ajax和JSON</title>
      <link href="/2019/09/17/Web%E5%9F%BA%E7%A1%80%E4%B9%8BAjax%E5%92%8CJSON/"/>
      <url>/2019/09/17/Web%E5%9F%BA%E7%A1%80%E4%B9%8BAjax%E5%92%8CJSON/</url>
      
        <content type="html"><![CDATA[<p>如题，本文将对Ajax和JSON两部分内容进行一个简单地总结介绍，方便后期使用时查看。</p><hr><a id="more"></a><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>Ajax-ASynchronous JavaScript And XML：异步的JavaScript 和 XML。这里的异步和同步是建立在客户端和服务器端相互通信的基础上。</p><h2 id="Ajax简介"><a href="#Ajax简介" class="headerlink" title="Ajax简介"></a><font size="5">Ajax简介</font></h2><ol><li>同步<br>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>异步<br>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ol><p>Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。使用Ajax能够提升用户体验。</p><h2 id="Ajax实现"><a href="#Ajax实现" class="headerlink" title="Ajax实现"></a><font size="5">Ajax实现</font></h2><p>Ajax有两种实现方式：</p><ol><li>使用原生JS方式</li><li>使用JQeury方式</li></ol><p>由于JQeury方式对原生JS方式进行了封装，能够大大的简化我们的操作，因此这里只介绍JQeury方式实现Ajax。在使用该方式时需要先导入JQeury相关jar包。</p><ol><li><p>$.ajax({键值对},{键值对}…)<br>下面介绍几个键值对</p><ul><li>url:”/xxx”  指定请求路径</li><li>type:”POST” 指定请求方式</li><li>data:{若干个键值对} 指定请求参数</li><li>dataType:”text” 设置接收到的数据的响应格式</li></ul></li><li><p>$.get(url, [data], [callback], [type])<br>发送get请求，其中url是必须参数，其它三个可选</p><ul><li>url：  请求路径</li><li>data： 请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li><li><p>语法：$.post(url, [data], [callback], [type])<br>发送post请求，同样的url是必须参数</p><ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li></ol><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON-JavaScript Object Notation：JavaScript对象表示法。多用于存储和交换文本信息，进行数据的传输。JSON 比 XML 更小、更快，更易解析。</p><h2 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a><font size="5">JSON语法</font></h2><p>JSON数据是由键值对构成的，键用引号(单双都行)引起来(也可以不使用引号)。值可以取一下几种类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">值的取值类型</span><br><span class="line">1. 数字（整数或浮点数）</span><br><span class="line">2. 字符串（在双引号中）</span><br><span class="line">3. 逻辑值（true 或 false）</span><br><span class="line">4. 数组（在方括号中）&#123;&quot;persons&quot;:[&#123;&#125;,&#123;&#125;]&#125;</span><br><span class="line">5. 对象（在花括号中） &#123;&quot;address&quot;:&#123;&quot;province&quot;：&quot;陕西&quot;....&#125;&#125;</span><br><span class="line">6. null</span><br></pre></td></tr></table></figure><p>并且多个键值对之间使用逗号分隔，使用花括号保存对象，中括号保存数组。</p><h3 id="获取JSON数据"><a href="#获取JSON数据" class="headerlink" title="获取JSON数据"></a><font size="5">获取JSON数据</font></h3><p>我们可以使用一下方式获取JSON中的数据</p><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]        </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//1.定义基本格式</span><br><span class="line">var person = &#123;&quot;name&quot;: &quot;张三&quot;, age: 23, &apos;gender&apos;: true&#125;;</span><br><span class="line">获取name的值</span><br><span class="line">person.name</span><br><span class="line"></span><br><span class="line">//定义了一个数组</span><br><span class="line">var ps = [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span><br><span class="line">  &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true&#125;,</span><br><span class="line">  &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false&#125;</span><br><span class="line">         ];</span><br><span class="line"></span><br><span class="line">//获取ps中的所有值</span><br><span class="line">for (var i = 0; i &lt; ps.length; i++) &#123;</span><br><span class="line">    var p = ps[i];</span><br><span class="line">    for(var key in p)&#123;</span><br><span class="line">        //这样的方式获取不行。因为相当于  person.&quot;name&quot;</span><br><span class="line">        //alert(key + &quot;:&quot; + person.key);</span><br><span class="line">        alert(key+&quot;:&quot;+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON数据和Java对象转换"><a href="#JSON数据和Java对象转换" class="headerlink" title="JSON数据和Java对象转换"></a><font size="5">JSON数据和Java对象转换</font></h2><p>当浏览器和服务器通信时，将JSON当作数据的载体在网络中传输，当服务器端收到JSON数据后，需要将JSON数据转换成Java对象(JSON数据可以转换成任意对象，只不过我学习的是Java)。同样的，服务器端通过操作获得一系列的数据，我们可以将这些数据转换为JSON数据发送给浏览器，这样浏览器能够很方便的解析JSON获得数据。一般我们使用JSON解析器完成JSON数据和Java对象之间的相互转换。<br>常见得JSON解析器有Jsonlib，Gson，fastjson，jackson…由于jackson是Spring框架使用的解析器，因此这里介绍一下jackson的使用。</p><h3 id="JSON数据转Java对象"><a href="#JSON数据转Java对象" class="headerlink" title="JSON数据转Java对象"></a><font size="5">JSON数据转Java对象</font></h3><p>将JSON转为Java对象，主要有下面几个步骤：</p><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象–ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,Class)</li></ol></li></ol><h3 id="Java对象转JSON数据"><a href="#Java对象转JSON数据" class="headerlink" title="Java对象转JSON数据"></a><font size="5">Java对象转JSON数据</font></h3><p>将Java对象转换JSON，也有下面几个步骤</p><ol><li><p>导入jackson的相关jar包</p></li><li><p>创建Jackson核心对象 ObjectMapper</p></li><li><p>调用ObjectMapper的相关方法进行转换</p><ul><li>writeValue(参数1，obj):<br>参数1有以下三种：<pre><code>File：将obj对象转换为JSON字符串，并保存到指定的文件中Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</code></pre></li><li>writeValueAsString(obj):将对象转为json字符串</li></ul></li><li><p>对于一个对象集合，转换为JSON数据后格式为：[{},{}…]</p></li><li><p>对于一个Map集合，转换为JSON数据后和对象格式一样，也是键值对形式。</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于Ajax和JSON的简单总结就到这里，如果学习过程中有所疑惑，参考w3school网站即可。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆波兰计算器</title>
      <link href="/2019/09/16/%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2019/09/16/%E9%80%86%E6%B3%A2%E5%85%B0%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>今天重新学习了一下栈这一经典的数据结构，突然想起来当时大二为了进实验室用安卓写的一个计算器app，当时也是年轻，虽然写出来了，但是对于中缀转后缀却仍是似懂非懂、迷迷糊糊，所以趁着刚复习完栈这个号时候，准备趁热打铁，把这方面给弄明白了。</p><hr><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="什么是中缀表达式"><a href="#什么是中缀表达式" class="headerlink" title="什么是中缀表达式"></a><font size="5">什么是中缀表达式</font></h2><p>中缀表达式，就是我们平常见到的表达式，例如1+((2+3)*4)-5。<br>它便于我们理解和计算，但是却不利于计算机来运算，因为在运算过程中需要不停的判断操作符优先级</p><h2 id="什么是后缀表达式"><a href="#什么是后缀表达式" class="headerlink" title="什么是后缀表达式"></a><font size="5">什么是后缀表达式</font></h2><p>后缀表达式，又称为逆波兰式，上面的1+((2+3)<em>4)-5。<br>转换成后缀表达式就是123+4</em>+5-，计算机在计算后缀表达式的时候，不用判断操作符的优先级，每次遇到操作符，直接从栈中弹出两个操作数进行相应的运算即可，但是这样的表达式对我们来说写出来就比较困难，尤其是在表达式比较长比较复杂的时候。</p><h1 id="中缀转后缀"><a href="#中缀转后缀" class="headerlink" title="中缀转后缀"></a>中缀转后缀</h1><p>首先，我先说一下我的大致思路</p><ul><li>将中缀表达式的字符串存储到一个ArrayList中==&gt;这一步主要是方便操作、</li><li>一个存放操作符的栈s1</li></ul><p>注意：网上大多的教程是准备两个栈，一个存放操作符，一个存放的是逆序的后缀表达式，但这里我用ArrayList集合代替了第二个栈，这样做的好处就是可以直接得到后缀表达式，而非逆序的，至于为什么后面会说</p><h2 id="中缀表达式集合"><a href="#中缀表达式集合" class="headerlink" title="中缀表达式集合"></a><font size="5">中缀表达式集合</font></h2><ul><li>遍历字符串</li><li>如果当前字符是操作符，那么直接加入到集合中</li><li>如果当前字符是操作数，那么就要考虑多位数操作数的问题<ul><li>继续向后遍历，如果后面的字符仍是操作数，就将这些数拼接起来</li><li>直到当前字符不是操作数为止，将拼接的字符串加入到集合中<br><img src="/2019/09/16/逆波兰计算器/1.png" alt></li></ul></li></ul><h2 id="判断操作符优先级"><a href="#判断操作符优先级" class="headerlink" title="判断操作符优先级"></a><font size="5">判断操作符优先级</font></h2><p><img src="/2019/09/16/逆波兰计算器/3.png" alt></p><h2 id="后缀表达式集合"><a href="#后缀表达式集合" class="headerlink" title="后缀表达式集合"></a><font size="5">后缀表达式集合</font></h2><p>上一步我们得到了一个集合，集合中存储着中缀表达式内容，这一步就要将中缀表达式转换为后缀表达式并存储到集合中<br>步骤：</p><ul><li>创建变量<ul><li>栈s1用于存放操作数</li><li>集合ls用于存放后缀表达式</li></ul></li><li>遍历中缀表达式集合list，如果是操作数，直接放到ls集合中</li><li>如果是”(“，直接压入s1中</li><li>如果是”)”，将s1中的操作符出栈并加入到ls集合中，直到s1栈顶元素为”(“为止，最后将”(“也出栈(但是不加入ls中)，这一步操作目的是消去”()”</li><li>如果是操作符<ul><li>如果s1栈为空，那么直接入栈</li><li>如果当前操作符优先级<font color="red">大于</font>栈顶操作符优先级，将当前操作符入栈</li><li>如果当前操作符优先级<font color="red">不大于</font>栈顶操作符优先级，那么将栈顶元素出栈并加入到ls集合中，继续和新的栈顶操作符比较，直到栈为空或者当前操作符优先级大于栈顶操作符优先级为止</li><li>将当前操作符压入s1中</li></ul></li><li>集合list遍历完毕后，将s1中所有元素依次出栈加入到ls集合中</li><li>最后得到的ls集合就是后缀表达式</li></ul><p><font color="red"><b>注意：</b></font>这里如果用栈代替集合，那么由于栈先进后出的特性，得到的只能是逆序的后缀表达式，还要进一步的转换才能得到后缀表达式<br><img src="/2019/09/16/逆波兰计算器/2.png" alt></p><h1 id="计算后缀表达式"><a href="#计算后缀表达式" class="headerlink" title="计算后缀表达式"></a>计算后缀表达式</h1><ul><li>创建一个栈stack用于存放操作数</li><li>从左向右扫描后缀表达式集合<ul><li>如果是操作数，直接入栈</li><li>如果是操作符，就从stack中弹出两个操作数进行运算，并将运算结果重新入栈</li><li>集合遍历完毕，stack剩下的元素就是最后的结果<br><img src="/2019/09/16/逆波兰计算器/4.png" alt></li></ul></li></ul><hr><font face="宋体" size="5"><b>这样一个简单地逆波兰计算器就成功了，核心逻辑在于如何利用栈将中缀表达式转换为后缀表达式(逆波兰式)</b></font><hr>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 逆波兰表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之会话技术</title>
      <link href="/2019/09/15/Web%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-Cookie/"/>
      <url>/2019/09/15/Web%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-Cookie/</url>
      
        <content type="html"><![CDATA[<p><b>会话：一次会话中包含多次请求和响应。<br>在一次会话中，浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止<br>会话技术能够在一次会话的多次请求响应间共享数据</b></p><hr><a id="more"></a><h1 id="会话技术的实现方式"><a href="#会话技术的实现方式" class="headerlink" title="会话技术的实现方式"></a>会话技术的实现方式</h1><ul><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ul><h1 id="客户端会话技术–Cookie"><a href="#客户端会话技术–Cookie" class="headerlink" title="客户端会话技术–Cookie"></a>客户端会话技术–Cookie</h1><h2 id="Cookie使用步骤"><a href="#Cookie使用步骤" class="headerlink" title="Cookie使用步骤"></a><font size="5">Cookie使用步骤</font></h2><ol><li> 创建Cookie对象，绑定数据:<font color="blue">new Cookie(String name, String value)</font></li><li>发送Cookie对象::<font color="blue">response.addCookie(Cookie cookie)</font></li><li> 获取Cookie，拿到数据:<font color="blue">Cookie[]  request.getCookies()</font></li></ol><h2 id="Cookie实现原理"><a href="#Cookie实现原理" class="headerlink" title="Cookie实现原理"></a><font size="5">Cookie实现原理</font></h2><p><font color="red">基于响应头set-cookie和请求头cookie实现</font><br></p><ol><li>客户端和服务器第一次请求响应：服务器创建Cookie对象，并在set-cookie响应头将Cookie响应给浏览器</li><li>浏览器接收到服务器带有set-cookie头的响应后，将Cookie存储在浏览器中，当下一次浏览器向服务器发送请求时，会在请求头cookie头中附带这cookie</li><li>这样就实现了多次请求响应之间的数据共享</li></ol><hr><h2 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a><font size="5">Cookie的细节</font></h2><ul><li><font color="red">一次可以发送多个cookie：</font>在服务器端创建多个Cookie对象，多次调用response的addCookie方法将多个Cookie对象发送，但是如果两个Cookie的值相同，那么后加入的Cookie值会覆盖前面的值</li><li><font color="red">cookie在浏览器中保存时间</font><ul><li>默认情况下，当浏览器关闭后，Cookie数据被销毁(服务器关闭，Cookie仍然存在，因为Cookie存储在浏览器中)</li><li>持久化存储：调用Cookie对象的<font color="blue">setMaxAge(int seconds)</font>方法实现<ul>参数取值情况：<li><font color="red">正数</font>：将Cookie数据写到硬盘的文件中。<font color="red">持久化存储</font>。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值，即浏览器关闭后Cookie被销毁</li><li><font color="red">零：删除cookie信息</font></li></ul></li></ul></li><li><font color="red">cookie存储中文问题</font>:在tomcat 8 之前 cookie中不能直接存储中文数据。但是在tomcat8之后，支持直接存储中文，但是对于一些特殊字符(如空格等)，仍不能直接存储，需要借助URL编码才行(具体步骤下一篇文章说到)</li><li>cookie的共享<ul><li><font color="red">在一个tomcat服务器中部署了多个项目，在默认情况下，这些项目之间的Cookie是不能共享</font>的<br>但是可以通过Cookie对象的setPath(String path)方法来设置Cookie的共享范围<ul><li>默认情况下，设置的是当前项目的虚拟目录</li><li> 如果要在多个项目之间共享，则可以将path设置为"/"(“/”为服务器路径)</li></ul></li><li>不同服务器之间Cookie的共享<ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</li><li>例如：设置path为".baidu.com"，那么tieba.baidu.com和news.baidu.com两个不同的服务器之间可以共享数据，因为它们的一级域名是.baidu.com</li></ul></li></ul></li></ul><hr><h2 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a><font size="5">Cookie的特点和作用</font></h2> <ul> <li>特点 <ul> <li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li><li><font color="red">Cookie存储的键值对都是String类型</font></li> </ul></li><li>作用<ul><li>cookie一般用于存出少量的不太敏感的数据，这是因为Cookie的存储位置决定的，存储在客户端容易丢失和被篡改。</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ul></li></ul><hr><h1 id="服务器端会话技术–Session"><a href="#服务器端会话技术–Session" class="headerlink" title="服务器端会话技术–Session"></a>服务器端会话技术–Session</h1><h2 id="Session使用步骤"><a href="#Session使用步骤" class="headerlink" title="Session使用步骤"></a><font size="5">Session使用步骤</font></h2><ol><li> 通过resquest获取Session对象：<font color="blue">request.getSession()</font></li><li>调用Session对象的方法存储数据(和request请求转发方法一样)<ul><li><font color="blue">Object getAttribute(String name)</font>：通过键获取值</li><li><font color="blue">void setAttribute(String name, Object value)</font>：将数据存储进Session对象</li><li><font color="blue">void removeAttribute(String name)</font>：通过键移除相应的键值对</li></ul></li></ol><h2 id="Session实现原理"><a href="#Session实现原理" class="headerlink" title="Session实现原理"></a><font size="5">Session实现原理</font></h2><ol><font color="red">Session的实现是依赖于Cookie的。</font><li>客户端第一次向服务器发送请求，服务器在服务器内部开辟一块内存空间，存放Session对象，并给该内存空间指定一个id</li><li>服务器在响应头set-cookie中设置JSESSIONID=id这个键值对发送给客户端</li><li>客户端接收到服务器的相应后，会将保存着Sessionid的Cookie对象保存在浏览器内存</li><li>当客户端下一次向服务器发送请求的时候，会带着Cookie一起(在请求头cookie中有JSESSIONID=id键值对)</li><li>服务器接收到请求后，得到JSESSIONID=id键值对的id后，会在内存中找到对应id的Session对象</li><li>这就是为什么说Session依赖于Cookie的原因以及多次请求响应之间共享数据的原理</li></ol><hr><h2 id="Session细节"><a href="#Session细节" class="headerlink" title="Session细节"></a><font size="5">Session细节</font></h2><ul><li><font color="red">当客户端关闭后，服务器不关闭，两次获取session不是同一个</font>：前面说到过，Session是依赖于Cookie的，Cookie在默认情况下当客户端浏览器关闭后是自动销毁的，因此Cookie中的键值对自然也就销毁了，所以两次获取的Session不是同一个，如果需要两次的Cookie是同一个<ul><li>创建一个Cookie对象，设置cookie的键为JSESSIONID，值为session对象的id</li><li>设置cookie的存活时间</li><li>那么在cookie存活时间内，服务器通过cookie请求头拿到session的id都是一样的，这样通过id找到的Session对象自然也是同一个</li></ul></li><li><font color="red">客户端不关闭，服务器关闭后，两次获取的session不是同一个</font>，因为服务器关闭后相应内存会被释放，Session自然也会被释放<br>但是一般我们需要获取到的Session对象是同一个，确保数据不丢失，<font color="red">tomcat会自动完成Session的钝化和活化</font><ul><li>Session的钝化：在服务器正常关闭之前，将session对象序列化到硬盘上</li><li>Session的活化：在服务器启动后，将session文件转化为内存中的session对象。</li></ul></li><li>Session被销毁<ul><li> 服务器关闭</li><li>session对象调用invalidate() 自杀</li><li>session默认失效时间 30分钟,可以tomcat服务器的web.xml配置文件中session-config设置所有项目的失效时间,也可以在项目的wen.xml配置文件单独配置项目的失效时间</li></ul></li></ul><hr><h2 id="Session的特点"><a href="#Session的特点" class="headerlink" title="Session的特点"></a><font size="5">Session的特点</font></h2><ul><li>用于一次会话的多次请求间共享数据，存储在服务器端</li><li><font color="red">session可以存储任意类型，任意大小的数据</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会话技术 </tag>
            
            <tag> Cookie </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之Response发送Http响应消息</title>
      <link href="/2019/09/15/Web%E5%9F%BA%E7%A1%80%E4%B9%8BResponse%E5%8F%91%E9%80%81Http%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/"/>
      <url>/2019/09/15/Web%E5%9F%BA%E7%A1%80%E4%B9%8BResponse%E5%8F%91%E9%80%81Http%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>在前面一节中，对Servlet的Requset如何获取Http请求消息进行了介绍。因为Http基于请求响应模型，那么这里就介绍一下Servlet的另一个对象–Response，该对象用于发送Http响应消息。</p><hr><a id="more"></a><h1 id="Http响应消息格式"><a href="#Http响应消息格式" class="headerlink" title="Http响应消息格式"></a>Http响应消息格式</h1><p>可以类比Http请求消息格式，Http的响应消息格式也分为四部分</p><ol><li>响应行</li><li>响应头</li><li>响应空行</li><li>响应体</li></ol><p>下面分别介绍一下这几部分</p><h2 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a><font size="5">响应行</font></h2><p>响应行格式：<font color="red"><b>协议/版本 响应状态码 状态码描述</b></font></p><ol><li>协议/版本字段和请求消息格式一样</li><li>响应状态码(3位数字)：服务器告诉客户端浏览器本次请求和响应的一个状态。主要分为5类：<pre><code>1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码2. 2xx：成功。代表：2003. 3xx：重定向。代表：302(重定向)，304(访问缓存)4. 4xx：客户端错误。(404：请求路径没有对应的资源；405：请求方式没有对象的doXXX方法)5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</code></pre></li></ol><h2 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a><font size="5">响应头</font></h2><p>和请求头一样，响应头也是键值对的形式，这里主要介绍两种常见的响应头：</p><ol><li><font color="red"><b>Content-Type</b></font>：服务器告诉客户端本次响应体数据格式以及编码格式</li><li><font color="red"><b>Content-disposition</b></font>：服务器告诉客户端以什么格式打开响应体数据，该头可以设置两个值<ul><li>in-line:默认值,在当前页面内打开</li><li>attachment;filename=xxx：以附件形式打开响应体。文件下载</li></ul></li></ol><h2 id="响应空行和响应体"><a href="#响应空行和响应体" class="headerlink" title="响应空行和响应体"></a><font size="5">响应空行和响应体</font></h2><p>响应空行用于分割，就是个空行，没有实际意义。而响应体则是服务器给客户端发送的数据，如html页面等。</p><h1 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h1><h2 id="Response对象方法"><a href="#Response对象方法" class="headerlink" title="Response对象方法"></a><font size="5">Response对象方法</font></h2><p>该对象用于设置响应消息，下面介绍几种方法：</p><ol><li><p><font color="red"><b>设置响应行</b></font></p><ol><li>格式：HTTP/1.1 200 ok</li><li>设置状态码：setStatus(int sc) </li></ol></li><li><p><font color="red"><b>设置响应头</b></font><br> setHeader(String name, String value) </p></li><li><p><font color="red"><b>设置响应体</b></font><br>使用步骤如下：</p><ol><li><p>获取输出流</p><ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul></li><li><p>使用输出流，将数据输出到客户端浏览器</p></li><li><p>但是要注意，因为tomcat默认使用iso8859-1编码，而浏览器默认使用操作系统的编码方式(GBK)，因此<font color="red"><b>将中文数据输出到浏览器时会出现乱码情况。我们要再获取流之前，我们使用response.setContentType(“text/html;charset=utf-8”);设置流的编码，并通知服务器使用相同的格式解码。</b></font></p></li></ol></li></ol><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><font size="5">重定向</font></h2><p>前面介绍Request对象时说过，该对象可以进行请求转发，并且也说过请求转发的特点，那么这里介绍一下Response对象的重定向功能以及和请求转发的区别。重定向是一种资源跳转的方式</p><ol><li><p>代码实现</p><ol><li>设置状态码为302<br>response.setStatus(302);</li><li>设置响应头location<br> response.setHeader(“location”,新的资源的路径);</li><li>简单的重定向方法<br>response.sendRedirect(“新的资源的路径”);</li></ol></li><li><p>重定向原理<br>如图所示，重定向的原理和请求转发有所不同<br><img src="/2019/09/15/Web基础之Response发送Http响应消息/%E9%87%8D%E5%AE%9A%E5%90%91.bmp" alt></p></li></ol><h2 id="重定向和请求转发的区别"><a href="#重定向和请求转发的区别" class="headerlink" title="重定向和请求转发的区别"></a><font size="5">重定向和请求转发的区别</font></h2><ol><li><p>重定向的特点:redirect</p><ol><li>地址栏发生变化</li><li>重定向可以访问其他站点(服务器)的资源</li><li>重定向是两次请求。不能使用request对象来共享数据</li></ol></li><li><p>请求转发的特点：forward</p><ol><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li>转发是一次请求，可以使用request对象来共享数据</li></ol></li></ol><h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><p>前面在介绍Request对象时说过，通过Request的getServletContext()方法可以获取到该对象。那么该对象是什么呢？该对象<font color="red"><b>代表整个web应用，可以和程序的容器(服务器)来通信</b></font>。下面简单介绍一下该对象的功能：</p><ol><li><p><b>获取MIME类型</b></p><ul><li>MIME类型:在互联网通信过程中定义的一种文件数据类型<br>格式： 大类型/小类型   text/html        image/jpeg</li><li>获取：String getMimeType(String file)  </li></ul></li><li><p><b>域对象：共享数据</b><br>由于ServletContext代表整个Web容器，并且随着Web的启动而创建，随着Web的停止而销毁，因此这里的共享数据和Request对象的共享数据不同。使用Request对象共享数据时，仅在一次请求周期内可以使用，而使用ServletContext对象共享的数据，在整个Web存活周期内，所有的资源都可以共享该数据。因此要谨慎使用。</p><ol><li>setAttribute(String name,Object value)</li><li>getAttribute(String name)</li><li>removeAttribute(String name)</li></ol></li><li><p><b>获取文件的真实(服务器)路径</b><br>当我们要将服务器上的一个资源(比如说txt文件发送给浏览器时)发送给浏览器时，需要先将txt加载进内存。此时需要获取资源的真实路径用于创建流对象。我们使用<font color="red"><b>String getRealPath(String path)</b></font>方法获取资源的真实路径。 </p></li><li><p>对于我们的IDEA项目，获取不同目录下的资源时，getRealPath方法传递的参数不同</p><ol><li>web目录下资源访问<br>String path = context.getRealPath(“/资源名称”);</li><li>WEB-INF目录下的资源访问<br>String path = context.getRealPath(“/WEB-INF/资源名称”);</li><li>src目录下的资源访问<br>String path = context.getRealPath(“/WEB-INF/classes/资源路径”);    </li></ol></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于Response对象的简单介绍到此为止，其实可以发现，该对象主要用和服务器向浏览器响应消息。除此之外还介绍了Response相关的重定向方法以及和请求转发的不同；最后简单地介绍了一下ServletContext对象的简单使用。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Response </tag>
            
            <tag> Http响应消息格式 </tag>
            
            <tag> ServletContext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表的环问题</title>
      <link href="/2019/09/15/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/15/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E7%8E%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><font size="5"><b>首先，关于单链表的环，一般涉及到以下几个问题</b></font></p><ul><li>给一个单链表，判断是否有环</li><li>如果存在环，找出环的入口点</li><li>如果存在环，求出环上节点的个数</li><li>如果存在环，求出链表的长度</li></ul><hr><a id="more"></a><h1 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h1><h2 id="解法一：快慢指针法"><a href="#解法一：快慢指针法" class="headerlink" title="解法一：快慢指针法"></a><font size="5">解法一：快慢指针法</font></h2><ol><li>有两个指针fast和slow，开始时两个指针都指向链表头head</li><li>将两个指针同时向后移动<ul><li>fast每次走两步==&gt;fast=fast.next.next</li><li>slow每次走一步==&gt;slow=slow.next</li></ul></li><li>如果没有环，那么fast和slow一定不会相遇；当fast.next==null||slow==null时说明该链表没有环，因为<font color="red">有环的链表没有nul指针</font></li><li>如果有环，那么slow一定会和fast相遇,并且此时slow指针最多绕环一圈，即slow走的步数一定小于等于单链表的节点数<ul><li>可以这么理解，当链表时环形链表时，环是最大的，此时slow刚好绕环一圈回到头指针指向的节点时</li><li>fast的速度是slow的二倍(因为fast每次走2步)，所以fast此时一定走了两圈，也回到了头指针指向的节点，最终会在头节点相遇</li><li>如果链表不是环形链表，那么环的长度就会更短，此时fast一定能在slow走完一圈之前和slow相遇</li></ul></li></ol><p>(可以画图帮助理解)<br><img src="/2019/09/15/单链表的环问题/1.png" alt>方法返回的是相遇的节点</p><h2 id="解法二：HashSet法"><a href="#解法二：HashSet法" class="headerlink" title="解法二：HashSet法"></a><font size="5">解法二：HashSet法</font></h2><ol><li>遍历链表，将当前节点的引用存储到HashSet中</li><li>如果当遍历到某个节点时，HashSet集合中已经存在该节点的引用，那么说明该链表有环，并且<font color="red">第一个重复的节点就是入环口</font><br><img src="/2019/09/15/单链表的环问题/2.png" alt></li></ol><h1 id="找出环的入口点"><a href="#找出环的入口点" class="headerlink" title="找出环的入口点"></a>找出环的入口点</h1><p>如果用HashSet方法来解决第一个问题，那么这个问题就同时得到了解决<br>如果用快慢指针法解决第一题，那么<font color="red">得到fast和slow第一次相遇的节点</font>，</p><p><font color="blue">假设slow和fast相遇时，slow还没有走完链表，即链表不是首尾相接的环形链表</font><br><font color="red"><b>分析</b></font></p><ol><li>假设<ul><li>链表的长度为L</li><li>环的长度为r(即环有r个节点)</li><li>head节点到入环口的距离为a(即从head到入环节点要走a步)</li><li>入环口和相遇点的距离是x(从入环节点到相遇点要走a步)</li></ul></li><li>假设fast和slow相遇时，fast已经在环内循环了n圈，slow走了s步，在环内走一圈的步数=环的长度<ul><li>那么fast走过的步数为：2s步</li></ul></li><li>则有：2<em>s=s+n *r–&gt;s=n</em>r</li><li>又有s=a+x–&gt;因为前面说过slow节点没有走完一圈，所以这就是最简单的步数相加</li><li>所以得到a+x=n*r<ul><li>a+x=(n-1)*r+r</li><li>a+x=(n-1)*r+L-a</li></ul></li><li>a=(n-1)*r+(L-a-x)<ul><li>a：head到入环节点要走a步</li><li>(L-a-x)：从向相遇节点到入环节点要走(L-a-x)步</li></ul></li></ol><p><font color="red"><b>经过上面分析可以总结得到解决方法</b></font></p><ul><li>设置两个临时指针str1和str2<ul><li>str1=head</li><li>str2=slow(slow是第一问得出的相遇节点)</li></ul></li><li>让两个节点同时往后走，直到str1==str2为止<ul><li>str1=str1.next</li><li>str2=str2.next</li></ul></li><li>str1==str2时退出循环，此时的str1/str2就是入环节点<br><img src="/2019/09/15/单链表的环问题/3.png" alt></li></ul><p><font color="blue"><b>特殊情况：即链表首尾相接(环长度最大)</b></font></p><ul><li>此时slow节点和fast节点在head相遇，即slow==head</li></ul><p>根据上面的代码会直接返回head/slow，因此也满足特殊情况</p><h1 id="求出环上节点的个数"><a href="#求出环上节点的个数" class="headerlink" title="求出环上节点的个数"></a>求出环上节点的个数</h1><h2 id="解法一：相遇节点法"><a href="#解法一：相遇节点法" class="headerlink" title="解法一：相遇节点法"></a><font size="5">解法一：相遇节点法</font></h2><ol><li>设置一个临时指针temp=slow(相遇节点)</li><li>让临时指针temp后移–&gt;temp=temp.next，并记录移动次数count</li><li>当temp==slow时，说明temp绕环走了一圈，count就是换的长度</li></ol><h2 id="解法二：快慢指针法"><a href="#解法二：快慢指针法" class="headerlink" title="解法二：快慢指针法"></a><font size="5">解法二：快慢指针法</font></h2><ol><li>设置两个临时指针，str1=str2=slow(相遇节点)</li><li>str1每次走一步、str2每次走两步，并记录str1走的步数count<ul><li>str1=str1.next</li><li>str2=str2.next.next</li></ul></li><li>当str1==str2(再次相遇)时，说明str2刚好比str1多走1圈，此时count就是环上节点的个数<ul><li>假设再次相遇时str1走了s步、str2走了2*s步、环的长度为r</li><li>由分析得到2*s=s+r，所以s=r;<br><img src="/2019/09/15/单链表的环问题/4.png" alt></li></ul></li></ol><h1 id="求出链表的长度"><a href="#求出链表的长度" class="headerlink" title="求出链表的长度"></a>求出链表的长度</h1><p>链表长度L=head节点到入口节点的距离a+环的长度r<br>根据上面两个问题，这个就很好解决<br><img src="/2019/09/15/单链表的环问题/5.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> 链表 </tag>
            
            <tag> HashSet </tag>
            
            <tag> 快慢指针法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Josefu问题(约瑟夫环)两种解决方法</title>
      <link href="/2019/09/15/Josefu%E9%97%AE%E9%A2%98-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF-%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/15/Josefu%E9%97%AE%E9%A2%98-%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF-%E4%B8%A4%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><b>约瑟夫问题</b><br>设编号为1、2….n的n个人坐一圈，约定编号为k(1&lt;=k&lt;=n)的人从1开始报数，数到m的那个人出圈，他的下一位又从1开始报数，数到m的人又出圈，以此类推，直到所有人出圈为止，由此产生一个出圈编号的序列</p><hr><a id="more"></a><h1 id="解法一：循环链表"><a href="#解法一：循环链表" class="headerlink" title="解法一：循环链表"></a>解法一：循环链表</h1><ol><li>首先对参数k、m、n进行校验，确保k、m、n在正常范围内</li><li>创建一个辅助指针helper</li><li>让helper指向first前一个节点，即指向最初链表的最后一个节点</li><li>将first和helper向后移动k-1次，即让first指向开始报数的小孩</li><li>当helper==first时，说明圈中只有一个小孩</li><li>helper！=first时，将first和helper同时向后移动m-1次</li><li>将移动m-1此之后first指向的节点出圈</li><li>继续执行5，直到helper==first为止</li></ol><p><img src="/2019/09/15/Josefu问题-约瑟夫环-两种解决方法/1.png" alt><br>其中方法的参数：</p><ul><li>k：第一次开始报数的小孩</li><li>count：每次数几下(m)</li><li>nums：最开始圈中小孩数</li></ul><p>这个约瑟夫问题是基于我自己创建的单向环形链表实现的(或者说我创建的单向环形链表是用来解决约瑟夫问题的)，helper节点最初就指向first前一个节点，所以2和3两步骤可以省略<br>(可以看一下我创建单项循环链表的博客)</p><h1 id="解法二：数组"><a href="#解法二：数组" class="headerlink" title="解法二：数组"></a>解法二：数组</h1><p>对于数组，进行出圈操作的时候就不能向链表一样删除节点了，因为数组的长度是固定的，那么怎么解决呢？我们可以将<font color="red">已经出圈的孩子所在的元素值赋值为0</font>，这样，当我们遍历到元素值为0的节点时，就可以跳过该节点。<br>步骤：</p><ol><li>首先对参数k、m、n进行校验，确保k、m、n在正常范围内</li><li>因为数组下标是从0开始，小孩编号从1开始，所以让开始数数的小孩编号-1==&gt;k=k-1</li><li>根据nums创建数组，模拟nums个小孩组成的圈</li><li>一共有nums个小孩，所以一共要循环报数nums次==&gt;for (int i = 0; i &lt; nums; i++) {}</li><li>每一次报数m次，所以k要移动m-1次(起初报数时，自己也算一次)，当k代表的数组元素a[k]==0时，说明当前孩子已经出圈，所以需要k再次移动，直到a[k]!=0==&gt;for (int j = 0; j &lt; m - 1||arr[k]==0;) {}</li><li>第5步得到的k是该赋值为0的元素，即该出圈的孩子编号-1==&gt;k+1即为当前该出圈的孩子编号</li><li>a[k]=0，并且将k取模移向下一位</li><li>重复567nums次，直到所有孩子都出圈<br><img src="/2019/09/15/Josefu问题-约瑟夫环-两种解决方法/2.png" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环形链表 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-环形链表</title>
      <link href="/2019/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
      <url>/2019/09/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>环形链表，顾名思义，就是整个链表构成一个环，将单链表的最后一个节点的next指针指向头节点，这样就构成了循环链表。这里说的循环链表主要用于解决<font color="red">约瑟夫环问题</font>和<font color="red">判断链表是否有环</font>两个算法问题。</p><hr><a id="more"></a><h1 id="环形链表节点"><a href="#环形链表节点" class="headerlink" title="环形链表节点"></a>环形链表节点</h1><p><img src="/2019/09/15/数据结构-环形链表/1.png" alt></p><ol><li>int val：存储数据</li><li>Node next：指向另外一个Node节点</li></ol><h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><font size="5">成员变量</font></h2><p><img src="/2019/09/15/数据结构-环形链表/2.png" alt></p><ol><li>head：环形链表的头指针</li><li>helper：环形链表的尾指针，每次都指向新插入的节点<font color="red">(helper.next=head)</font></li></ol><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a><font size="5">成员方法</font></h2><h3 id="public-void-Add-int-ele"><a href="#public-void-Add-int-ele" class="headerlink" title="public void Add(int ele)"></a><font size="5">public void Add(int ele)</font></h3><p><img src="/2019/09/15/数据结构-环形链表/3.png" alt>向链表中添加元素</p><ol><li>在添加之前，判断当前链表是否为空</li><li>如果为空<ul><li>将head头指针指向新创建的节点==&gt;head=new Node(ele)</li><li>helper指针也指向新创建的节点==&gt;helper=head</li><li>将新创建节点的next指针指向head，构成一个环==&gt;helper.next=head</li></ul></li><li>如果不为空<ul><li>将helper指针指向节点(尾节点)的next指针指向新节点==&gt;helper.next=new Node(ele)</li><li>将helper指针向后移，保证helper指针仍然指向尾节点==&gt;helper=helper.next</li><li>将尾节点的next指针指向head头节点，形成一个环==&gt;helper.next=head</li></ul></li></ol><p><font color="red"><b>环形链表，其实就是将单链表的尾节点的next指针指向头节点</b></font></p><h3 id="public-void-show"><a href="#public-void-show" class="headerlink" title="public void show()"></a><font size="5">public void show()</font></h3><p><img src="/2019/09/15/数据结构-环形链表/4.png" alt>打印环形链表<br>逻辑比较简单，因为在打印的过程中指针会移动，所以可以<font color="red">创建两个临时变量</font>，这样打印过后head和helper指针都没有发生变化，下次添加元素的时候仍然能够按照顺序添加</p><hr>单链表的两个算法问题会在<font color="red"><b>算法之美</b></font>分类中说到]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环形链表 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之Request获取Http请求消息</title>
      <link href="/2019/09/14/Web%E5%9F%BA%E7%A1%80%E4%B9%8BRequest%E8%8E%B7%E5%8F%96Http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
      <url>/2019/09/14/Web%E5%9F%BA%E7%A1%80%E4%B9%8BRequest%E8%8E%B7%E5%8F%96Http%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍Http协议的请求消息格式，以及如何通过Request对象获取Http请求消息的内容。</p><hr><a id="more"></a><h1 id="Http-请求消息格式"><a href="#Http-请求消息格式" class="headerlink" title="Http 请求消息格式"></a>Http 请求消息格式</h1><p>如下所示是一个简单地Http请求消息，以这个请求消息为例对Http请求消息格式进行介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">请求头</span><br><span class="line">POST /login.htmlHTTP/1.1</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line">请求行</span><br><span class="line">Host: localhost</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http://localhost/login.html</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">================================</span><br><span class="line"></span><br><span class="line">请求空行</span><br><span class="line"></span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line">请求体</span><br><span class="line">username=zhangsan</span><br></pre></td></tr></table></figure><ol><li><font color="red"><b>请求行</b></font><br>请求方式 请求url 请求协议/版本<br>GET  /login.html    HTTP/1.1</li></ol><ul><li>HTTP协议有7中请求方式，常用的有2种<ol><li>GET：请求参数在请求行中，在url后，并且请求的url长度有限制的，不太安全。</li><li>POST：请求参数在请求体中，请求的url长度没有限制的，相对安全。</li></ol></li></ul><ol start="2"><li><font color="red"><b>请求头</b></font>：客户端浏览器告诉服务器一些信息<br>请求头名称: 请求头值(键值对形式)</li></ol><ul><li>常见的请求头有：<ol><li>User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息。可以在服务器端获取该头的信息，解决浏览器的兼容性问题</li><li>Referer：http:/ /localhost/login.html。告诉服务器，我(当前请求)从哪里来？能够防盗链和进行统计工作。</li></ol></li></ul><ol start="3"><li><font color="red"><b>请求空行</b></font><br>空行，就是用于分割POST请求的请求头，和请求体的。</li><li><font color="red"><b>请求体(正文)</b></font><br>封装POST请求消息的请求参数的，GET方式请求体为空</li></ol><h1 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h1><ol><li><p>request对象和response对象的原理<br>它们都是由服务器创建的，我们只是使用它。request对象是来获取请求消息，response对象是来设置响应消息</p></li><li><p>request对象继承体系结构：<br> ServletRequest        –    接口</p><pre><code>|    继承</code></pre><p> HttpServletRequest    – 接口</p><pre><code>|    实现</code></pre><p> org.apache.catalina.connector.RequestFacade 类(tomcat)</p></li></ol><h2 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a><font size="5">request功能</font></h2><ol><li><p><b>获取请求消息数据</b></p><ol><li><p>获取请求行数据</p><ol><li>获取请求方式:String getMethod()  </li><li><font color="red"><b>获取虚拟目录(常用)</b></font>:String getContextPath()</li><li>获取Servlet路径:String getServletPath()</li><li>获取get方式请求参数String getQueryString()</li><li><font color="red"><b>获取请求URI(常用)</b></font>:<br>String getRequestURI()<br>StringBuffer getRequestURL()</li><li>获取协议及版本:String getProtocol()</li><li>获取客户机的IP地址:String getRemoteAddr()</li></ol></li><li><p>获取请求头数据<br><font color="red"><b>String getHeader(String name)(常用)</b></font>:通过请求头的名称获取请求头的值<br>Enumeration<string> getHeaderNames():获取所有的请求头名称</string></p></li><li><p>获取请求体数据:</p><ol><li>获取流对象<br> BufferedReader getReader()：获取字符输入流，只能操作字符数据<br> ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</li><li>再从流对象中拿数据     </li></ol></li></ol></li><li><p><b>其他功能</b></p><ol><li>获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数<ol><li>String getParameter(String name):根据参数名称获取参数值   </li><li>String[] getParameterValues(String name):根据参数名称获取参数值的数组 </li><li>Enumeration<string> getParameterNames():获取所有请求的参数名称</string></li><li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li></ol></li></ol></li><li><p><b>中文乱码问题</b><br>get方式：tomcat 8 已经将get方式乱码问题解决了<br>post方式：会乱码。获取参数前，设置request编码request.setCharacterEncoding(“utf-8”);</p></li></ol><h2 id="request请求转发"><a href="#request请求转发" class="headerlink" title="request请求转发"></a><font size="5">request请求转发</font></h2><p><b>请求转发是一种在服务器内部的资源跳转方式</b>，它的原理如下图<br><img src="/2019/09/14/Web基础之Request获取Http请求消息/1.png" alt></p><ol><li><p>使用步骤</p><ol><li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li><li>使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </li></ol></li><li><p>请求转发有如下特点</p><ol><li>浏览器地址栏路径不发生变化</li><li>只能转发到当前服务器内部资源中。</li><li>转发是一次请求</li></ol></li><li><p>共享数据<br>当我们使用请求转发时，在服务器内部会从一个资源跳转到另一个资源，我们可以通过域对象在资源之间共享数据</p><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li><li>方法：<ol><li>void setAttribute(String name,Object obj):存储数据</li><li>Object getAttitude(String name):通过键获取值</li><li>void removeAttribute(String name):通过键移除键值对</li></ol></li></ul></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样一来，request对象的基本功能就介绍的差不多了，说起来也比较简单：该对象主要用于接收从客户端发送过来的数据，并可以在服务器内部进行资源的跳转。</p><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Request </tag>
            
            <tag> Http请求消息格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-队列</title>
      <link href="/2019/09/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
      <url>/2019/09/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>队列的特点：<font color="red"><b>FIFO–&gt;First in First out</b></font>，即先进先出<br>这篇文章讲的是数组结构存储队列，队列从功能上来说分为两种</p><ol><li>普通队列</li><li>循环队列。</li></ol><p>后面将会分别用Java手写两个队列类来讲述普通队列和循环队列</p><hr><a id="more"></a><h1 id="普通队列"><a href="#普通队列" class="headerlink" title="普通队列"></a>普通队列</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font size="5">概述</font></h2><p>队列本身是一个有序列表，因为队列的输入、输出是分别从前后端来处理，因此需要两个变量front和rear分别记录队头和队尾</p><ul><li>front会随着数据输出而改变</li><li>rear会随着数据输入而改变</li></ul><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><font size="5">成员变量</font></h2><ol><li><font color="blue">private int maxSize;</font>            –&gt;队列最大容量</li><li><font color="blue">private int front;</font>            –&gt;队列头</li><li><font color="blue">private int rear;</font>            –&gt;队列尾</li><li><font color="blue">private T[] arr;(使用泛型)</font>    –&gt;队列存储结构：数组</li></ol><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><font size="5">构造方法</font></h2><p><img src="/2019/09/14/数据结构-队列/1.png" alt>这里创建了两个构造方法：</p><ul><li>通过参数确定数组大小，即队列的容量</li><li>无参构造方法默认数组大小为10</li></ul><p><font color="red"><b>front和rear指向的位置</b></font></p><ul><li>front：指向队列头的前一个位置</li><li>rear：指向队列最后一个元素</li></ul><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a><font size="5">成员方法</font></h2><h3 id="public-boolean-isFull"><a href="#public-boolean-isFull" class="headerlink" title="public boolean isFull()"></a><font size="5">public boolean isFull()</font></h3><p><img src="/2019/09/14/数据结构-队列/2.png" alt>对于非循环队列来说，判断队列是否已满很简单，只需要<font color="blue">判断rear是否到达数组末尾即可</font></p><h3 id="public-boolean-isEmpty"><a href="#public-boolean-isEmpty" class="headerlink" title="public boolean isEmpty()"></a><font size="5">public boolean isEmpty()</font></h3><p><img src="/2019/09/14/数据结构-队列/3.png" alt>对于非循环队列来说，队列为空就是初始状态，即<font color="blue">rear==front</font></p><h3 id="public-void-Add-T-ele"><a href="#public-void-Add-T-ele" class="headerlink" title="public void Add(T ele)"></a><font size="5">public void Add(T ele)</font></h3><p><img src="/2019/09/14/数据结构-队列/4.png" alt>对于添加元素的方法，有两个步骤</p><ol><li>先判断队列是否已满</li><li>如果队满，抛出异常</li><li>否则，先将rear后移，再进行赋值操作</li></ol><h3 id="public-T-get"><a href="#public-T-get" class="headerlink" title="public T get()"></a><font size="5">public T get()</font></h3><p><img src="/2019/09/14/数据结构-队列/5.png" alt>取队头元素的方法，同样有两个步骤</p><ol><li>判断队列是否为空</li><li>如果队空，抛出异常</li><li>否则，先将front后移指向队头元素，再返回队头元素</li></ol><h3 id="public-void-show"><a href="#public-void-show" class="headerlink" title="public void show()"></a><font size="5">public void show()</font></h3><p><img src="/2019/09/14/数据结构-队列/6.png" alt>打印当前队列所有元素</p><hr>以上就是一个基本的普通数组模拟队列类，不难发现这样的队列是有很大缺陷的<br><font color="blue">无法复用</font>：即只能用一次，当front指向arr[maxSize-1]的时候，就算此时队列中没有元素，也无法向队列中添加数据。下面来说循环队列<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><h2 id="成员变量-1"><a href="#成员变量-1" class="headerlink" title="成员变量"></a><font size="5">成员变量</font></h2><ol><li><font color="blue">private int maxSize;</font>            –&gt;队列最大容量</li><li><font color="blue">private int front;</font>            –&gt;队列头</li><li><font color="blue">private int rear;</font>            –&gt;队列尾</li><li><font color="blue">private T[] arr;(使用泛型)</font>    –&gt;队列存储结构：数组</li></ol><h2 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a><font size="5">构造方法</font></h2><p><img src="/2019/09/14/数据结构-队列/8.png" alt>这里创建了两个构造方法：</p><ul><li>通过参数确定数组大小，即队列的容量</li><li>无参构造方法默认数组大小为10</li></ul><p><font color="red"><b>front和rear指向的位置和普通队列不同</b></font></p><ul><li>front：指向队列头元素</li><li>rear：指向队列尾元素的后一个位置</li></ul><p>为了便于循环，<font color="red">rear指向的位置自始至终都是空着的，即队列的容量=maxsize-1</font></p><h3 id="public-boolean-isFull-1"><a href="#public-boolean-isFull-1" class="headerlink" title="public boolean isFull()"></a><font size="5">public boolean isFull()</font></h3><p><img src="/2019/09/14/数据结构-队列/9.png" alt>在循环队列中，判断队满的条件<font color="blue">(rear+1)%maxSize==front</font></p><h3 id="public-boolean-isEmpty-1"><a href="#public-boolean-isEmpty-1" class="headerlink" title="public boolean isEmpty()"></a><font size="5">public boolean isEmpty()</font></h3><p><img src="/2019/09/14/数据结构-队列/10.png" alt>在循环队列中，判断队满的条件仍是rear==front，因为rear指向的位置是不存放元素的，当front==rear时，说明队列已经没有元素了</p><h3 id="public-void-Add-T-ele-1"><a href="#public-void-Add-T-ele-1" class="headerlink" title="public void Add(T ele)"></a><font size="5">public void Add(T ele)</font></h3><p><img src="/2019/09/14/数据结构-队列/11.png" alt>在循环队列中，当rear到达队列末尾时，我们需要它从0开始，因此不能+1，要用<font color="blue">取模运算</font></p><h3 id="public-T-get-1"><a href="#public-T-get-1" class="headerlink" title="public T get()"></a><font size="5">public T get()</font></h3><p><img src="/2019/09/14/数据结构-队列/12.png" alt>在循环队列中，对于front也要用取模运算</p><h3 id="public-int-getNum"><a href="#public-int-getNum" class="headerlink" title="public int getNum()"></a><font size="5">public int getNum()</font></h3><p><img src="/2019/09/14/数据结构-队列/13.png" alt>对于(rear - front + mixsize) % mixsize运算，可以这么理解</p><ol><li>当rear&gt;front时候，说明所有的元素都处于rear和front中间，num=rear-front</li><li>当rear&lt;front时候，说明所有元素都处在rear和front两边，即rear比front多走了一个mixsize的长度，num=rear+maxSize-front;</li></ol><p>因此两者加起来就是<font color="blue">(rear - front + mixsize) % mixsize</font></p><h3 id="public-void-show-1"><a href="#public-void-show-1" class="headerlink" title="public void show()"></a><font size="5">public void show()</font></h3><p><img src="/2019/09/14/数据结构-队列/14.png" alt>特别注意循环条件，<font color="red"><b>i从front开始，做带循环的后移(取模)，直到i==rear是遍历完所有元素</b></font></p>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web基础之Druid数据库连接池</title>
      <link href="/2019/09/13/Web%E5%9F%BA%E7%A1%80%E4%B9%8BDruid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2019/09/13/Web%E5%9F%BA%E7%A1%80%E4%B9%8BDruid%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>最近在学习Java Web基础知识，为了防止遗忘，因此准备边学习边记录，方便后期回顾，今天就来介绍一款国产的性能优良的数据库连接池技术–Druid(本文基于MySQL5.5和Tomcat 8.5.31版本，在IDEA IDE下)。本文仅为自己复习用，其中依赖jar包具体名称均未说明。</p><hr><a id="more"></a><h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>我们通过JDBC可以用Java操作数据库，那么什么时JDBC呢？JDBC–Java DataBase Conectivity，即Java 数据库连接。这是一套由Sun公司定义的接口集，各个数据库厂商实现该接口，我们就可以通过这些接口来操作数据库。下面我以MySQL为例，介绍一下如何通过JDBC来操作MySQL。</p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a><font size="5">基本流程</font></h2><p>我们有以下步骤</p><ol><li><font color="red"><b>导入驱动jar包(很重要)</b></font><br>复制mysql-connector-java-5.1.37-bin.jar到WEB-INF/libs目录下，右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li></ol><p><b>代码演示</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//1. 导入驱动jar包</span><br><span class="line">//2.注册驱动</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">//3.获取数据库连接对象</span><br><span class="line">Connection conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/db3&quot;, [数据库用户名], [数据库密码]);</span><br><span class="line">//4.定义sql语句</span><br><span class="line">String sql = &quot;update account set balance = 500 where id = 1&quot;;</span><br><span class="line">//5.获取执行sql的对象 Statement</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">//6.执行sql</span><br><span class="line">int count = stmt.executeUpdate(sql);</span><br><span class="line">//7.处理结果</span><br><span class="line">System.out.println(count);</span><br><span class="line">//8.释放资源</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="类介绍"><a href="#类介绍" class="headerlink" title="类介绍"></a><font size="5">类介绍</font></h2><p>下面我们来介绍一下JDBC中几个常用的类</p><ol><li><p><font color="red"><b>Connection(数据库连接对象)</b></font></p><ol><li><b>获取执行sql的对象</b><ul><li>Statement createStatement()</li><li>PreparedStatement prepareStatement(String sql)  </li></ul></li><li><b>管理事务</b><ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</li><li>提交事务：commit()</li><li>回滚事务：rollback()</li></ul></li></ol></li><li><p><font color="red"><b>Statement(执行sql的对象)</b></font></p><ol><li>boolean execute(String sql)：可以执行任意的sql(了解，一般不用)</li><li>int executeUpdate(String sql)：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql)：执行DQL（select)语句，返回一个结果集对象</li></ol></li><li><p><font color="red"><b>ResultSet(结果集对象,封装查询结果)</b></font></p><ul><li><b>boolean next()</b><br>(初始时游标指向第一行数据的前一行)游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li><b>getXxx(int colIndex/String colName)</b><br>获取数据</li></ul></li><li><p><font color="red"><b>PreparedStatement：执行sql的对象(用于解决SQL注入问题)</b></font></p><ol><li><p>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</p><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’ </li></ol></li><li><p>解决sql注入问题：使用PreparedStatement对象来解决</p></li><li><p>预编译的SQL：参数使用?作为占位符</p><ol><li>获取执行sql语句的对象 PreparedStatement Connection.prepareStatement(String sql) </li><li>使用setXxx(index，value)给？赋值：<ul><li>index:？的位置编号 从1 开始</li><li>value:？的值</li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句。</li></ol></li><li><p>注意：后期都会使用PreparedStatement来完成增删改查的所有操作，它可以可以防止SQL注入并且效率更高</p></li></ol></li></ol><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><p>在使用JBDC创建数据库连接对象Connection时，我们每次使用过后都会关掉连接，在下一次执行SQL时再重新创建，这样会消耗时间，因此我们使用数据库连接池技术：一个数据库连接池中包含多个数据库连接，当查询使用完连接后并不会关掉该连接，而是将其归还给数据库连接池，以便复用该连接。我们这里主要介绍Druid数据库连接池。</p><h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a><font size="5">Druid连接池</font></h2><ol><li><p><font color="red"><b>导入jar包</b></font>druid-1.0.9.jar，和前面JDBC一样。</p></li><li><p><b>定义配置文件</b>：properties形式的，可以叫任意名称(假设就叫druid.properties)，可以放在任意目录下</p></li><li><p><b>加载配置文件</b>：Properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">InputStream is = 类名.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">pro.load(is);</span><br></pre></td></tr></table></figure></li><li><p><b>获取数据库连接池对象</b>：通过工厂来来获取  DruidDataSourceFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br></pre></td></tr></table></figure></li><li><p><b>获取连接</b>：getConnection</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = ds.getConnection();</span><br></pre></td></tr></table></figure></li></ol><h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><p>我们使用数据库连接池后，能够避免频繁的创建数据库连接，但是我们在执行SQL语句时，还是比较麻烦：要获取连接对象，获取执行对象，要定义SQL，要处理结果(将查询到的语句封装成对象)，要释放资源…这些都很麻烦并且是体力活。因此，Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</p><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a><font size="5">使用步骤</font></h2><ol><li><p><font color="red"><b>导入jar包</b></font>，和前面的操作一样</p></li><li><p><font color="red"><b>创建JdbcTemplate对象</b></font>。依赖于数据源DataSource</p><ul><li>JdbcTemplate template = new JdbcTemplate(ds);</li></ul></li><li><p><font color="red"><b>调用JdbcTemplate的方法来完成CRUD的操作</b></font></p><ul><li>update():执行DML语句。增、删、改语句</li><li>queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合，该方法最多只能返回一条记录并将该记录封装为Map集合。</li><li>queryForList():查询结果将结果集封装为list集合，将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</li><li>query():查询结果，将结果封装为<b>JavaBean对象</b><ul><li>query的参数：RowMapper<ul><li>一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</li><li>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果，将结果封装为对象<ul><li>一般用于聚合函数的查询</li></ul></li></ul></li></ol><h1 id="JavaBean对象"><a href="#JavaBean对象" class="headerlink" title="JavaBean对象"></a>JavaBean对象</h1><ol><li><p>JavaBean：标准的Java类</p><ol><li>要求：<ol><li>类必须被public修饰</li><li>必须提供空参的构造器</li><li>成员变量必须使用private修饰</li><li>提供公共setter和getter方法</li></ol></li><li>功能：封装数据</li></ol></li><li><p>同样的，使用BeanUtils工具类需要导入依赖jar包</p></li><li><p>我们使用BeanUtils工具类来将获取的数据封装为一个JavaBean对象</p></li><li><p>我们通过request.getParameterMap()方法能够获取到记录返回一个Map&lt;String,String[])集合</p></li><li><p>我们使用BeanUtils的populate(Object obj , Map map)方法，将map集合的键值对信息，封装到对应的JavaBean对象中</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Druid </tag>
            
            <tag> 数据库连接池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--稀疏数组</title>
      <link href="/2019/09/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%C2%9E/"/>
      <url>/2019/09/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%C2%9E/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要讲的是数组的应用之一–稀疏数组。那么什么是稀疏数组呢？我们来看一个问题：<br>假设你做了一个五子棋游戏，玩儿过的都知道这个游戏有一个叫做复盘的功能，就是你可以将这句游戏先存档，之后再读档的时候就会接着之前的继续下。我们都知道</p><a id="more"></a><ol><li>用二维数组来构造棋盘</li><li>用0表示棋盘上没有落子的位置</li><li>用1和2分别表示黑棋和白棋的位置</li></ol><p>存档：把二维数组通过流保存到硬盘中<br>那么这里面就有一个问题：如果要存档的棋盘中有大片的空白(数组中有大量的元素为0)，直接将原数组存储进去会浪费空间，这时候可以用到稀疏数组来压缩</p><hr><h1 id="稀疏数组的结构"><a href="#稀疏数组的结构" class="headerlink" title="稀疏数组的结构"></a>稀疏数组的结构</h1><h2 id="行"><a href="#行" class="headerlink" title="行"></a><font size="5">行</font></h2><ol><li>稀疏数组的行数取决于原数组非0元素的个数–&gt;<font color="red">row=num+1;</font></li><li>第一行存储着原数组的信息<ol><li>[0][0]=原数组的行数</li><li>[0][1]=原数组列数</li><li>[0][2]=原数组非0元素的个数</li></ol></li><li>剩下的每一行都存储着原数组非0元素的信息<ol><li>[i][0]=元素所在行</li><li>[i][1]=元素所在列</li><li>[i][2]=元素的值</li></ol></li></ol><p>稀疏数组的行数row=num+1：<font color="red">稀疏数组的第一行要用来存储原数组的信息，在还原的时候会用到</font></p><h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><ol><li><p><font color="red">所有的稀疏数组都只有3列</font></p></li><li><p>除了第一行外：</p><ol><li>第一列存储非0元素的行位置</li><li>第二列存储非0元素的列位置</li><li>第三列存储非0元素的值</li></ol></li></ol><p><b>上面说的非0元素，只是在数组中存在的大量重复元素值为0时的情况</b></p><h1 id="数组–-gt-稀疏数组"><a href="#数组–-gt-稀疏数组" class="headerlink" title="数组–&gt;稀疏数组"></a>数组–&gt;稀疏数组</h1><p>假设存在一个数组<br><img src="/2019/09/13/数据结构-稀疏数组/2.png" alt><br><img src="/2019/09/13/数据结构-稀疏数组/1.png" alt></p><ol><li>遍历原数组，获取非0元素的个数<br><img src="/2019/09/13/数据结构-稀疏数组/3.png" alt></li><li>创建稀疏数组<ul><li>稀疏数组的行数row=num+1</li><li>稀疏数组的列数col=3<br><img src="/2019/09/13/数据结构-稀疏数组/4.png" alt></li></ul></li><li>将原数组信息存储到稀疏数组第一行<ul><li>稀疏数组的第一行，存储原数组的行数、列数以及非0元素个数<br><img src="/2019/09/13/数据结构-稀疏数组/5.png" alt>    </li></ul></li><li>遍历原数组，储存其中非0元素的信息<ul><li>每一行的第一列存储元素的行信息</li><li>每一行的第二列存储元素的列信息</li><li>每一行第三列存储元素的值<br><img src="/2019/09/13/数据结构-稀疏数组/6.png" alt>    </li></ul></li><li>最后得到的稀疏数组<br><img src="/2019/09/13/数据结构-稀疏数组/7.png" alt>    </li></ol><h1 id="稀疏数组–-gt-数组"><a href="#稀疏数组–-gt-数组" class="headerlink" title="稀疏数组–&gt;数组"></a>稀疏数组–&gt;数组</h1><ol><li>创建普通数组<ul><li>数组的行数为稀疏数组第一行第一列的值</li><li>数组的列数为稀疏数组第一行第二列的值<br><img src="/2019/09/13/数据结构-稀疏数组/8.png" alt></li></ul></li><li>遍历稀疏数组的每一行<ul><li>当前行的第一列为元素的行位置</li><li>当前行的第二列为元素的列位置</li><li>当前行的第三列为元素的值<br><img src="/2019/09/13/数据结构-稀疏数组/9.png" alt>    </li></ul></li><li>最后得到原数组<br><img src="/2019/09/13/数据结构-稀疏数组/10.png" alt>    <hr><font size="5"><b>通过实际操作我们发现，将数组转换为稀疏数组后，节省的空间还较为客观，当要存储的数组中含有大量的重复元素时，我们可以采用稀疏数组来存储，能够在一定程度上节省空间<b></b></b></font><hr></li></ol>]]></content>
      
      
      <categories>
          
          <category> DataStructure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK源码--String类</title>
      <link href="/2019/09/10/JDK%E6%BA%90%E7%A0%81-String%E7%B1%BB/"/>
      <url>/2019/09/10/JDK%E6%BA%90%E7%A0%81-String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>这一篇的String源码基于<font color="red">JDK8</font>版本，来自于慕课网上<a href="https://www.imooc.com/read/47" target="_blank" rel="noopener">文贺老师的JAVA源码专栏(收费)</a>结合<a href="https://www.jianshu.com/p/b3e9deacd155" target="_blank" rel="noopener">张家界的雪</a>以及自己学习String源码的总结，主要的目的在于总结知识，方便后续回顾查看，如转载，请<font color="red"><b>注明出处</b></font></p><hr><a id="more"></a><h1 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h1><p>在学习String源码之前，首先要知道String对象再内存中的存放位置，我们都知道JAVA对象一般都是存放在堆中，但是String对象是一个特例，它被<font color="red">存放在常量池中</font><br><img src="/2019/09/10/JDK源码-String类/1.png" alt>可以看到，String类实现了</p><ol><li>Serializable：序列化接口，String对象可以被序列化</li><li>Comparable：表明字符串可以比较</li><li>CharSequence：表明String对象是一个字符序列</li><li>String底层实现是一个char类型的数组并且被final修饰</li></ol><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><h2 id="public-String"><a href="#public-String" class="headerlink" title="public String()"></a><font size="5">public String()</font></h2><p><img src="/2019/09/10/JDK源码-String类/2.png" alt>值为空串，很少使用</p><h2 id="public-String-String-original"><a href="#public-String-String-original" class="headerlink" title="*public String(String original)"></a><font size="5">*public String(String original)</font></h2><p><img src="/2019/09/10/JDK源码-String类/3.png" alt>这个构造方法在创建的过程中会创建两个对象，一个在堆中，一个在常量池中<br>当调用这个构造方法时String str=new String(“abc”)</p><ol><li>现在堆中new出一个String对象，并将str指向该对象</li><li>查看常量池中是否存在”abc”</li><li>如果不存在，那么就会在常量池中在创建一个String对象</li><li>如果存在，不做操作</li></ol><p>最终<font color="red">str是指向堆中的对象，而不是常量池中的对象</font><br><img src="/2019/09/10/JDK源码-String类/4.png" alt></p><ol><li>str1和str3都是指向常量池中的”abc”对象，所以str1==str3返回true</li><li>str4涉及到了变量的相加，内部实现是先new一个StringBuilder，然后 append(str2),append(“c”);然后让str4引用toString()返回的对象;<br><img src="/2019/09/10/JDK源码-String类/5.png" alt>如图，StringBuilder的toString方法实质上也是new了一个String对象，所以<font color="red">str4指向堆中的另外一个String对象</font>，所以str1==str4返回false</li><li>上面说了，str5指向堆中的一个String对象，所以str1==str5返回false<h2 id="public-String-char-value"><a href="#public-String-char-value" class="headerlink" title="public String(char value[])"></a><font size="5">public String(char value[])</font></h2><img src="/2019/09/10/JDK源码-String类/6.png" alt>如图，该构造方法实质上是<font color="red">调用Arrays工具类的copyof方法</font><h2 id="public-String-char-value-int-offset-int-count"><a href="#public-String-char-value-int-offset-int-count" class="headerlink" title="public String(char value[], int offset, int count)"></a><font size="5">public String(char value[], int offset, int count)</font></h2><img src="/2019/09/10/JDK源码-String类/7.png" alt>如图，该构造方法会<font color="red">先对起始位置进行判断，如果不合法会抛出异常</font>。最后<font color="red">调用Arrays工具类的copyOfRange来实现</font><h2 id="public-String-byte-bytes-int-offset-int-length-String-charsetName"><a href="#public-String-byte-bytes-int-offset-int-length-String-charsetName" class="headerlink" title="public String(byte bytes[], int offset, int length, String charsetName)"></a><font size="5">public String(byte bytes[], int offset, int length, String charsetName)</font></h2><img src="/2019/09/10/JDK源码-String类/8.png" alt>如图，该构造方法用byte数组构造String对象，用指定字符集转换后构造String对象。<br>其中StringCoding.decode(charsetName, bytes, offset, length)方法根据指定编码对byte数组进行解码，返回char数组<br>checkBounds方法是对<font color="red">参数进行检查，该方法为私有，只能在String类中使用</font><br><img src="/2019/09/10/JDK源码-String类/9.png" alt>该构造方法如果<font color="red">不指定charsetName，那么按照系统默认字符集进行解码</font><h2 id="public-String-StringBuffer-buffer"><a href="#public-String-StringBuffer-buffer" class="headerlink" title="public String(StringBuffer buffer)"></a><font size="5">public String(StringBuffer buffer)</font></h2><img src="/2019/09/10/JDK源码-String类/10.png" alt>通过StringBuffer构造String，因为StringBuffer内部也是一个char数组，所以实质上还是调用Arrays.copyOf方法实现，并且由于<font color="red">StringBuffer是线程安全的，所以这里也加了synchronized块保证线程安全</font><br>通过StringBuilder构造String对象和StringBuffer原理相同。不过由于StringBuilder是线程不安全的，所以没有加synchronized块<h2 id="String-char-value-boolean-share"><a href="#String-char-value-boolean-share" class="headerlink" title="*String(char value[] boolean share)"></a><font size="5">*String(char value[] boolean share)</font></h2><img src="/2019/09/10/JDK源码-String类/11.png" alt>这个构造方法是<font color="blue">protected修饰</font>的，它和public String(char value[])的区别在于多了一个boolean参数，并且不支持false<br>只支持true，这样做的原因是为了和public String(char value[])方法进行区分，否则没办法构成重载，查看方法体可以发现，它直接将char数组的的地址传递给String对象，要比注意拷贝快很多<br>但是这样做的弊端很大：<font color="red">String对象和char数组共享同一块内存，破坏了String的不可变性，</font>所以将该构造方法设置为protected保证安全,但是由于性能比较好，节约内存，所以replace、concat、valueof等方法也用到了这个构造方法<hr></li></ol><h1 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h1><h2 id="public-int-length"><a href="#public-int-length" class="headerlink" title="public int length()"></a><font size="5">public int length()</font></h2><p>返回char数组的长度</p><h2 id="public-boolean-isEmpty"><a href="#public-boolean-isEmpty" class="headerlink" title="public boolean isEmpty()"></a><font size="5">public boolean isEmpty()</font></h2><p>char数组长度是否为0</p><h2 id="public-char-charAt-int-index"><a href="#public-char-charAt-int-index" class="headerlink" title="public char charAt(int index)"></a><font size="5">public char charAt(int index)</font></h2><ol><li>判断index是否超出char数组长度，超出则抛异常</li><li>否则返回value[index]。</li></ol><h2 id="public-void-getChars-int-srcBegin-int-srcEnd-char-dst-int-dstBegin"><a href="#public-void-getChars-int-srcBegin-int-srcEnd-char-dst-int-dstBegin" class="headerlink" title="public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)"></a><font size="5">public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin)</font></h2><p><img src="/2019/09/10/JDK源码-String类/12.png" alt>将String对象指定的字符从dst[]数组的dstBegin位置向后复制,通过System.arraycopy实现，这是一个本地方法(native)。<br>参数：</p><ol><li>srcBegin：复制的起始位置(包括)</li><li>srcEnd：复制的结束位置(不包括)</li><li>dst[]：目的数组</li><li>dstBegin：目的数组dstBegin起始</li></ol><p>如果要<font color="red">复制的字符个数srcEnd-srcBegin&gt;dst.length-dstBegin,会抛出异常</font></p><h2 id="public-byte-getBytes-String-charsetName"><a href="#public-byte-getBytes-String-charsetName" class="headerlink" title="public byte[] getBytes(String charsetName)"></a><font size="5">public byte[] getBytes(String charsetName)</font></h2><p><img src="/2019/09/10/JDK源码-String类/13.png" alt>和前面传递Byte数组的构造方法相反，这里将String对象的value数组按照<font color="red">指定字符集编码成字符数组并返回</font><br>如果<font color="red">不指定字符集，按照默认字符集编码</font></p><h2 id="public-boolean-equals-Object-anObject"><a href="#public-boolean-equals-Object-anObject" class="headerlink" title="public boolean equals(Object anObject)"></a><font size="5">public boolean equals(Object anObject)</font></h2><p><img src="/2019/09/10/JDK源码-String类/14.png" alt>重写了Object的equals方法</p><h2 id="public-boolean-equalsIgnoreCase-String-anotherString"><a href="#public-boolean-equalsIgnoreCase-String-anotherString" class="headerlink" title="public boolean equalsIgnoreCase(String anotherString)"></a><font size="5">public boolean equalsIgnoreCase(String anotherString)</font></h2><p><img src="/2019/09/10/JDK源码-String类/15.png" alt>先判断地址是否相同，地址相同内容肯定相同，再判断长度是否相同，如果长度一样再调用regionMatches方法进行判断，这里用了&amp;&amp;运算符的<font color="red">断路原理</font><br>regionMatches方法有两种形式</p><ol><li>没有boolean参数的</li><li>有boolean参数的</li></ol><p>该方法的作用是区域比较，比较两个字符串指定长度的内容是否相等，从指定位置开始逐一比较字符数组内容是否相等<br><font color="red">两方法的区别</font>在于：如果booloean参数为true，那么当字符不相等时</p><ol><li>先将两字符转换成大写字符比较，还不相等</li><li>将两字符转换成小写比较，还不相等返回false</li></ol><p>和<font color="red">String的内部类实现原理一样</font></p><h2 id="public-int-compareTo-String-anotherString"><a href="#public-int-compareTo-String-anotherString" class="headerlink" title="public int compareTo(String anotherString)"></a><font size="5">public int compareTo(String anotherString)</font></h2><p><img src="/2019/09/10/JDK源码-String类/16.png" alt>这个方法是实现Comparable接口的方法，用于对字符串大小进行比较这个方法取了两个字符串长度较小的那个作为循环次数，对两个字符串进行逐位比较。</p><ol><li>如果不同，就返回两字符串不同那一位字符的差</li><li>如果都相同，就返回两字符串的长度差</li></ol><p>差的计算:<font color="blue">调用方法的字符串-参数字符串</font></p><h2 id="public-int-compareToIgnoreCase-String-str"><a href="#public-int-compareToIgnoreCase-String-str" class="headerlink" title="public int compareToIgnoreCase(String str)"></a><font size="5">public int compareToIgnoreCase(String str)</font></h2><p><img src="/2019/09/10/JDK源码-String类/18.png" alt>该方法实际上是调用了静态内部类对象的忽略大小写的compareTo方法</p><h2 id="public-boolean-startsWith-String-prefix-int-toffset"><a href="#public-boolean-startsWith-String-prefix-int-toffset" class="headerlink" title="public boolean startsWith(String prefix, int toffset)"></a><font size="5">public boolean startsWith(String prefix, int toffset)</font></h2><p><img src="/2019/09/10/JDK源码-String类/19.png" alt></p><h2 id="public-int-hashCode"><a href="#public-int-hashCode" class="headerlink" title="public int hashCode()"></a><font size="5">public int hashCode()</font></h2><p><img src="/2019/09/10/JDK源码-String类/20.png" alt>重写了Object的hashCode方法<br>在JAVA中，hashCode有两个作用：</p><ol><li>Object的hashCode返回对象的内存地址</li><li>重写的hashCode配合基于散列的集合使用<ul><li>在使用散列集合例如HashMap时，要保证key唯一，但是对于大量元素比较时直接比较equals效率低下，可以先判断hashCode，如果hashCode相等，然后判断equals，因为不同的对象其hashCode值可能相同，例如”通话”和”重地”、”Aa”和”BB”</li><li>为了使字符串计算的hashCode尽可能地少重复(降低哈希冲突)，这里采用的是31这个乘数，有两个好处<ul><li>31是个不大不小的质数，是作为hashCode乘子的优秀质数之一</li><li>31可以被JVM优化，31*i=(i&lt;&lt;5)-i(暂时没弄明白JVM优化)</li></ul></li></ul></li></ol><h2 id="public-int-indexOf-int-ch-int-fromIndex"><a href="#public-int-indexOf-int-ch-int-fromIndex" class="headerlink" title="public int indexOf(int ch, int fromIndex)"></a><font size="5">public int indexOf(int ch, int fromIndex)</font></h2><p><img src="/2019/09/10/JDK源码-String类/21.png" alt>作用：找到ch字符从字符串fromIndex位置开始第一次出现的位置<br>方法中的判断条件<font color="red">ch &lt; Character.MIN_SUPPLEMENTARY_CODE_POINT</font>是什么意思呢？<br>我们知道，在JAVA中，一个<font color="blue">char类型字符占2个字节也就是16位</font></p><ol><li>当参数中的ch在这个范围内时，就在String中从fromIndex开始逐一查找ch第一次上出现的位置</li><li>当参数超过这个范围(即大于65535)时，调用indexOfSupplementary()方法进行比较</li></ol><p>通过查看Character源码可知<br><img src="/2019/09/10/JDK源码-String类/22.png" alt>这个数值就是65535</p><h2 id="public-int-indexOfSupplementary-int-ch-int-fromIndex"><a href="#public-int-indexOfSupplementary-int-ch-int-fromIndex" class="headerlink" title="public int indexOfSupplementary(int ch, int fromIndex)"></a><font size="5">public int indexOfSupplementary(int ch, int fromIndex)</font></h2><p><img src="/2019/09/10/JDK源码-String类/23.png" alt>这个方法是private修饰的，只能由String内部调用，用来处理当参数ch大于2个字节时的查找方法<br>不难发现，它将<font color="red">ch字符拆分成高低位来查找，高位和value[i]比较，低位和value[i+1]比较</font><br><b>lastIndexof逻辑和Indexof基本类似，不多说</b></p><h2 id="public-int-indexOf-String-str-int-fromIndex"><a href="#public-int-indexOf-String-str-int-fromIndex" class="headerlink" title="public int indexOf(String str, int fromIndex)"></a><font size="5">public int indexOf(String str, int fromIndex)</font></h2><p><img src="/2019/09/10/JDK源码-String类/24.png" alt>参数为字符串，实际上比较的时<font color="red">字符串里的char数组</font><br><img src="/2019/09/10/JDK源码-String类/25.png" alt>方法是保护的，<font color="red">只能在包内调用</font></p><ol><li><b>首先分析一下方法的参数：</b><ol><li>char[] source：调用方法的字符串内部数组–&gt;暂且称为<font color="blue">源数组</font></li><li>int sourceOffset：数组的起始位置(一般是0)</li><li>int sourceCount：数组的长度</li><li>char[] target：参数字符串的内部数组–&gt;暂且称为<font color="blue">目的数组</font></li><li>int targetOffset：数组的起始位置(一般是0)</li><li>int targetCount：数组的长度</li><li>int fromIndex：从源数组fromIndex位置开始向后查找</li></ol></li><li><b>前三个if条件判断</b><ol><li>当fromIndex &gt;= sourceCount(即指定的起始搜索位置大于源数组数组的长度)时<ul><li>判断目的数组是否为空串<ul><li>若为空，则返回源数组的长度</li><li>不为空，返回-1</li></ul></li></ul></li><li>当指定起始搜索位置小于0，默认从0开始搜索</li><li>当目的数组为空，并且fromIndex在正常范围内，返回fromIndex</li></ol></li><li>找源数组和目的数组第一个字符相同的位置记为i</li><li>逐一比较接来的字符是否相等，如果遍历完目的数组后仍相等，返回i，不相等进行5</li><li>从源数组第i个位置后找与目的数组第一个字符相等的位置，再比较接下来的每一个字符是否相等</li><li>一直循环查找直到找到i并返回，或源字符串遍历完毕返回-1<br><img src="/2019/09/10/JDK源码-String类/26.png" alt><font color="red">对于几种特殊情况的测试</font><h2 id="public-int-indexOf-String-str"><a href="#public-int-indexOf-String-str" class="headerlink" title="public int indexOf(String str)"></a><font size="5">public int indexOf(String str)</font></h2><img src="/2019/09/10/JDK源码-String类/27.png" alt>默认fromIndex=0，调用上面的indexOf方法</li></ol><h2 id="public-int-lastIndexOf-String-str-int-fromIndex"><a href="#public-int-lastIndexOf-String-str-int-fromIndex" class="headerlink" title="public int lastIndexOf(String str, int fromIndex)"></a><font size="5">public int lastIndexOf(String str, int fromIndex)</font></h2><p>逻辑和上面个一样，都是调用比较char数组的保护方法，需要时查看一下JDK8的源码</p><h2 id="public-String-substring-int-beginIndex"><a href="#public-String-substring-int-beginIndex" class="headerlink" title="public String substring(int beginIndex)"></a><font size="5">public String substring(int beginIndex)</font></h2><p><img src="/2019/09/10/JDK源码-String类/28.png" alt></p><ol><li>对beginIndex进行判断<ul><li>beginIndex&lt;0，抛出StringIndexOutOfBoundsException异常</li><li>大于源数组的长度，抛出StringIndexOutOfBoundsException异常</li><li><font color="red">begin=0，直接返回当前字符串</font></li></ul></li><li>调用<font color="red">String(char[] value,int beginIndex,int count(value.length-beginIndex))</font>来实现</li></ol><h2 id="public-String-substring-int-beginIndex-int-endIndex"><a href="#public-String-substring-int-beginIndex-int-endIndex" class="headerlink" title="public String substring(int beginIndex, int endIndex)"></a><font size="5">public String substring(int beginIndex, int endIndex)</font></h2><p><img src="/2019/09/10/JDK源码-String类/29.png" alt>逻辑和上面一样(<font color="blue">含头不含尾</font>)</p><h2 id="public-String-concat-String-str"><a href="#public-String-concat-String-str" class="headerlink" title="public String concat(String str)"></a><font size="5">public String concat(String str)</font></h2><p><img src="/2019/09/10/JDK源码-String类/30.png" alt>拼接字符串，将str拼接到this串后面</p><ol><li>如果参数串为空串，直接返回this(当前字符串)</li><li>调用Arrays.copyOf方法创建一个新的字符串buf，长度为this.length+str.length，内容为this.value</li><li>调用String类的getChars方法，将str复制到buf串中(从buf串的this.length位置开始)</li><li>调用String类的protected修饰的构造方法，直接将buf串的地址赋值给新创建的字符串对象–&gt;参考前面protected的构造方法</li></ol><p>大致上来说，该方法的实现原理：<br>先创建一个字符数组，复制了两个字符串中的内容，然后通过String(char value[] boolean share)方法来new一个新的字符串<br><font color="red"><b>因为buf串是在方法内部创建的，外部是不可见的，因此不会破坏String对象的不可变性</b></font></p><h2 id="public-String-replace-char-oldChar-char-newChar"><a href="#public-String-replace-char-oldChar-char-newChar" class="headerlink" title="public String replace(char oldChar, char newChar)"></a><font size="5">public String replace(char oldChar, char newChar)</font></h2><p><img src="/2019/09/10/JDK源码-String类/31.png" alt>将字符串中所有的oldChar替换为newChar</p><ol><li>如果OldChar==newChar，直接返回当前字符串</li><li>找到字符串中第一个OldChar，记录位置为i；</li><li>新建一个char数组buf，将字符串赋值给buf数组，从buf的i开始，将所有的OldChar替换为newChar</li><li>通过String(char value[] boolean share)来创建新的字符串对象并返回</li></ol><p><b>说一下为什么要重建一个val数组，用val数组给buf数组赋值，而不直接用value数组赋值呢？</b><br><img src="/2019/09/10/JDK源码-String类/32.png" alt><a href="https://blog.csdn.net/no_hardsoft/article/details/51725822" target="_blank" rel="noopener">上网查阅</a>，val数组是局部变量，value数组是类变量，getfield操作是一个<font color="blue">访问类变量的操作</font><br>当使用value数组循环赋值的时候，<font color="blue">每一次循环都会有一个getfield操作入栈</font><br>使用局部变量val时，<font color="blue">只有一次getfield操作操作，就是将value数组赋值给val的时候</font><br>当数组长度很大的时候，使用局部变量性能会更好一些(大神真不愧是大神，太细节了)</p><h2 id="public-boolean-contains-CharSequence-s"><a href="#public-boolean-contains-CharSequence-s" class="headerlink" title="public boolean contains(CharSequence s)"></a><font size="5">public boolean contains(CharSequence s)</font></h2><p><img src="/2019/09/10/JDK源码-String类/33.png" alt>判断字符串是否包含制定的字符序列，实际上是<font color="red">调用indexOf(String str)方法，查找序列在字符串中出现的位置来判断的</font>，如果不包含返回-1。</p><h2 id="public-String-toLowerCase-toUpperCase"><a href="#public-String-toLowerCase-toUpperCase" class="headerlink" title="public String toLowerCase()/toUpperCase()"></a><font size="5">public String toLowerCase()/toUpperCase()</font></h2><p><img src="/2019/09/10/JDK源码-String类/34.png" alt><br><img src="/2019/09/10/JDK源码-String类/35.png" alt>对字符串进行大小写转换，只对英文字符有效</p><h2 id="public-String-trim"><a href="#public-String-trim" class="headerlink" title="public String trim()"></a><font size="5">public String trim()</font></h2><p><img src="/2019/09/10/JDK源码-String类/36.png" alt>去掉两端空白字符(空格、tab、回车符)</p><ol><li>从左到右循环字符数组，若字符为空字符则继续循环，直到第一个不为空的字符记录位置st</li><li>从右往左循环字符数组，若字符为空字符则继续循环，直到第一个不为空的字符记录位置len</li><li>如果st=0并且len=value.length，说明该字符两端没有空字符，直接返回字符串</li><li>否则，调用substring(st, len)方法获取去掉首尾空字符的字串。</li></ol><p><font color="red">通过分析：一个首尾没有空字符的str调用trim方法，返回它本身，所以得到的新String对象地址相同<br>一个开头或结尾存在空字符的str调用trim方法，返回的新String对象是new出来的，两者地址不同</font></p><h2 id="public-String-toString"><a href="#public-String-toString" class="headerlink" title="public String toString()"></a><font size="5">public String toString()</font></h2><p><img src="/2019/09/10/JDK源码-String类/37.png" alt>返回他自身</p><h2 id="public-char-toCharArray"><a href="#public-char-toCharArray" class="headerlink" title="public char[] toCharArray()"></a><font size="5">public char[] toCharArray()</font></h2><p><img src="/2019/09/10/JDK源码-String类/38.png" alt>创建一个resault数组，调用System.arraycopy方法将value复制给resault数组并返回<br><font color="red">不能直接返回value数组，破坏了String的不可变性</font><br>源码中有一行注释：Cannot use Arrays.copyOf because of class initialization order issues，由于类初始化顺序问题，不能使用Arrays.copyOf方法<br>可能的原因：String初始化比Arrays早，但是在JDK中存在其他对象使用了toCharArray()方法，而<font color="blue">这个对象初始化比String晚但是比Arrays早，导致在使用时Arrays还没有初始化完成而报错</font><br>而Syatem.arraycopy不会有这样的问题，因为这是本地方法</p><h2 id="public-static-String-valueOf系列方法"><a href="#public-static-String-valueOf系列方法" class="headerlink" title="public static String valueOf系列方法"></a><font size="5">public static String valueOf系列方法</font></h2><p>直接查看JDK源码即可，很简单，就不赘述</p><h2 id="public-native-String-intern"><a href="#public-native-String-intern" class="headerlink" title="public native String intern();"></a><font size="5">public native String intern();</font></h2><p>本地方法，详细解释请见传送门，讲的挺好<br><a href="https://www.cnblogs.com/wxgblogs/p/5635099.html" target="_blank" rel="noopener">传送门1</a><br><a href="https://www.jianshu.com/p/9f51e4ccb33a" target="_blank" rel="noopener">传送门2</a></p><h1 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h1><p><img src="/2019/09/10/JDK源码-String类/17.png" alt>实际上就是String内部定义的一个比较器，用于忽略大小写比较字符串是否相等，<font color="red">CompareToIgnoreCase方法用到了这个类</font></p><hr><font size="5">到这里String类也大致总结完了，但是对于String类，我想要学的远不止这些，做这些只是整理方便后期学习理解，如果哪里不对或者有其他源码学习途径，欢迎私信我一起讨论交流，让我们一起学习，共同进步</font><br><hr><div align="center">暂时只能通过微博，后续会开微信公众号来一起交流，毕竟现在实力还不够</div>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础--基础查询语句</title>
      <link href="/2019/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
      <url>/2019/09/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<p>之前介绍了SQL中的DDL和DML语句，现在就来介绍一下DQL语句，这也是平时使用最多的类型</p><hr><a id="more"></a><h1 id="整体语法"><a href="#整体语法" class="headerlink" title="整体语法"></a>整体语法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT (DISTINCT) &lt;列名&gt; (AS) &lt;别名&gt;,&lt;列名&gt; (AS) &lt;别名&gt;....</span><br><span class="line">    FROM &lt;表名&gt;</span><br><span class="line">    WHERE 条件</span><br><span class="line">    GROUP BY 分组条件</span><br><span class="line">    HAVING 条件</span><br><span class="line">    ORDER BY 排序</span><br><span class="line">    LIMIT 分页限定</span><br></pre></td></tr></table></figure><p>以上各种条件，可以选择其中一些搭配使用使用，但是各个条件之间的顺序是不能改变的。并且必须有SELECT子句、FROM子句。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符分为算术运算符、比较运算符以及逻辑运算符三种，下面分别进行介绍</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><font size="5">算术运算符</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+</span><br><span class="line">-</span><br><span class="line">*</span><br><span class="line">/</span><br></pre></td></tr></table></figure><ol><li>SQL语句中可以使用计算表达式，如<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT &lt;列名&gt;*2 FROM &lt;表名&gt;</span><br></pre></td></tr></table></figure></li></ol><p>除了SELECT子句，在WHERE子句、HAVING子句中同样可以使用</p><ol start="2"><li>包含NULL的计算，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5+NULL</span><br><span class="line">NULL/9</span><br><span class="line">NULL/0</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ol><p><font color="red"><b>对于所有包含NULL的计算，结果肯定是NULL。</b></font></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><font size="5">比较运算符</font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">&lt;&gt;或!=</span><br><span class="line">&gt;=</span><br><span class="line">&lt;=</span><br><span class="line">&gt;</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>对于字符串的比较大小，是按照字典顺序比较，和数值型有所不同</p><h2 id="NULL数据"><a href="#NULL数据" class="headerlink" title="NULL数据"></a><font size="5">NULL数据</font></h2><p>对于上面的两种运算符，都无法查询到NULL数据，如果我们想要查询NULL数据，可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IS NULL 希望选取NULL数据</span><br><span class="line">IS NOT NULL 排除NULL数据</span><br></pre></td></tr></table></figure><p>这两个条件</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><font size="5">逻辑运算符</font></h2><p>通过逻辑运算符，可以将多个查询条件进行组合</p><ol><li><p><b>NOT运算符(!非)</b><br>否定条件，参考前面的NULL</p></li><li><p><b>AND运算符(&amp;&amp;与)</b><br>选出同时满足两条件的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件A AND 条件B</span><br></pre></td></tr></table></figure></li><li><p><b>OR运算符(||或)</b><br>选出满足条件A或条件B的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件A OR 条件B</span><br></pre></td></tr></table></figure></li><li><p><b>注意</b></p><ul><li><font color="red"><b>当多个条件需要进行组合时，需要使用AND或OR运算符</b></font></li><li><font color="red"><b>AND运算符的优先级高于OR运算符，必要的时候需要使用括号。</b></font></li></ul></li></ol><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p>通过SQL对数据进行某种操作或计算时需要使用函数，例如：计算表中全部数据的行数时，可以使用COUNT()函数，SQL中有很多用于汇总的函数，下面介绍5中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COUNT():计算表中的记录数</span><br><span class="line">SUM():计算某一列中数据的和</span><br><span class="line">AVG():计算某一列数据的平均值</span><br><span class="line">MAX():求出某一列数据中的最大值</span><br><span class="line">MIN():求出某一列数据中的最小值</span><br></pre></td></tr></table></figure><p>如上所示，<font color="red">用于汇总的函数称为聚合函数，所谓聚合，就是将多行汇聚成一行。实际上，所有的聚合函数最后得到的都是一行数据</font></p><ol><li><p><b>COUNT(&lt;列名&gt;)</b><br>参数为列名，计算该列除了NULL数据之外记录数，如果要得到该表的记录数(行数)，应使用使用COUNT(*)或者参数使用有非空约束的列</p></li><li><p><b>SUM(&lt;列名&gt;)</b><br>参数为列名，如果该列存在NULL数据，那么NULL数据不参与计算。</p></li><li><p><b>AVG(&lt;列名&gt;)</b><br>同样的，参数为列名，如果该列存在NULL数据，那么NULL数据不参与计算。</p></li><li><p><b>NULL数据统一解决方式</b><br>对于以上三个聚合函数，我们可以看到，都无法处理NULL数据，那么我们能不能在使用这些函数时将NULL数据临时替换为其他数值呢？答案是可以的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(列名，想要替换的数)</span><br><span class="line"></span><br><span class="line">//例如</span><br><span class="line">SELECT AVG(IFNULL(&lt;列名,0&gt;))</span><br><span class="line">计算某一列中数据的平均值，当该列存在NULL数据时，将NULL数据替换为0参与计算</span><br><span class="line">同样的对于另外两种聚合函数也可以使用这种方式</span><br></pre></td></tr></table></figure></li><li><p><b>注意</b><br><font color="red">AVG和SUM只能用于数值类型的列，而MAX和MIN可以用于任意类型</font><br><font color="red">可以在聚合函数中使用DISTINCT关键字首先过滤掉重复数据，剩下的数据参与计算</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUM(DISTINCT &lt;列名&gt;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="子句介绍"><a href="#子句介绍" class="headerlink" title="子句介绍"></a>子句介绍</h1><p>下面就来介绍一下查询语法中的各个子句的使用以及注意事项</p><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a><font size="5">DISTINCT</font></h2><p>从结果中删除重复行，该关键字只能用在第一个列名之前。</p><h2 id="SELECT子句"><a href="#SELECT子句" class="headerlink" title="SELECT子句"></a><font size="5">SELECT子句</font></h2><ol><li>如果想要查询所有列，那么可以在SELECT中使用SELECT *。 </li><li>查询结果中列的顺序和SELECT子句中的顺序相同</li></ol><h2 id="WHERE子句"><a href="#WHERE子句" class="headerlink" title="WHERE子句"></a><font size="5">WHERE子句</font></h2><p>通过WHERE子句可以查询满足条件的行(记录)。</p><ol><li>对于SELECT子句和WHERE子句的执行顺序:<font color="red">首先通过WHERE子句查询出符合指定条件的记录，然后再选取出SELECT子句指定的列。</font></li><li><font color="red">WHERE子句中不能使用聚合函数</font></li></ol><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a><font size="5">GROUP BY</font></h2><p>在GROUP BY子句中指定的列称为聚合键或者分组列。<br><font color="red">如果聚合键中含有NULL值，那么所有的NULL数据会分成单独一组。</font></p><ol><li><p><b>在SELECT子句中不能书写多余的列。</b><br>通过某个聚合键将表分组后，结果中的一行数据就代表一组。<font color="red"><b>在使用GROUP BY子句时，SELECT子句中不能出现聚合键以外的列名</b></font>在使用COUNT这样的聚合函数时，SELECT子句中的元素有严格的限制：</p><ol><li>常数</li><li>聚合函数</li><li>GROUP BY子句中指定的列名</li></ol></li><li><p><b>在GROUP BY子句中不能使用别名</b><br>SQL语句在DBMS内部的执行顺序导致了这种结果，后面会介绍具体执行的先后顺序。现在只需要知道，GROUP BY子句在SELECT子句之前执行，因此当GROUP BY子句执行时列的别名还没有被定义，因此不能使用。</p></li><li><p><b>GROUP BY子句的结果不能排序</b></p></li><li><p><b>不能在WHERE子句中使用聚合函数</b><br>只有SELECT子句和HAVING子句中能够使用聚合函数(后面会介绍HAVING子句)，WHERE子句中一定不要使用聚合函数。</p></li></ol><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a><font size="5">HAVING</font></h2><p>前面介绍了GROUP BY子句，可以得到记录分组后的结果，那如果我们想要选取符合条件的组，那又该怎么办呢？这里不能使用WHERE子句，因为<font color="red">WHERE只能指定记录(行)的条件，不能用来指定组的条件。</font>如果需要对组指定条件，就要用到HAVING子句。</p><ol><li><p><b>HAVING子句的构成要素</b><br>HAVING子句和包含GROUP BY时的SELECT子句一样，子句的内容有着相同的限制</p><ol><li>常数</li><li>聚合函数</li><li>GROUP BY子句中指定的列名</li></ol></li><li><p><b>HAVING和WHERE</b><br>HAVING子句和WHERE子句的作用不同，前者用于指定组的条件，和GROUP BY子句搭配使用，后者用于指定行的条件。</p><ul><li>WHERE子句=指定行对应的条件</li><li>HAVING子句=指定组对应的条件</li></ul></li></ol><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a><font size="5">ORDER BY</font></h2><p>使用ORDER BY子句可以对查询结果进行排序，具体用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY &lt;列名1&gt; ASC/DESC,&lt;列名2&gt; ASC/DESC,&lt;列名3&gt;......</span><br></pre></td></tr></table></figure><p>ASC:升序排列(需要升序排列时，可以省略该关键字)<br>DESC:降序排列<br>排序规则：<font color="red"><b>先以列1为标准对查询的结果进行排序，对于列1中相等的数据，以列2为基准进行排序…..</b></font></p><ol><li><b>在ORDER BY子句中可以使用别名</b><br>由于ORDER BY子句在SELECT子句之后执行，因此ORDER BY子句中可以使用列的别名</li><li><b>ORDER BY子句中可以使用SELECT子句中为使用的列和聚合函数</b></li></ol><h1 id="各子句执行顺序"><a href="#各子句执行顺序" class="headerlink" title="各子句执行顺序"></a>各子句执行顺序</h1><p>最后，再来看一下以上所有子句中各个子句的执行顺序</p><ol><li><b>FROM子句组装来自不同数据源的分组</b></li><li><b>WHERE对记录进行初步筛选</b></li><li><b>GROUP BY子句将WHERE删选后的数据划分为不同的分组</b></li><li><b>使用聚合函数进行运算</b></li><li><b>HAVING子句对GROUP BY子句得到的分组进行筛选，得到满足条件的分组</b></li><li><b>计算所有表达式</b></li><li><b>SELECT子句获取指定的列</b></li><li><b>ORDER BY子句对数据进行排序</b></li><li><b>LIMIT子句限制数据的个数</b></li></ol><p>以上就是查询语句所有子句的执行先后顺序。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL基础教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话技术--Cookie&amp;Session</title>
      <link href="/2019/09/08/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-Cookie-Session/"/>
      <url>/2019/09/08/%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF-Cookie-Session/</url>
      
        <content type="html"><![CDATA[<p><b>会话：一次会话中包含多次请求和响应。<br>在一次会话中，浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止<br>会话技术能够在一次会话的多次请求响应间共享数据</b></p><hr><a id="more"></a><h1 id="会话技术的实现方式"><a href="#会话技术的实现方式" class="headerlink" title="会话技术的实现方式"></a>会话技术的实现方式</h1><ul><li>客户端会话技术：Cookie</li><li>服务器端会话技术：Session</li></ul><h1 id="客户端会话技术–Cookie"><a href="#客户端会话技术–Cookie" class="headerlink" title="客户端会话技术–Cookie"></a>客户端会话技术–Cookie</h1><h2 id="Cookie使用步骤"><a href="#Cookie使用步骤" class="headerlink" title="Cookie使用步骤"></a><font size="5">Cookie使用步骤</font></h2><ol><li> 创建Cookie对象，绑定数据:<font color="blue">new Cookie(String name, String value)</font></li><li>发送Cookie对象::<font color="blue">response.addCookie(Cookie cookie)</font></li><li> 获取Cookie，拿到数据:<font color="blue">Cookie[]  request.getCookies()</font></li></ol><h2 id="Cookie实现原理"><a href="#Cookie实现原理" class="headerlink" title="Cookie实现原理"></a><font size="5">Cookie实现原理</font></h2><p><font color="red">基于响应头set-cookie和请求头cookie实现</font><br></p><ol><li>客户端和服务器第一次请求响应：服务器创建Cookie对象，并在set-cookie响应头将Cookie响应给浏览器</li><li>浏览器接收到服务器带有set-cookie头的响应后，将Cookie存储在浏览器中，当下一次浏览器向服务器发送请求时，会在请求头cookie头中附带这cookie</li><li>这样就实现了多次请求响应之间的数据共享</li></ol><hr><h2 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a><font size="5">Cookie的细节</font></h2><ul><li><font color="red">一次可以发送多个cookie：</font>在服务器端创建多个Cookie对象，多次调用response的addCookie方法将多个Cookie对象发送，但是如果两个Cookie的值相同，那么后加入的Cookie值会覆盖前面的值</li><li><font color="red">cookie在浏览器中保存时间</font><ul><li>默认情况下，当浏览器关闭后，Cookie数据被销毁(服务器关闭，Cookie仍然存在，因为Cookie存储在浏览器中)</li><li>持久化存储：调用Cookie对象的<font color="blue">setMaxAge(int seconds)</font>方法实现<ul>参数取值情况：<li><font color="red">正数</font>：将Cookie数据写到硬盘的文件中。<font color="red">持久化存储</font>。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值，即浏览器关闭后Cookie被销毁</li><li><font color="red">零：删除cookie信息</font></li></ul></li></ul></li><li><font color="red">cookie存储中文问题</font>:在tomcat 8 之前 cookie中不能直接存储中文数据。但是在tomcat8之后，支持直接存储中文，但是对于一些特殊字符(如空格等)，仍不能直接存储，需要借助URL编码才行(具体步骤下一篇文章说到)</li><li>cookie的共享<ul><li><font color="red">在一个tomcat服务器中部署了多个项目，在默认情况下，这些项目之间的Cookie是不能共享</font>的<br>但是可以通过Cookie对象的setPath(String path)方法来设置Cookie的共享范围<ul><li>默认情况下，设置的是当前项目的虚拟目录</li><li> 如果要在多个项目之间共享，则可以将path设置为"/"(“/”为服务器路径)</li></ul></li><li>不同服务器之间Cookie的共享<ul><li>setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</li><li>例如：设置path为".baidu.com"，那么tieba.baidu.com和news.baidu.com两个不同的服务器之间可以共享数据，因为它们的一级域名是.baidu.com</li></ul></li></ul></li></ul><hr><h2 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a><font size="5">Cookie的特点和作用</font></h2> <ul> <li>特点 <ul> <li>cookie存储数据在客户端浏览器</li><li>浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</li><li><font color="red">Cookie存储的键值对都是String类型</font></li> </ul></li><li>作用<ul><li>cookie一般用于存出少量的不太敏感的数据，这是因为Cookie的存储位置决定的，存储在客户端容易丢失和被篡改。</li><li>在不登录的情况下，完成服务器对客户端的身份识别</li></ul></li></ul><hr><h1 id="服务器端会话技术–Session"><a href="#服务器端会话技术–Session" class="headerlink" title="服务器端会话技术–Session"></a>服务器端会话技术–Session</h1><h2 id="Session使用步骤"><a href="#Session使用步骤" class="headerlink" title="Session使用步骤"></a><font size="5">Session使用步骤</font></h2><ol><li> 通过resquest获取Session对象：<font color="blue">request.getSession()</font></li><li>调用Session对象的方法存储数据(和request请求转发方法一样)<ul><li><font color="blue">Object getAttribute(String name)</font>：通过键获取值</li><li><font color="blue">void setAttribute(String name, Object value)</font>：将数据存储进Session对象</li><li><font color="blue">void removeAttribute(String name)</font>：通过键移除相应的键值对</li></ul></li></ol><h2 id="Session实现原理"><a href="#Session实现原理" class="headerlink" title="Session实现原理"></a><font size="5">Session实现原理</font></h2><ol><font color="red">Session的实现是依赖于Cookie的。</font><li>客户端第一次向服务器发送请求，服务器在服务器内部开辟一块内存空间，存放Session对象，并给该内存空间指定一个id</li><li>服务器在响应头set-cookie中设置JSESSIONID=id这个键值对发送给客户端</li><li>客户端接收到服务器的相应后，会将保存着Sessionid的Cookie对象保存在浏览器内存</li><li>当客户端下一次向服务器发送请求的时候，会带着Cookie一起(在请求头cookie中有JSESSIONID=id键值对)</li><li>服务器接收到请求后，得到JSESSIONID=id键值对的id后，会在内存中找到对应id的Session对象</li><li>这就是为什么说Session依赖于Cookie的原因以及多次请求响应之间共享数据的原理</li></ol><hr><h2 id="Session细节"><a href="#Session细节" class="headerlink" title="Session细节"></a><font size="5">Session细节</font></h2><ul><li><font color="red">当客户端关闭后，服务器不关闭，两次获取session不是同一个</font>：前面说到过，Session是依赖于Cookie的，Cookie在默认情况下当客户端浏览器关闭后是自动销毁的，因此Cookie中的键值对自然也就销毁了，所以两次获取的Session不是同一个，如果需要两次的Cookie是同一个<ul><li>创建一个Cookie对象，设置cookie的键为JSESSIONID，值为session对象的id</li><li>设置cookie的存活时间</li><li>那么在cookie存活时间内，服务器通过cookie请求头拿到session的id都是一样的，这样通过id找到的Session对象自然也是同一个</li></ul></li><li><font color="red">客户端不关闭，服务器关闭后，两次获取的session不是同一个</font>，因为服务器关闭后相应内存会被释放，Session自然也会被释放<br>但是一般我们需要获取到的Session对象是同一个，确保数据不丢失，<font color="red">tomcat会自动完成Session的钝化和活化</font><ul><li>Session的钝化：在服务器正常关闭之前，将session对象序列化到硬盘上</li><li>Session的活化：在服务器启动后，将session文件转化为内存中的session对象。</li></ul></li><li>Session被销毁<ul><li> 服务器关闭</li><li>session对象调用invalidate() 自杀</li><li>session默认失效时间 30分钟,可以tomcat服务器的web.xml配置文件中session-config设置所有项目的失效时间,也可以在项目的wen.xml配置文件单独配置项目的失效时间</li></ul></li></ul><hr><h2 id="Session的特点"><a href="#Session的特点" class="headerlink" title="Session的特点"></a><font size="5">Session的特点</font></h2><ul><li>用于一次会话的多次请求间共享数据，存储在服务器端</li><li><font color="red">session可以存储任意类型，任意大小的数据</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 会话技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器中的四种路径</title>
      <link href="/2019/09/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/09/08/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>在Web开发中，会很频繁的用到各种路径，路径又大致分为四种，分别是相对路径、绝对路径、虚拟路径、资源路径</p><hr><a id="more"></a># 相对路径<font color="red" size="4"><b>通过相对路径不能确定唯一资源</b></font><br>例如：./index.html<br>## <font size="5">相对路径的使用规则</font>以<font color="red" size="4"><i>"./"开头</i></font>,<br>在使用时先确定<font color="red"><b>当前资源和目标资源的之间的相对位置关系</b></font><br>如果两资源位于<font color="blue">同一级目录</font>：./+目标资源名称<br>./可以不加，默认有./<br>如果目标资源<font color="blue">位于上一级目录</font>：../+目标资源名称<hr><h2 id="如何确定当前资源和目标资源的关系"><a href="#如何确定当前资源和目标资源的关系" class="headerlink" title="如何确定当前资源和目标资源的关系"></a><font size="5">如何确定当前资源和目标资源的关系</font></h2><ol><li>对于<font color="blue">src目录下的资源</font>，可以用<font color="red">request.getRequestURL()</font>来得到该资源的位置<br>src下的java资源的URI都是<font color="red">虚拟路径+资源名称</font>无论该java文件位于src下的哪一级目录，只要在src目录里，都是这个形式。<br><b><i>这里说的资源名称并不是实际的java类名，而是@WebServlet中的资源名称，服务器通过这个资源名称找到实际的类。</i></b></li><li>对于<font color="blue">web目录下的资源</font>，如果直接在web目录下，那么资源的URI就是<font color="red">虚拟路径+/文件名称</font><br>如果在web目录下的其他目录，那么资源的URI就是<font color="red">虚拟路径+/目录名称+/文件名称</font>，有几级目录写几级目录。<hr></li></ol><h1 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h1><p><font color="red" size="4"><b>通过绝对路径确定唯一资源</b></font><br><br>例如：<a href="http://localhost/response/responseDemo2或者/response/responseDemo2" target="_blank" rel="noopener">http://localhost/response/responseDemo2或者/response/responseDemo2</a><br><br><font color="red">协议名+ip地址+端口号+虚拟路径+文件资源</font></p><hr><h1 id="两种路径使用规则"><a href="#两种路径使用规则" class="headerlink" title="两种路径使用规则"></a>两种路径使用规则</h1><p><font color="red"><b>规则：判断要定义的路径是给谁用的，即判断请求将来从哪发出</b></font><br></p><ol><li>给客户端浏览器使用<br> 需要加虚拟目录(项目的访问路径,查看项目的xml配置文件)<br> 例如：&lt;\a&gt;标签，&lt;\form&gt;，重定向等从浏览器发出，需要加虚拟路径</li><li>给服务器使用<br>不需要加虚拟目录<br>例如：请求转发就是服务器内部的资源跳转，不需要加虚拟路径，直接写资源名称就可以了</li></ol><hr><h1 id="虚拟路径"><a href="#虚拟路径" class="headerlink" title="虚拟路径"></a>虚拟路径</h1><p>虚拟路径代表的是项目实际部署的位置，服务器通过虚拟路径能够映射到项目实际部署的位置<br>通过查看<b>项目</b>的xml文件可以发现:<br><font color="red">&lt;\Context path=”虚拟路径” docBase=”资源在电脑上存储的位置” /&gt;</font><br>这就是配置文件的内容，我们在浏览器输入的是Contextpath，也就是项目的虚拟路径，服务器就通过该虚拟目录映射到后面项目部署的真实目录</p><h2 id="虚拟路径的好处"><a href="#虚拟路径的好处" class="headerlink" title="虚拟路径的好处"></a><font size="5">虚拟路径的好处</font></h2><ul><li>虚拟目录的名称通常要比物理目录的名称易记，因此更便于用户访问。</li><li> 使用虚拟目录可以提高安全性，因为客户端并不知道文件在服务器上的实际物理位置，所以无法使用该信息来修改服务器中的目标文件。</li><li>使用虚拟目录可以更方便地移动网站中的目录，只需更改虚拟目录物理位置之间的映射，无需更改目录的URL。</li><li>使用虚拟目录可以发布多个目录下的内容，并可以单独控制每个虚拟目录的访问权限。 使用虚拟目录可以均衡Web服务器的负载，因为网站中资源来自于多个不同的服务器，从而避免单一服务器负载过重，响应缓慢。</li></ul><hr><h1 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h1><p>资源路径也不是文件的真实路径，它和真是路径之间存在着映射关系，服务器可以通过资源路径找到文件<br><a href="https://blog.csdn.net/weixin_42387411/article/details/100191979" target="_blank" rel="noopener">link</a><br>这篇文章提到了配置Servlet的方法，一种是通过web.xml来配置，通过这种方法很容易理解资源路径和文件路径的映射关系，服务器通过资源路径映射到实际文件，通过@WebServlet配置原理一样</p><hr><p><b><i>我们在浏览器输入的是项目的URL是由协议名+ip地址+端口号+虚拟路径+文件资源组成，</i></b><br><b><i>服务器会通过虚拟路径找到项目在电脑上部署的位置，通过文件资源路径找到文件在电脑上的实际位置</i></b></p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServletContext对象</title>
      <link href="/2019/09/08/ServletContext%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/08/ServletContext%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><b>ServletContext对象，代表了整个web应用，可以和程序的容器(服务器)来通信</b></p><h1 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h1><ul><li>通过request对象获取:<font color="blue">request.getServletContext()</font></li><li>通过HttpServlet获取:<font color="blue">this.getServletContext();</font></li></ul><a id="more"></a><h1 id="ServletContext对象的功能"><a href="#ServletContext对象的功能" class="headerlink" title="ServletContext对象的功能"></a>ServletContext对象的功能</h1><ul><li> 获取MIME类型(文后将什么是MIME类型):<font color="blue">String getMimeType(String file)</font><br>获取到数据的类型后，可以<font color="red">用于设置响应头content-type</font>的值<br>获取方法：<font color="blue">String getMimeType(String file)；</font></li><li>域对象：共享数据，前面说到，ServletContext代表了整个web应用，<font color="red">因此ServletContext对象中存放的数据整个web应用的资源都可以访问和修改</font><br>方法<font color="blue">和request域对象的三个方法一样，只是两者的作用范围不同</font></li><li><i>动态的获取文件的真实(服务器)路径</i><ul><font color="red" size="4"><b><i>方法：String getRealPath(String path)</i><li>文件直接位于web目录下时：<font color="blue">context.getRealPath("/+文件名称");</font></li><li>文件位于web目录下下的目录a中时：<font color="blue">context.getRealPath("/a/+文件名称");</font></li><li>文件直接位于src目录下时：<font color="blue">context.getRealPath("/WEB-INF/classes+文件名称");</font></li></b></font></ul>以上可以通过查看tomcat项目的层次结构，以<font color="red" size="5"><i>tomcat项目的web目录为基准</i></font></li></ul><hr><font size="5" color="red"><b><i>tomcat项目目录位于IDEA工作空间目录的\out\artifacts下</i></b></font><hr><h1 id="MIME类型"><a href="#MIME类型" class="headerlink" title="MIME类型"></a>MIME类型</h1><p><font color="red" size="4"><i>MIME类型:在互联网通信过程中定义的一种文件数据类型</i></font><br><br>MIME类型的格式：<font color="red">大类型/小类型</font>&nbsp;&nbsp;&nbsp;&nbsp;例如：text/html、image/jpg<br></p><h2 id="getMimeType方法获取MIME类型的原理"><a href="#getMimeType方法获取MIME类型的原理" class="headerlink" title="getMimeType方法获取MIME类型的原理"></a><font size="5">getMimeType方法获取MIME类型的原理</font></h2><p>在web.xml配置文件中，tomcat定义了上千种MIME类型和文件后缀名的对应关系，而ServletContext又可以和服务器通信，所以ServletContext的getMimeType实际上是通过文件的后缀名来映射获取的文件的MIME类型。</p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求转发和重定向</title>
      <link href="/2019/09/08/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2019/09/08/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p>目前已经学习了两种资源跳转的方式：分别是request对象的请求转发和response的重定向，那么这两者各自有什么特点以及它们之间的区别是什么呢？</p><hr><a id="more"></a><h1 id="request请求转发"><a href="#request请求转发" class="headerlink" title="request请求转发"></a>request请求转发</h1><p><b>一种在服务器内部的资源跳转方式</b><br>举个例子：浏览器向服务器发出请求，服务器中的AServlet收到了请求，但是AServlet无法单独完成这个请求，如果要完成这个请求，还需要服务器内BServlet的参与，这时候就会用到请求转发，AServlet执行完自己能执行的部分后跳转到BServlet中继续执行，(这中间还涉及到了共享数据，文章后面会将)</p><h2 id="请求转发的特点"><a href="#请求转发的特点" class="headerlink" title="请求转发的特点"></a><font size="5">请求转发的特点</font></h2><ul><li><font color="red">浏览器地址栏路径不发生变化</font>：就是说，浏览器请求访问AServlet，Aservlet执行完自己能执行的部分后跳转到BServlet，在这个过程中浏览器地址栏的路径还是AServlet的路径，并不会发生改变</li><li>只能转发到当前<font color="red">服务器内部资源</font>中。</li><li>转发是<font color="red">一次请求</font>：从上面的例子可以看出，整个转发的过程中，<font color="red">无论在服务器内部资源跳转多少次，浏览器只发出过一次请求</font>，而服务请经过多次跳转处理完浏览器的请求后只会做出一次响应</li></ul><hr><h2 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a><font size="5">共享数据</font></h2><p>上面说到了，AServlet和BServlet一起完成浏览器的请求，那么<font color="blue">这两者之间必定是有数据交互</font>的，因为AServlet要告诉BServlet自己做了哪些部分(修改了那些数据..)，并将这些部分共享给BServlet<br><br><i><font color="red" size="4">说共享数据之前，先说一个概念</font></i><br><font color="red">域对象：</font>一个有作用范围的对象，可以在范围内共享数据<br><font color="red">request域：</font>代表一次请求的范围，即在一个请求的范围内各个服务器资源可以共享数据。因为上面说到了请求转发这个过程是一次请求响应的过程，所以<font color="blue">请求转发过程中的多个资源可以共享数据</font><br></p><ol><li>存储数据，在当前资源中调用此方法(<font color="red">转发之前调用</font>)<font color="blue">void setAttribute(String name, Object o)</font><br><font color="red">参数：</font><br>String name：给数据起一个名，在后面取出数据用到<br>Object o：要共享的数据</li><li>在跳转后的资源调用此方法，可以达到共享数据的目的：<font color="blue">Object getAttribute(String name)</font><br><font color="red">参数：</font><br>String name：存储数据时起的名</li></ol>还有一个相关的方法：通过键来移除键值对<font color="blue">void removeAttribute(String name)</font><hr><h1 id="response重定向"><a href="#response重定向" class="headerlink" title="response重定向"></a>response重定向</h1><p><b>一种资源跳转的方式，不限于服务器内部，可以跳转到其他服务器资源(如跳转到百度)</b></p><h2 id="重定向实现步骤"><a href="#重定向实现步骤" class="headerlink" title="重定向实现步骤"></a><font size="5">重定向实现步骤</font></h2><ol><li>设置状态码为302(代表重定向)</li><li>设置响应头<font color="blue">location：</font>response.setHeader("location","目的资源的路径");</li></ol>以上是分步实现，其实一个方法就能够完成上述步骤调用response的sendRedirect方法，方法中传递跳转资源的路径<font color="red">response.sendRedirect("https://www.baidu.com");</font><hr><h2 id="重定向的原理"><a href="#重定向的原理" class="headerlink" title="重定向的原理"></a><font size="5">重定向的原理</font></h2><ol><li>浏览器向服务器发出请求，AServlet接收到了这个请求,AServlet表示无法处理服务器的这个请求，但AServlet却知道BServlet(可以是服务器内部的资源也可以是其他服务器的资源)</li><li>所以AServlet在在响应消息中干了两件事情<ol><li>设置状态码为302，告诉服务器重定向</li><li>告诉浏览器BServlet的路径，(设置响应头location为BServlet的路径)</li></ol></li><li>浏览器收到了AServlet的响应消息后，根据AServlet给出的location路径去访问BServlet</li></ol><hr><h2 id="重定向的特点"><a href="#重定向的特点" class="headerlink" title="重定向的特点"></a><font size="5">重定向的特点</font></h2><ul><li>地址栏发生变化：在资源跳转的过程中，浏览器地址栏会发生变化</li><li>重定向<font color="blue">可以访问其他站点(服务器)的资源</font></li><li>重定向是<font color="blue">两次请求</font>。不能使用request对象来共享数据</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>response输出中文乱码</title>
      <link href="/2019/09/08/response%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
      <url>/2019/09/08/response%E8%BE%93%E5%87%BA%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><b>使用response对象设置响应体时有两个步骤：<b></b></b></p><ol><li>获取输出流(字节流或字符流)</li><li>使用输出流，将数据输出到客户端浏览器<br>这时候如果传输的数据是中文，输出到浏览器就会<font color="red">乱码</font><hr><a id="more"></a></li></ol><h1 id="乱码原因"><a href="#乱码原因" class="headerlink" title="乱码原因"></a>乱码原因</h1><p>首先，要知道乱码的根本原因是什么，乱码的根本原因在于<font color="red">编码和解码使用的字符集不一样</font>。那么在从服务器输出数据到客户端的过程中，有几次编码和解码过程？又分别是在哪里执行的？<br><br>在输出数据的过程中，有<font color="blue">一次编码</font>，是<font color="red"><i>tomcat执行</i></font>的，它按照自己的字符集将数据编码后发送给客户端浏览器<br>有<font color="blue">一次解码</font>，是<font color="red"><i>浏览器执行</i></font>的，浏览器将接收的数据按照自己的字符集解码后打印在屏幕上。<br>而<font size="4" color="red"><i>tomcat的默认编码是ISO-8859-1</i></font>，<font size="4" color="red"><i>浏览器的默认编码是操作系统的编码，也就是GBK</i></font>，两者的编码格式不一样，就造成了中文乱码问题<br></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>解决方案不止一种，记录一种比较简单地<br><br>使用response设置响应头的方法来设置<font color="blue"> Content-Type</font></p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>在获取输出流<font color="red">之前</font>(一定是之前)<br>设置响应头content-type<font color="blue">response.setHeader(“content-type”,”text/html;charset=utf-8”);</font><br>这个方法<font size="4" color="red"><i>不仅可以设置流的编码，还可以告诉浏览器发送数据的编码方式，并建议浏览器使用同样的字符集解码，这样就解决了乱码的问题</i></font><br><br>由于只需要设置content-type这个响应头，所以有另一个方法更为简单<br><font color="blue">response.setContentType(“text/html;charset=utf-8”);</font></p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
            <tag> 乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议概述--request和response对象</title>
      <link href="/2019/09/08/Http%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0-request%E5%92%8Cresponse%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/08/Http%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0-request%E5%92%8Cresponse%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><b>首先要知道request对象和response对象是<font color="red">由服务器创建</font>的，我们只是使用并不创建<br>request对象是来<font color="blue">获取请求消息</font>，<br>response对象是来<font color="blue">设置响应消息</font></b><hr></p><a id="more"></a><h1 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h1><h2 id="request继承结构"><a href="#request继承结构" class="headerlink" title="request继承结构"></a><font size="5">request继承结构</font></h2><p>&nbsp;&nbsp;&nbsp;&nbsp;<font color="blue">ServletRequest(接口)–&gt;HttpServletRequest(接口)–&gt;RequestFacade 类(tomcat实现)</font></p><hr><h2 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a><font size="5">request功能</font></h2><h3 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a><font size="5">获取请求消息数据</font></h3><ul><ul><li><font face="宋体"><b>获取请求行数据:</b></font><br>这是一个GET请求方式的请求行：<font color="red">GET /day14/demo1?name=zhangsan HTTP/1.1</font><ul><li>获取请求方式 ：<font color="blue">String getMethod() </font>-->上例得到结果：GET</li><li>获取虚拟目录<font color="red">(常用)</font>：<font color="blue">String getContextPath() </font>-->上例得到结果：/day14</li><li> 获取Servlet路径: <font color="blue">String getServletPath()</font>-->上例得到结果：/demo1</li><li>获取get方式请求参数：<font color="blue">String getQueryString()</font>-->上例得到结果：name=zhangsan</li><li>获取请求URI<font color="red">(常用)</font>(有两个方法)<ul><li><font color="blue">String getRequestURI()</font>-->上例得到结果：/day14/demo1</li><li><font color="blue">StringBuffer getRequestURL()</font><br>上例得到结果 :http://localhost/day14/demo1</li></ul></li><li>获取协议及版本：<font color="blue">String getProtocol()</font>-->上例得到结果：HTTP/1.1</li><li>获取客户机的IP地址：<font color="blue">String getRemoteAddr()</font></li></ul></li><br><li><font face="宋体"><b>获取请求头数据:</b></font><ul><li>通过请求头的名称获取请求头的值<font color="red">(常用)</font>:<font color="blue">String getHeader(String name)</font></li><li>获取所有的请求头名称:<font color="blue">Enumeration<string> getHeaderNames()</string></font></li></ul></li><br><li><font face="宋体"><b>获取请求体数据:</b></font><br><font color="red">只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</font><ul><li> 获取流对象<ul><li>获取字符输入流，只能操作字符数据:<font color="blue">BufferedReader getReader()</font></li><li>获取字节输入流，可以操作所有类型数据:<font color="blue">ServletInputStream getInputStream()</font></li></ul></li></ul></li></ul><hr><h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a><font color="red" size="5">其他功能</font></h3><ul>因为对于不同的请求方式，它们的请求参数所在位置不同，GET方式请求参数在请求行中，POST方式请求参数封装在请求体中，所以服务器在获取请求参数的时候，需要分别在doGet和doPost方法中写不同的逻辑代码来获取请求参数，比较麻烦，因此就有一种通用的获取请求参数的方法<li><font face="宋体"><b>获取请求参数通用方式</b></font><ul><li>根据参数名称获取参数值:<font color="blue">String getParameter(String name)</font></li><li>根据参数名称获取参数值的数组<font color="red">(多选框)</font>:<font color="blue">String[] getParameterValues(String name)</font></li><li>获取所有请求的参数名称:<font color="blue">Enumeration<string> getParameterNames()</string></font></li><li>获取所有参数的map集合:<font color="blue">Map'<'string,string[]> getParameterMap()</'string,string[]></font></li></ul><br></li><li><font face="宋体"><b>请求转发:一种在<font color="red">服务器内部</font>的资源跳转方式</b></font><ol><li>通过request对象获取请求转发器对象:<font color="blue">RequestDispatcher getRequestDispatcher(String path)</font></li><li>使用RequestDispatcher对象来进行转发:<font color="blue">forward(ServletRequest re, ServletResponse res)</font></li><font color="red">注意:</font>path是要跳转的资源的路径，</ol></li><li>获取ServletContext(后面博客会详细讲到): <font color="blue">ServletContext getServletContext()</font></li></ul></ul><br><hr><font color="red" face="宋体" size="5"><i>request的请求转发和资源共享以及response的重定向，它们各自的特点和区别会新开一篇博客</i></font><hr><h1 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象<br></h1><p>response功能:<font color="red">设置响应消息</font></p><ul><li><font face="宋体"><b>设置响应行(设置状态码):</b></font><font color="blue">setStatus(int sc)</font></li><li><font face="宋体"><b>设置响应头:</b></font><font color="blue">setHeader(String name, String value) </font></li><li><font face="宋体"><b>设置响应体:</b></font><ol>使用步骤<li>获取输出流<ul><li>字符输出流:<font color="blue">PrintWriter getWriter() </font></li><li>字节输出流:<font color="blue">ServletOutputStream getOutputStream()</font></li></ul></li><li>使用输出流，将数据输出到客户端浏览器<br></li></ol></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议概述--请求响应模型</title>
      <link href="/2019/09/08/Http%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/09/08/Http%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p><b>Http–Hyper Text Transfer Protocol 超文本传输协议<b><br><font color="red"><b>传输协议</b></font>：定义了客户端和服务器端通信时，发送数据的格式</b></b></p><hr><a id="more"></a># Http协议的特点<ul><li>基于TCP/IP的高级协议,<font color="blue">默认端口是80</font></li><li>基于请求/响应模型的:<font color="blue">一次请求对应一次响应</font></li><li>无状态的：每次请求之间<font color="blue">相互独立，不能交互数据</font></li></ul><h1 id="Http协议的历史版本"><a href="#Http协议的历史版本" class="headerlink" title="Http协议的历史版本"></a>Http协议的历史版本</h1><ul><li><input disabled type="checkbox"> 1.0版本<br>每次请求响应之后都会断开连接，下一次请求响应又会建立新的连接，即<font color="blue">每次请求响应都会建立新的连接</font><br>缺点：连接会被多次建立和多次丢弃掉，影响传输速度，消耗资源<br></li><li><input disabled type="checkbox"> 1.1版本<br>在一次请求响应之后，连接不会立刻断开，而是会等待一定的时间，如果在这一定时间内，还有其他请求，就会默认使用该连接，而不去建立新的连接，这样就实现了<font color="red"><b>连接的复用</b></font><hr>上面说了，Http定义了客户端和服务器通信时传输数据的格式，而传输数据分为两种：<br><b>客户端向服务器传输数据：</b><font color="red">请求消息数据</font><br><b>服务器向客户端传输数据：</b><font color="red">相应消息数据</font></li></ul><h1 id="Http请求消息数据格式"><a href="#Http请求消息数据格式" class="headerlink" title="Http请求消息数据格式"></a>Http请求消息数据格式</h1> <ul><li><font face="宋体"><b>请求行:</b></font><font color="blue">请求方式 请求url 请求协议/版本</font><br>例如：GET /login.html    HTTP/1.1<br><font color="red">请求url=虚拟路径+Servlet资源路径</font></li><li><font face="宋体"><b>请求头：</b></font>客户端浏览器告诉服务器一些信息<br>请求头消息以键值对的方式给出：<font color="blue">请求头名称：请求头值</font><br>常见的请求头：<ul><li>User-Agent：浏览器告诉服务器，使用的<font color="red">浏览器版本信息</font>,可以在服务器端获取该头的信息，<font color="red">解决浏览器的兼容性问题(可以在服务器端对不同的服务器写不同的逻辑代码，然后根据该头的内容获取浏览器名称，执行对应浏览器的代码)</font></li><li>Referer：告诉服务器，当前请求从哪里来？可以用来<font color="red">防盗链和统计工作</font></li></ul></li><li><font face="宋体"><b>请求空行：</b></font>一个空行，用于分割请求头和请求体</li><li><font face="宋体"><b>请求体(正文)：</b></font>封装<font color="red">POST</font>请求消息的请求参数</li></ul><hr>对于请求行中的请求方式，http协议7中请求方式，常用的有2种<ul><li>GET:<br><font color="red">请求参数在请求行</font>中，跟在url后。<br>请求的url长度有限制的<br>不太安全</li><li>POST:<br><font color="red">请求参数在请求体</font>中<br>请求的url长度没有限制的<br>相对安全</li></ul><hr><h1 id="Http响应消息数据格式"><a href="#Http响应消息数据格式" class="headerlink" title="Http响应消息数据格式"></a>Http响应消息数据格式</h1>  <ul><li><font face="宋体"><b>响应行:</b></font><font color="blue">协议/版本 响应状态码 状态码描述</font><br>例如：HTTP/1.1 200 OK<br><font color="red">请求url=虚拟路径+Servlet资源路径</font></li><li><font face="宋体"><b>响应头：</b></font>服务器告诉浏览器一些信息<br>响应头消息以键值对的方式给出：<font color="blue">响应头名称：响应头值</font><br>常见的响应头：<ul><li>Content-Type：服务器告诉客户端本次<font color="red">响应体数据格式以及编码格式</font></li><li>Content-disposition：服务器告诉客户端<font color="red">以什么格式打开响应体数据</font><br><ul>常见有两种取值<li>in-line:默认值,在<font color="blue">当前页面内打开</font></li><li>attachment;filename=xxx：以<font color="blue">附件形式打开响应体，用于文件下载</font><br>注意：这个filename是浏览器在弹出框显示，和服务器中要下载的文件名无关</li></ul></li></ul></li><li><font face="宋体"><b>响应空行：</b></font>一个空行，用于分割响应头和响应体</li><li><font face="宋体"><b>响应体(正文)：</b></font>传输的数据</li></ul><hr><h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a><font size="5">响应状态码</font></h2><p>服务器告诉客户端浏览器本次请求和响应的一个状态。<br><br><font color="red"><b>状态码都是3位数字</b></font><br></p><ul><li>1xx：服务器接收客户端消息，但<font color="blue">没有接受完成</font>，等待一段时间后，发送1xx多状态码</li><li>2xx：本次请求响应成功。代表码：200</li><li>4xx：<font color="red">客户端错误。</font><ul><li>404:请求路径没有对应的资源--><font color="blue">路径错误</font></li><li>405:请求方式没有对应的doxxx方法-->比如浏览器请求方式是Post方式，而客户端没有doPost方法</li></ul></li><li>5xx：<font color="red">服务器端错误。</font>代表码：500(服务器内部出现异常)</li></ul> ]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet基础学习</title>
      <link href="/2019/09/08/Servlet%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/08/Servlet%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><b><font size="5">Servlet：server applet</font></b><br>官方给出的解释是<font color="red">运行在服务器端的小程序</font></p><hr><a id="more"></a># Servlet的本质<p>浏览器通过<font color="red">ip和端口</font>来找到服务器，服务器中的资源分为两类</p><ol><li>静态资源，</li><li>动态资源<p>所谓<b>动态资源</b>，就是不同的用户访问到的页面是不一样的，这说明<font color="red">动态资源中肯定有一些逻辑性</font>，来实现不同的用户访问同样的资源看到的是不一样的。而这些逻辑性，就要通过Java代码(Java类)来实现。<font color="red" size="4"><i>也就是说浏览器请求动态资源的时候，访问的就是服务器上的Java类</i></font><br></p>要注意的是：这里说的Java类没有main方法，不能自己运行，需要<font color="red">依赖服务器才能运行</font>，相当于Tomcat(服务器软件)来执行它。那么问题来了，如果要<font color="red">Tomcat能够认识这个类并执行这个类，这个类就需要遵守一定的规则，</font>在Java中，<b>规则==接口</b><br><hr>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="blue" size="5" face="楷体">上面说的规则，就是Servlet，它本质上就是一个接口，定义了Java类被tomcat识别的规则</font><hr></li></ol><h1 id="Servlet的使用"><a href="#Servlet的使用" class="headerlink" title="Servlet的使用"></a>Servlet的使用</h1><ol><li>创建JavaEE项目</li><li> 在<font color="red">src目录内</font>定义一个类，实现Servlet接口</li><li>实现接口中的抽象方法</li><li>配置Servlet(一共有两种方法，这里先记录第一种)<font color="red">在web.xml中配置</font>                                <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;全类名(包名+类名)&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;demo1&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/demo1(Servlet资源路径)&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>在web.xml中加上以上内容</p></li><b><font color="red">Servlet配置原理</font></b><ol><li> 当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的url-pattern标签体内容。</li><li>如果有，则通过映射找到对应的servlet-class全类名</li><li>tomcat会将字节码文件加载进内存，并且<font color="red">创建其对象</font><br><font color="red">注意：这个实现了Servlet接口的类是由Tomcat通过反射创建的对象，并不是由程序员创建的</font></li><li>调用对象的方法</li></ol></ol><hr><h1 id="Servlet的生命周期"><a href="#Servlet的生命周期" class="headerlink" title="Servlet的生命周期"></a>Servlet的生命周期</h1><ol><li><b>被创建：</b>执行init()方法，<font color="blue">该方法只执行一次</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么Servlet在什么时候被创建呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认情况下，在<font color="red">资源第一次被访问时，Servlet被创建</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以在web.xml文件中配置改变Servlet被创建的时机<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上面说到的<font color="red">servlet标签</font>下配置，具体下面有图</li><li><b>提供服务：</b>执行service方法，可以执行多次<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;<font color="blue">每次访问Servlet时，Service方法都会被调用一次。</font></li><li><b>被销毁：</b>执行destroy方法，只<font color="blue">执行一次</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只有服务器<b>正常关闭</b>时，才会执行destroy方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destroy方法在Servlet被<font color="red">销毁之前</font>执行，一般用于释放资源</li></ol><p><b><font color="red">设置Servlet被创建的时机</font></b><br>使用<font color="red">load-on-startup</font>标签，这是一个围堵标签，当<font color="red">标签的值为负数</font>的时候，默认第一次被访问时创建<br>当<font color="red">标签的值为正数或0</font>的时候，服务器启动时创建</p><p><img src="https://img-blog.csdnimg.cn/20190902105855215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="上接设置Servlet被创建的时机"></p><hr><p><b><font color="red">注解配置Servlet</font></b><br><i>在<font color="red">Servlet3.0以后</font>，可以使用注解配置Servlet，相比较在web.xml文件中配置更加方便</i><br><br><b>使用方法：</b><br>在类上加注解<font color="red">@WebServlet(“资源路径”)</font>，这样就可以通过注解的资源路径找到相应的类，直接将类加载进内存<br></p><hr>Servlet体系结构Servlet是一个接口，里面有5个抽象方法，每次继承Servlet接口的时候，都需要重写这5个抽象方法，而实际上，很多时候并用不到其中的有些方法，所以每次都要重写，很麻烦<br><h1 id="Servlet的子类"><a href="#Servlet的子类" class="headerlink" title="Servlet的子类"></a>Servlet的子类</h1><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><p>GenericServlet也是一个<font color="red">抽象类，</font>将Servlet接口中其他的方法做了<b>默认空实现</b>，<font color="red">只将service()方法作为抽象</font>，将来定义Servlet类时，可以继承GenericServlet，只实现service()方法即可(但实际上，这种方法使用较少)<br></p><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><h3 id="HttpServlet出现原因"><a href="#HttpServlet出现原因" class="headerlink" title="HttpServlet出现原因"></a><font size="5">HttpServlet出现原因</font></h3><p><font color="blue">HttpServlet extends GenericServlet</font><br><b>该类是对Http协议的一种封装和描述</b><br>对于一般的Servlet实现类，在service方法中通过一些操作获取浏览器的数据，但在获取数据之前，需要判断浏览器的请求方式是get方式还是put方式，因为两种方式封装数据的位置和格式是不一样的，对于不同的方式需要进行不同的逻辑处理。<br>也就是说，我们需要在service方法里作两步操作：</p><ol><li><b>判断浏览器请求方式</b></li><li><b>根据不同的请求方式编写不同的逻辑代码</b><hr></li></ol><h3 id="HttpServlet实现原理"><a href="#HttpServlet实现原理" class="headerlink" title="HttpServlet实现原理"></a><font size="5">HttpServlet实现原理</font></h3><p>这个<b>过程比较麻烦，但却是所有的service方法都必须要做<b>的一个过程，因此sun公司就提供了HttpServlet这个类。<br><b>在HttpServlet类的Service方法中，已经写好了判断浏览器请求方式的逻辑代码，我们需要做的就是重写相应doxxx()方法，service方法判断请求方式后，会根据判断的结果调用我们重写的doxxx()方法<b><br><img src="https://img-blog.csdnimg.cn/20190902140302516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019090214065965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上是HttpServlet类service的源码，可以发现，<strong>HttpServlet中的service方法主要用于判断浏览器的请求方式，然后根据不同的请求方式调用相应的doxxx()方法，我们只需要重写这些方法，省略了判断请求方式的步骤</strong></b></b></b></b></p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet类 </tag>
            
            <tag> HttpServlet类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础--操作数据库和表</title>
      <link href="/2019/09/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8/"/>
      <url>/2019/09/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><font size="5">这里主要总结两类SQL语句</font></p><p>DDL和DML，即<font color="red">操作数据库和表</font>的语句以及对<font color="red">表中数据进行增删改操作</font>的语句</p><hr><a id="more"></a><h1 id="DDL语句"><a href="#DDL语句" class="headerlink" title="DDL语句"></a>DDL语句</h1><p>这类语句又分为两部分</p><ol><li>操作数据库(CRUD)</li><li>操作表(CRUD)</li></ol><h2 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h2><h3 id="Create-创建"><a href="#Create-创建" class="headerlink" title="(Create)创建"></a><font size="5">(Create)创建</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名称;</span><br><span class="line">create database if not exists 数据库名称;</span><br><span class="line">create database 数据库名称 character set 字符集名;</span><br><span class="line"></span><br><span class="line">//创建db4数据库，判断是否存在，并指定字符集为gbk</span><br><span class="line">create database if not exists db4 character set gbk;</span><br></pre></td></tr></table></figure><h3 id="Retrieve-查询"><a href="#Retrieve-查询" class="headerlink" title="(Retrieve)查询"></a><font size="5">(Retrieve)查询</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查询所有数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">查询某个数据库的字符集</span><br><span class="line">show create database 数据库名称;</span><br></pre></td></tr></table></figure><h3 id="Update-修改"><a href="#Update-修改" class="headerlink" title="(Update)修改"></a><font size="5">(Update)修改</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//修改数据库的字符集</span><br><span class="line">alter database 数据库名称 character set 字符集名称;</span><br></pre></td></tr></table></figure><h3 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="(Delete)删除"></a><font size="5">(Delete)删除</font></h3><ol><li><p><b>删除数据库</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名称;</span><br><span class="line">drop database if exists 数据库名称;</span><br></pre></td></tr></table></figure></li><li><p><b>使用数据库</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查询当前正在使用的数据库名称</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">//使用数据库</span><br><span class="line">use 数据库名称;</span><br></pre></td></tr></table></figure></li></ol><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><h3 id="Create-创建-1"><a href="#Create-创建-1" class="headerlink" title="(Create)创建"></a><font size="5">(Create)创建</font></h3><ol><li><p><b>创建表</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">    列名1  数据类型    该列所需要的约束，</span><br><span class="line">    列名2  数据类型    该列所需要的约束，</span><br><span class="line">    列名3  数据类型    该列所需要的约束</span><br><span class="line">);</span><br><span class="line">最后一列不加逗号</span><br></pre></td></tr></table></figure></li><li><p><b>复制表</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名1 LIKE 表名2;</span><br><span class="line">以上语句的作用是：创建一个新表，和原来的表有相同的列，但是新表中没有任何数据</span><br><span class="line">如果想要将原来表中的数据复制到新表中:</span><br><span class="line"></span><br><span class="line">INSERT TO 表名1 SELECT * FROM 表名2;</span><br></pre></td></tr></table></figure></li></ol><p>以上两个SQL语句能够得到一张和原来一模一样的新表。</p><h3 id="数据库数据类型"><a href="#数据库数据类型" class="headerlink" title="数据库数据类型"></a><font size="5">数据库数据类型</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int：整数类型</span><br><span class="line">double:小数类型</span><br><span class="line">date:日期，只包含年月日，形如yyyy-MM-dd</span><br><span class="line">datetime:日期，包含年月日时分秒yyyy-MM-dd HH:mm:ss</span><br><span class="line">timestamp:时间戳类型，包含年月日时分秒yyyy-MM-dd HH:mm:ss</span><br><span class="line">如果不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</span><br><span class="line">char：定长字符串，在使用的时候需要指定长度</span><br><span class="line">varchar：可变长字符串，在使用的时候需要指定长度</span><br></pre></td></tr></table></figure><h3 id="Retrieve-查询-1"><a href="#Retrieve-查询-1" class="headerlink" title="(Retrieve)查询"></a><font size="5">(Retrieve)查询</font></h3><ol><li><p><b>查询某个数据库中所有的表名称</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW tables;</span><br></pre></td></tr></table></figure></li><li><p><b>查询表结构</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Update-修改-1"><a href="#Update-修改-1" class="headerlink" title="(Update)修改"></a><font size="5">(Update)修改</font></h3><ol><li><p><b>修改表名</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 RENAME TO 新的表名;</span><br></pre></td></tr></table></figure></li><li><p><b>修改表的字符集</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 CHARACTER SET 字符集名称;</span><br></pre></td></tr></table></figure></li><li><p><b>增删列</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//添加列</span><br><span class="line">ALTER TABLE 表名 ADD 列名 数据类型;</span><br><span class="line"></span><br><span class="line">//删除列</span><br><span class="line">ALTER TABLE 表名 DROP 列名;</span><br></pre></td></tr></table></figure></li><li><p><b>修改列的类型</b></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 列名 新数据类型;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Delete-删除-1"><a href="#Delete-删除-1" class="headerlink" title="(Delete)删除"></a><font size="5">(Delete)删除</font></h3><ol><li><b>判断数据库存在，存在再删除</b><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS 表名;</span><br></pre></td></tr></table></figure></li></ol><hr><font size="5" face="楷体" color="red"><i><b>从上面这些语句不难总结得出，无论是数据库还是表，它们的增删改语句都和create、alter、drop、show有关</b></i></font><hr><h1 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h1><p><font color="red">增删改</font>表中的语句<br></p><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">    (列名1,列名2,...列名n)</span><br><span class="line">    VALUES(值1,值2,...值n);</span><br><span class="line"></span><br><span class="line">除了数字类型，其他数据类型都要使用引号(单双都可)引起来</span><br></pre></td></tr></table></figure><p>在前面介绍的INSERT……SELECT搭配使用复制表的SQL语句中，可以在SELECT语句使用任何条件(WHERE,GROUP….)。<br>列名和值要一一对应<br><font color="red">如果不指定列名，则默认给所有列添加值。</font></p><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 </span><br><span class="line">    WHERE 条件;</span><br></pre></td></tr></table></figure><p>如果不加条件，则默认删除表中所有数据<br>但是，如果要删除表中所有的话，不推荐使用这种方法，因为效率低</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE 表名;</span><br><span class="line">效率更高 先删除表，然后再创建一张一样的表。</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 </span><br><span class="line">    SET 列名1 = 值1, 列名2 = 值2,... </span><br><span class="line">    WHERE 条件;</span><br></pre></td></tr></table></figure><p><font color="red">注意：如果不加条件，则会将表中的记录全部修改</font></p><hr><font size="5" face="楷体" color="red"><i><b>总结：DML语句用来操作表中的数据，主要对数据进行增删改操作，主要有insert 、delete、update三个关键字</b></i></font><hr>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL基础教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础--数据库概念和SQL简介</title>
      <link href="/2019/09/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5%E5%92%8CSQL%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/09/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E5%BF%B5%E5%92%8CSQL%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>数据库(DataBase)，简称DB，用于存储和管理数据的仓库能够持久化存储数据，实际上，<font color="red"><strong>数据库就是一个文件系统</strong></font>，能够方便的存储和管理数据，使用了统一的方式来操作数据库，即<strong>SQL</strong></p><hr><a id="more"></a><h1 id="MySQL的配置"><a href="#MySQL的配置" class="headerlink" title="MySQL的配置"></a>MySQL的配置</h1><h2 id="MySQL服务启动"><a href="#MySQL服务启动" class="headerlink" title="MySQL服务启动"></a><font size="5">MySQL服务启动</font></h2><ul><li>cmd--> services.msc 打开服务的窗口</li><li>使用管理员方式打开cmd<ul><li>net start mysql : 启动mysql的服务</li><li>net start mysql :关闭mysql的服务</li></ul></li></ul><h2 id="MySQL登录"><a href="#MySQL登录" class="headerlink" title="MySQL登录"></a><font size="5">MySQL登录</font></h2><ol><li>mysql -uroot -p密码</li><li>mysql -hip -uroot -p连接目标的密码</li><li>mysql –host=ip –user=root –password=连接目标的密码</li></ol><h2 id="MySQL退出"><a href="#MySQL退出" class="headerlink" title="MySQL退出"></a>MySQL退出</h2><p> exit/quit命令</p><hr><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p><strong>Structured Query Language</strong>：结构化查询语言定义了操作所有关系型数据库的规则，但是不同的数据库操作的方式可能存在不同的地方，可以理解为‘方言’<br>SQL分为四类</p><ol><li><p>DDL(Data Definition Language)数据定义语言<br>用来<font color="red">定义数据库对象</font>：数据库，表，列等。关键字：<font color="blue">create, drop,alter</font> 等</p></li><li><p>DML(Data Manipulation Language)数据操作语言<br>用来对<font color="red">数据库中表的数据</font>进行<font color="red">增删改</font>。关键字：<font color="blue">insert, delete, update </font>等</p></li><li><p>DQL(Data Query Language)数据查询语言<br>用来<font color="red">查询数据库中表的记录</font>(数据)。关键字：<font color="blue">select, where</font> 等</p></li><li><p>DCL(Data Control Language)数据控制语言用来<font color="red">定义数据库的访问权限和安全级别</font>，及创建用户。关键字：GRANT， REVOKE 等</p></li></ol><p>一张图来帮助理解四类SQL语句<br><img src="https://img-blog.csdnimg.cn/2019090122091487.bmp?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中创建多个Project</title>
      <link href="/2019/09/08/IDEA%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAProject/"/>
      <url>/2019/09/08/IDEA%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%A4%9A%E4%B8%AAProject/</url>
      
        <content type="html"><![CDATA[<p>我们知道，IDEA是没有workspace这个概念的，它是以Project为单位，一个窗口对应着一个Project，而一个Project对应着很多Model，Model相当于eclipse中的project，那么如何在一个项目中存放多个Project呢？</p><a id="more"></a><h2 id="首先，创建一个空的Project"><a href="#首先，创建一个空的Project" class="headerlink" title="首先，创建一个空的Project"></a>首先，创建一个空的Project</h2><p><img src="https://img-blog.csdnimg.cn/20190901110856188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="给项目命名并点击finish"><a href="#给项目命名并点击finish" class="headerlink" title="给项目命名并点击finish"></a>给项目命名并点击finish</h2><p>会进入到新创建的Project窗口中，接着IDEA就会弹出下面界面，让你为新的Priject创建一个Model：<br><img src="https://img-blog.csdnimg.cn/20190901111135250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在这里很重要，<strong>不选择给新的Project创建一个Model</strong>，直接点OK<br>这样，常见出来的没有Model的Project就<strong>相当于</strong>一个空文件夹，(查看创建的Project文件夹，会发现它是没有src的)</p><h2 id="在新的Projrect中，new一个Model"><a href="#在新的Projrect中，new一个Model" class="headerlink" title="在新的Projrect中，new一个Model"></a>在新的Projrect中，new一个Model</h2><p><img src="https://img-blog.csdnimg.cn/20190901111531177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我这里创建的时web项目，如果要创建普通的项目，点击左侧第一个按钮JAVA就可以<br><img src="https://img-blog.csdnimg.cn/20190901111704647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>给新创建的Model起名，通过这里就可以发现，<strong>第一个untitled是创建的project名(由于没有命名，默认就是untitled)，第二个是正在创建的Model名</strong>，点击finish<br>这样就创建成功了一个，按照上面的方法再来一遍<br><img src="https://img-blog.csdnimg.cn/20190901112058507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样就成功地在一个窗口创建了两个Project</p><p>另外<br>IDEA会为这两个web项目分别部署一份配置文件，这样这两个web项目就<strong>可以分别设置不同的端口，虚拟路径等配置</strong><br>运行项目的时候，查看控制台的log：<strong>Using CATALINA_BASE:</strong> 的值，就能找到配置文件的路径<br><img src="https://img-blog.csdnimg.cn/20190901113153885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat部署项目的方式</title>
      <link href="/2019/09/08/Tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/09/08/Tomcat%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat有三种部署项目的方式"><a href="#Tomcat有三种部署项目的方式" class="headerlink" title="Tomcat有三种部署项目的方式"></a>Tomcat有三种部署项目的方式</h1><h2 id="将项目直接放到Tomcat的webapps目录下"><a href="#将项目直接放到Tomcat的webapps目录下" class="headerlink" title="将项目直接放到Tomcat的webapps目录下"></a><font size="5">将项目直接<strong>放到Tomcat的webapps目录下</strong></font></h2><p>也可以将项目打包成war包，放到webapps目录下，运行时Tomcat会自动解压</p><a id="more"></a><h2 id="利用Tomcat的配置文件sever-xm"><a href="#利用Tomcat的配置文件sever-xm" class="headerlink" title="利用Tomcat的配置文件sever.xm"></a><font size="5">利用Tomcat的配置文件sever.xm</font></h2><pre><code>打开conf目录，找到sever.xml配置文件</code></pre><p>(先关闭Tomcat服务)<img src="https://img-blog.csdnimg.cn/20190831162553805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    找到Host标签，加上一个Context标签，path值可以自己设置<br>    启动Tomcat服务<br>    在浏览器输入<strong>localhost:8080(端口号)/path的值/docBase的值</strong>就能正确访问项目<br>    这种部署方式项目可以放在硬盘上的任意位置，Tomcat会通过path映射到docBase。</p><p><strong>注意：</strong>因为server.xml是Tomcat服务核心的配置文件，是配置Tomcat整体的，在里面配置项目有可能损坏配置文件，导致出错，比较危险，所以一般不推荐使用</p><h2 id="自定义xml配置文件"><a href="#自定义xml配置文件" class="headerlink" title="自定义xml配置文件"></a><font size="5">自定义xml配置文件</font></h2><pre><code>(先**关闭Tomcat**)打开Tomcat下的conf\Catalina\localhost这个目录，在localhost下创建一个xml配置文件， 文件名可以任意起(但是这个文件名就是浏览器搜索时的虚拟路径)，假设是aaa.xml； 在配置文件中：将上图中红框里的Context标签及内容写进去，把后面的path键值对删掉(因为虚拟路径已经指定为xml文件名，所以不需要再指定虚拟路径) 再次启动Tomcat 浏览器搜索**localhost:8080(端口号)/xml文件名/docBase的值**即可</code></pre><p>这种部署方式还有一个好处：</p><ul><li>这是一种热部署的方式，如果不想要这个项目，可以将创建的xml文件删掉，或者后缀名改一下<br>  例如：将aaa.xml改为aaa.xml_bak；无需重新启动Tomcat就能生效(浏览器就访问不到项目资源)</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat启动问题分析</title>
      <link href="/2019/09/08/tomcat%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2019/09/08/tomcat%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="问题前提"><a href="#问题前提" class="headerlink" title="问题前提"></a>问题前提</h1><p>在Tomcat目录下的bin目录中双击startup.bat直接打开tomcat时，可能会出现以下两个问题</p><ul><li>Tomcat的窗口一闪而过</li><li>启动报错<a id="more"></a></li></ul><h2 id="Tomcat的窗口一闪而过"><a href="#Tomcat的窗口一闪而过" class="headerlink" title="Tomcat的窗口一闪而过"></a><strong>Tomcat的窗口一闪而过</strong></h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p><strong>没有正确配置JAVA_HOME环境变量</strong><br>在安装JDK时，需要将JDK的目录配置到Path变量下，问题就在这里，因为配置的时候，有可能是直接将JDK的目录配置到了Path环境变量<br>双击Path变量，如下图所示<img src="https://img-blog.csdnimg.cn/20190831151212475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样的<strong>做法是错误的</strong>    </p><h3 id="正确的做法"><a href="#正确的做法" class="headerlink" title="正确的做法"></a>正确的做法</h3><p>应该先创建一个JAVA_HOME环境变量<br><img src="https://img-blog.csdnimg.cn/20190831151442686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将JAVA_HOME的值设置问JDK的路径，如下图<br><img src="https://img-blog.csdnimg.cn/20190831151627898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>然后再将JAVA_HOME代替JDK安装路径给Path变量<br><img src="https://img-blog.csdnimg.cn/20190831151900812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将startup.bat关掉，重新启动即可</p><h3 id="分析一下原因"><a href="#分析一下原因" class="headerlink" title="分析一下原因"></a>分析一下原因</h3><p>先以文档的形式打开startup.bat，发现和catolina.bat有关，<br>我们就以<strong>文档形式</strong>打开bin目录下的catolina.bat<br><img src="https://img-blog.csdnimg.cn/20190831152302712.png" alt="在这里插入图片描述"><br>在文档里可以看到，这里用到了环境变量的JAVA_HOME，所以在配置环境变量的时候，必须用JAVA_HOME来设置JDK路径，否则这里<strong>就无法找到JDK</strong>，由于Tomcat是纯java编写的，它的启动和运行要依赖与JDK，所以Tomcat就无法正常运行</p><h2 id="启动报错，然后窗口自动关闭"><a href="#启动报错，然后窗口自动关闭" class="headerlink" title="启动报错，然后窗口自动关闭"></a><strong>启动报错，然后窗口自动关闭</strong></h2><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>有可能是<strong>已经打开了一个Tomcat</strong>(或者有其他程序占用了Tomcat的端口号)，再次启动的时候由于<strong>端口被占用</strong>，所以无法正常启动<br>如果是这种情况，通过查看日志会发现有一个异常：<strong>java.net.BindException:Address already in use</strong></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>找到占用Tomcat端口号(一般是8080)的程序，关闭该程序<br>1、打开cmd窗口，输入 <strong>netstat -ano</strong>命令<br><img src="https://img-blog.csdnimg.cn/20190831161113175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到Tomcat端口(我的是默认8080)，记录该<strong>端口程序的PID</strong><br>2、打开任务管理器<br><img src="https://img-blog.csdnimg.cn/2019083116142190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到刚记录的PID对应的程序，把它关掉。<br>这样，Tomcat就能正确启动了</p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> 问题分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BOM模型基础学习</title>
      <link href="/2019/09/08/BOM%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/08/BOM%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<hr><p>BOM，全称Browser Object Model，浏览器对象模型<br>它将浏览器的各个组成部分封装成对象</p><hr><a id="more"></a><h1 id="五个对象"><a href="#五个对象" class="headerlink" title="五个对象"></a>五个对象</h1><h2 id="window-窗口对象"><a href="#window-窗口对象" class="headerlink" title="window-窗口对象"></a><font size="4">window-窗口对象</font></h2><h2 id="Location-地址栏对象"><a href="#Location-地址栏对象" class="headerlink" title="Location-地址栏对象"></a><font size="4">Location-地址栏对象</font></h2><h2 id="History-历史记录对象"><a href="#History-历史记录对象" class="headerlink" title="History-历史记录对象"></a><font size="4">History-历史记录对象</font></h2><h2 id="Screen-显示器屏幕对象"><a href="#Screen-显示器屏幕对象" class="headerlink" title="Screen-显示器屏幕对象"></a><font size="4">Screen-显示器屏幕对象</font></h2><h2 id="Navigator-浏览器对象"><a href="#Navigator-浏览器对象" class="headerlink" title="Navigator-浏览器对象"></a><font size="4">Navigator-浏览器对象</font></h2><hr><h1 id="window-窗口对象-1"><a href="#window-窗口对象-1" class="headerlink" title="window-窗口对象"></a>window-窗口对象</h1><p>该对象<strong>无需创建</strong>，可以直接使用对象的方法和属性</p><h2 id="window对象的方法"><a href="#window对象的方法" class="headerlink" title="window对象的方法"></a><font size="5">window对象的方法</font></h2><h3 id="与弹出框有关的方法"><a href="#与弹出框有关的方法" class="headerlink" title="与弹出框有关的方法"></a><font size="5">与弹出框有关的方法</font></h3><h4 id="alert"><a href="#alert" class="headerlink" title="alert()"></a><font size="4">alert()</font></h4><p>显示带有一段消息和一个确认按钮的警告框。</p><h4 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a><font size="4">confirm()</font></h4><p>显示带有一段消息以及确认按钮和取消按钮的对话框。</p><ul><li><p>如果用户点击确定按钮，则方法返回true</p></li><li><p>如果用户点击取消按钮，则方法返回false</p><h4 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a><font size="4">prompt()</font></h4><p>显示可提示用户输入的对话框。</p></li><li><p>返回值：获取用户输入的值 </p><h3 id="与打开关闭有关的方法"><a href="#与打开关闭有关的方法" class="headerlink" title="与打开关闭有关的方法"></a><font size="5">与打开关闭有关的方法</font></h3><h4 id="close"><a href="#close" class="headerlink" title="close()"></a><font size="4">close()</font></h4><p>关闭浏览器窗口。</p></li><li><p>谁调用我 ，我关谁</p><h4 id="open"><a href="#open" class="headerlink" title="open()"></a><font size="4">open()</font></h4><p>打开一个新的浏览器窗口</p></li><li><p>返回新的Window对象</p><h3 id="与定时器有关的方式"><a href="#与定时器有关的方式" class="headerlink" title="与定时器有关的方式"></a><font size="5">与定时器有关的方式</font></h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a><font size="4">setTimeout()</font></h4><p>在指定的毫秒数后调用函数或计算表达式。</p><ul><li>参数：<ol><li>js代码或者方法对象</li><li>毫秒值</li></ol></li><li>返回值：唯一标识，用于取消定时器<h4 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout()"></a><font size="4">clearTimeout()</font></h4>取消由 setTimeout() 方法设置的 timeout。<h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a><font size="4">setInterval()</font></h4>按照指定的周期（以毫秒计）来调用函数或计算表达式。<h4 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval()"></a><font size="4">clearInterval()</font></h4>取消由 setInterval() 设置的 timeout。<h2 id="window对象的属性"><a href="#window对象的属性" class="headerlink" title="window对象的属性"></a><font size="5">window对象的属性</font></h2><h3 id="获取其他BOM对象"><a href="#获取其他BOM对象" class="headerlink" title="获取其他BOM对象"></a><font size="4">获取其他BOM对象</font></h3>history<br>location<br>Navigator<br>Screen<h3 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a><font size="4">获取DOM对象</font></h3>document</li></ul><hr></li></ul><h1 id="Location-地址栏对象-1"><a href="#Location-地址栏对象-1" class="headerlink" title="Location-地址栏对象"></a>Location-地址栏对象</h1><h2 id="创建-获取"><a href="#创建-获取" class="headerlink" title="创建(获取)"></a><font size="5">创建(获取)</font></h2><pre><code>1. window.location2. location</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><font size="5">方法</font></h2><p>reload()    重新加载当前文档。刷新</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><font size="5">属性</font></h2><p>href    设置或返回完整的 URL。<br><img src="https://img-blog.csdnimg.cn/2019082814430963.png" alt="在这里插入图片描述"><br>如图，给按钮设置监听器，点击按钮后修改页面的URL为百度页面，就会自动跳转到百度的页面</p><hr><h1 id="History-历史记录对象-1"><a href="#History-历史记录对象-1" class="headerlink" title="History-历史记录对象"></a>History-历史记录对象</h1><h2 id="创建-获取-1"><a href="#创建-获取-1" class="headerlink" title="创建(获取)"></a><font size="5">创建(获取)</font></h2><pre><code>1. window.history2. history</code></pre><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a><font size="5">方法</font></h2><h3 id="back"><a href="#back" class="headerlink" title="back()"></a><font size="4">back()</font></h3><p>加载 history 列表中的前一个 URL。</p><h3 id="forward"><a href="#forward" class="headerlink" title="forward()"></a><font size="4">forward()</font></h3><p>加载 history 列表中的下一个 URL。</p><h3 id="go-参数"><a href="#go-参数" class="headerlink" title="go(参数)"></a><font size="4">go(参数)</font></h3><p>加载 history 列表中的某个具体页面。<br>    参数：<br>        正数：前进几个历史记录<br>        负数：后退几个历史记录</p><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a><font size="5">属性</font></h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a><font size="4">length</font></h3><pre><code>返回当前窗口历史列表中的 URL 数量。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> BOM </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2019/09/08/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/08/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JS和HTML结合方式"><a href="#JS和HTML结合方式" class="headerlink" title="JS和HTML结合方式"></a><strong>JS和HTML结合方式</strong></h1><h2 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a><font size="5">内部样式</font></h2><pre><code>在html文件内部定义一个script标签、在标签里面写的JS代码</code></pre><p>注意：<strong>和CSS不同的是，JS标签可以有很多个，而且可以写在HTML文件中的任意位置</strong>    </p><h2 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a><font size="5">外部样式</font></h2><pre><code>在html文件内部定义一个script标签，通过script的src属性，来指定JS配置文件的路径JS代码写在JS配置文件中</code></pre><a id="more"></a><h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a><strong>数据类型和变量</strong></h1><pre><code>JS数据类型和JAVA类似，分为**原始数据类型**和**引用数据类型**两大类</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><font size="5">数据类型</font></h2><h3 id="number"><a href="#number" class="headerlink" title="number"></a><font size="5">number</font></h3><p>包括整数、小数和NaN类型(不是数字的数字类型 not a numebr)</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a><font size="5">string</font></h3><p>字符/字符串类型</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a><font size="5">boolean</font></h3><p>true/false、</p><h3 id="null"><a href="#null" class="headerlink" title="null"></a><font size="5">null</font></h3><p>一个对象为空的占位符</p><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a><font size="5">undefined</font></h3><p>未定义，如果一个表量没有给初始化值，就会被默认赋值为 undefined</p><pre><code>![在这里插入图片描述](https://img-blog.csdnimg.cn/20190828110402952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70)</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font size="5">变量</font></h2><pre><code>一小块存储数据的内存空间JAVA是强类型语言，而JavaScript是弱类型语言</code></pre><h3 id="强类型"><a href="#强类型" class="headerlink" title="强类型"></a><font size="5">强类型</font></h3><p>在开辟内存空间时，定义了空间将来存储数据的类型，只能存储固定的类型</p><h3 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a><font size="5">弱类型</font></h3><p>在开辟内存空间时，没有定义空间将来存储数据的类型，可以存放任意类型的数据</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h1><pre><code>在JS中，如果运算数不是运算符要求的类型，那么JS会自动将运算数进行类型转换例如：一元运算符+(正号)和-(负号)是对数字类型进行操作，但是有+&apos;a&apos;这样的运算，就会将字符串类型的&apos;a&apos;转换为number类型</code></pre><h2 id="其他类型转number"><a href="#其他类型转number" class="headerlink" title="其他类型转number"></a><font size="5">其他类型转number</font></h2><pre><code>string--&gt;number：**按照字面值转换**，如果字面值是数字，如&apos;123&apos;，会转换成数字123，如果字面值不是数字，如&apos;abc&apos;，会转换为NaN(不是数字的数字)</code></pre><p>注意：<strong>NaN和整数小数运算，还是NaN;</strong><br>    boolean–&gt;number: true=1    false=0</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><font size="5">比较运算符</font></h2><pre><code>字符串按照字典顺序比较(如c&gt;b),按位逐一比较，直到得出大小**类型不同比较，先进行类型转换**”===“运算符：在比较之前先进行类型判断，如果类型不同，直接返回false</code></pre><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><font size="5"><strong>逻辑运算符</strong></font></h2><pre><code>！：非运算</code></pre><h2 id="其他类型转boolean"><a href="#其他类型转boolean" class="headerlink" title="其他类型转boolean"></a><font size="5">其他类型转boolean</font></h2><pre><code>    number--&gt;boolean：0和NaN为false，其他都是true    string--&gt;boolean：除了空字符串，都是true    null/undefined--&gt;boolean：false    对象--&gt;boolean：true注意：在JS中，所有的**变量都是关键字var**定义的，var可以省略，但是，**用var定义的是局部变量**，不用var定义的    是全局变量</code></pre><h1 id="常用对象"><a href="#常用对象" class="headerlink" title="常用对象"></a>常用对象</h1><h2 id="function对象"><a href="#function对象" class="headerlink" title="function对象"></a><font size="5">function对象<font></font></font></h2><p> 方法对象<br><img src="https://img-blog.csdnimg.cn/20190828112256343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="1、创建"></p><h2 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a><font size="5">Array对象</font></h2><p>数组对象<br> <img src="https://img-blog.csdnimg.cn/20190828112447511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> 数组长度可变<br> <img src="https://img-blog.csdnimg.cn/20190828112613787.png" alt="在这里插入图片描述"></p><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a><font size="5">Date对象</font></h2><p><img src="https://img-blog.csdnimg.cn/20190828140543392.png" alt="在这里插入图片描述"></p><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a><font size="5">Math对象</font></h2><pre><code>该对象不用创建，可以直接使用对象的方法和属性，Math.调用常用方法和属性：</code></pre><p><img src="https://img-blog.csdnimg.cn/20190828140726715.png" alt="在这里插入图片描述"></p><h2 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a><font size="5">Global对象</font></h2><pre><code> 特点：是一个全局对象，这个对象中封装的方法不需要对象就能够直接使用,和Math不同的是，使用它的方法前面不            用加对象名在说该对象的方法之前先说一下**URL编码**：    浏览器将从表单中收集的数据经过URL编码后发送给服务器，服务器再将接收到的URL编码的数据解码。    URL编码的规则：对于汉字，先将汉字按照GBK/UTF8编码成对应的二进制数字，再将每四位二进制数字组合在                一起转换成十六进制数字，这样就将汉字转换成了一串十六进制数字，最后，每两个十六进制数字一组，在前面    +%，这样就组成了URL编码，字母和数字不编码</code></pre><p><img src="https://img-blog.csdnimg.cn/20190828141907481.png" alt="在这里插入图片描述"><br>第二组方法编码的字符更多，会将网址中./等符号也用URL编码<br><img src="https://img-blog.csdnimg.cn/20190828142057995.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器和常用属性</title>
      <link href="/2019/09/08/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/09/08/CSS%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a><strong>基础选择器</strong></h2><h1 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a><font size="5">id选择器</font></h1><p><strong>使用此选择器要求HTML相应的标签必须指定了id属性</strong></p><a id="more"></a><p>格式：</p><p>#+标签id属性{<br>    <strong>//对应id标签的属性</strong><br>    如color等<br>}<br><img src="https://img-blog.csdnimg.cn/20190828102502128.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190828102519950.png" alt="在这里插入图片描述"><br>通过HTML标签的id来指定标签，修改样式</p><h1 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a><font size="5">元素选择器</font></h1><p>格式：<br>标签名称{<br>        //通过标签名称找到标签(可能不止一个)并修改内容样式<br>    }<br><img src="https://img-blog.csdnimg.cn/20190828102904335.png" alt="在这里插入图片描述"><br>这个元素选择器会找到HTML中所有的div标签，并将标签内容字体改为红色</p><h1 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a><font size="5">类选择器</font></h1><p> 格式：<br> .+类名{<br>    通过标签的class属性值找到标签<br>     }<br><img src="https://img-blog.csdnimg.cn/20190828103244137.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190828103300130.png" alt="在这里插入图片描述"><br>其中：三个选择器中     <strong>id选择器优先级最高，元素选择器优先级最低</strong></p><h2 id="扩展选择器"><a href="#扩展选择器" class="headerlink" title="扩展选择器"></a><strong>扩展选择器</strong></h2><pre><code>![在这里插入图片描述](https://img-blog.csdnimg.cn/20190828103900651.png)</code></pre><p><img src="https://img-blog.csdnimg.cn/20190828103950418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="CSS常见属性"><a href="#CSS常见属性" class="headerlink" title="CSS常见属性"></a><strong>CSS常见属性</strong></h2><p><img src="https://img-blog.csdnimg.cn/20190828104257512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><strong>盒子模型</strong></h2><p> <strong>参见JAVA_WEB/HTML&amp;CSS</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5基础回顾</title>
      <link href="/2019/09/08/HTML5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
      <url>/2019/09/08/HTML5%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<p>HTML用于搭建基础页面，展示页面内容，一般和CSS以及JS搭配使用</p><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><pre><code># 1、围堵标签    顾名思义，就是开始和结束标签，例如&lt; html&gt; &lt; /html&gt;，内容放在标签中# 2、自闭合标签    开始标签和结束标签在一起。例如换行标签&lt; br/&gt;、超链接标签&lt; a&gt;等</code></pre><a id="more"></a><p>标签不区分大小写，建议小写<br>无论是哪种标签，都可以在<strong>开始标签中定义属性</strong>，属性是由<strong>键值对</strong>组成，其中<strong>值需要由引(单/双)号引</strong>起来</p><pre><code>&lt; html&gt;&lt;head&gt; &lt;title&gt;title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;FONT color=&apos;red&apos;&gt;Hello World&lt;/font&gt;&lt;br/&gt; &lt;font color=&apos;green&apos;&gt;Hello World&lt;/font&gt;&lt;/body&gt;&lt; /html&gt;</code></pre><h2 id="文件标签"><a href="#文件标签" class="headerlink" title="文件标签"></a><strong>文件标签</strong></h2><h1 id="lt-html-gt"><a href="#lt-html-gt" class="headerlink" title="&lt; html&gt;"></a>&lt; html&gt;</h1><p>文档的根标签</p><h1 id="lt-head-gt"><a href="#lt-head-gt" class="headerlink" title="&lt; head&gt;"></a>&lt; head&gt;</h1><p>头标签，用于指定html文档的一些属性，引入外部资源，如CSS、JS文件等</p><h1 id="lt-title-gt"><a href="#lt-title-gt" class="headerlink" title="&lt; title&gt;"></a>&lt; title&gt;</h1><p> 标题标签</p><h1 id="lt-body-gt"><a href="#lt-body-gt" class="headerlink" title="&lt; body&gt;"></a>&lt; body&gt;</h1><p> 体标签，html代码写在body标签中<br> 以上均为<strong>围堵标签</strong></p><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a><strong>文本标签</strong></h2><h1 id="lt-h1-gt-lt-h6-gt"><a href="#lt-h1-gt-lt-h6-gt" class="headerlink" title="&lt; h1&gt;~&lt; h6&gt;"></a>&lt; h1&gt;~&lt; h6&gt;</h1><p>标题标签，从h1到h6字体大小递减    –&gt;围堵标签</p><h1 id="lt-p-gt"><a href="#lt-p-gt" class="headerlink" title="&lt; p&gt;"></a>&lt; p&gt;</h1><p>段落标签：被该标签包裹的文本会换行两次    –&gt;围堵标签</p><h1 id="lt-br-gt"><a href="#lt-br-gt" class="headerlink" title="&lt; br&gt;"></a>&lt; br&gt;</h1><p>换行标签</p><h1 id="lt-hr-gt"><a href="#lt-hr-gt" class="headerlink" title="&lt; hr&gt;"></a>&lt; hr&gt;</h1><p>展示一条水平线<br>    该标签有一些属性：color、width、height、align(对齐方式)来设置水平线的样式</p><h1 id="lt-b-gt"><a href="#lt-b-gt" class="headerlink" title="&lt; b&gt;"></a>&lt; b&gt;</h1><p>字体加粗标签</p><h1 id="lt-i-gt"><a href="#lt-i-gt" class="headerlink" title="&lt; i&gt;"></a>&lt; i&gt;</h1><p>字体斜体标签<br>以上四个均为<strong>自闭合标签</strong></p><h1 id="lt-font-gt"><a href="#lt-font-gt" class="headerlink" title="&lt; font&gt;"></a>&lt; font&gt;</h1><p>字体标签<br>    该标签属性：color、size、face(字体)来改变字体<br>    center：文本居中标签    </p><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a><strong>图片标签</strong></h2><h1 id="lt-img-gt"><a href="#lt-img-gt" class="headerlink" title="&lt; img&gt;"></a>&lt; img&gt;</h1><p>图片标签，是一个自闭合标签，其中有<strong>src属性</strong>，可以指定展示<strong>图片的路径</strong><br>     <strong>相对路径</strong>：<br>         其中如果html文件和<strong>图片所在文件夹目录</strong>是同一级目录，那么<strong>./+图片所在文件夹目录/图片</strong><br>         如果图片所在文件夹目录是html文件上一级目录，那么就用<strong>../</strong></p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a><strong>列表标签</strong></h2><h1 id="lt-ol-gt-lt-li-gt"><a href="#lt-ol-gt-lt-li-gt" class="headerlink" title="&lt; ol&gt;/&lt; li&gt;"></a>&lt; ol&gt;/&lt; li&gt;</h1><p>有序列表</p><p><img src="https://img-blog.csdnimg.cn/20190828091446194.png" alt="在这里插入图片描述"><br>type属性：指定序号的样式<br><img src="https://img-blog.csdnimg.cn/20190828091536997.png" alt="在这里插入图片描述"></p><h1 id="lt-ul-gt-lt-li-gt"><a href="#lt-ul-gt-lt-li-gt" class="headerlink" title="&lt; ul&gt;/&lt; li&gt;"></a>&lt; ul&gt;/&lt; li&gt;</h1><p>无序列表<br><img src="https://img-blog.csdnimg.cn/20190828091641556.png" alt="在这里插入图片描述"><br>无序列表的type属性有三种：</p><ul><li><p>disc：原点</p></li><li><p>square：正方形点</p></li><li><p>circle：圆圈</p><h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a><strong>链接标签</strong></h2><h1 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt; a&gt;"></a>&lt; a&gt;</h1><p>定义一个超链接<br>  属性：<br> <strong>href</strong><br> 指定访问资源的URL()统一资源定位符)，可以是网址<br> <strong>target</strong><br> 指定打开资源的方式，有两种方式</p><ul><li><p>_ selt:在当前页面打开</p></li><li><p>_ blank：在新空白页面打开</p></li></ul></li></ul><h2 id="和CSS以及JS搭配的标签"><a href="#和CSS以及JS搭配的标签" class="headerlink" title="和CSS以及JS搭配的标签"></a><strong>和CSS以及JS搭配的标签</strong></h2><p> div标签和span标签，两者的区别是div自带换行，而span没有换行功能</p><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a><strong>表格标签</strong></h2><h1 id="lt-table-gt"><a href="#lt-table-gt" class="headerlink" title="&lt; table&gt;"></a>&lt; table&gt;</h1><p> 定义表格，table的开始标签可以指定一些属性</p><ul><li><p>width：表格宽度</p></li><li><p>border：边框</p></li><li><p>cellpadding：定义内容和单元格的距离</p></li><li><p>cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条    </p></li><li><p>bgcolor：背景色</p></li><li><p>align：对齐方式</p><h1 id="lt-tr-gt-标签"><a href="#lt-tr-gt-标签" class="headerlink" title="&lt; tr&gt;标签"></a>&lt; tr&gt;标签</h1><p>定义行标签</p><h1 id="lt-td-gt-标签"><a href="#lt-td-gt-标签" class="headerlink" title="&lt; td&gt;标签"></a>&lt; td&gt;标签</h1><p>定义单元格标签</p><h1 id="lt-th-gt-标签"><a href="#lt-th-gt-标签" class="headerlink" title="&lt; th&gt;标签"></a>&lt; th&gt;标签</h1><p>定义表头单元格标签<br><img src="https://img-blog.csdnimg.cn/20190828093432266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190828093456827.png" alt="在这里插入图片描述"></p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a><strong>表单标签</strong></h2><p><strong>注意：表单中的数据要想被提交，必须指定其name属性</strong></p><p>表单：用于采集用户输入的数据，用于和服务器进行交互</p><h1 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="&lt; form&gt;"></a>&lt; form&gt;</h1><p>用于定义表单的，可以定义一个范围，范围代表采集用户数据的范围<br>form标签有以下属性</p><ul><li>action：指定提交数据的URL路径</li><li>method：指定提交方式，有两种比较常用，分别是post和get</li></ul><p>form只是制定了收集用户数据的范围，并没有指定提交形式(输入框、按钮、下拉列表…)<br>因此就会用到<strong>表单项标签</strong><br>表单项标签主要有三种：input标签、select标签、textarea标签</p><h1 id="lt-input-gt-标签"><a href="#lt-input-gt-标签" class="headerlink" title="&lt; input&gt;标签"></a><strong>&lt; input&gt;标签</strong></h1><p><img src="https://img-blog.csdnimg.cn/20190828095605481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190828095805666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>展示效果<br><img src="https://img-blog.csdnimg.cn/20190828095919345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="lt-select-gt-标签"><a href="#lt-select-gt-标签" class="headerlink" title="&lt; select&gt;标签"></a><strong>&lt; select&gt;标签</strong></h1><p>子元素：option，指定列表项<br><img src="https://img-blog.csdnimg.cn/20190828100135207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>展示效果<br><img src="https://img-blog.csdnimg.cn/20190828100222610.png" alt="在这里插入图片描述"></p><h2 id="文本域标签"><a href="#文本域标签" class="headerlink" title="文本域标签"></a><strong>文本域标签</strong></h2><p><strong>主要有两个属性：</strong><br>cols：指定列数，每一行有多少个字符<br>rows：默认多少行。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK源码--Byte类</title>
      <link href="/2019/09/08/%E5%B0%8F%E7%99%BD%E5%AD%A6JDK%E6%BA%90%E7%A0%81--Byte%E7%B1%BB/"/>
      <url>/2019/09/08/%E5%B0%8F%E7%99%BD%E5%AD%A6JDK%E6%BA%90%E7%A0%81--Byte%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/26bedb3ae3c4" target="_blank" rel="noopener">学习过程中参考此篇文章，写的很好</a></p><pre><code>1、观察它继承的父类，实现了那些接口2、找到它的成员变量3、学习构造方法4、学习方法</code></pre><a id="more"></a><h1 id="父类和接口"><a href="#父类和接口" class="headerlink" title="父类和接口"></a>父类和接口</h1><p><img src="https://img-blog.csdnimg.cn/20190820165734747.png" alt="在这里插入图片描述"><br>从图中可以知道，Byte类继承了Number类，实现了Comparable接口</p><p>对于Comparable接口，只有一个抽象方法<br><img src="https://img-blog.csdnimg.cn/20190820165913264.png" alt="在这里插入图片描述"><br>这个接口赋予它和它的子类比较的能力，用于排序，比较大小<br>对于一个存储自定义类的数组或集合，只有这个类实现了该接口，重写了接口中的compareTo()方法，重写了排序规则<br>才能使用Arrays类的sort方法进行排序；</p><h1 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h1><p><img src="https://img-blog.csdnimg.cn/20190820170344112.png" alt="在这里插入图片描述"><br>定义了Byte类型数据的边界值，就是说，Byte类型的值只能在-128~127之间<br><img src="https://img-blog.csdnimg.cn/20190820170442432.png" alt="在这里插入图片描述"><br>TYPE是一个Byte的Class类对象，相当于TYPE=Byte.class；<br><img src="https://img-blog.csdnimg.cn/20190820170619953.png" alt="在这里插入图片描述"><br>这就是Byte类型的基础类型，数据存储的地方(从下面的构造方法可以看出)<br><img src="https://img-blog.csdnimg.cn/20190820170834358.png" alt="在这里插入图片描述"><br>这三个成员变量分别表示Byte数据的位数，字节数和UID(用于序列化和反序列化)</p><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p><img src="https://img-blog.csdnimg.cn/20190820171029523.png" alt="在这里插入图片描述"><br>Byte的构造方法有两个，可以看出，两个构造方法都会将传入的数据存放到成员变量byte中</p><h1 id="私有静态内部类"><a href="#私有静态内部类" class="headerlink" title="私有静态内部类"></a>私有静态内部类</h1><p><img src="https://img-blog.csdnimg.cn/20190820171705760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是Byte类的一个静态内部类，类里面还有一个静态代码块<br>静态代码块会在类第一次被加载的时候执行，并且只执行一次<br>这里的作用就是，创建一个Byte类型的数组，数组的长度是256<br>里面存储着-128~127的数字(Byte类数据所有可能的取值)<br>并且数组是静态的并且final修饰，<br>因为后面的有些成员方法会需要用到Byte对象，所以这样做就避免了重复创建对象和回收对象</p><h1 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h1><h2 id="toString-byte-b-方法"><a href="#toString-byte-b-方法" class="headerlink" title="toString(byte b)方法"></a><font size="5">toString(byte b)方法</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820171318100.png" alt="在这里插入图片描述"><br>注意：这个toString()方法不是重写Object的toString方法，因为它有参数<br>作用：将一个byte类型数据转化为String字符串类型<br>实质上是直接调用Integer类的toString方法，<br>radix：10：用10进制表示</p><h2 id="valueOf-byte-b"><a href="#valueOf-byte-b" class="headerlink" title="valueOf(byte b)"></a><font size="5">valueOf(byte b)</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820172235507.png" alt="在这里插入图片描述"><br>作用：将基本类型–&gt;包装类型，直接从上面的数组中得到</p><h2 id="parseByte-String-s-int-radix"><a href="#parseByte-String-s-int-radix" class="headerlink" title="parseByte(String s,int radix)"></a><font size="5">parseByte(String s,int radix)</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820172354614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参数：<br>String s:要解析的字符串<br>int radix:指定字符串表示的进制<br>例如：s=“10000”，radix=2，解析出来的值就是16<br>作用：<br>将字符串按照指定进制解析为byte类型<br>实质上调用的是Integer的parseInt方法，解析成int类型<br>判断是否超出范围，超出范围就抛异常，否则就返回</p><h2 id="parseByte-String-s"><a href="#parseByte-String-s" class="headerlink" title="parseByte(String s)"></a><font size="5">parseByte(String s)</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820172742458.png" alt="在这里插入图片描述"><br>指定进制默认十进制解析</p><h2 id="valueOf-String-s-int-radix"><a href="#valueOf-String-s-int-radix" class="headerlink" title="valueOf(String s,int radix)"></a><font size="5">valueOf(String s,int radix)</font></h2><p> <img src="https://img-blog.csdnimg.cn/20190820172830452.png" alt="在这里插入图片描述"><br>参数：<br>String s:要转换的字符串<br>int radix：字符串表示的进制，和解析方法一样<br>作用：<br>将字符串转换为按照指定进制形式表示的Byte类型，<br>先将字符串解析为byte类型，在调用valueOf()方法，从静态代码块初始的数组中找到对应的Byte并返回</p><h2 id="valueOf-String-s"><a href="#valueOf-String-s" class="headerlink" title="valueOf(String s)"></a><font size="5">valueOf(String s)</font></h2><p>默认10进制</p><h2 id="xxxValue-方法"><a href="#xxxValue-方法" class="headerlink" title="xxxValue()方法"></a><font size="5">xxxValue()方法</font></h2><p>重写父类的方法，由于byte数值最小，不用担心出现溢出<br>直接用强制类型转换，然后return</p><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><font size="5">hashCode()</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820174011475.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重写了父类的hashCode方法，对于Byte类型，它的hashCode方法实质上就是返回它的值</p><h2 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a><font size="5">equals()方法</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820174148966.png?x-ossprocess=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重写了父类的equals方法</p><h2 id="compareTo-方法"><a href="#compareTo-方法" class="headerlink" title="compareTo()方法"></a><font size="5">compareTo()方法</font></h2><p><img src="https://img-blog.csdnimg.cn/20190820174320144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重写了接口中的compareTo方法，直接返回两个对象的差值<br>调用方法的对象-方法的参数</p>]]></content>
      
      
      <categories>
          
          <category> JDK源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> Byte </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树镜像对称</title>
      <link href="/2019/09/07/LeetCode-%E7%AC%AC101%E9%A2%98/"/>
      <url>/2019/09/07/LeetCode-%E7%AC%AC101%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>难度–简单</strong><br>题目<br><img src="https://img-blog.csdnimg.cn/2019081919202426.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p><strong>分析：</strong><br>    通过题目可以知道，这个树镜像对称，那么这棵树关于根节点这条线对称<br>    就是说，将它所有的左子树变成右子树，所有右子树变成左子树，它是不变的</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><pre><code>//这里直接传递tree根节点的左右子树会比pre(TreeNode tree,TreeNode tree)好，因为减少一层递归，LeetCode速度直接//快1ms，亲测1、pre(TreeNode tree.left,TreeNode tree.right)        2、如果A.val==B.val    --&gt;return true                3、如果A==null&amp;&amp;B==null    --&gt;return true4、如果A和B不同时为空，说明树是不对称的        --&gt;return false5、遍历A的左子树和B的右子树        //pre(A.left,B.right)6、遍历A的右子树和A的左子树        //pre(A.right,B.left)</code></pre><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><p>使用队列，比较容易理解，直接上代码(LeetCode官方题解)<br><img src="https://img-blog.csdnimg.cn/20190819195622590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 递归 </tag>
            
            <tag> 迭代法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青蛙跳台阶</title>
      <link href="/2019/09/07/LeetCode-%E7%AC%AC70%E9%A2%98/"/>
      <url>/2019/09/07/LeetCode-%E7%AC%AC70%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>难度： 简单</strong></p><p><img src="https://img-blog.csdnimg.cn/20190816200841350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="题目如图"></p><a id="more"></a><p><strong>1、动态规划</strong><br>可以知道，如果要到达第n阶台阶，有两种方式：<br>第一：从n-1阶台阶跨1步<br>第二：从n-2阶台阶跨2步<br>设到达第n阶台阶的方法总数为sum(n)<br>那么由上面可以知道：<strong>sum(n)=sum(n-2)+sum(n-1)</strong></p><p>可以举例假设一下假设n等于3，那么到达第3阶台阶由两种方法<br>1、从第1阶台阶跨2步上去<br>2、从第2阶跨1步上去</p><p>相应的，到达第1阶台阶只有一种方法，sum(1)=1；<br>到达第2阶台阶也有两种方法：从起始位置跨2步，和先跨1步再跨1步，sum(2)=2；<br>所以sum(3)=3;<br><img src="https://img-blog.csdnimg.cn/20190816202224968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>2、斐波那契数列</strong><br>通过观察规律可以知道：<br>假设第0阶为1；<br>那么可以得到从第1阶往后分别是：<br><strong>1，2，3，5，8，13…..</strong><br>这是一个很明显的斐波那契数列</p><p>3、递归<br>同样的思路，爬第n阶台阶的方法和等于爬上第n-1阶台阶和爬上第n-2阶台阶方法之和<br>递归出口：n=0的时候返回1，n&lt;0的时候返回0；<br><img src="https://img-blog.csdnimg.cn/20190816202100472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjM4NzQxMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行到44个样例的时候栈爆了…..</p>]]></content>
      
      
      <categories>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符流和字节流</title>
      <link href="/2019/09/07/JAVA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81-%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/09/07/JAVA%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81-%E5%AD%97%E7%AC%A6%E6%B5%81%E5%92%8C%E5%AD%97%E8%8A%82%E6%B5%81%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.itcast.cn/news/20181219/14592257466.shtml" target="_blank" rel="noopener">深入理解字符流编码</a></p><p><strong>首先要理解字符流输入的原理：</strong><br>字符流输入其实底层也是字节流输入</p><p>字符–&gt;计算机二进制数字（字节）：编码<br>字节(计算机二进制数字)–&gt;字符：解码</p><a id="more"></a><h2 id="写入时："><a href="#写入时：" class="headerlink" title="写入时："></a>写入时：</h2><pre><code>1、当使用字符流的write方法向文件写入数据的时候，数据会先写进内存缓冲区中，2、内存缓冲区会先字符对比着系统码表编码(中文系统是GBK)为对应的字节：字符--&gt;数字3、调用了flush方法或者是close方法后，内存缓冲区中编码为字节(数字)会写入到文件中</code></pre><h2 id="读取时："><a href="#读取时：" class="headerlink" title="读取时："></a>读取时：</h2><pre><code>使用read方法读取文件的时候，文建会先将存储在计算机中的二进制对照系统码表解码成相应的字符，读入程序</code></pre><h2 id="图片不能用字符流的原因"><a href="#图片不能用字符流的原因" class="headerlink" title="图片不能用字符流的原因"></a>图片不能用字符流的原因</h2><pre><code>因为图片是字节文件，计算机中存储的也是字节数字，所以用字节流输入的时候不需要编码解码的过程，直接将计算机中的字节读取写入就可以了但是用字符流读取的时候，一次读取两个字节，然后将这两个字节按照码表解码成相应的字符，当读取图片的时候，将两个字节拼在一起对比码表解码，码表中可能没有相应的字符，就会将此二进制数据标记为未知字符，在写入的时候，会将未知字符丢掉，所以图片拷贝不成功因为原图片和你拷贝的“图片”在计算机中的字节都是不一样的拷贝的“图片”丢失了很多 **解码后**被标记为“未知字符”的**字节**举个例子：一个图片在计算机中存储的字节是：-121，34，124，53，-65，-43，1....使用字节流读取的时候，一次读取一个字节，会原封不动的读取出来：-121，34，124，53，-65，-43，1....但是当使用字符流读取的时候，一次读两个字节-12134，12453....然后将每次读取到的两个字节对照系统码表解码成相应的字符，但是码表中可能没有相应的字符；例如没有和-12134对应的字符，就会将此二进制数据标记为未知字符(假设标记为￥)；在写入的时候，就会将￥字符给丢掉，所以**最后实际写入的数据为**124，53，-65，-43，1....这样拷贝自然就失败了</code></pre><h2 id="关于写入字符到文件中，打开文件查看乱码的原因，参考上面链接"><a href="#关于写入字符到文件中，打开文件查看乱码的原因，参考上面链接" class="headerlink" title="关于写入字符到文件中，打开文件查看乱码的原因，参考上面链接"></a>关于写入字符到文件中，打开文件查看乱码的原因，参考上面链接</h2><pre><code>**最后**：字符流因为解码编码等原因，比字节流慢很多字符流一般用于传输纯文本文件，尤其是中文文档，不能用于视频，图片等传输图片等视频音频文件要用字节流</code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I/O </tag>
            
            <tag> 乱码 </tag>
            
            <tag> 字符流/字节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/07/hello-world/"/>
      <url>/2019/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
